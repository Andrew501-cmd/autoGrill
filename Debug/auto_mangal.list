
auto_mangal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005628  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018e4  08005738  08005738  00006738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800701c  0800701c  00009018  2**0
                  CONTENTS
  4 .ARM          00000000  0800701c  0800701c  00009018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800701c  0800701c  00009018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800701c  0800701c  0000801c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007020  08007020  00008020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08007024  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019bc  20000018  0800703c  00009018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019d4  0800703c  000099d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e754  00000000  00000000  00009041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b61  00000000  00000000  00017795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  0001a2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000abe  00000000  00000000  0001b110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018752  00000000  00000000  0001bbce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010f6b  00000000  00000000  00034320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000892fa  00000000  00000000  0004528b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce585  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f0  00000000  00000000  000ce5c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d1eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08005720 	.word	0x08005720

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08005720 	.word	0x08005720

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000034 	.word	0x20000034
 800017c:	20000088 	.word	0x20000088

08000180 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	4a07      	ldr	r2, [pc, #28]	@ (80001ac <vApplicationGetTimerTaskMemory+0x2c>)
 8000190:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000192:	68bb      	ldr	r3, [r7, #8]
 8000194:	4a06      	ldr	r2, [pc, #24]	@ (80001b0 <vApplicationGetTimerTaskMemory+0x30>)
 8000196:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800019e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	20000288 	.word	0x20000288
 80001b0:	200002dc 	.word	0x200002dc

080001b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b4:	b5b0      	push	{r4, r5, r7, lr}
 80001b6:	b096      	sub	sp, #88	@ 0x58
 80001b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ba:	f000 ff83 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001be:	f000 f87f 	bl	80002c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c2:	f000 f8f1 	bl	80003a8 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001c6:	f000 f8c1 	bl	800034c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80001ca:	f000 fbaf 	bl	800092c <ssd1306_Init>
  ssd1306_Fill(Black);
 80001ce:	2000      	movs	r0, #0
 80001d0:	f000 fc16 	bl	8000a00 <ssd1306_Fill>
  ssd1306_DrawBitmap(43, 2, logo, 42, 42, White);
 80001d4:	2301      	movs	r3, #1
 80001d6:	9301      	str	r3, [sp, #4]
 80001d8:	232a      	movs	r3, #42	@ 0x2a
 80001da:	9300      	str	r3, [sp, #0]
 80001dc:	232a      	movs	r3, #42	@ 0x2a
 80001de:	4a2d      	ldr	r2, [pc, #180]	@ (8000294 <main+0xe0>)
 80001e0:	2102      	movs	r1, #2
 80001e2:	202b      	movs	r0, #43	@ 0x2b
 80001e4:	f000 fe03 	bl	8000dee <ssd1306_DrawBitmap>
  ssd1306_SetCursor(11, 46);
 80001e8:	212e      	movs	r1, #46	@ 0x2e
 80001ea:	200b      	movs	r0, #11
 80001ec:	f000 fd44 	bl	8000c78 <ssd1306_SetCursor>
  ssd1306_WriteString("АвтоШашлык V0.1", RuFont_7x13, White);
 80001f0:	4a29      	ldr	r2, [pc, #164]	@ (8000298 <main+0xe4>)
 80001f2:	2301      	movs	r3, #1
 80001f4:	ca06      	ldmia	r2, {r1, r2}
 80001f6:	4829      	ldr	r0, [pc, #164]	@ (800029c <main+0xe8>)
 80001f8:	f000 fd18 	bl	8000c2c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80001fc:	f000 fc18 	bl	8000a30 <ssd1306_UpdateScreen>
  HAL_Delay(2000);
 8000200:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000204:	f000 ffc0 	bl	8001188 <HAL_Delay>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of cancelButton */
  osTimerDef(cancelButton, cancelButtonCallback);
 8000208:	4b25      	ldr	r3, [pc, #148]	@ (80002a0 <main+0xec>)
 800020a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800020c:	2300      	movs	r3, #0
 800020e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  cancelButtonHandle = osTimerCreate(osTimer(cancelButton), osTimerOnce, NULL);
 8000210:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000214:	2200      	movs	r2, #0
 8000216:	2100      	movs	r1, #0
 8000218:	4618      	mov	r0, r3
 800021a:	f002 fba1 	bl	8002960 <osTimerCreate>
 800021e:	4603      	mov	r3, r0
 8000220:	4a20      	ldr	r2, [pc, #128]	@ (80002a4 <main+0xf0>)
 8000222:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of buttonPressedQueue */
  osMessageQDef(buttonPressedQueue, 8, uint8_t);
 8000224:	4b20      	ldr	r3, [pc, #128]	@ (80002a8 <main+0xf4>)
 8000226:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 800022a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800022c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  buttonPressedQueueHandle = osMessageCreate(osMessageQ(buttonPressedQueue), NULL);
 8000230:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000234:	2100      	movs	r1, #0
 8000236:	4618      	mov	r0, r3
 8000238:	f002 fc46 	bl	8002ac8 <osMessageCreate>
 800023c:	4603      	mov	r3, r0
 800023e:	4a1b      	ldr	r2, [pc, #108]	@ (80002ac <main+0xf8>)
 8000240:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of readKeyTask */
  osThreadDef(readKeyTask, StartReadKeyTask, osPriorityAboveNormal, 0, 128);
 8000242:	4b1b      	ldr	r3, [pc, #108]	@ (80002b0 <main+0xfc>)
 8000244:	f107 041c 	add.w	r4, r7, #28
 8000248:	461d      	mov	r5, r3
 800024a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800024c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800024e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000252:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readKeyTaskHandle = osThreadCreate(osThread(readKeyTask), NULL);
 8000256:	f107 031c 	add.w	r3, r7, #28
 800025a:	2100      	movs	r1, #0
 800025c:	4618      	mov	r0, r3
 800025e:	f002 fb1e 	bl	800289e <osThreadCreate>
 8000262:	4603      	mov	r3, r0
 8000264:	4a13      	ldr	r2, [pc, #76]	@ (80002b4 <main+0x100>)
 8000266:	6013      	str	r3, [r2, #0]

  /* definition and creation of guiTask */
  osThreadDef(guiTask, StartGuiTask, osPriorityNormal, 0, 128);
 8000268:	4b13      	ldr	r3, [pc, #76]	@ (80002b8 <main+0x104>)
 800026a:	463c      	mov	r4, r7
 800026c:	461d      	mov	r5, r3
 800026e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000270:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000272:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000276:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  guiTaskHandle = osThreadCreate(osThread(guiTask), NULL);
 800027a:	463b      	mov	r3, r7
 800027c:	2100      	movs	r1, #0
 800027e:	4618      	mov	r0, r3
 8000280:	f002 fb0d 	bl	800289e <osThreadCreate>
 8000284:	4603      	mov	r3, r0
 8000286:	4a0d      	ldr	r2, [pc, #52]	@ (80002bc <main+0x108>)
 8000288:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800028a:	f002 fb01 	bl	8002890 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800028e:	bf00      	nop
 8000290:	e7fd      	b.n	800028e <main+0xda>
 8000292:	bf00      	nop
 8000294:	08005834 	.word	0x08005834
 8000298:	20000000 	.word	0x20000000
 800029c:	08005738 	.word	0x08005738
 80002a0:	0800088d 	.word	0x0800088d
 80002a4:	2000073c 	.word	0x2000073c
 80002a8:	08005748 	.word	0x08005748
 80002ac:	20000738 	.word	0x20000738
 80002b0:	08005764 	.word	0x08005764
 80002b4:	20000730 	.word	0x20000730
 80002b8:	08005788 	.word	0x08005788
 80002bc:	20000734 	.word	0x20000734

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b090      	sub	sp, #64	@ 0x40
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	f107 0318 	add.w	r3, r7, #24
 80002ca:	2228      	movs	r2, #40	@ 0x28
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f005 f9ec 	bl	80056ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002e2:	2301      	movs	r3, #1
 80002e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002ea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002ec:	2300      	movs	r3, #0
 80002ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002f0:	2301      	movs	r3, #1
 80002f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002f4:	2302      	movs	r3, #2
 80002f6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002fc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002fe:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000302:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000304:	f107 0318 	add.w	r3, r7, #24
 8000308:	4618      	mov	r0, r3
 800030a:	f001 fe9d 	bl	8002048 <HAL_RCC_OscConfig>
 800030e:	4603      	mov	r3, r0
 8000310:	2b00      	cmp	r3, #0
 8000312:	d001      	beq.n	8000318 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000314:	f000 facc 	bl	80008b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000318:	230f      	movs	r3, #15
 800031a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800031c:	2302      	movs	r3, #2
 800031e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000320:	2300      	movs	r3, #0
 8000322:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000324:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000328:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800032a:	2300      	movs	r3, #0
 800032c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2102      	movs	r1, #2
 8000332:	4618      	mov	r0, r3
 8000334:	f002 f90a 	bl	800254c <HAL_RCC_ClockConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800033e:	f000 fab7 	bl	80008b0 <Error_Handler>
  }
}
 8000342:	bf00      	nop
 8000344:	3740      	adds	r7, #64	@ 0x40
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000350:	4b12      	ldr	r3, [pc, #72]	@ (800039c <MX_I2C1_Init+0x50>)
 8000352:	4a13      	ldr	r2, [pc, #76]	@ (80003a0 <MX_I2C1_Init+0x54>)
 8000354:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000356:	4b11      	ldr	r3, [pc, #68]	@ (800039c <MX_I2C1_Init+0x50>)
 8000358:	4a12      	ldr	r2, [pc, #72]	@ (80003a4 <MX_I2C1_Init+0x58>)
 800035a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800035c:	4b0f      	ldr	r3, [pc, #60]	@ (800039c <MX_I2C1_Init+0x50>)
 800035e:	2200      	movs	r2, #0
 8000360:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000362:	4b0e      	ldr	r3, [pc, #56]	@ (800039c <MX_I2C1_Init+0x50>)
 8000364:	2200      	movs	r2, #0
 8000366:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000368:	4b0c      	ldr	r3, [pc, #48]	@ (800039c <MX_I2C1_Init+0x50>)
 800036a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800036e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000370:	4b0a      	ldr	r3, [pc, #40]	@ (800039c <MX_I2C1_Init+0x50>)
 8000372:	2200      	movs	r2, #0
 8000374:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000376:	4b09      	ldr	r3, [pc, #36]	@ (800039c <MX_I2C1_Init+0x50>)
 8000378:	2200      	movs	r2, #0
 800037a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800037c:	4b07      	ldr	r3, [pc, #28]	@ (800039c <MX_I2C1_Init+0x50>)
 800037e:	2200      	movs	r2, #0
 8000380:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000382:	4b06      	ldr	r3, [pc, #24]	@ (800039c <MX_I2C1_Init+0x50>)
 8000384:	2200      	movs	r2, #0
 8000386:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000388:	4804      	ldr	r0, [pc, #16]	@ (800039c <MX_I2C1_Init+0x50>)
 800038a:	f001 f9b1 	bl	80016f0 <HAL_I2C_Init>
 800038e:	4603      	mov	r3, r0
 8000390:	2b00      	cmp	r3, #0
 8000392:	d001      	beq.n	8000398 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000394:	f000 fa8c 	bl	80008b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}
 800039c:	200006dc 	.word	0x200006dc
 80003a0:	40005400 	.word	0x40005400
 80003a4:	000186a0 	.word	0x000186a0

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b088      	sub	sp, #32
 80003ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	f107 0310 	add.w	r3, r7, #16
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003bc:	4b29      	ldr	r3, [pc, #164]	@ (8000464 <MX_GPIO_Init+0xbc>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a28      	ldr	r2, [pc, #160]	@ (8000464 <MX_GPIO_Init+0xbc>)
 80003c2:	f043 0320 	orr.w	r3, r3, #32
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b26      	ldr	r3, [pc, #152]	@ (8000464 <MX_GPIO_Init+0xbc>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0320 	and.w	r3, r3, #32
 80003d0:	60fb      	str	r3, [r7, #12]
 80003d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d4:	4b23      	ldr	r3, [pc, #140]	@ (8000464 <MX_GPIO_Init+0xbc>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a22      	ldr	r2, [pc, #136]	@ (8000464 <MX_GPIO_Init+0xbc>)
 80003da:	f043 0304 	orr.w	r3, r3, #4
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b20      	ldr	r3, [pc, #128]	@ (8000464 <MX_GPIO_Init+0xbc>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0304 	and.w	r3, r3, #4
 80003e8:	60bb      	str	r3, [r7, #8]
 80003ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ec:	4b1d      	ldr	r3, [pc, #116]	@ (8000464 <MX_GPIO_Init+0xbc>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a1c      	ldr	r2, [pc, #112]	@ (8000464 <MX_GPIO_Init+0xbc>)
 80003f2:	f043 0308 	orr.w	r3, r3, #8
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b1a      	ldr	r3, [pc, #104]	@ (8000464 <MX_GPIO_Init+0xbc>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0308 	and.w	r3, r3, #8
 8000400:	607b      	str	r3, [r7, #4]
 8000402:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	2110      	movs	r1, #16
 8000408:	4817      	ldr	r0, [pc, #92]	@ (8000468 <MX_GPIO_Init+0xc0>)
 800040a:	f001 f958 	bl	80016be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : buzzer_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin;
 800040e:	2310      	movs	r3, #16
 8000410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000412:	2301      	movs	r3, #1
 8000414:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000416:	2300      	movs	r3, #0
 8000418:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041a:	2302      	movs	r3, #2
 800041c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 800041e:	f107 0310 	add.w	r3, r7, #16
 8000422:	4619      	mov	r1, r3
 8000424:	4810      	ldr	r0, [pc, #64]	@ (8000468 <MX_GPIO_Init+0xc0>)
 8000426:	f000 ffb7 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_bottom_Pin */
  GPIO_InitStruct.Pin = btn_bottom_Pin;
 800042a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800042e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000430:	2300      	movs	r3, #0
 8000432:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000434:	2301      	movs	r3, #1
 8000436:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(btn_bottom_GPIO_Port, &GPIO_InitStruct);
 8000438:	f107 0310 	add.w	r3, r7, #16
 800043c:	4619      	mov	r1, r3
 800043e:	480a      	ldr	r0, [pc, #40]	@ (8000468 <MX_GPIO_Init+0xc0>)
 8000440:	f000 ffaa 	bl	8001398 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_left_Pin btn_ok_Pin btn_right_Pin btn_top_Pin */
  GPIO_InitStruct.Pin = btn_left_Pin|btn_ok_Pin|btn_right_Pin|btn_top_Pin;
 8000444:	23f0      	movs	r3, #240	@ 0xf0
 8000446:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800044c:	2301      	movs	r3, #1
 800044e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000450:	f107 0310 	add.w	r3, r7, #16
 8000454:	4619      	mov	r1, r3
 8000456:	4805      	ldr	r0, [pc, #20]	@ (800046c <MX_GPIO_Init+0xc4>)
 8000458:	f000 ff9e 	bl	8001398 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800045c:	bf00      	nop
 800045e:	3720      	adds	r7, #32
 8000460:	46bd      	mov	sp, r7
 8000462:	bd80      	pop	{r7, pc}
 8000464:	40021000 	.word	0x40021000
 8000468:	40010800 	.word	0x40010800
 800046c:	40010c00 	.word	0x40010c00

08000470 <StartReadKeyTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadKeyTask */
void StartReadKeyTask(void const * argument)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b082      	sub	sp, #8
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	if (HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0) {
 8000478:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800047c:	484c      	ldr	r0, [pc, #304]	@ (80005b0 <StartReadKeyTask+0x140>)
 800047e:	f001 f907 	bl	8001690 <HAL_GPIO_ReadPin>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d113      	bne.n	80004b0 <StartReadKeyTask+0x40>
		osMessagePut(buttonPressedQueueHandle, 0, 100);
 8000488:	4b4a      	ldr	r3, [pc, #296]	@ (80005b4 <StartReadKeyTask+0x144>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2264      	movs	r2, #100	@ 0x64
 800048e:	2100      	movs	r1, #0
 8000490:	4618      	mov	r0, r3
 8000492:	f002 fb41 	bl	8002b18 <osMessagePut>
		while(HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0)
 8000496:	e002      	b.n	800049e <StartReadKeyTask+0x2e>
		{
			osDelay(1);
 8000498:	2001      	movs	r0, #1
 800049a:	f002 fa4c 	bl	8002936 <osDelay>
		while(HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0)
 800049e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80004a2:	4843      	ldr	r0, [pc, #268]	@ (80005b0 <StartReadKeyTask+0x140>)
 80004a4:	f001 f8f4 	bl	8001690 <HAL_GPIO_ReadPin>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	d0f4      	beq.n	8000498 <StartReadKeyTask+0x28>
 80004ae:	e07a      	b.n	80005a6 <StartReadKeyTask+0x136>
		}
	}
	else if (HAL_GPIO_ReadPin(btn_top_GPIO_Port, btn_top_Pin) == 0) {
 80004b0:	2180      	movs	r1, #128	@ 0x80
 80004b2:	4841      	ldr	r0, [pc, #260]	@ (80005b8 <StartReadKeyTask+0x148>)
 80004b4:	f001 f8ec 	bl	8001690 <HAL_GPIO_ReadPin>
 80004b8:	4603      	mov	r3, r0
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d112      	bne.n	80004e4 <StartReadKeyTask+0x74>
		osMessagePut(buttonPressedQueueHandle, 1, 100);
 80004be:	4b3d      	ldr	r3, [pc, #244]	@ (80005b4 <StartReadKeyTask+0x144>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	2264      	movs	r2, #100	@ 0x64
 80004c4:	2101      	movs	r1, #1
 80004c6:	4618      	mov	r0, r3
 80004c8:	f002 fb26 	bl	8002b18 <osMessagePut>
		while(HAL_GPIO_ReadPin(btn_top_GPIO_Port, btn_top_Pin) == 0)
 80004cc:	e002      	b.n	80004d4 <StartReadKeyTask+0x64>
		{
			osDelay(1);
 80004ce:	2001      	movs	r0, #1
 80004d0:	f002 fa31 	bl	8002936 <osDelay>
		while(HAL_GPIO_ReadPin(btn_top_GPIO_Port, btn_top_Pin) == 0)
 80004d4:	2180      	movs	r1, #128	@ 0x80
 80004d6:	4838      	ldr	r0, [pc, #224]	@ (80005b8 <StartReadKeyTask+0x148>)
 80004d8:	f001 f8da 	bl	8001690 <HAL_GPIO_ReadPin>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d0f5      	beq.n	80004ce <StartReadKeyTask+0x5e>
 80004e2:	e060      	b.n	80005a6 <StartReadKeyTask+0x136>
		}
	}
	else if (HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin) == 0) {
 80004e4:	2110      	movs	r1, #16
 80004e6:	4834      	ldr	r0, [pc, #208]	@ (80005b8 <StartReadKeyTask+0x148>)
 80004e8:	f001 f8d2 	bl	8001690 <HAL_GPIO_ReadPin>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d112      	bne.n	8000518 <StartReadKeyTask+0xa8>
		osMessagePut(buttonPressedQueueHandle, 2, 100);
 80004f2:	4b30      	ldr	r3, [pc, #192]	@ (80005b4 <StartReadKeyTask+0x144>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	2264      	movs	r2, #100	@ 0x64
 80004f8:	2102      	movs	r1, #2
 80004fa:	4618      	mov	r0, r3
 80004fc:	f002 fb0c 	bl	8002b18 <osMessagePut>
		while(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin) == 0)
 8000500:	e002      	b.n	8000508 <StartReadKeyTask+0x98>
		{
			osDelay(1);
 8000502:	2001      	movs	r0, #1
 8000504:	f002 fa17 	bl	8002936 <osDelay>
		while(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin) == 0)
 8000508:	2110      	movs	r1, #16
 800050a:	482b      	ldr	r0, [pc, #172]	@ (80005b8 <StartReadKeyTask+0x148>)
 800050c:	f001 f8c0 	bl	8001690 <HAL_GPIO_ReadPin>
 8000510:	4603      	mov	r3, r0
 8000512:	2b00      	cmp	r3, #0
 8000514:	d0f5      	beq.n	8000502 <StartReadKeyTask+0x92>
 8000516:	e046      	b.n	80005a6 <StartReadKeyTask+0x136>
		}
	}
	else if (HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin) == 0) {
 8000518:	2140      	movs	r1, #64	@ 0x40
 800051a:	4827      	ldr	r0, [pc, #156]	@ (80005b8 <StartReadKeyTask+0x148>)
 800051c:	f001 f8b8 	bl	8001690 <HAL_GPIO_ReadPin>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d112      	bne.n	800054c <StartReadKeyTask+0xdc>
		osMessagePut(buttonPressedQueueHandle, 3, 100);
 8000526:	4b23      	ldr	r3, [pc, #140]	@ (80005b4 <StartReadKeyTask+0x144>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	2264      	movs	r2, #100	@ 0x64
 800052c:	2103      	movs	r1, #3
 800052e:	4618      	mov	r0, r3
 8000530:	f002 faf2 	bl	8002b18 <osMessagePut>
		while(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin) == 0)
 8000534:	e002      	b.n	800053c <StartReadKeyTask+0xcc>
		{
			osDelay(1);
 8000536:	2001      	movs	r0, #1
 8000538:	f002 f9fd 	bl	8002936 <osDelay>
		while(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin) == 0)
 800053c:	2140      	movs	r1, #64	@ 0x40
 800053e:	481e      	ldr	r0, [pc, #120]	@ (80005b8 <StartReadKeyTask+0x148>)
 8000540:	f001 f8a6 	bl	8001690 <HAL_GPIO_ReadPin>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d0f5      	beq.n	8000536 <StartReadKeyTask+0xc6>
 800054a:	e02c      	b.n	80005a6 <StartReadKeyTask+0x136>
		}
	}
	else if (HAL_GPIO_ReadPin(btn_ok_GPIO_Port, btn_ok_Pin) == 0) {
 800054c:	2120      	movs	r1, #32
 800054e:	481a      	ldr	r0, [pc, #104]	@ (80005b8 <StartReadKeyTask+0x148>)
 8000550:	f001 f89e 	bl	8001690 <HAL_GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d125      	bne.n	80005a6 <StartReadKeyTask+0x136>
		osTimerStart(cancelButtonHandle, 1000);
 800055a:	4b18      	ldr	r3, [pc, #96]	@ (80005bc <StartReadKeyTask+0x14c>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000562:	4618      	mov	r0, r3
 8000564:	f002 fa30 	bl	80029c8 <osTimerStart>
		while(HAL_GPIO_ReadPin(btn_ok_GPIO_Port, btn_ok_Pin) == 0)
 8000568:	e002      	b.n	8000570 <StartReadKeyTask+0x100>
		{
			osDelay(1);
 800056a:	2001      	movs	r0, #1
 800056c:	f002 f9e3 	bl	8002936 <osDelay>
		while(HAL_GPIO_ReadPin(btn_ok_GPIO_Port, btn_ok_Pin) == 0)
 8000570:	2120      	movs	r1, #32
 8000572:	4811      	ldr	r0, [pc, #68]	@ (80005b8 <StartReadKeyTask+0x148>)
 8000574:	f001 f88c 	bl	8001690 <HAL_GPIO_ReadPin>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d0f5      	beq.n	800056a <StartReadKeyTask+0xfa>
		}
		if (xTimerIsTimerActive(cancelButtonHandle) != pdFALSE) {
 800057e:	4b0f      	ldr	r3, [pc, #60]	@ (80005bc <StartReadKeyTask+0x14c>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	4618      	mov	r0, r3
 8000584:	f004 fc98 	bl	8004eb8 <xTimerIsTimerActive>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d006      	beq.n	800059c <StartReadKeyTask+0x12c>
			osMessagePut(buttonPressedQueueHandle, 4, 100); //short press
 800058e:	4b09      	ldr	r3, [pc, #36]	@ (80005b4 <StartReadKeyTask+0x144>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	2264      	movs	r2, #100	@ 0x64
 8000594:	2104      	movs	r1, #4
 8000596:	4618      	mov	r0, r3
 8000598:	f002 fabe 	bl	8002b18 <osMessagePut>
		}
		osTimerStop(cancelButtonHandle);
 800059c:	4b07      	ldr	r3, [pc, #28]	@ (80005bc <StartReadKeyTask+0x14c>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f002 fa55 	bl	8002a50 <osTimerStop>
	}

    osDelay(50);
 80005a6:	2032      	movs	r0, #50	@ 0x32
 80005a8:	f002 f9c5 	bl	8002936 <osDelay>
	if (HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0) {
 80005ac:	e764      	b.n	8000478 <StartReadKeyTask+0x8>
 80005ae:	bf00      	nop
 80005b0:	40010800 	.word	0x40010800
 80005b4:	20000738 	.word	0x20000738
 80005b8:	40010c00 	.word	0x40010c00
 80005bc:	2000073c 	.word	0x2000073c

080005c0 <StartGuiTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGuiTask */
void StartGuiTask(void const * argument)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b088      	sub	sp, #32
 80005c4:	af02      	add	r7, sp, #8
 80005c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGuiTask */
  osEvent btnEvent;
  uint8_t guiState = 0;
 80005c8:	2300      	movs	r3, #0
 80005ca:	75fb      	strb	r3, [r7, #23]
  uint8_t selectedMode = 0;
 80005cc:	2300      	movs	r3, #0
 80005ce:	75bb      	strb	r3, [r7, #22]
  /* Infinite loop */

  for(;;)
  {
      btnEvent = osMessageGet(buttonPressedQueueHandle, 100);
 80005d0:	4ba4      	ldr	r3, [pc, #656]	@ (8000864 <StartGuiTask+0x2a4>)
 80005d2:	6819      	ldr	r1, [r3, #0]
 80005d4:	f107 0308 	add.w	r3, r7, #8
 80005d8:	2264      	movs	r2, #100	@ 0x64
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fadc 	bl	8002b98 <osMessageGet>
      switch (guiState) {
 80005e0:	7dfb      	ldrb	r3, [r7, #23]
 80005e2:	2b02      	cmp	r3, #2
 80005e4:	f000 8093 	beq.w	800070e <StartGuiTask+0x14e>
 80005e8:	2b02      	cmp	r3, #2
 80005ea:	f300 80bc 	bgt.w	8000766 <StartGuiTask+0x1a6>
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d002      	beq.n	80005f8 <StartGuiTask+0x38>
 80005f2:	2b01      	cmp	r3, #1
 80005f4:	d064      	beq.n	80006c0 <StartGuiTask+0x100>
 80005f6:	e0b6      	b.n	8000766 <StartGuiTask+0x1a6>
	case 0: // mode select
	  ssd1306_Fill(Black);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f000 fa01 	bl	8000a00 <ssd1306_Fill>
	  ssd1306_DrawRectangle(0, 0, 127, 63, White);
 80005fe:	2301      	movs	r3, #1
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	233f      	movs	r3, #63	@ 0x3f
 8000604:	227f      	movs	r2, #127	@ 0x7f
 8000606:	2100      	movs	r1, #0
 8000608:	2000      	movs	r0, #0
 800060a:	f000 fbb9 	bl	8000d80 <ssd1306_DrawRectangle>
	  ssd1306_SetCursor(1,1);
 800060e:	2101      	movs	r1, #1
 8000610:	2001      	movs	r0, #1
 8000612:	f000 fb31 	bl	8000c78 <ssd1306_SetCursor>
	  ssd1306_WriteString("Выбор режима", RuFont_7x13, Black);
 8000616:	4a94      	ldr	r2, [pc, #592]	@ (8000868 <StartGuiTask+0x2a8>)
 8000618:	2300      	movs	r3, #0
 800061a:	ca06      	ldmia	r2, {r1, r2}
 800061c:	4893      	ldr	r0, [pc, #588]	@ (800086c <StartGuiTask+0x2ac>)
 800061e:	f000 fb05 	bl	8000c2c <ssd1306_WriteString>
	  if (selectedMode == 0) {
 8000622:	7dbb      	ldrb	r3, [r7, #22]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d114      	bne.n	8000652 <StartGuiTask+0x92>
	    ssd1306_SetCursor(4,16);
 8000628:	2110      	movs	r1, #16
 800062a:	2004      	movs	r0, #4
 800062c:	f000 fb24 	bl	8000c78 <ssd1306_SetCursor>
	    ssd1306_WriteString("> Постоянный", RuFont_7x13, White);
 8000630:	4a8d      	ldr	r2, [pc, #564]	@ (8000868 <StartGuiTask+0x2a8>)
 8000632:	2301      	movs	r3, #1
 8000634:	ca06      	ldmia	r2, {r1, r2}
 8000636:	488e      	ldr	r0, [pc, #568]	@ (8000870 <StartGuiTask+0x2b0>)
 8000638:	f000 faf8 	bl	8000c2c <ssd1306_WriteString>
	    ssd1306_SetCursor(4,30);
 800063c:	211e      	movs	r1, #30
 800063e:	2004      	movs	r0, #4
 8000640:	f000 fb1a 	bl	8000c78 <ssd1306_SetCursor>
	    ssd1306_WriteString("  Прерывистый", RuFont_7x13, White);
 8000644:	4a88      	ldr	r2, [pc, #544]	@ (8000868 <StartGuiTask+0x2a8>)
 8000646:	2301      	movs	r3, #1
 8000648:	ca06      	ldmia	r2, {r1, r2}
 800064a:	488a      	ldr	r0, [pc, #552]	@ (8000874 <StartGuiTask+0x2b4>)
 800064c:	f000 faee 	bl	8000c2c <ssd1306_WriteString>
 8000650:	e016      	b.n	8000680 <StartGuiTask+0xc0>
	  } else if (selectedMode == 1) {
 8000652:	7dbb      	ldrb	r3, [r7, #22]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d113      	bne.n	8000680 <StartGuiTask+0xc0>
	    ssd1306_SetCursor(4,16);
 8000658:	2110      	movs	r1, #16
 800065a:	2004      	movs	r0, #4
 800065c:	f000 fb0c 	bl	8000c78 <ssd1306_SetCursor>
	    ssd1306_WriteString("  Постоянный", RuFont_7x13, White);
 8000660:	4a81      	ldr	r2, [pc, #516]	@ (8000868 <StartGuiTask+0x2a8>)
 8000662:	2301      	movs	r3, #1
 8000664:	ca06      	ldmia	r2, {r1, r2}
 8000666:	4884      	ldr	r0, [pc, #528]	@ (8000878 <StartGuiTask+0x2b8>)
 8000668:	f000 fae0 	bl	8000c2c <ssd1306_WriteString>
	    ssd1306_SetCursor(4,30);
 800066c:	211e      	movs	r1, #30
 800066e:	2004      	movs	r0, #4
 8000670:	f000 fb02 	bl	8000c78 <ssd1306_SetCursor>
	    ssd1306_WriteString("> Прерывистый", RuFont_7x13, White);
 8000674:	4a7c      	ldr	r2, [pc, #496]	@ (8000868 <StartGuiTask+0x2a8>)
 8000676:	2301      	movs	r3, #1
 8000678:	ca06      	ldmia	r2, {r1, r2}
 800067a:	4880      	ldr	r0, [pc, #512]	@ (800087c <StartGuiTask+0x2bc>)
 800067c:	f000 fad6 	bl	8000c2c <ssd1306_WriteString>
	  }
	  if (btnEvent.status == osEventMessage)
 8000680:	68bb      	ldr	r3, [r7, #8]
 8000682:	2b10      	cmp	r3, #16
 8000684:	d16a      	bne.n	800075c <StartGuiTask+0x19c>
	  {
	    if (btnEvent.value.v == 0 || btnEvent.value.v == 1)
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d002      	beq.n	8000692 <StartGuiTask+0xd2>
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d107      	bne.n	80006a2 <StartGuiTask+0xe2>
	    { //bottom or top
	      selectedMode = !selectedMode;
 8000692:	7dbb      	ldrb	r3, [r7, #22]
 8000694:	2b00      	cmp	r3, #0
 8000696:	bf0c      	ite	eq
 8000698:	2301      	moveq	r3, #1
 800069a:	2300      	movne	r3, #0
 800069c:	b2db      	uxtb	r3, r3
 800069e:	75bb      	strb	r3, [r7, #22]
	      {
		  guiState = 2;
	      }
	    }
	  }
	  break;
 80006a0:	e05c      	b.n	800075c <StartGuiTask+0x19c>
	    } else if (btnEvent.value.v == 4)
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2b04      	cmp	r3, #4
 80006a6:	d159      	bne.n	800075c <StartGuiTask+0x19c>
	      if (selectedMode == 0)
 80006a8:	7dbb      	ldrb	r3, [r7, #22]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d102      	bne.n	80006b4 <StartGuiTask+0xf4>
		  guiState = 1;
 80006ae:	2301      	movs	r3, #1
 80006b0:	75fb      	strb	r3, [r7, #23]
	  break;
 80006b2:	e053      	b.n	800075c <StartGuiTask+0x19c>
	      } else if (selectedMode == 1)
 80006b4:	7dbb      	ldrb	r3, [r7, #22]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d150      	bne.n	800075c <StartGuiTask+0x19c>
		  guiState = 2;
 80006ba:	2302      	movs	r3, #2
 80006bc:	75fb      	strb	r3, [r7, #23]
	  break;
 80006be:	e04d      	b.n	800075c <StartGuiTask+0x19c>
	case 1:
	  ssd1306_Fill(Black);
 80006c0:	2000      	movs	r0, #0
 80006c2:	f000 f99d 	bl	8000a00 <ssd1306_Fill>
	  ssd1306_DrawRectangle(0, 0, 127, 63, White);
 80006c6:	2301      	movs	r3, #1
 80006c8:	9300      	str	r3, [sp, #0]
 80006ca:	233f      	movs	r3, #63	@ 0x3f
 80006cc:	227f      	movs	r2, #127	@ 0x7f
 80006ce:	2100      	movs	r1, #0
 80006d0:	2000      	movs	r0, #0
 80006d2:	f000 fb55 	bl	8000d80 <ssd1306_DrawRectangle>
	  ssd1306_SetCursor(1,1);
 80006d6:	2101      	movs	r1, #1
 80006d8:	2001      	movs	r0, #1
 80006da:	f000 facd 	bl	8000c78 <ssd1306_SetCursor>
	  ssd1306_WriteString("Постоянный реж.", RuFont_7x13, Black);
 80006de:	4a62      	ldr	r2, [pc, #392]	@ (8000868 <StartGuiTask+0x2a8>)
 80006e0:	2300      	movs	r3, #0
 80006e2:	ca06      	ldmia	r2, {r1, r2}
 80006e4:	4866      	ldr	r0, [pc, #408]	@ (8000880 <StartGuiTask+0x2c0>)
 80006e6:	f000 faa1 	bl	8000c2c <ssd1306_WriteString>
	  if (btnEvent.status == osEventMessage)
 80006ea:	68bb      	ldr	r3, [r7, #8]
 80006ec:	2b10      	cmp	r3, #16
 80006ee:	d137      	bne.n	8000760 <StartGuiTask+0x1a0>
	  {
	    if (btnEvent.value.v == 0 || btnEvent.value.v == 1)
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d034      	beq.n	8000760 <StartGuiTask+0x1a0>
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	2b01      	cmp	r3, #1
 80006fa:	d031      	beq.n	8000760 <StartGuiTask+0x1a0>
	    { //bottom or top

	    } else if (btnEvent.value.v == 4)
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	2b04      	cmp	r3, #4
 8000700:	d02e      	beq.n	8000760 <StartGuiTask+0x1a0>
	    { //ok

	    } else if (btnEvent.value.v == 5)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	2b05      	cmp	r3, #5
 8000706:	d12b      	bne.n	8000760 <StartGuiTask+0x1a0>
	    { //cancel
		guiState = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	75fb      	strb	r3, [r7, #23]
	    }
	  }
	  break;
 800070c:	e028      	b.n	8000760 <StartGuiTask+0x1a0>
	case 2:
	  ssd1306_Fill(Black);
 800070e:	2000      	movs	r0, #0
 8000710:	f000 f976 	bl	8000a00 <ssd1306_Fill>
	  ssd1306_DrawRectangle(0, 0, 127, 63, White);
 8000714:	2301      	movs	r3, #1
 8000716:	9300      	str	r3, [sp, #0]
 8000718:	233f      	movs	r3, #63	@ 0x3f
 800071a:	227f      	movs	r2, #127	@ 0x7f
 800071c:	2100      	movs	r1, #0
 800071e:	2000      	movs	r0, #0
 8000720:	f000 fb2e 	bl	8000d80 <ssd1306_DrawRectangle>
	  ssd1306_SetCursor(1,1);
 8000724:	2101      	movs	r1, #1
 8000726:	2001      	movs	r0, #1
 8000728:	f000 faa6 	bl	8000c78 <ssd1306_SetCursor>
	  ssd1306_WriteString("Прерывистый реж.", RuFont_7x13, Black);
 800072c:	4a4e      	ldr	r2, [pc, #312]	@ (8000868 <StartGuiTask+0x2a8>)
 800072e:	2300      	movs	r3, #0
 8000730:	ca06      	ldmia	r2, {r1, r2}
 8000732:	4854      	ldr	r0, [pc, #336]	@ (8000884 <StartGuiTask+0x2c4>)
 8000734:	f000 fa7a 	bl	8000c2c <ssd1306_WriteString>
	  if (btnEvent.status == osEventMessage)
 8000738:	68bb      	ldr	r3, [r7, #8]
 800073a:	2b10      	cmp	r3, #16
 800073c:	d112      	bne.n	8000764 <StartGuiTask+0x1a4>
	  {
	    if (btnEvent.value.v == 0 || btnEvent.value.v == 1)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	2b00      	cmp	r3, #0
 8000742:	d00f      	beq.n	8000764 <StartGuiTask+0x1a4>
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	2b01      	cmp	r3, #1
 8000748:	d00c      	beq.n	8000764 <StartGuiTask+0x1a4>
	    { //bottom or top

	    } else if (btnEvent.value.v == 4)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	2b04      	cmp	r3, #4
 800074e:	d009      	beq.n	8000764 <StartGuiTask+0x1a4>
	    { //ok

	    } else if (btnEvent.value.v == 5)
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	2b05      	cmp	r3, #5
 8000754:	d106      	bne.n	8000764 <StartGuiTask+0x1a4>
	    { //cancel
		guiState = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	75fb      	strb	r3, [r7, #23]
	    }
	  }
	  break;
 800075a:	e003      	b.n	8000764 <StartGuiTask+0x1a4>
	  break;
 800075c:	bf00      	nop
 800075e:	e002      	b.n	8000766 <StartGuiTask+0x1a6>
	  break;
 8000760:	bf00      	nop
 8000762:	e000      	b.n	8000766 <StartGuiTask+0x1a6>
	  break;
 8000764:	bf00      	nop

	}

	if (btnEvent.status == osEventMessage)
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	2b10      	cmp	r3, #16
 800076a:	d174      	bne.n	8000856 <StartGuiTask+0x296>
	{
		if (btnEvent.value.v == 0) { //bottom
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d10d      	bne.n	800078e <StartGuiTask+0x1ce>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 8000772:	2201      	movs	r2, #1
 8000774:	2110      	movs	r1, #16
 8000776:	4844      	ldr	r0, [pc, #272]	@ (8000888 <StartGuiTask+0x2c8>)
 8000778:	f000 ffa1 	bl	80016be <HAL_GPIO_WritePin>
			osDelay(30);
 800077c:	201e      	movs	r0, #30
 800077e:	f002 f8da 	bl	8002936 <osDelay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 8000782:	2200      	movs	r2, #0
 8000784:	2110      	movs	r1, #16
 8000786:	4840      	ldr	r0, [pc, #256]	@ (8000888 <StartGuiTask+0x2c8>)
 8000788:	f000 ff99 	bl	80016be <HAL_GPIO_WritePin>
 800078c:	e063      	b.n	8000856 <StartGuiTask+0x296>
		} else if (btnEvent.value.v == 1) { //top
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	2b01      	cmp	r3, #1
 8000792:	d10d      	bne.n	80007b0 <StartGuiTask+0x1f0>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 8000794:	2201      	movs	r2, #1
 8000796:	2110      	movs	r1, #16
 8000798:	483b      	ldr	r0, [pc, #236]	@ (8000888 <StartGuiTask+0x2c8>)
 800079a:	f000 ff90 	bl	80016be <HAL_GPIO_WritePin>
			osDelay(30);
 800079e:	201e      	movs	r0, #30
 80007a0:	f002 f8c9 	bl	8002936 <osDelay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 80007a4:	2200      	movs	r2, #0
 80007a6:	2110      	movs	r1, #16
 80007a8:	4837      	ldr	r0, [pc, #220]	@ (8000888 <StartGuiTask+0x2c8>)
 80007aa:	f000 ff88 	bl	80016be <HAL_GPIO_WritePin>
 80007ae:	e052      	b.n	8000856 <StartGuiTask+0x296>
		} else if (btnEvent.value.v == 2) { //left
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b02      	cmp	r3, #2
 80007b4:	d10d      	bne.n	80007d2 <StartGuiTask+0x212>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 80007b6:	2201      	movs	r2, #1
 80007b8:	2110      	movs	r1, #16
 80007ba:	4833      	ldr	r0, [pc, #204]	@ (8000888 <StartGuiTask+0x2c8>)
 80007bc:	f000 ff7f 	bl	80016be <HAL_GPIO_WritePin>
			osDelay(30);
 80007c0:	201e      	movs	r0, #30
 80007c2:	f002 f8b8 	bl	8002936 <osDelay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2110      	movs	r1, #16
 80007ca:	482f      	ldr	r0, [pc, #188]	@ (8000888 <StartGuiTask+0x2c8>)
 80007cc:	f000 ff77 	bl	80016be <HAL_GPIO_WritePin>
 80007d0:	e041      	b.n	8000856 <StartGuiTask+0x296>
		} else if (btnEvent.value.v == 3) { //right
 80007d2:	68fb      	ldr	r3, [r7, #12]
 80007d4:	2b03      	cmp	r3, #3
 80007d6:	d10d      	bne.n	80007f4 <StartGuiTask+0x234>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 80007d8:	2201      	movs	r2, #1
 80007da:	2110      	movs	r1, #16
 80007dc:	482a      	ldr	r0, [pc, #168]	@ (8000888 <StartGuiTask+0x2c8>)
 80007de:	f000 ff6e 	bl	80016be <HAL_GPIO_WritePin>
			osDelay(30);
 80007e2:	201e      	movs	r0, #30
 80007e4:	f002 f8a7 	bl	8002936 <osDelay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 80007e8:	2200      	movs	r2, #0
 80007ea:	2110      	movs	r1, #16
 80007ec:	4826      	ldr	r0, [pc, #152]	@ (8000888 <StartGuiTask+0x2c8>)
 80007ee:	f000 ff66 	bl	80016be <HAL_GPIO_WritePin>
 80007f2:	e030      	b.n	8000856 <StartGuiTask+0x296>
		} else if (btnEvent.value.v == 4) { //ok
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	2b04      	cmp	r3, #4
 80007f8:	d11d      	bne.n	8000836 <StartGuiTask+0x276>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2110      	movs	r1, #16
 80007fe:	4822      	ldr	r0, [pc, #136]	@ (8000888 <StartGuiTask+0x2c8>)
 8000800:	f000 ff5d 	bl	80016be <HAL_GPIO_WritePin>
			osDelay(50);
 8000804:	2032      	movs	r0, #50	@ 0x32
 8000806:	f002 f896 	bl	8002936 <osDelay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2110      	movs	r1, #16
 800080e:	481e      	ldr	r0, [pc, #120]	@ (8000888 <StartGuiTask+0x2c8>)
 8000810:	f000 ff55 	bl	80016be <HAL_GPIO_WritePin>
			osDelay(50);
 8000814:	2032      	movs	r0, #50	@ 0x32
 8000816:	f002 f88e 	bl	8002936 <osDelay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 800081a:	2201      	movs	r2, #1
 800081c:	2110      	movs	r1, #16
 800081e:	481a      	ldr	r0, [pc, #104]	@ (8000888 <StartGuiTask+0x2c8>)
 8000820:	f000 ff4d 	bl	80016be <HAL_GPIO_WritePin>
			osDelay(30);
 8000824:	201e      	movs	r0, #30
 8000826:	f002 f886 	bl	8002936 <osDelay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 800082a:	2200      	movs	r2, #0
 800082c:	2110      	movs	r1, #16
 800082e:	4816      	ldr	r0, [pc, #88]	@ (8000888 <StartGuiTask+0x2c8>)
 8000830:	f000 ff45 	bl	80016be <HAL_GPIO_WritePin>
 8000834:	e00f      	b.n	8000856 <StartGuiTask+0x296>
		} else if (btnEvent.value.v == 5) { //cancel
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	2b05      	cmp	r3, #5
 800083a:	d10c      	bne.n	8000856 <StartGuiTask+0x296>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 800083c:	2201      	movs	r2, #1
 800083e:	2110      	movs	r1, #16
 8000840:	4811      	ldr	r0, [pc, #68]	@ (8000888 <StartGuiTask+0x2c8>)
 8000842:	f000 ff3c 	bl	80016be <HAL_GPIO_WritePin>
			osDelay(250);
 8000846:	20fa      	movs	r0, #250	@ 0xfa
 8000848:	f002 f875 	bl	8002936 <osDelay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2110      	movs	r1, #16
 8000850:	480d      	ldr	r0, [pc, #52]	@ (8000888 <StartGuiTask+0x2c8>)
 8000852:	f000 ff34 	bl	80016be <HAL_GPIO_WritePin>
		}
	}

	ssd1306_UpdateScreen();
 8000856:	f000 f8eb 	bl	8000a30 <ssd1306_UpdateScreen>
	osDelay(30);//
 800085a:	201e      	movs	r0, #30
 800085c:	f002 f86b 	bl	8002936 <osDelay>
      btnEvent = osMessageGet(buttonPressedQueueHandle, 100);
 8000860:	e6b6      	b.n	80005d0 <StartGuiTask+0x10>
 8000862:	bf00      	nop
 8000864:	20000738 	.word	0x20000738
 8000868:	20000000 	.word	0x20000000
 800086c:	080057a4 	.word	0x080057a4
 8000870:	080057b4 	.word	0x080057b4
 8000874:	080057c4 	.word	0x080057c4
 8000878:	080057d4 	.word	0x080057d4
 800087c:	080057e4 	.word	0x080057e4
 8000880:	080057f4 	.word	0x080057f4
 8000884:	08005804 	.word	0x08005804
 8000888:	40010800 	.word	0x40010800

0800088c <cancelButtonCallback>:
  /* USER CODE END StartGuiTask */
}

/* cancelButtonCallback function */
void cancelButtonCallback(void const * argument)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN cancelButtonCallback */
	osMessagePut(buttonPressedQueueHandle, 5, 100);
 8000894:	4b05      	ldr	r3, [pc, #20]	@ (80008ac <cancelButtonCallback+0x20>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	2264      	movs	r2, #100	@ 0x64
 800089a:	2105      	movs	r1, #5
 800089c:	4618      	mov	r0, r3
 800089e:	f002 f93b 	bl	8002b18 <osMessagePut>
  /* USER CODE END cancelButtonCallback */
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000738 	.word	0x20000738

080008b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008b4:	b672      	cpsid	i
}
 80008b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b8:	bf00      	nop
 80008ba:	e7fd      	b.n	80008b8 <Error_Handler+0x8>

080008bc <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80008c0:	bf00      	nop
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bc80      	pop	{r7}
 80008c6:	4770      	bx	lr

080008c8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af04      	add	r7, sp, #16
 80008ce:	4603      	mov	r3, r0
 80008d0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80008d2:	f04f 33ff 	mov.w	r3, #4294967295
 80008d6:	9302      	str	r3, [sp, #8]
 80008d8:	2301      	movs	r3, #1
 80008da:	9301      	str	r3, [sp, #4]
 80008dc:	1dfb      	adds	r3, r7, #7
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2301      	movs	r3, #1
 80008e2:	2200      	movs	r2, #0
 80008e4:	2178      	movs	r1, #120	@ 0x78
 80008e6:	4803      	ldr	r0, [pc, #12]	@ (80008f4 <ssd1306_WriteCommand+0x2c>)
 80008e8:	f001 f846 	bl	8001978 <HAL_I2C_Mem_Write>
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200006dc 	.word	0x200006dc

080008f8 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af04      	add	r7, sp, #16
 80008fe:	6078      	str	r0, [r7, #4]
 8000900:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	b29b      	uxth	r3, r3
 8000906:	f04f 32ff 	mov.w	r2, #4294967295
 800090a:	9202      	str	r2, [sp, #8]
 800090c:	9301      	str	r3, [sp, #4]
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	9300      	str	r3, [sp, #0]
 8000912:	2301      	movs	r3, #1
 8000914:	2240      	movs	r2, #64	@ 0x40
 8000916:	2178      	movs	r1, #120	@ 0x78
 8000918:	4803      	ldr	r0, [pc, #12]	@ (8000928 <ssd1306_WriteData+0x30>)
 800091a:	f001 f82d 	bl	8001978 <HAL_I2C_Mem_Write>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	200006dc 	.word	0x200006dc

0800092c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000930:	f7ff ffc4 	bl	80008bc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000934:	2064      	movs	r0, #100	@ 0x64
 8000936:	f000 fc27 	bl	8001188 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800093a:	2000      	movs	r0, #0
 800093c:	f000 fac6 	bl	8000ecc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000940:	2020      	movs	r0, #32
 8000942:	f7ff ffc1 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff ffbe 	bl	80008c8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800094c:	20b0      	movs	r0, #176	@ 0xb0
 800094e:	f7ff ffbb 	bl	80008c8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000952:	20c8      	movs	r0, #200	@ 0xc8
 8000954:	f7ff ffb8 	bl	80008c8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff ffb5 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800095e:	2010      	movs	r0, #16
 8000960:	f7ff ffb2 	bl	80008c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000964:	2040      	movs	r0, #64	@ 0x40
 8000966:	f7ff ffaf 	bl	80008c8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800096a:	20ff      	movs	r0, #255	@ 0xff
 800096c:	f000 fa9a 	bl	8000ea4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000970:	20a1      	movs	r0, #161	@ 0xa1
 8000972:	f7ff ffa9 	bl	80008c8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000976:	20a6      	movs	r0, #166	@ 0xa6
 8000978:	f7ff ffa6 	bl	80008c8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800097c:	20a8      	movs	r0, #168	@ 0xa8
 800097e:	f7ff ffa3 	bl	80008c8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000982:	203f      	movs	r0, #63	@ 0x3f
 8000984:	f7ff ffa0 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000988:	20a4      	movs	r0, #164	@ 0xa4
 800098a:	f7ff ff9d 	bl	80008c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800098e:	20d3      	movs	r0, #211	@ 0xd3
 8000990:	f7ff ff9a 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000994:	2000      	movs	r0, #0
 8000996:	f7ff ff97 	bl	80008c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800099a:	20d5      	movs	r0, #213	@ 0xd5
 800099c:	f7ff ff94 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80009a0:	20f0      	movs	r0, #240	@ 0xf0
 80009a2:	f7ff ff91 	bl	80008c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80009a6:	20d9      	movs	r0, #217	@ 0xd9
 80009a8:	f7ff ff8e 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80009ac:	2022      	movs	r0, #34	@ 0x22
 80009ae:	f7ff ff8b 	bl	80008c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80009b2:	20da      	movs	r0, #218	@ 0xda
 80009b4:	f7ff ff88 	bl	80008c8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80009b8:	2012      	movs	r0, #18
 80009ba:	f7ff ff85 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80009be:	20db      	movs	r0, #219	@ 0xdb
 80009c0:	f7ff ff82 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80009c4:	2020      	movs	r0, #32
 80009c6:	f7ff ff7f 	bl	80008c8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80009ca:	208d      	movs	r0, #141	@ 0x8d
 80009cc:	f7ff ff7c 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80009d0:	2014      	movs	r0, #20
 80009d2:	f7ff ff79 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80009d6:	2001      	movs	r0, #1
 80009d8:	f000 fa78 	bl	8000ecc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80009dc:	2000      	movs	r0, #0
 80009de:	f000 f80f 	bl	8000a00 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80009e2:	f000 f825 	bl	8000a30 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80009e6:	4b05      	ldr	r3, [pc, #20]	@ (80009fc <ssd1306_Init+0xd0>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80009ec:	4b03      	ldr	r3, [pc, #12]	@ (80009fc <ssd1306_Init+0xd0>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80009f2:	4b02      	ldr	r3, [pc, #8]	@ (80009fc <ssd1306_Init+0xd0>)
 80009f4:	2201      	movs	r2, #1
 80009f6:	711a      	strb	r2, [r3, #4]
}
 80009f8:	bf00      	nop
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000b40 	.word	0x20000b40

08000a00 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b082      	sub	sp, #8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000a0a:	79fb      	ldrb	r3, [r7, #7]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d101      	bne.n	8000a14 <ssd1306_Fill+0x14>
 8000a10:	2300      	movs	r3, #0
 8000a12:	e000      	b.n	8000a16 <ssd1306_Fill+0x16>
 8000a14:	23ff      	movs	r3, #255	@ 0xff
 8000a16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	4803      	ldr	r0, [pc, #12]	@ (8000a2c <ssd1306_Fill+0x2c>)
 8000a1e:	f004 fe45 	bl	80056ac <memset>
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	20000740 	.word	0x20000740

08000a30 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000a36:	2300      	movs	r3, #0
 8000a38:	71fb      	strb	r3, [r7, #7]
 8000a3a:	e016      	b.n	8000a6a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	3b50      	subs	r3, #80	@ 0x50
 8000a40:	b2db      	uxtb	r3, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff40 	bl	80008c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f7ff ff3d 	bl	80008c8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000a4e:	2010      	movs	r0, #16
 8000a50:	f7ff ff3a 	bl	80008c8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000a54:	79fb      	ldrb	r3, [r7, #7]
 8000a56:	01db      	lsls	r3, r3, #7
 8000a58:	4a08      	ldr	r2, [pc, #32]	@ (8000a7c <ssd1306_UpdateScreen+0x4c>)
 8000a5a:	4413      	add	r3, r2
 8000a5c:	2180      	movs	r1, #128	@ 0x80
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f7ff ff4a 	bl	80008f8 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	3301      	adds	r3, #1
 8000a68:	71fb      	strb	r3, [r7, #7]
 8000a6a:	79fb      	ldrb	r3, [r7, #7]
 8000a6c:	2b07      	cmp	r3, #7
 8000a6e:	d9e5      	bls.n	8000a3c <ssd1306_UpdateScreen+0xc>
    }
}
 8000a70:	bf00      	nop
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000740 	.word	0x20000740

08000a80 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	4603      	mov	r3, r0
 8000a88:	71fb      	strb	r3, [r7, #7]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	71bb      	strb	r3, [r7, #6]
 8000a8e:	4613      	mov	r3, r2
 8000a90:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	db3d      	blt.n	8000b16 <ssd1306_DrawPixel+0x96>
 8000a9a:	79bb      	ldrb	r3, [r7, #6]
 8000a9c:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a9e:	d83a      	bhi.n	8000b16 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000aa0:	797b      	ldrb	r3, [r7, #5]
 8000aa2:	2b01      	cmp	r3, #1
 8000aa4:	d11a      	bne.n	8000adc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000aa6:	79fa      	ldrb	r2, [r7, #7]
 8000aa8:	79bb      	ldrb	r3, [r7, #6]
 8000aaa:	08db      	lsrs	r3, r3, #3
 8000aac:	b2d8      	uxtb	r0, r3
 8000aae:	4603      	mov	r3, r0
 8000ab0:	01db      	lsls	r3, r3, #7
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a1a      	ldr	r2, [pc, #104]	@ (8000b20 <ssd1306_DrawPixel+0xa0>)
 8000ab6:	5cd3      	ldrb	r3, [r2, r3]
 8000ab8:	b25a      	sxtb	r2, r3
 8000aba:	79bb      	ldrb	r3, [r7, #6]
 8000abc:	f003 0307 	and.w	r3, r3, #7
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac6:	b25b      	sxtb	r3, r3
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	b259      	sxtb	r1, r3
 8000acc:	79fa      	ldrb	r2, [r7, #7]
 8000ace:	4603      	mov	r3, r0
 8000ad0:	01db      	lsls	r3, r3, #7
 8000ad2:	4413      	add	r3, r2
 8000ad4:	b2c9      	uxtb	r1, r1
 8000ad6:	4a12      	ldr	r2, [pc, #72]	@ (8000b20 <ssd1306_DrawPixel+0xa0>)
 8000ad8:	54d1      	strb	r1, [r2, r3]
 8000ada:	e01d      	b.n	8000b18 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000adc:	79fa      	ldrb	r2, [r7, #7]
 8000ade:	79bb      	ldrb	r3, [r7, #6]
 8000ae0:	08db      	lsrs	r3, r3, #3
 8000ae2:	b2d8      	uxtb	r0, r3
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	01db      	lsls	r3, r3, #7
 8000ae8:	4413      	add	r3, r2
 8000aea:	4a0d      	ldr	r2, [pc, #52]	@ (8000b20 <ssd1306_DrawPixel+0xa0>)
 8000aec:	5cd3      	ldrb	r3, [r2, r3]
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	79bb      	ldrb	r3, [r7, #6]
 8000af2:	f003 0307 	and.w	r3, r3, #7
 8000af6:	2101      	movs	r1, #1
 8000af8:	fa01 f303 	lsl.w	r3, r1, r3
 8000afc:	b25b      	sxtb	r3, r3
 8000afe:	43db      	mvns	r3, r3
 8000b00:	b25b      	sxtb	r3, r3
 8000b02:	4013      	ands	r3, r2
 8000b04:	b259      	sxtb	r1, r3
 8000b06:	79fa      	ldrb	r2, [r7, #7]
 8000b08:	4603      	mov	r3, r0
 8000b0a:	01db      	lsls	r3, r3, #7
 8000b0c:	4413      	add	r3, r2
 8000b0e:	b2c9      	uxtb	r1, r1
 8000b10:	4a03      	ldr	r2, [pc, #12]	@ (8000b20 <ssd1306_DrawPixel+0xa0>)
 8000b12:	54d1      	strb	r1, [r2, r3]
 8000b14:	e000      	b.n	8000b18 <ssd1306_DrawPixel+0x98>
        return;
 8000b16:	bf00      	nop
    }
}
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr
 8000b20:	20000740 	.word	0x20000740

08000b24 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000b24:	b590      	push	{r4, r7, lr}
 8000b26:	b089      	sub	sp, #36	@ 0x24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	1d38      	adds	r0, r7, #4
 8000b2e:	e880 0006 	stmia.w	r0, {r1, r2}
 8000b32:	461a      	mov	r2, r3
 8000b34:	4623      	mov	r3, r4
 8000b36:	73fb      	strb	r3, [r7, #15]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 255)
 8000b3c:	7bfb      	ldrb	r3, [r7, #15]
 8000b3e:	2b1f      	cmp	r3, #31
 8000b40:	d801      	bhi.n	8000b46 <ssd1306_WriteChar+0x22>
        return 0;
 8000b42:	2300      	movs	r3, #0
 8000b44:	e06c      	b.n	8000c20 <ssd1306_WriteChar+0xfc>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000b46:	4b38      	ldr	r3, [pc, #224]	@ (8000c28 <ssd1306_WriteChar+0x104>)
 8000b48:	881b      	ldrh	r3, [r3, #0]
 8000b4a:	461a      	mov	r2, r3
 8000b4c:	793b      	ldrb	r3, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	2b80      	cmp	r3, #128	@ 0x80
 8000b52:	dc06      	bgt.n	8000b62 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000b54:	4b34      	ldr	r3, [pc, #208]	@ (8000c28 <ssd1306_WriteChar+0x104>)
 8000b56:	885b      	ldrh	r3, [r3, #2]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	797b      	ldrb	r3, [r7, #5]
 8000b5c:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000b5e:	2b40      	cmp	r3, #64	@ 0x40
 8000b60:	dd01      	ble.n	8000b66 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8000b62:	2300      	movs	r3, #0
 8000b64:	e05c      	b.n	8000c20 <ssd1306_WriteChar+0xfc>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000b66:	2300      	movs	r3, #0
 8000b68:	61fb      	str	r3, [r7, #28]
 8000b6a:	e04c      	b.n	8000c06 <ssd1306_WriteChar+0xe2>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000b6c:	68ba      	ldr	r2, [r7, #8]
 8000b6e:	7bfb      	ldrb	r3, [r7, #15]
 8000b70:	3b20      	subs	r3, #32
 8000b72:	7979      	ldrb	r1, [r7, #5]
 8000b74:	fb01 f303 	mul.w	r3, r1, r3
 8000b78:	4619      	mov	r1, r3
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	440b      	add	r3, r1
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	4413      	add	r3, r2
 8000b82:	881b      	ldrh	r3, [r3, #0]
 8000b84:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
 8000b8a:	e034      	b.n	8000bf6 <ssd1306_WriteChar+0xd2>
            if((b << j) & 0x8000)  {
 8000b8c:	697a      	ldr	r2, [r7, #20]
 8000b8e:	69bb      	ldr	r3, [r7, #24]
 8000b90:	fa02 f303 	lsl.w	r3, r2, r3
 8000b94:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d012      	beq.n	8000bc2 <ssd1306_WriteChar+0x9e>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000b9c:	4b22      	ldr	r3, [pc, #136]	@ (8000c28 <ssd1306_WriteChar+0x104>)
 8000b9e:	881b      	ldrh	r3, [r3, #0]
 8000ba0:	b2da      	uxtb	r2, r3
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	b2db      	uxtb	r3, r3
 8000ba6:	4413      	add	r3, r2
 8000ba8:	b2d8      	uxtb	r0, r3
 8000baa:	4b1f      	ldr	r3, [pc, #124]	@ (8000c28 <ssd1306_WriteChar+0x104>)
 8000bac:	885b      	ldrh	r3, [r3, #2]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	69fb      	ldr	r3, [r7, #28]
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	4413      	add	r3, r2
 8000bb6:	b2db      	uxtb	r3, r3
 8000bb8:	7bba      	ldrb	r2, [r7, #14]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	f7ff ff60 	bl	8000a80 <ssd1306_DrawPixel>
 8000bc0:	e016      	b.n	8000bf0 <ssd1306_WriteChar+0xcc>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000bc2:	4b19      	ldr	r3, [pc, #100]	@ (8000c28 <ssd1306_WriteChar+0x104>)
 8000bc4:	881b      	ldrh	r3, [r3, #0]
 8000bc6:	b2da      	uxtb	r2, r3
 8000bc8:	69bb      	ldr	r3, [r7, #24]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	4413      	add	r3, r2
 8000bce:	b2d8      	uxtb	r0, r3
 8000bd0:	4b15      	ldr	r3, [pc, #84]	@ (8000c28 <ssd1306_WriteChar+0x104>)
 8000bd2:	885b      	ldrh	r3, [r3, #2]
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	69fb      	ldr	r3, [r7, #28]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	4413      	add	r3, r2
 8000bdc:	b2d9      	uxtb	r1, r3
 8000bde:	7bbb      	ldrb	r3, [r7, #14]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	bf0c      	ite	eq
 8000be4:	2301      	moveq	r3, #1
 8000be6:	2300      	movne	r3, #0
 8000be8:	b2db      	uxtb	r3, r3
 8000bea:	461a      	mov	r2, r3
 8000bec:	f7ff ff48 	bl	8000a80 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	61bb      	str	r3, [r7, #24]
 8000bf6:	793b      	ldrb	r3, [r7, #4]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	69bb      	ldr	r3, [r7, #24]
 8000bfc:	4293      	cmp	r3, r2
 8000bfe:	d3c5      	bcc.n	8000b8c <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.FontHeight; i++) {
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	3301      	adds	r3, #1
 8000c04:	61fb      	str	r3, [r7, #28]
 8000c06:	797b      	ldrb	r3, [r7, #5]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	69fb      	ldr	r3, [r7, #28]
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d3ad      	bcc.n	8000b6c <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000c10:	4b05      	ldr	r3, [pc, #20]	@ (8000c28 <ssd1306_WriteChar+0x104>)
 8000c12:	881b      	ldrh	r3, [r3, #0]
 8000c14:	793a      	ldrb	r2, [r7, #4]
 8000c16:	4413      	add	r3, r2
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	4b03      	ldr	r3, [pc, #12]	@ (8000c28 <ssd1306_WriteChar+0x104>)
 8000c1c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	3724      	adds	r7, #36	@ 0x24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd90      	pop	{r4, r7, pc}
 8000c28:	20000b40 	.word	0x20000b40

08000c2c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	60f8      	str	r0, [r7, #12]
 8000c34:	1d38      	adds	r0, r7, #4
 8000c36:	e880 0006 	stmia.w	r0, {r1, r2}
 8000c3a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000c3c:	e012      	b.n	8000c64 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	7818      	ldrb	r0, [r3, #0]
 8000c42:	78fb      	ldrb	r3, [r7, #3]
 8000c44:	1d3a      	adds	r2, r7, #4
 8000c46:	ca06      	ldmia	r2, {r1, r2}
 8000c48:	f7ff ff6c 	bl	8000b24 <ssd1306_WriteChar>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	461a      	mov	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d002      	beq.n	8000c5e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	e008      	b.n	8000c70 <ssd1306_WriteString+0x44>
        }
        str++;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	3301      	adds	r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1e8      	bne.n	8000c3e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3710      	adds	r7, #16
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	4603      	mov	r3, r0
 8000c80:	460a      	mov	r2, r1
 8000c82:	71fb      	strb	r3, [r7, #7]
 8000c84:	4613      	mov	r3, r2
 8000c86:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	b29a      	uxth	r2, r3
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <ssd1306_SetCursor+0x2c>)
 8000c8e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000c90:	79bb      	ldrb	r3, [r7, #6]
 8000c92:	b29a      	uxth	r2, r3
 8000c94:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <ssd1306_SetCursor+0x2c>)
 8000c96:	805a      	strh	r2, [r3, #2]
}
 8000c98:	bf00      	nop
 8000c9a:	370c      	adds	r7, #12
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	20000b40 	.word	0x20000b40

08000ca8 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000ca8:	b590      	push	{r4, r7, lr}
 8000caa:	b089      	sub	sp, #36	@ 0x24
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	4611      	mov	r1, r2
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4623      	mov	r3, r4
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	4603      	mov	r3, r0
 8000cbc:	71bb      	strb	r3, [r7, #6]
 8000cbe:	460b      	mov	r3, r1
 8000cc0:	717b      	strb	r3, [r7, #5]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8000cc6:	797a      	ldrb	r2, [r7, #5]
 8000cc8:	79fb      	ldrb	r3, [r7, #7]
 8000cca:	1ad3      	subs	r3, r2, r3
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	bfb8      	it	lt
 8000cd0:	425b      	neglt	r3, r3
 8000cd2:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8000cd4:	793a      	ldrb	r2, [r7, #4]
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	bfb8      	it	lt
 8000cde:	425b      	neglt	r3, r3
 8000ce0:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8000ce2:	79fa      	ldrb	r2, [r7, #7]
 8000ce4:	797b      	ldrb	r3, [r7, #5]
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d201      	bcs.n	8000cee <ssd1306_Line+0x46>
 8000cea:	2301      	movs	r3, #1
 8000cec:	e001      	b.n	8000cf2 <ssd1306_Line+0x4a>
 8000cee:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf2:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8000cf4:	79ba      	ldrb	r2, [r7, #6]
 8000cf6:	793b      	ldrb	r3, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	d201      	bcs.n	8000d00 <ssd1306_Line+0x58>
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e001      	b.n	8000d04 <ssd1306_Line+0x5c>
 8000d00:	f04f 33ff 	mov.w	r3, #4294967295
 8000d04:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	1ad3      	subs	r3, r2, r3
 8000d0c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8000d0e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d12:	7939      	ldrb	r1, [r7, #4]
 8000d14:	797b      	ldrb	r3, [r7, #5]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff feb2 	bl	8000a80 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8000d1c:	e024      	b.n	8000d68 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8000d1e:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8000d22:	79b9      	ldrb	r1, [r7, #6]
 8000d24:	79fb      	ldrb	r3, [r7, #7]
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff feaa 	bl	8000a80 <ssd1306_DrawPixel>
        error2 = error * 2;
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	005b      	lsls	r3, r3, #1
 8000d30:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	425b      	negs	r3, r3
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	dd08      	ble.n	8000d4e <ssd1306_Line+0xa6>
            error -= deltaY;
 8000d3c:	69fa      	ldr	r2, [r7, #28]
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8000d44:	693b      	ldr	r3, [r7, #16]
 8000d46:	b2da      	uxtb	r2, r3
 8000d48:	79fb      	ldrb	r3, [r7, #7]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	69bb      	ldr	r3, [r7, #24]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	da08      	bge.n	8000d68 <ssd1306_Line+0xc0>
            error += deltaX;
 8000d56:	69fa      	ldr	r2, [r7, #28]
 8000d58:	69bb      	ldr	r3, [r7, #24]
 8000d5a:	4413      	add	r3, r2
 8000d5c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8000d5e:	68fb      	ldr	r3, [r7, #12]
 8000d60:	b2da      	uxtb	r2, r3
 8000d62:	79bb      	ldrb	r3, [r7, #6]
 8000d64:	4413      	add	r3, r2
 8000d66:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8000d68:	79fa      	ldrb	r2, [r7, #7]
 8000d6a:	797b      	ldrb	r3, [r7, #5]
 8000d6c:	429a      	cmp	r2, r3
 8000d6e:	d1d6      	bne.n	8000d1e <ssd1306_Line+0x76>
 8000d70:	79ba      	ldrb	r2, [r7, #6]
 8000d72:	793b      	ldrb	r3, [r7, #4]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d1d2      	bne.n	8000d1e <ssd1306_Line+0x76>
        }
    }
    return;
 8000d78:	bf00      	nop
}
 8000d7a:	3724      	adds	r7, #36	@ 0x24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd90      	pop	{r4, r7, pc}

08000d80 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af02      	add	r7, sp, #8
 8000d86:	4604      	mov	r4, r0
 8000d88:	4608      	mov	r0, r1
 8000d8a:	4611      	mov	r1, r2
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	4623      	mov	r3, r4
 8000d90:	71fb      	strb	r3, [r7, #7]
 8000d92:	4603      	mov	r3, r0
 8000d94:	71bb      	strb	r3, [r7, #6]
 8000d96:	460b      	mov	r3, r1
 8000d98:	717b      	strb	r3, [r7, #5]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 8000d9e:	79bc      	ldrb	r4, [r7, #6]
 8000da0:	797a      	ldrb	r2, [r7, #5]
 8000da2:	79b9      	ldrb	r1, [r7, #6]
 8000da4:	79f8      	ldrb	r0, [r7, #7]
 8000da6:	7e3b      	ldrb	r3, [r7, #24]
 8000da8:	9300      	str	r3, [sp, #0]
 8000daa:	4623      	mov	r3, r4
 8000dac:	f7ff ff7c 	bl	8000ca8 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8000db0:	793c      	ldrb	r4, [r7, #4]
 8000db2:	797a      	ldrb	r2, [r7, #5]
 8000db4:	79b9      	ldrb	r1, [r7, #6]
 8000db6:	7978      	ldrb	r0, [r7, #5]
 8000db8:	7e3b      	ldrb	r3, [r7, #24]
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	4623      	mov	r3, r4
 8000dbe:	f7ff ff73 	bl	8000ca8 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8000dc2:	793c      	ldrb	r4, [r7, #4]
 8000dc4:	79fa      	ldrb	r2, [r7, #7]
 8000dc6:	7939      	ldrb	r1, [r7, #4]
 8000dc8:	7978      	ldrb	r0, [r7, #5]
 8000dca:	7e3b      	ldrb	r3, [r7, #24]
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	4623      	mov	r3, r4
 8000dd0:	f7ff ff6a 	bl	8000ca8 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8000dd4:	79bc      	ldrb	r4, [r7, #6]
 8000dd6:	79fa      	ldrb	r2, [r7, #7]
 8000dd8:	7939      	ldrb	r1, [r7, #4]
 8000dda:	79f8      	ldrb	r0, [r7, #7]
 8000ddc:	7e3b      	ldrb	r3, [r7, #24]
 8000dde:	9300      	str	r3, [sp, #0]
 8000de0:	4623      	mov	r3, r4
 8000de2:	f7ff ff61 	bl	8000ca8 <ssd1306_Line>

    return;
 8000de6:	bf00      	nop
}
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd90      	pop	{r4, r7, pc}

08000dee <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b084      	sub	sp, #16
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	603a      	str	r2, [r7, #0]
 8000df6:	461a      	mov	r2, r3
 8000df8:	4603      	mov	r3, r0
 8000dfa:	71fb      	strb	r3, [r7, #7]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	71bb      	strb	r3, [r7, #6]
 8000e00:	4613      	mov	r3, r2
 8000e02:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000e04:	797b      	ldrb	r3, [r7, #5]
 8000e06:	3307      	adds	r3, #7
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	da00      	bge.n	8000e0e <ssd1306_DrawBitmap+0x20>
 8000e0c:	3307      	adds	r3, #7
 8000e0e:	10db      	asrs	r3, r3, #3
 8000e10:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8000e12:	2300      	movs	r3, #0
 8000e14:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	db3e      	blt.n	8000e9c <ssd1306_DrawBitmap+0xae>
 8000e1e:	79bb      	ldrb	r3, [r7, #6]
 8000e20:	2b3f      	cmp	r3, #63	@ 0x3f
 8000e22:	d83b      	bhi.n	8000e9c <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000e24:	2300      	movs	r3, #0
 8000e26:	73bb      	strb	r3, [r7, #14]
 8000e28:	e033      	b.n	8000e92 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	737b      	strb	r3, [r7, #13]
 8000e2e:	e026      	b.n	8000e7e <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8000e30:	7b7b      	ldrb	r3, [r7, #13]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d003      	beq.n	8000e42 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8000e3a:	7bfb      	ldrb	r3, [r7, #15]
 8000e3c:	005b      	lsls	r3, r3, #1
 8000e3e:	73fb      	strb	r3, [r7, #15]
 8000e40:	e00d      	b.n	8000e5e <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000e42:	7bbb      	ldrb	r3, [r7, #14]
 8000e44:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000e48:	fb02 f303 	mul.w	r3, r2, r3
 8000e4c:	7b7a      	ldrb	r2, [r7, #13]
 8000e4e:	08d2      	lsrs	r2, r2, #3
 8000e50:	b2d2      	uxtb	r2, r2
 8000e52:	4413      	add	r3, r2
 8000e54:	461a      	mov	r2, r3
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	4413      	add	r3, r2
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8000e5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	da08      	bge.n	8000e78 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8000e66:	79fa      	ldrb	r2, [r7, #7]
 8000e68:	7b7b      	ldrb	r3, [r7, #13]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	7f3a      	ldrb	r2, [r7, #28]
 8000e70:	79b9      	ldrb	r1, [r7, #6]
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff fe04 	bl	8000a80 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8000e78:	7b7b      	ldrb	r3, [r7, #13]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	737b      	strb	r3, [r7, #13]
 8000e7e:	7b7a      	ldrb	r2, [r7, #13]
 8000e80:	797b      	ldrb	r3, [r7, #5]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	d3d4      	bcc.n	8000e30 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000e86:	7bbb      	ldrb	r3, [r7, #14]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	73bb      	strb	r3, [r7, #14]
 8000e8c:	79bb      	ldrb	r3, [r7, #6]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	71bb      	strb	r3, [r7, #6]
 8000e92:	7bba      	ldrb	r2, [r7, #14]
 8000e94:	7e3b      	ldrb	r3, [r7, #24]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d3c7      	bcc.n	8000e2a <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8000e9a:	e000      	b.n	8000e9e <ssd1306_DrawBitmap+0xb0>
        return;
 8000e9c:	bf00      	nop
}
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000eae:	2381      	movs	r3, #129	@ 0x81
 8000eb0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff fd07 	bl	80008c8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fd03 	bl	80008c8 <ssd1306_WriteCommand>
}
 8000ec2:	bf00      	nop
 8000ec4:	3710      	adds	r7, #16
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d005      	beq.n	8000ee8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000edc:	23af      	movs	r3, #175	@ 0xaf
 8000ede:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <ssd1306_SetDisplayOn+0x38>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	715a      	strb	r2, [r3, #5]
 8000ee6:	e004      	b.n	8000ef2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000ee8:	23ae      	movs	r3, #174	@ 0xae
 8000eea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000eec:	4b05      	ldr	r3, [pc, #20]	@ (8000f04 <ssd1306_SetDisplayOn+0x38>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000ef2:	7bfb      	ldrb	r3, [r7, #15]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fce7 	bl	80008c8 <ssd1306_WriteCommand>
}
 8000efa:	bf00      	nop
 8000efc:	3710      	adds	r7, #16
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000b40 	.word	0x20000b40

08000f08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f0e:	4b18      	ldr	r3, [pc, #96]	@ (8000f70 <HAL_MspInit+0x68>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	4a17      	ldr	r2, [pc, #92]	@ (8000f70 <HAL_MspInit+0x68>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6193      	str	r3, [r2, #24]
 8000f1a:	4b15      	ldr	r3, [pc, #84]	@ (8000f70 <HAL_MspInit+0x68>)
 8000f1c:	699b      	ldr	r3, [r3, #24]
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f26:	4b12      	ldr	r3, [pc, #72]	@ (8000f70 <HAL_MspInit+0x68>)
 8000f28:	69db      	ldr	r3, [r3, #28]
 8000f2a:	4a11      	ldr	r2, [pc, #68]	@ (8000f70 <HAL_MspInit+0x68>)
 8000f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f30:	61d3      	str	r3, [r2, #28]
 8000f32:	4b0f      	ldr	r3, [pc, #60]	@ (8000f70 <HAL_MspInit+0x68>)
 8000f34:	69db      	ldr	r3, [r3, #28]
 8000f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f3a:	607b      	str	r3, [r7, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f3e:	2200      	movs	r2, #0
 8000f40:	210f      	movs	r1, #15
 8000f42:	f06f 0001 	mvn.w	r0, #1
 8000f46:	f000 f9fe 	bl	8001346 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f74 <HAL_MspInit+0x6c>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f5e:	60fb      	str	r3, [r7, #12]
 8000f60:	4a04      	ldr	r2, [pc, #16]	@ (8000f74 <HAL_MspInit+0x6c>)
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f66:	bf00      	nop
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000
 8000f74:	40010000 	.word	0x40010000

08000f78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b08a      	sub	sp, #40	@ 0x28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f80:	f107 0314 	add.w	r3, r7, #20
 8000f84:	2200      	movs	r2, #0
 8000f86:	601a      	str	r2, [r3, #0]
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	609a      	str	r2, [r3, #8]
 8000f8c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a1e      	ldr	r2, [pc, #120]	@ (800100c <HAL_I2C_MspInit+0x94>)
 8000f94:	4293      	cmp	r3, r2
 8000f96:	d134      	bne.n	8001002 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f98:	4b1d      	ldr	r3, [pc, #116]	@ (8001010 <HAL_I2C_MspInit+0x98>)
 8000f9a:	699b      	ldr	r3, [r3, #24]
 8000f9c:	4a1c      	ldr	r2, [pc, #112]	@ (8001010 <HAL_I2C_MspInit+0x98>)
 8000f9e:	f043 0308 	orr.w	r3, r3, #8
 8000fa2:	6193      	str	r3, [r2, #24]
 8000fa4:	4b1a      	ldr	r3, [pc, #104]	@ (8001010 <HAL_I2C_MspInit+0x98>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	f003 0308 	and.w	r3, r3, #8
 8000fac:	613b      	str	r3, [r7, #16]
 8000fae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000fb0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb6:	2312      	movs	r3, #18
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc2:	f107 0314 	add.w	r3, r7, #20
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4812      	ldr	r0, [pc, #72]	@ (8001014 <HAL_I2C_MspInit+0x9c>)
 8000fca:	f000 f9e5 	bl	8001398 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000fce:	4b12      	ldr	r3, [pc, #72]	@ (8001018 <HAL_I2C_MspInit+0xa0>)
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fde:	f043 0302 	orr.w	r3, r3, #2
 8000fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fe4:	4a0c      	ldr	r2, [pc, #48]	@ (8001018 <HAL_I2C_MspInit+0xa0>)
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000fea:	4b09      	ldr	r3, [pc, #36]	@ (8001010 <HAL_I2C_MspInit+0x98>)
 8000fec:	69db      	ldr	r3, [r3, #28]
 8000fee:	4a08      	ldr	r2, [pc, #32]	@ (8001010 <HAL_I2C_MspInit+0x98>)
 8000ff0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ff4:	61d3      	str	r3, [r2, #28]
 8000ff6:	4b06      	ldr	r3, [pc, #24]	@ (8001010 <HAL_I2C_MspInit+0x98>)
 8000ff8:	69db      	ldr	r3, [r3, #28]
 8000ffa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ffe:	60fb      	str	r3, [r7, #12]
 8001000:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001002:	bf00      	nop
 8001004:	3728      	adds	r7, #40	@ 0x28
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	40005400 	.word	0x40005400
 8001010:	40021000 	.word	0x40021000
 8001014:	40010c00 	.word	0x40010c00
 8001018:	40010000 	.word	0x40010000

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001020:	bf00      	nop
 8001022:	e7fd      	b.n	8001020 <NMI_Handler+0x4>

08001024 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <MemManage_Handler+0x4>

08001034 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <BusFault_Handler+0x4>

0800103c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <UsageFault_Handler+0x4>

08001044 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001054:	f000 f87c 	bl	8001150 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001058:	f003 fa8a 	bl	8004570 <xTaskGetSchedulerState>
 800105c:	4603      	mov	r3, r0
 800105e:	2b01      	cmp	r3, #1
 8001060:	d001      	beq.n	8001066 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8001062:	f004 f8c1 	bl	80051e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}

0800106a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
	...

08001078 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001078:	f7ff fff7 	bl	800106a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800107c:	480b      	ldr	r0, [pc, #44]	@ (80010ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800107e:	490c      	ldr	r1, [pc, #48]	@ (80010b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001080:	4a0c      	ldr	r2, [pc, #48]	@ (80010b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a09      	ldr	r2, [pc, #36]	@ (80010b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001094:	4c09      	ldr	r4, [pc, #36]	@ (80010bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a2:	f004 fb0b 	bl	80056bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010a6:	f7ff f885 	bl	80001b4 <main>
  bx lr
 80010aa:	4770      	bx	lr
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80010b4:	08007024 	.word	0x08007024
  ldr r2, =_sbss
 80010b8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80010bc:	200019d4 	.word	0x200019d4

080010c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC1_2_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c8:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <HAL_Init+0x28>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a07      	ldr	r2, [pc, #28]	@ (80010ec <HAL_Init+0x28>)
 80010ce:	f043 0310 	orr.w	r3, r3, #16
 80010d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 f92b 	bl	8001330 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010da:	200f      	movs	r0, #15
 80010dc:	f000 f808 	bl	80010f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e0:	f7ff ff12 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40022000 	.word	0x40022000

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f8:	4b12      	ldr	r3, [pc, #72]	@ (8001144 <HAL_InitTick+0x54>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b12      	ldr	r3, [pc, #72]	@ (8001148 <HAL_InitTick+0x58>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f935 	bl	800137e <HAL_SYSTICK_Config>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e00e      	b.n	800113c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d80a      	bhi.n	800113a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f000 f90b 	bl	8001346 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4a06      	ldr	r2, [pc, #24]	@ (800114c <HAL_InitTick+0x5c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000008 	.word	0x20000008
 8001148:	20000010 	.word	0x20000010
 800114c:	2000000c 	.word	0x2000000c

08001150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b05      	ldr	r3, [pc, #20]	@ (800116c <HAL_IncTick+0x1c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <HAL_IncTick+0x20>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a03      	ldr	r2, [pc, #12]	@ (8001170 <HAL_IncTick+0x20>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	20000010 	.word	0x20000010
 8001170:	20000b48 	.word	0x20000b48

08001174 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b02      	ldr	r3, [pc, #8]	@ (8001184 <HAL_GetTick+0x10>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	20000b48 	.word	0x20000b48

08001188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001190:	f7ff fff0 	bl	8001174 <HAL_GetTick>
 8001194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a0:	d005      	beq.n	80011ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011a2:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <HAL_Delay+0x44>)
 80011a4:	781b      	ldrb	r3, [r3, #0]
 80011a6:	461a      	mov	r2, r3
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011ae:	bf00      	nop
 80011b0:	f7ff ffe0 	bl	8001174 <HAL_GetTick>
 80011b4:	4602      	mov	r2, r0
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	429a      	cmp	r2, r3
 80011be:	d8f7      	bhi.n	80011b0 <HAL_Delay+0x28>
  {
  }
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3710      	adds	r7, #16
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	20000010 	.word	0x20000010

080011d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b085      	sub	sp, #20
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011e6:	68ba      	ldr	r2, [r7, #8]
 80011e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011ec:	4013      	ands	r3, r2
 80011ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001202:	4a04      	ldr	r2, [pc, #16]	@ (8001214 <__NVIC_SetPriorityGrouping+0x44>)
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	60d3      	str	r3, [r2, #12]
}
 8001208:	bf00      	nop
 800120a:	3714      	adds	r7, #20
 800120c:	46bd      	mov	sp, r7
 800120e:	bc80      	pop	{r7}
 8001210:	4770      	bx	lr
 8001212:	bf00      	nop
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800121c:	4b04      	ldr	r3, [pc, #16]	@ (8001230 <__NVIC_GetPriorityGrouping+0x18>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	0a1b      	lsrs	r3, r3, #8
 8001222:	f003 0307 	and.w	r3, r3, #7
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	bc80      	pop	{r7}
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000ed00 	.word	0xe000ed00

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	@ (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	@ (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	bc80      	pop	{r7}
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	@ 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	@ 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bc80      	pop	{r7}
 80012ea:	4770      	bx	lr

080012ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	3b01      	subs	r3, #1
 80012f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80012fc:	d301      	bcc.n	8001302 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012fe:	2301      	movs	r3, #1
 8001300:	e00f      	b.n	8001322 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001302:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <SysTick_Config+0x40>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	3b01      	subs	r3, #1
 8001308:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800130a:	210f      	movs	r1, #15
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f7ff ff90 	bl	8001234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001314:	4b05      	ldr	r3, [pc, #20]	@ (800132c <SysTick_Config+0x40>)
 8001316:	2200      	movs	r2, #0
 8001318:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800131a:	4b04      	ldr	r3, [pc, #16]	@ (800132c <SysTick_Config+0x40>)
 800131c:	2207      	movs	r2, #7
 800131e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3708      	adds	r7, #8
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	e000e010 	.word	0xe000e010

08001330 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ff49 	bl	80011d0 <__NVIC_SetPriorityGrouping>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001346:	b580      	push	{r7, lr}
 8001348:	b086      	sub	sp, #24
 800134a:	af00      	add	r7, sp, #0
 800134c:	4603      	mov	r3, r0
 800134e:	60b9      	str	r1, [r7, #8]
 8001350:	607a      	str	r2, [r7, #4]
 8001352:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001358:	f7ff ff5e 	bl	8001218 <__NVIC_GetPriorityGrouping>
 800135c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	68b9      	ldr	r1, [r7, #8]
 8001362:	6978      	ldr	r0, [r7, #20]
 8001364:	f7ff ff90 	bl	8001288 <NVIC_EncodePriority>
 8001368:	4602      	mov	r2, r0
 800136a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800136e:	4611      	mov	r1, r2
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff ff5f 	bl	8001234 <__NVIC_SetPriority>
}
 8001376:	bf00      	nop
 8001378:	3718      	adds	r7, #24
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f7ff ffb0 	bl	80012ec <SysTick_Config>
 800138c:	4603      	mov	r3, r0
}
 800138e:	4618      	mov	r0, r3
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
	...

08001398 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001398:	b480      	push	{r7}
 800139a:	b08b      	sub	sp, #44	@ 0x2c
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013a2:	2300      	movs	r3, #0
 80013a4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013aa:	e161      	b.n	8001670 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013ac:	2201      	movs	r2, #1
 80013ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	69fa      	ldr	r2, [r7, #28]
 80013bc:	4013      	ands	r3, r2
 80013be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013c0:	69ba      	ldr	r2, [r7, #24]
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	f040 8150 	bne.w	800166a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	4a97      	ldr	r2, [pc, #604]	@ (800162c <HAL_GPIO_Init+0x294>)
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d05e      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
 80013d4:	4a95      	ldr	r2, [pc, #596]	@ (800162c <HAL_GPIO_Init+0x294>)
 80013d6:	4293      	cmp	r3, r2
 80013d8:	d875      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 80013da:	4a95      	ldr	r2, [pc, #596]	@ (8001630 <HAL_GPIO_Init+0x298>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d058      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
 80013e0:	4a93      	ldr	r2, [pc, #588]	@ (8001630 <HAL_GPIO_Init+0x298>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d86f      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 80013e6:	4a93      	ldr	r2, [pc, #588]	@ (8001634 <HAL_GPIO_Init+0x29c>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d052      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
 80013ec:	4a91      	ldr	r2, [pc, #580]	@ (8001634 <HAL_GPIO_Init+0x29c>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d869      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 80013f2:	4a91      	ldr	r2, [pc, #580]	@ (8001638 <HAL_GPIO_Init+0x2a0>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	d04c      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
 80013f8:	4a8f      	ldr	r2, [pc, #572]	@ (8001638 <HAL_GPIO_Init+0x2a0>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d863      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 80013fe:	4a8f      	ldr	r2, [pc, #572]	@ (800163c <HAL_GPIO_Init+0x2a4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d046      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
 8001404:	4a8d      	ldr	r2, [pc, #564]	@ (800163c <HAL_GPIO_Init+0x2a4>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d85d      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 800140a:	2b12      	cmp	r3, #18
 800140c:	d82a      	bhi.n	8001464 <HAL_GPIO_Init+0xcc>
 800140e:	2b12      	cmp	r3, #18
 8001410:	d859      	bhi.n	80014c6 <HAL_GPIO_Init+0x12e>
 8001412:	a201      	add	r2, pc, #4	@ (adr r2, 8001418 <HAL_GPIO_Init+0x80>)
 8001414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001418:	08001493 	.word	0x08001493
 800141c:	0800146d 	.word	0x0800146d
 8001420:	0800147f 	.word	0x0800147f
 8001424:	080014c1 	.word	0x080014c1
 8001428:	080014c7 	.word	0x080014c7
 800142c:	080014c7 	.word	0x080014c7
 8001430:	080014c7 	.word	0x080014c7
 8001434:	080014c7 	.word	0x080014c7
 8001438:	080014c7 	.word	0x080014c7
 800143c:	080014c7 	.word	0x080014c7
 8001440:	080014c7 	.word	0x080014c7
 8001444:	080014c7 	.word	0x080014c7
 8001448:	080014c7 	.word	0x080014c7
 800144c:	080014c7 	.word	0x080014c7
 8001450:	080014c7 	.word	0x080014c7
 8001454:	080014c7 	.word	0x080014c7
 8001458:	080014c7 	.word	0x080014c7
 800145c:	08001475 	.word	0x08001475
 8001460:	08001489 	.word	0x08001489
 8001464:	4a76      	ldr	r2, [pc, #472]	@ (8001640 <HAL_GPIO_Init+0x2a8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d013      	beq.n	8001492 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800146a:	e02c      	b.n	80014c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	623b      	str	r3, [r7, #32]
          break;
 8001472:	e029      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	68db      	ldr	r3, [r3, #12]
 8001478:	3304      	adds	r3, #4
 800147a:	623b      	str	r3, [r7, #32]
          break;
 800147c:	e024      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	3308      	adds	r3, #8
 8001484:	623b      	str	r3, [r7, #32]
          break;
 8001486:	e01f      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	330c      	adds	r3, #12
 800148e:	623b      	str	r3, [r7, #32]
          break;
 8001490:	e01a      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	689b      	ldr	r3, [r3, #8]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d102      	bne.n	80014a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800149a:	2304      	movs	r3, #4
 800149c:	623b      	str	r3, [r7, #32]
          break;
 800149e:	e013      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d105      	bne.n	80014b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014a8:	2308      	movs	r3, #8
 80014aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69fa      	ldr	r2, [r7, #28]
 80014b0:	611a      	str	r2, [r3, #16]
          break;
 80014b2:	e009      	b.n	80014c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80014b4:	2308      	movs	r3, #8
 80014b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	69fa      	ldr	r2, [r7, #28]
 80014bc:	615a      	str	r2, [r3, #20]
          break;
 80014be:	e003      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80014c0:	2300      	movs	r3, #0
 80014c2:	623b      	str	r3, [r7, #32]
          break;
 80014c4:	e000      	b.n	80014c8 <HAL_GPIO_Init+0x130>
          break;
 80014c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80014c8:	69bb      	ldr	r3, [r7, #24]
 80014ca:	2bff      	cmp	r3, #255	@ 0xff
 80014cc:	d801      	bhi.n	80014d2 <HAL_GPIO_Init+0x13a>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	e001      	b.n	80014d6 <HAL_GPIO_Init+0x13e>
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	3304      	adds	r3, #4
 80014d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2bff      	cmp	r3, #255	@ 0xff
 80014dc:	d802      	bhi.n	80014e4 <HAL_GPIO_Init+0x14c>
 80014de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	e002      	b.n	80014ea <HAL_GPIO_Init+0x152>
 80014e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014e6:	3b08      	subs	r3, #8
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	210f      	movs	r1, #15
 80014f2:	693b      	ldr	r3, [r7, #16]
 80014f4:	fa01 f303 	lsl.w	r3, r1, r3
 80014f8:	43db      	mvns	r3, r3
 80014fa:	401a      	ands	r2, r3
 80014fc:	6a39      	ldr	r1, [r7, #32]
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	fa01 f303 	lsl.w	r3, r1, r3
 8001504:	431a      	orrs	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	f000 80a9 	beq.w	800166a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001518:	4b4a      	ldr	r3, [pc, #296]	@ (8001644 <HAL_GPIO_Init+0x2ac>)
 800151a:	699b      	ldr	r3, [r3, #24]
 800151c:	4a49      	ldr	r2, [pc, #292]	@ (8001644 <HAL_GPIO_Init+0x2ac>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6193      	str	r3, [r2, #24]
 8001524:	4b47      	ldr	r3, [pc, #284]	@ (8001644 <HAL_GPIO_Init+0x2ac>)
 8001526:	699b      	ldr	r3, [r3, #24]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	60bb      	str	r3, [r7, #8]
 800152e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001530:	4a45      	ldr	r2, [pc, #276]	@ (8001648 <HAL_GPIO_Init+0x2b0>)
 8001532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001534:	089b      	lsrs	r3, r3, #2
 8001536:	3302      	adds	r3, #2
 8001538:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800153c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800153e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001540:	f003 0303 	and.w	r3, r3, #3
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	220f      	movs	r2, #15
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	68fa      	ldr	r2, [r7, #12]
 8001550:	4013      	ands	r3, r2
 8001552:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a3d      	ldr	r2, [pc, #244]	@ (800164c <HAL_GPIO_Init+0x2b4>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d00d      	beq.n	8001578 <HAL_GPIO_Init+0x1e0>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	4a3c      	ldr	r2, [pc, #240]	@ (8001650 <HAL_GPIO_Init+0x2b8>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d007      	beq.n	8001574 <HAL_GPIO_Init+0x1dc>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4a3b      	ldr	r2, [pc, #236]	@ (8001654 <HAL_GPIO_Init+0x2bc>)
 8001568:	4293      	cmp	r3, r2
 800156a:	d101      	bne.n	8001570 <HAL_GPIO_Init+0x1d8>
 800156c:	2302      	movs	r3, #2
 800156e:	e004      	b.n	800157a <HAL_GPIO_Init+0x1e2>
 8001570:	2303      	movs	r3, #3
 8001572:	e002      	b.n	800157a <HAL_GPIO_Init+0x1e2>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <HAL_GPIO_Init+0x1e2>
 8001578:	2300      	movs	r3, #0
 800157a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800157c:	f002 0203 	and.w	r2, r2, #3
 8001580:	0092      	lsls	r2, r2, #2
 8001582:	4093      	lsls	r3, r2
 8001584:	68fa      	ldr	r2, [r7, #12]
 8001586:	4313      	orrs	r3, r2
 8001588:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800158a:	492f      	ldr	r1, [pc, #188]	@ (8001648 <HAL_GPIO_Init+0x2b0>)
 800158c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	68fa      	ldr	r2, [r7, #12]
 8001594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d006      	beq.n	80015b2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 80015a6:	689a      	ldr	r2, [r3, #8]
 80015a8:	492b      	ldr	r1, [pc, #172]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	608b      	str	r3, [r1, #8]
 80015b0:	e006      	b.n	80015c0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015b2:	4b29      	ldr	r3, [pc, #164]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 80015b4:	689a      	ldr	r2, [r3, #8]
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	43db      	mvns	r3, r3
 80015ba:	4927      	ldr	r1, [pc, #156]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 80015bc:	4013      	ands	r3, r2
 80015be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d006      	beq.n	80015da <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015cc:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 80015ce:	68da      	ldr	r2, [r3, #12]
 80015d0:	4921      	ldr	r1, [pc, #132]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	60cb      	str	r3, [r1, #12]
 80015d8:	e006      	b.n	80015e8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015da:	4b1f      	ldr	r3, [pc, #124]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 80015dc:	68da      	ldr	r2, [r3, #12]
 80015de:	69bb      	ldr	r3, [r7, #24]
 80015e0:	43db      	mvns	r3, r3
 80015e2:	491d      	ldr	r1, [pc, #116]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d006      	beq.n	8001602 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015f4:	4b18      	ldr	r3, [pc, #96]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	4917      	ldr	r1, [pc, #92]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	4313      	orrs	r3, r2
 80015fe:	604b      	str	r3, [r1, #4]
 8001600:	e006      	b.n	8001610 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001602:	4b15      	ldr	r3, [pc, #84]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	43db      	mvns	r3, r3
 800160a:	4913      	ldr	r1, [pc, #76]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 800160c:	4013      	ands	r3, r2
 800160e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001618:	2b00      	cmp	r3, #0
 800161a:	d01f      	beq.n	800165c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800161c:	4b0e      	ldr	r3, [pc, #56]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	490d      	ldr	r1, [pc, #52]	@ (8001658 <HAL_GPIO_Init+0x2c0>)
 8001622:	69bb      	ldr	r3, [r7, #24]
 8001624:	4313      	orrs	r3, r2
 8001626:	600b      	str	r3, [r1, #0]
 8001628:	e01f      	b.n	800166a <HAL_GPIO_Init+0x2d2>
 800162a:	bf00      	nop
 800162c:	10320000 	.word	0x10320000
 8001630:	10310000 	.word	0x10310000
 8001634:	10220000 	.word	0x10220000
 8001638:	10210000 	.word	0x10210000
 800163c:	10120000 	.word	0x10120000
 8001640:	10110000 	.word	0x10110000
 8001644:	40021000 	.word	0x40021000
 8001648:	40010000 	.word	0x40010000
 800164c:	40010800 	.word	0x40010800
 8001650:	40010c00 	.word	0x40010c00
 8001654:	40011000 	.word	0x40011000
 8001658:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800165c:	4b0b      	ldr	r3, [pc, #44]	@ (800168c <HAL_GPIO_Init+0x2f4>)
 800165e:	681a      	ldr	r2, [r3, #0]
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	43db      	mvns	r3, r3
 8001664:	4909      	ldr	r1, [pc, #36]	@ (800168c <HAL_GPIO_Init+0x2f4>)
 8001666:	4013      	ands	r3, r2
 8001668:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800166a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166c:	3301      	adds	r3, #1
 800166e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001676:	fa22 f303 	lsr.w	r3, r2, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	f47f ae96 	bne.w	80013ac <HAL_GPIO_Init+0x14>
  }
}
 8001680:	bf00      	nop
 8001682:	bf00      	nop
 8001684:	372c      	adds	r7, #44	@ 0x2c
 8001686:	46bd      	mov	sp, r7
 8001688:	bc80      	pop	{r7}
 800168a:	4770      	bx	lr
 800168c:	40010400 	.word	0x40010400

08001690 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001690:	b480      	push	{r7}
 8001692:	b085      	sub	sp, #20
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
 8001698:	460b      	mov	r3, r1
 800169a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689a      	ldr	r2, [r3, #8]
 80016a0:	887b      	ldrh	r3, [r7, #2]
 80016a2:	4013      	ands	r3, r2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d002      	beq.n	80016ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80016a8:	2301      	movs	r3, #1
 80016aa:	73fb      	strb	r3, [r7, #15]
 80016ac:	e001      	b.n	80016b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80016ae:	2300      	movs	r3, #0
 80016b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr

080016be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016be:	b480      	push	{r7}
 80016c0:	b083      	sub	sp, #12
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	6078      	str	r0, [r7, #4]
 80016c6:	460b      	mov	r3, r1
 80016c8:	807b      	strh	r3, [r7, #2]
 80016ca:	4613      	mov	r3, r2
 80016cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016ce:	787b      	ldrb	r3, [r7, #1]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d003      	beq.n	80016dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016d4:	887a      	ldrh	r2, [r7, #2]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016da:	e003      	b.n	80016e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016dc:	887b      	ldrh	r3, [r7, #2]
 80016de:	041a      	lsls	r2, r3, #16
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	611a      	str	r2, [r3, #16]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bc80      	pop	{r7}
 80016ec:	4770      	bx	lr
	...

080016f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d101      	bne.n	8001702 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e12b      	b.n	800195a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	d106      	bne.n	800171c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2200      	movs	r2, #0
 8001712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff fc2e 	bl	8000f78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2224      	movs	r2, #36	@ 0x24
 8001720:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001742:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001752:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001754:	f001 f842 	bl	80027dc <HAL_RCC_GetPCLK1Freq>
 8001758:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	4a81      	ldr	r2, [pc, #516]	@ (8001964 <HAL_I2C_Init+0x274>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d807      	bhi.n	8001774 <HAL_I2C_Init+0x84>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4a80      	ldr	r2, [pc, #512]	@ (8001968 <HAL_I2C_Init+0x278>)
 8001768:	4293      	cmp	r3, r2
 800176a:	bf94      	ite	ls
 800176c:	2301      	movls	r3, #1
 800176e:	2300      	movhi	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	e006      	b.n	8001782 <HAL_I2C_Init+0x92>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	4a7d      	ldr	r2, [pc, #500]	@ (800196c <HAL_I2C_Init+0x27c>)
 8001778:	4293      	cmp	r3, r2
 800177a:	bf94      	ite	ls
 800177c:	2301      	movls	r3, #1
 800177e:	2300      	movhi	r3, #0
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e0e7      	b.n	800195a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	4a78      	ldr	r2, [pc, #480]	@ (8001970 <HAL_I2C_Init+0x280>)
 800178e:	fba2 2303 	umull	r2, r3, r2, r3
 8001792:	0c9b      	lsrs	r3, r3, #18
 8001794:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	68ba      	ldr	r2, [r7, #8]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001964 <HAL_I2C_Init+0x274>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d802      	bhi.n	80017c4 <HAL_I2C_Init+0xd4>
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	3301      	adds	r3, #1
 80017c2:	e009      	b.n	80017d8 <HAL_I2C_Init+0xe8>
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80017ca:	fb02 f303 	mul.w	r3, r2, r3
 80017ce:	4a69      	ldr	r2, [pc, #420]	@ (8001974 <HAL_I2C_Init+0x284>)
 80017d0:	fba2 2303 	umull	r2, r3, r2, r3
 80017d4:	099b      	lsrs	r3, r3, #6
 80017d6:	3301      	adds	r3, #1
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	6812      	ldr	r2, [r2, #0]
 80017dc:	430b      	orrs	r3, r1
 80017de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80017ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	495c      	ldr	r1, [pc, #368]	@ (8001964 <HAL_I2C_Init+0x274>)
 80017f4:	428b      	cmp	r3, r1
 80017f6:	d819      	bhi.n	800182c <HAL_I2C_Init+0x13c>
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	1e59      	subs	r1, r3, #1
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	fbb1 f3f3 	udiv	r3, r1, r3
 8001806:	1c59      	adds	r1, r3, #1
 8001808:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800180c:	400b      	ands	r3, r1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00a      	beq.n	8001828 <HAL_I2C_Init+0x138>
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	1e59      	subs	r1, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001820:	3301      	adds	r3, #1
 8001822:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001826:	e051      	b.n	80018cc <HAL_I2C_Init+0x1dc>
 8001828:	2304      	movs	r3, #4
 800182a:	e04f      	b.n	80018cc <HAL_I2C_Init+0x1dc>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d111      	bne.n	8001858 <HAL_I2C_Init+0x168>
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	1e58      	subs	r0, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6859      	ldr	r1, [r3, #4]
 800183c:	460b      	mov	r3, r1
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	440b      	add	r3, r1
 8001842:	fbb0 f3f3 	udiv	r3, r0, r3
 8001846:	3301      	adds	r3, #1
 8001848:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800184c:	2b00      	cmp	r3, #0
 800184e:	bf0c      	ite	eq
 8001850:	2301      	moveq	r3, #1
 8001852:	2300      	movne	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	e012      	b.n	800187e <HAL_I2C_Init+0x18e>
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	1e58      	subs	r0, r3, #1
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6859      	ldr	r1, [r3, #4]
 8001860:	460b      	mov	r3, r1
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	440b      	add	r3, r1
 8001866:	0099      	lsls	r1, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	fbb0 f3f3 	udiv	r3, r0, r3
 800186e:	3301      	adds	r3, #1
 8001870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf0c      	ite	eq
 8001878:	2301      	moveq	r3, #1
 800187a:	2300      	movne	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_I2C_Init+0x196>
 8001882:	2301      	movs	r3, #1
 8001884:	e022      	b.n	80018cc <HAL_I2C_Init+0x1dc>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10e      	bne.n	80018ac <HAL_I2C_Init+0x1bc>
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	1e58      	subs	r0, r3, #1
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6859      	ldr	r1, [r3, #4]
 8001896:	460b      	mov	r3, r1
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	440b      	add	r3, r1
 800189c:	fbb0 f3f3 	udiv	r3, r0, r3
 80018a0:	3301      	adds	r3, #1
 80018a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80018aa:	e00f      	b.n	80018cc <HAL_I2C_Init+0x1dc>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1e58      	subs	r0, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	440b      	add	r3, r1
 80018ba:	0099      	lsls	r1, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	fbb0 f3f3 	udiv	r3, r0, r3
 80018c2:	3301      	adds	r3, #1
 80018c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	6809      	ldr	r1, [r1, #0]
 80018d0:	4313      	orrs	r3, r2
 80018d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69da      	ldr	r2, [r3, #28]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	430a      	orrs	r2, r1
 80018ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80018fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6911      	ldr	r1, [r2, #16]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	68d2      	ldr	r2, [r2, #12]
 8001906:	4311      	orrs	r1, r2
 8001908:	687a      	ldr	r2, [r7, #4]
 800190a:	6812      	ldr	r2, [r2, #0]
 800190c:	430b      	orrs	r3, r1
 800190e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	695a      	ldr	r2, [r3, #20]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f042 0201 	orr.w	r2, r2, #1
 800193a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2220      	movs	r2, #32
 8001946:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	000186a0 	.word	0x000186a0
 8001968:	001e847f 	.word	0x001e847f
 800196c:	003d08ff 	.word	0x003d08ff
 8001970:	431bde83 	.word	0x431bde83
 8001974:	10624dd3 	.word	0x10624dd3

08001978 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b088      	sub	sp, #32
 800197c:	af02      	add	r7, sp, #8
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	4608      	mov	r0, r1
 8001982:	4611      	mov	r1, r2
 8001984:	461a      	mov	r2, r3
 8001986:	4603      	mov	r3, r0
 8001988:	817b      	strh	r3, [r7, #10]
 800198a:	460b      	mov	r3, r1
 800198c:	813b      	strh	r3, [r7, #8]
 800198e:	4613      	mov	r3, r2
 8001990:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001992:	f7ff fbef 	bl	8001174 <HAL_GetTick>
 8001996:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	2b20      	cmp	r3, #32
 80019a2:	f040 80d9 	bne.w	8001b58 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	2319      	movs	r3, #25
 80019ac:	2201      	movs	r2, #1
 80019ae:	496d      	ldr	r1, [pc, #436]	@ (8001b64 <HAL_I2C_Mem_Write+0x1ec>)
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 f971 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80019bc:	2302      	movs	r3, #2
 80019be:	e0cc      	b.n	8001b5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80019c6:	2b01      	cmp	r3, #1
 80019c8:	d101      	bne.n	80019ce <HAL_I2C_Mem_Write+0x56>
 80019ca:	2302      	movs	r3, #2
 80019cc:	e0c5      	b.n	8001b5a <HAL_I2C_Mem_Write+0x1e2>
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	2201      	movs	r2, #1
 80019d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0301 	and.w	r3, r3, #1
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d007      	beq.n	80019f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f042 0201 	orr.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a02:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	2221      	movs	r2, #33	@ 0x21
 8001a08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2240      	movs	r2, #64	@ 0x40
 8001a10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6a3a      	ldr	r2, [r7, #32]
 8001a1e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001a24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	4a4d      	ldr	r2, [pc, #308]	@ (8001b68 <HAL_I2C_Mem_Write+0x1f0>)
 8001a34:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001a36:	88f8      	ldrh	r0, [r7, #6]
 8001a38:	893a      	ldrh	r2, [r7, #8]
 8001a3a:	8979      	ldrh	r1, [r7, #10]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	9301      	str	r3, [sp, #4]
 8001a40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a42:	9300      	str	r3, [sp, #0]
 8001a44:	4603      	mov	r3, r0
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 f890 	bl	8001b6c <I2C_RequestMemoryWrite>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d052      	beq.n	8001af8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e081      	b.n	8001b5a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001a5a:	68f8      	ldr	r0, [r7, #12]
 8001a5c:	f000 fa36 	bl	8001ecc <I2C_WaitOnTXEFlagUntilTimeout>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d00d      	beq.n	8001a82 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d107      	bne.n	8001a7e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001a7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e06b      	b.n	8001b5a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a86:	781a      	ldrb	r2, [r3, #0]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a92:	1c5a      	adds	r2, r3, #1
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	f003 0304 	and.w	r3, r3, #4
 8001abc:	2b04      	cmp	r3, #4
 8001abe:	d11b      	bne.n	8001af8 <HAL_I2C_Mem_Write+0x180>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d017      	beq.n	8001af8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001acc:	781a      	ldrb	r2, [r3, #0]
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad8:	1c5a      	adds	r2, r3, #1
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001ae2:	3b01      	subs	r3, #1
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3b01      	subs	r3, #1
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1aa      	bne.n	8001a56 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 fa29 	bl	8001f5c <I2C_WaitOnBTFFlagUntilTimeout>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d00d      	beq.n	8001b2c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b14:	2b04      	cmp	r3, #4
 8001b16:	d107      	bne.n	8001b28 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b26:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001b28:	2301      	movs	r3, #1
 8001b2a:	e016      	b.n	8001b5a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001b3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	2200      	movs	r2, #0
 8001b50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	e000      	b.n	8001b5a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001b58:	2302      	movs	r3, #2
  }
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3718      	adds	r7, #24
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	00100002 	.word	0x00100002
 8001b68:	ffff0000 	.word	0xffff0000

08001b6c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af02      	add	r7, sp, #8
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	4608      	mov	r0, r1
 8001b76:	4611      	mov	r1, r2
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	817b      	strh	r3, [r7, #10]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	813b      	strh	r3, [r7, #8]
 8001b82:	4613      	mov	r3, r2
 8001b84:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b94:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	9300      	str	r3, [sp, #0]
 8001b9a:	6a3b      	ldr	r3, [r7, #32]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001ba2:	68f8      	ldr	r0, [r7, #12]
 8001ba4:	f000 f878 	bl	8001c98 <I2C_WaitOnFlagUntilTimeout>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00d      	beq.n	8001bca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bb8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bbc:	d103      	bne.n	8001bc6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001bc4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e05f      	b.n	8001c8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bca:	897b      	ldrh	r3, [r7, #10]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	461a      	mov	r2, r3
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8001bd8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bdc:	6a3a      	ldr	r2, [r7, #32]
 8001bde:	492d      	ldr	r1, [pc, #180]	@ (8001c94 <I2C_RequestMemoryWrite+0x128>)
 8001be0:	68f8      	ldr	r0, [r7, #12]
 8001be2:	f000 f8d3 	bl	8001d8c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e04c      	b.n	8001c8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	617b      	str	r3, [r7, #20]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	617b      	str	r3, [r7, #20]
 8001c04:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c08:	6a39      	ldr	r1, [r7, #32]
 8001c0a:	68f8      	ldr	r0, [r7, #12]
 8001c0c:	f000 f95e 	bl	8001ecc <I2C_WaitOnTXEFlagUntilTimeout>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d00d      	beq.n	8001c32 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1a:	2b04      	cmp	r3, #4
 8001c1c:	d107      	bne.n	8001c2e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c2c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e02b      	b.n	8001c8a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d105      	bne.n	8001c44 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c38:	893b      	ldrh	r3, [r7, #8]
 8001c3a:	b2da      	uxtb	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	611a      	str	r2, [r3, #16]
 8001c42:	e021      	b.n	8001c88 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c44:	893b      	ldrh	r3, [r7, #8]
 8001c46:	0a1b      	lsrs	r3, r3, #8
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c54:	6a39      	ldr	r1, [r7, #32]
 8001c56:	68f8      	ldr	r0, [r7, #12]
 8001c58:	f000 f938 	bl	8001ecc <I2C_WaitOnTXEFlagUntilTimeout>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d00d      	beq.n	8001c7e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d107      	bne.n	8001c7a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001c78:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e005      	b.n	8001c8a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c7e:	893b      	ldrh	r3, [r7, #8]
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3718      	adds	r7, #24
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	00010002 	.word	0x00010002

08001c98 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	603b      	str	r3, [r7, #0]
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001ca8:	e048      	b.n	8001d3c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb0:	d044      	beq.n	8001d3c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cb2:	f7ff fa5f 	bl	8001174 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	683a      	ldr	r2, [r7, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d302      	bcc.n	8001cc8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d139      	bne.n	8001d3c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	0c1b      	lsrs	r3, r3, #16
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d10d      	bne.n	8001cee <I2C_WaitOnFlagUntilTimeout+0x56>
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	43da      	mvns	r2, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	bf0c      	ite	eq
 8001ce4:	2301      	moveq	r3, #1
 8001ce6:	2300      	movne	r3, #0
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	e00c      	b.n	8001d08 <I2C_WaitOnFlagUntilTimeout+0x70>
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	43da      	mvns	r2, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	4013      	ands	r3, r2
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	bf0c      	ite	eq
 8001d00:	2301      	moveq	r3, #1
 8001d02:	2300      	movne	r3, #0
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	461a      	mov	r2, r3
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	d116      	bne.n	8001d3c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2200      	movs	r2, #0
 8001d12:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d28:	f043 0220 	orr.w	r2, r3, #32
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e023      	b.n	8001d84 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001d3c:	68bb      	ldr	r3, [r7, #8]
 8001d3e:	0c1b      	lsrs	r3, r3, #16
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b01      	cmp	r3, #1
 8001d44:	d10d      	bne.n	8001d62 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	695b      	ldr	r3, [r3, #20]
 8001d4c:	43da      	mvns	r2, r3
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	4013      	ands	r3, r2
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	bf0c      	ite	eq
 8001d58:	2301      	moveq	r3, #1
 8001d5a:	2300      	movne	r3, #0
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	461a      	mov	r2, r3
 8001d60:	e00c      	b.n	8001d7c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	43da      	mvns	r2, r3
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	b29b      	uxth	r3, r3
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	bf0c      	ite	eq
 8001d74:	2301      	moveq	r3, #1
 8001d76:	2300      	movne	r3, #0
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	461a      	mov	r2, r3
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d093      	beq.n	8001caa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001d82:	2300      	movs	r3, #0
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	60f8      	str	r0, [r7, #12]
 8001d94:	60b9      	str	r1, [r7, #8]
 8001d96:	607a      	str	r2, [r7, #4]
 8001d98:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001d9a:	e071      	b.n	8001e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001daa:	d123      	bne.n	8001df4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001dba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001dc4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2220      	movs	r2, #32
 8001dd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de0:	f043 0204 	orr.w	r2, r3, #4
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e067      	b.n	8001ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001dfa:	d041      	beq.n	8001e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dfc:	f7ff f9ba 	bl	8001174 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d302      	bcc.n	8001e12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d136      	bne.n	8001e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001e12:	68bb      	ldr	r3, [r7, #8]
 8001e14:	0c1b      	lsrs	r3, r3, #16
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d10c      	bne.n	8001e36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	695b      	ldr	r3, [r3, #20]
 8001e22:	43da      	mvns	r2, r3
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	4013      	ands	r3, r2
 8001e28:	b29b      	uxth	r3, r3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	bf14      	ite	ne
 8001e2e:	2301      	movne	r3, #1
 8001e30:	2300      	moveq	r3, #0
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	e00b      	b.n	8001e4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	43da      	mvns	r2, r3
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	4013      	ands	r3, r2
 8001e42:	b29b      	uxth	r3, r3
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf14      	ite	ne
 8001e48:	2301      	movne	r3, #1
 8001e4a:	2300      	moveq	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d016      	beq.n	8001e80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2220      	movs	r2, #32
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e6c:	f043 0220 	orr.w	r2, r3, #32
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	2200      	movs	r2, #0
 8001e78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e021      	b.n	8001ec4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	0c1b      	lsrs	r3, r3, #16
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d10c      	bne.n	8001ea4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	43da      	mvns	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	4013      	ands	r3, r2
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf14      	ite	ne
 8001e9c:	2301      	movne	r3, #1
 8001e9e:	2300      	moveq	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	e00b      	b.n	8001ebc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	699b      	ldr	r3, [r3, #24]
 8001eaa:	43da      	mvns	r2, r3
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	b29b      	uxth	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	bf14      	ite	ne
 8001eb6:	2301      	movne	r3, #1
 8001eb8:	2300      	moveq	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f47f af6d 	bne.w	8001d9c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ed8:	e034      	b.n	8001f44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f886 	bl	8001fec <I2C_IsAcknowledgeFailed>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e034      	b.n	8001f54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef0:	d028      	beq.n	8001f44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ef2:	f7ff f93f 	bl	8001174 <HAL_GetTick>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	1ad3      	subs	r3, r2, r3
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d302      	bcc.n	8001f08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d11d      	bne.n	8001f44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f12:	2b80      	cmp	r3, #128	@ 0x80
 8001f14:	d016      	beq.n	8001f44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f30:	f043 0220 	orr.w	r2, r3, #32
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e007      	b.n	8001f54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f4e:	2b80      	cmp	r3, #128	@ 0x80
 8001f50:	d1c3      	bne.n	8001eda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3710      	adds	r7, #16
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}

08001f5c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b084      	sub	sp, #16
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001f68:	e034      	b.n	8001fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001f6a:	68f8      	ldr	r0, [r7, #12]
 8001f6c:	f000 f83e 	bl	8001fec <I2C_IsAcknowledgeFailed>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e034      	b.n	8001fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f80:	d028      	beq.n	8001fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f82:	f7ff f8f7 	bl	8001174 <HAL_GetTick>
 8001f86:	4602      	mov	r2, r0
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	1ad3      	subs	r3, r2, r3
 8001f8c:	68ba      	ldr	r2, [r7, #8]
 8001f8e:	429a      	cmp	r2, r3
 8001f90:	d302      	bcc.n	8001f98 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d11d      	bne.n	8001fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	695b      	ldr	r3, [r3, #20]
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	d016      	beq.n	8001fd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	2220      	movs	r2, #32
 8001fb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fc0:	f043 0220 	orr.w	r2, r3, #32
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e007      	b.n	8001fe4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	695b      	ldr	r3, [r3, #20]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b04      	cmp	r3, #4
 8001fe0:	d1c3      	bne.n	8001f6a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001fe2:	2300      	movs	r3, #0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	695b      	ldr	r3, [r3, #20]
 8001ffa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ffe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002002:	d11b      	bne.n	800203c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800200c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2220      	movs	r2, #32
 8002018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2200      	movs	r2, #0
 8002020:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002028:	f043 0204 	orr.w	r2, r3, #4
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002038:	2301      	movs	r3, #1
 800203a:	e000      	b.n	800203e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	370c      	adds	r7, #12
 8002042:	46bd      	mov	sp, r7
 8002044:	bc80      	pop	{r7}
 8002046:	4770      	bx	lr

08002048 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b086      	sub	sp, #24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e272      	b.n	8002540 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	f000 8087 	beq.w	8002176 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002068:	4b92      	ldr	r3, [pc, #584]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	f003 030c 	and.w	r3, r3, #12
 8002070:	2b04      	cmp	r3, #4
 8002072:	d00c      	beq.n	800208e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002074:	4b8f      	ldr	r3, [pc, #572]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 030c 	and.w	r3, r3, #12
 800207c:	2b08      	cmp	r3, #8
 800207e:	d112      	bne.n	80020a6 <HAL_RCC_OscConfig+0x5e>
 8002080:	4b8c      	ldr	r3, [pc, #560]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002088:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800208c:	d10b      	bne.n	80020a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800208e:	4b89      	ldr	r3, [pc, #548]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002096:	2b00      	cmp	r3, #0
 8002098:	d06c      	beq.n	8002174 <HAL_RCC_OscConfig+0x12c>
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d168      	bne.n	8002174 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e24c      	b.n	8002540 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80020ae:	d106      	bne.n	80020be <HAL_RCC_OscConfig+0x76>
 80020b0:	4b80      	ldr	r3, [pc, #512]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a7f      	ldr	r2, [pc, #508]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 80020b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020ba:	6013      	str	r3, [r2, #0]
 80020bc:	e02e      	b.n	800211c <HAL_RCC_OscConfig+0xd4>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10c      	bne.n	80020e0 <HAL_RCC_OscConfig+0x98>
 80020c6:	4b7b      	ldr	r3, [pc, #492]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a7a      	ldr	r2, [pc, #488]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020d0:	6013      	str	r3, [r2, #0]
 80020d2:	4b78      	ldr	r3, [pc, #480]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a77      	ldr	r2, [pc, #476]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 80020d8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020dc:	6013      	str	r3, [r2, #0]
 80020de:	e01d      	b.n	800211c <HAL_RCC_OscConfig+0xd4>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020e8:	d10c      	bne.n	8002104 <HAL_RCC_OscConfig+0xbc>
 80020ea:	4b72      	ldr	r3, [pc, #456]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a71      	ldr	r2, [pc, #452]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020f4:	6013      	str	r3, [r2, #0]
 80020f6:	4b6f      	ldr	r3, [pc, #444]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a6e      	ldr	r2, [pc, #440]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 80020fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002100:	6013      	str	r3, [r2, #0]
 8002102:	e00b      	b.n	800211c <HAL_RCC_OscConfig+0xd4>
 8002104:	4b6b      	ldr	r3, [pc, #428]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a6a      	ldr	r2, [pc, #424]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 800210a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800210e:	6013      	str	r3, [r2, #0]
 8002110:	4b68      	ldr	r3, [pc, #416]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a67      	ldr	r2, [pc, #412]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 8002116:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800211a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d013      	beq.n	800214c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002124:	f7ff f826 	bl	8001174 <HAL_GetTick>
 8002128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800212a:	e008      	b.n	800213e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800212c:	f7ff f822 	bl	8001174 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	2b64      	cmp	r3, #100	@ 0x64
 8002138:	d901      	bls.n	800213e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800213a:	2303      	movs	r3, #3
 800213c:	e200      	b.n	8002540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	4b5d      	ldr	r3, [pc, #372]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002146:	2b00      	cmp	r3, #0
 8002148:	d0f0      	beq.n	800212c <HAL_RCC_OscConfig+0xe4>
 800214a:	e014      	b.n	8002176 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7ff f812 	bl	8001174 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002154:	f7ff f80e 	bl	8001174 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b64      	cmp	r3, #100	@ 0x64
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e1ec      	b.n	8002540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002166:	4b53      	ldr	r3, [pc, #332]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x10c>
 8002172:	e000      	b.n	8002176 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d063      	beq.n	800224a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002182:	4b4c      	ldr	r3, [pc, #304]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f003 030c 	and.w	r3, r3, #12
 800218a:	2b00      	cmp	r3, #0
 800218c:	d00b      	beq.n	80021a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800218e:	4b49      	ldr	r3, [pc, #292]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	f003 030c 	and.w	r3, r3, #12
 8002196:	2b08      	cmp	r3, #8
 8002198:	d11c      	bne.n	80021d4 <HAL_RCC_OscConfig+0x18c>
 800219a:	4b46      	ldr	r3, [pc, #280]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d116      	bne.n	80021d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a6:	4b43      	ldr	r3, [pc, #268]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0302 	and.w	r3, r3, #2
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d005      	beq.n	80021be <HAL_RCC_OscConfig+0x176>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	691b      	ldr	r3, [r3, #16]
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d001      	beq.n	80021be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e1c0      	b.n	8002540 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021be:	4b3d      	ldr	r3, [pc, #244]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4939      	ldr	r1, [pc, #228]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 80021ce:	4313      	orrs	r3, r2
 80021d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021d2:	e03a      	b.n	800224a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	691b      	ldr	r3, [r3, #16]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d020      	beq.n	800221e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021dc:	4b36      	ldr	r3, [pc, #216]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 80021de:	2201      	movs	r2, #1
 80021e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e2:	f7fe ffc7 	bl	8001174 <HAL_GetTick>
 80021e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e8:	e008      	b.n	80021fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021ea:	f7fe ffc3 	bl	8001174 <HAL_GetTick>
 80021ee:	4602      	mov	r2, r0
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	2b02      	cmp	r3, #2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e1a1      	b.n	8002540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021fc:	4b2d      	ldr	r3, [pc, #180]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d0f0      	beq.n	80021ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002208:	4b2a      	ldr	r3, [pc, #168]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	695b      	ldr	r3, [r3, #20]
 8002214:	00db      	lsls	r3, r3, #3
 8002216:	4927      	ldr	r1, [pc, #156]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 8002218:	4313      	orrs	r3, r2
 800221a:	600b      	str	r3, [r1, #0]
 800221c:	e015      	b.n	800224a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800221e:	4b26      	ldr	r3, [pc, #152]	@ (80022b8 <HAL_RCC_OscConfig+0x270>)
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002224:	f7fe ffa6 	bl	8001174 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800222a:	e008      	b.n	800223e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222c:	f7fe ffa2 	bl	8001174 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	2b02      	cmp	r3, #2
 8002238:	d901      	bls.n	800223e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800223a:	2303      	movs	r3, #3
 800223c:	e180      	b.n	8002540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800223e:	4b1d      	ldr	r3, [pc, #116]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	2b00      	cmp	r3, #0
 8002248:	d1f0      	bne.n	800222c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0308 	and.w	r3, r3, #8
 8002252:	2b00      	cmp	r3, #0
 8002254:	d03a      	beq.n	80022cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	699b      	ldr	r3, [r3, #24]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d019      	beq.n	8002292 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800225e:	4b17      	ldr	r3, [pc, #92]	@ (80022bc <HAL_RCC_OscConfig+0x274>)
 8002260:	2201      	movs	r2, #1
 8002262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002264:	f7fe ff86 	bl	8001174 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800226c:	f7fe ff82 	bl	8001174 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e160      	b.n	8002540 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800227e:	4b0d      	ldr	r3, [pc, #52]	@ (80022b4 <HAL_RCC_OscConfig+0x26c>)
 8002280:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800228a:	2001      	movs	r0, #1
 800228c:	f000 faba 	bl	8002804 <RCC_Delay>
 8002290:	e01c      	b.n	80022cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002292:	4b0a      	ldr	r3, [pc, #40]	@ (80022bc <HAL_RCC_OscConfig+0x274>)
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002298:	f7fe ff6c 	bl	8001174 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800229e:	e00f      	b.n	80022c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022a0:	f7fe ff68 	bl	8001174 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d908      	bls.n	80022c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e146      	b.n	8002540 <HAL_RCC_OscConfig+0x4f8>
 80022b2:	bf00      	nop
 80022b4:	40021000 	.word	0x40021000
 80022b8:	42420000 	.word	0x42420000
 80022bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c0:	4b92      	ldr	r3, [pc, #584]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 80022c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c4:	f003 0302 	and.w	r3, r3, #2
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d1e9      	bne.n	80022a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0304 	and.w	r3, r3, #4
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80a6 	beq.w	8002426 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022da:	2300      	movs	r3, #0
 80022dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022de:	4b8b      	ldr	r3, [pc, #556]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 80022e0:	69db      	ldr	r3, [r3, #28]
 80022e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10d      	bne.n	8002306 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022ea:	4b88      	ldr	r3, [pc, #544]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	4a87      	ldr	r2, [pc, #540]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022f4:	61d3      	str	r3, [r2, #28]
 80022f6:	4b85      	ldr	r3, [pc, #532]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	69db      	ldr	r3, [r3, #28]
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002302:	2301      	movs	r3, #1
 8002304:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002306:	4b82      	ldr	r3, [pc, #520]	@ (8002510 <HAL_RCC_OscConfig+0x4c8>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d118      	bne.n	8002344 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002312:	4b7f      	ldr	r3, [pc, #508]	@ (8002510 <HAL_RCC_OscConfig+0x4c8>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a7e      	ldr	r2, [pc, #504]	@ (8002510 <HAL_RCC_OscConfig+0x4c8>)
 8002318:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800231c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231e:	f7fe ff29 	bl	8001174 <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002326:	f7fe ff25 	bl	8001174 <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b64      	cmp	r3, #100	@ 0x64
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e103      	b.n	8002540 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002338:	4b75      	ldr	r3, [pc, #468]	@ (8002510 <HAL_RCC_OscConfig+0x4c8>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d106      	bne.n	800235a <HAL_RCC_OscConfig+0x312>
 800234c:	4b6f      	ldr	r3, [pc, #444]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	4a6e      	ldr	r2, [pc, #440]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	6213      	str	r3, [r2, #32]
 8002358:	e02d      	b.n	80023b6 <HAL_RCC_OscConfig+0x36e>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d10c      	bne.n	800237c <HAL_RCC_OscConfig+0x334>
 8002362:	4b6a      	ldr	r3, [pc, #424]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 8002364:	6a1b      	ldr	r3, [r3, #32]
 8002366:	4a69      	ldr	r2, [pc, #420]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 8002368:	f023 0301 	bic.w	r3, r3, #1
 800236c:	6213      	str	r3, [r2, #32]
 800236e:	4b67      	ldr	r3, [pc, #412]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	4a66      	ldr	r2, [pc, #408]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 8002374:	f023 0304 	bic.w	r3, r3, #4
 8002378:	6213      	str	r3, [r2, #32]
 800237a:	e01c      	b.n	80023b6 <HAL_RCC_OscConfig+0x36e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	2b05      	cmp	r3, #5
 8002382:	d10c      	bne.n	800239e <HAL_RCC_OscConfig+0x356>
 8002384:	4b61      	ldr	r3, [pc, #388]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 8002386:	6a1b      	ldr	r3, [r3, #32]
 8002388:	4a60      	ldr	r2, [pc, #384]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 800238a:	f043 0304 	orr.w	r3, r3, #4
 800238e:	6213      	str	r3, [r2, #32]
 8002390:	4b5e      	ldr	r3, [pc, #376]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	4a5d      	ldr	r2, [pc, #372]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	6213      	str	r3, [r2, #32]
 800239c:	e00b      	b.n	80023b6 <HAL_RCC_OscConfig+0x36e>
 800239e:	4b5b      	ldr	r3, [pc, #364]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	6a1b      	ldr	r3, [r3, #32]
 80023a2:	4a5a      	ldr	r2, [pc, #360]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	f023 0301 	bic.w	r3, r3, #1
 80023a8:	6213      	str	r3, [r2, #32]
 80023aa:	4b58      	ldr	r3, [pc, #352]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	4a57      	ldr	r2, [pc, #348]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 80023b0:	f023 0304 	bic.w	r3, r3, #4
 80023b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d015      	beq.n	80023ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023be:	f7fe fed9 	bl	8001174 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023c4:	e00a      	b.n	80023dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c6:	f7fe fed5 	bl	8001174 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e0b1      	b.n	8002540 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023dc:	4b4b      	ldr	r3, [pc, #300]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0ee      	beq.n	80023c6 <HAL_RCC_OscConfig+0x37e>
 80023e8:	e014      	b.n	8002414 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ea:	f7fe fec3 	bl	8001174 <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023f0:	e00a      	b.n	8002408 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023f2:	f7fe febf 	bl	8001174 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002400:	4293      	cmp	r3, r2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e09b      	b.n	8002540 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002408:	4b40      	ldr	r3, [pc, #256]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1ee      	bne.n	80023f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002414:	7dfb      	ldrb	r3, [r7, #23]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d105      	bne.n	8002426 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800241a:	4b3c      	ldr	r3, [pc, #240]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 800241c:	69db      	ldr	r3, [r3, #28]
 800241e:	4a3b      	ldr	r2, [pc, #236]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 8002420:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002424:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69db      	ldr	r3, [r3, #28]
 800242a:	2b00      	cmp	r3, #0
 800242c:	f000 8087 	beq.w	800253e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002430:	4b36      	ldr	r3, [pc, #216]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f003 030c 	and.w	r3, r3, #12
 8002438:	2b08      	cmp	r3, #8
 800243a:	d061      	beq.n	8002500 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	69db      	ldr	r3, [r3, #28]
 8002440:	2b02      	cmp	r3, #2
 8002442:	d146      	bne.n	80024d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002444:	4b33      	ldr	r3, [pc, #204]	@ (8002514 <HAL_RCC_OscConfig+0x4cc>)
 8002446:	2200      	movs	r2, #0
 8002448:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800244a:	f7fe fe93 	bl	8001174 <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002450:	e008      	b.n	8002464 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002452:	f7fe fe8f 	bl	8001174 <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e06d      	b.n	8002540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002464:	4b29      	ldr	r3, [pc, #164]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d1f0      	bne.n	8002452 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6a1b      	ldr	r3, [r3, #32]
 8002474:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002478:	d108      	bne.n	800248c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800247a:	4b24      	ldr	r3, [pc, #144]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	4921      	ldr	r1, [pc, #132]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 8002488:	4313      	orrs	r3, r2
 800248a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800248c:	4b1f      	ldr	r3, [pc, #124]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a19      	ldr	r1, [r3, #32]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800249c:	430b      	orrs	r3, r1
 800249e:	491b      	ldr	r1, [pc, #108]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002514 <HAL_RCC_OscConfig+0x4cc>)
 80024a6:	2201      	movs	r2, #1
 80024a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7fe fe63 	bl	8001174 <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b2:	f7fe fe5f 	bl	8001174 <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e03d      	b.n	8002540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80024c4:	4b11      	ldr	r3, [pc, #68]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d0f0      	beq.n	80024b2 <HAL_RCC_OscConfig+0x46a>
 80024d0:	e035      	b.n	800253e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024d2:	4b10      	ldr	r3, [pc, #64]	@ (8002514 <HAL_RCC_OscConfig+0x4cc>)
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7fe fe4c 	bl	8001174 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024e0:	f7fe fe48 	bl	8001174 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e026      	b.n	8002540 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_RCC_OscConfig+0x4c4>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x498>
 80024fe:	e01e      	b.n	800253e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	2b01      	cmp	r3, #1
 8002506:	d107      	bne.n	8002518 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e019      	b.n	8002540 <HAL_RCC_OscConfig+0x4f8>
 800250c:	40021000 	.word	0x40021000
 8002510:	40007000 	.word	0x40007000
 8002514:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002518:	4b0b      	ldr	r3, [pc, #44]	@ (8002548 <HAL_RCC_OscConfig+0x500>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6a1b      	ldr	r3, [r3, #32]
 8002528:	429a      	cmp	r2, r3
 800252a:	d106      	bne.n	800253a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002536:	429a      	cmp	r2, r3
 8002538:	d001      	beq.n	800253e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e000      	b.n	8002540 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	40021000 	.word	0x40021000

0800254c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2b00      	cmp	r3, #0
 800255a:	d101      	bne.n	8002560 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e0d0      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002560:	4b6a      	ldr	r3, [pc, #424]	@ (800270c <HAL_RCC_ClockConfig+0x1c0>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	683a      	ldr	r2, [r7, #0]
 800256a:	429a      	cmp	r2, r3
 800256c:	d910      	bls.n	8002590 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256e:	4b67      	ldr	r3, [pc, #412]	@ (800270c <HAL_RCC_ClockConfig+0x1c0>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f023 0207 	bic.w	r2, r3, #7
 8002576:	4965      	ldr	r1, [pc, #404]	@ (800270c <HAL_RCC_ClockConfig+0x1c0>)
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	4313      	orrs	r3, r2
 800257c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b63      	ldr	r3, [pc, #396]	@ (800270c <HAL_RCC_ClockConfig+0x1c0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0b8      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d020      	beq.n	80025de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d005      	beq.n	80025b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a8:	4b59      	ldr	r3, [pc, #356]	@ (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	4a58      	ldr	r2, [pc, #352]	@ (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80025b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0308 	and.w	r3, r3, #8
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d005      	beq.n	80025cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80025c0:	4b53      	ldr	r3, [pc, #332]	@ (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	4a52      	ldr	r2, [pc, #328]	@ (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025c6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80025ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025cc:	4b50      	ldr	r3, [pc, #320]	@ (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	494d      	ldr	r1, [pc, #308]	@ (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d040      	beq.n	800266c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d107      	bne.n	8002602 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025f2:	4b47      	ldr	r3, [pc, #284]	@ (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d115      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	e07f      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d107      	bne.n	800261a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260a:	4b41      	ldr	r3, [pc, #260]	@ (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d109      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e073      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800261a:	4b3d      	ldr	r3, [pc, #244]	@ (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e06b      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800262a:	4b39      	ldr	r3, [pc, #228]	@ (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	f023 0203 	bic.w	r2, r3, #3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	4936      	ldr	r1, [pc, #216]	@ (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800263c:	f7fe fd9a 	bl	8001174 <HAL_GetTick>
 8002640:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002642:	e00a      	b.n	800265a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002644:	f7fe fd96 	bl	8001174 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002652:	4293      	cmp	r3, r2
 8002654:	d901      	bls.n	800265a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e053      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800265a:	4b2d      	ldr	r3, [pc, #180]	@ (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f003 020c 	and.w	r2, r3, #12
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	429a      	cmp	r2, r3
 800266a:	d1eb      	bne.n	8002644 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800266c:	4b27      	ldr	r3, [pc, #156]	@ (800270c <HAL_RCC_ClockConfig+0x1c0>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0307 	and.w	r3, r3, #7
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d210      	bcs.n	800269c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800267a:	4b24      	ldr	r3, [pc, #144]	@ (800270c <HAL_RCC_ClockConfig+0x1c0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 0207 	bic.w	r2, r3, #7
 8002682:	4922      	ldr	r1, [pc, #136]	@ (800270c <HAL_RCC_ClockConfig+0x1c0>)
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	4313      	orrs	r3, r2
 8002688:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268a:	4b20      	ldr	r3, [pc, #128]	@ (800270c <HAL_RCC_ClockConfig+0x1c0>)
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	429a      	cmp	r2, r3
 8002696:	d001      	beq.n	800269c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e032      	b.n	8002702 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d008      	beq.n	80026ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026a8:	4b19      	ldr	r3, [pc, #100]	@ (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	4916      	ldr	r1, [pc, #88]	@ (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f003 0308 	and.w	r3, r3, #8
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d009      	beq.n	80026da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80026c6:	4b12      	ldr	r3, [pc, #72]	@ (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	00db      	lsls	r3, r3, #3
 80026d4:	490e      	ldr	r1, [pc, #56]	@ (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026da:	f000 f821 	bl	8002720 <HAL_RCC_GetSysClockFreq>
 80026de:	4602      	mov	r2, r0
 80026e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002710 <HAL_RCC_ClockConfig+0x1c4>)
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	091b      	lsrs	r3, r3, #4
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	490a      	ldr	r1, [pc, #40]	@ (8002714 <HAL_RCC_ClockConfig+0x1c8>)
 80026ec:	5ccb      	ldrb	r3, [r1, r3]
 80026ee:	fa22 f303 	lsr.w	r3, r2, r3
 80026f2:	4a09      	ldr	r2, [pc, #36]	@ (8002718 <HAL_RCC_ClockConfig+0x1cc>)
 80026f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026f6:	4b09      	ldr	r3, [pc, #36]	@ (800271c <HAL_RCC_ClockConfig+0x1d0>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fe fcf8 	bl	80010f0 <HAL_InitTick>

  return HAL_OK;
 8002700:	2300      	movs	r3, #0
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
 800270a:	bf00      	nop
 800270c:	40022000 	.word	0x40022000
 8002710:	40021000 	.word	0x40021000
 8002714:	08006ff0 	.word	0x08006ff0
 8002718:	20000008 	.word	0x20000008
 800271c:	2000000c 	.word	0x2000000c

08002720 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002720:	b480      	push	{r7}
 8002722:	b087      	sub	sp, #28
 8002724:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]
 800272a:	2300      	movs	r3, #0
 800272c:	60bb      	str	r3, [r7, #8]
 800272e:	2300      	movs	r3, #0
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	2300      	movs	r3, #0
 8002734:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800273a:	4b1e      	ldr	r3, [pc, #120]	@ (80027b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 030c 	and.w	r3, r3, #12
 8002746:	2b04      	cmp	r3, #4
 8002748:	d002      	beq.n	8002750 <HAL_RCC_GetSysClockFreq+0x30>
 800274a:	2b08      	cmp	r3, #8
 800274c:	d003      	beq.n	8002756 <HAL_RCC_GetSysClockFreq+0x36>
 800274e:	e027      	b.n	80027a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002750:	4b19      	ldr	r3, [pc, #100]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002752:	613b      	str	r3, [r7, #16]
      break;
 8002754:	e027      	b.n	80027a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	0c9b      	lsrs	r3, r3, #18
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	4a17      	ldr	r2, [pc, #92]	@ (80027bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002760:	5cd3      	ldrb	r3, [r2, r3]
 8002762:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d010      	beq.n	8002790 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800276e:	4b11      	ldr	r3, [pc, #68]	@ (80027b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	0c5b      	lsrs	r3, r3, #17
 8002774:	f003 0301 	and.w	r3, r3, #1
 8002778:	4a11      	ldr	r2, [pc, #68]	@ (80027c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800277a:	5cd3      	ldrb	r3, [r2, r3]
 800277c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	4a0d      	ldr	r2, [pc, #52]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002782:	fb03 f202 	mul.w	r2, r3, r2
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	fbb2 f3f3 	udiv	r3, r2, r3
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	e004      	b.n	800279a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a0c      	ldr	r2, [pc, #48]	@ (80027c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002794:	fb02 f303 	mul.w	r3, r2, r3
 8002798:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	613b      	str	r3, [r7, #16]
      break;
 800279e:	e002      	b.n	80027a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027a0:	4b05      	ldr	r3, [pc, #20]	@ (80027b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80027a2:	613b      	str	r3, [r7, #16]
      break;
 80027a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027a6:	693b      	ldr	r3, [r7, #16]
}
 80027a8:	4618      	mov	r0, r3
 80027aa:	371c      	adds	r7, #28
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bc80      	pop	{r7}
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	40021000 	.word	0x40021000
 80027b8:	007a1200 	.word	0x007a1200
 80027bc:	08007008 	.word	0x08007008
 80027c0:	08007018 	.word	0x08007018
 80027c4:	003d0900 	.word	0x003d0900

080027c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027cc:	4b02      	ldr	r3, [pc, #8]	@ (80027d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80027ce:	681b      	ldr	r3, [r3, #0]
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr
 80027d8:	20000008 	.word	0x20000008

080027dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80027e0:	f7ff fff2 	bl	80027c8 <HAL_RCC_GetHCLKFreq>
 80027e4:	4602      	mov	r2, r0
 80027e6:	4b05      	ldr	r3, [pc, #20]	@ (80027fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	0a1b      	lsrs	r3, r3, #8
 80027ec:	f003 0307 	and.w	r3, r3, #7
 80027f0:	4903      	ldr	r1, [pc, #12]	@ (8002800 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027f2:	5ccb      	ldrb	r3, [r1, r3]
 80027f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	40021000 	.word	0x40021000
 8002800:	08007000 	.word	0x08007000

08002804 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800280c:	4b0a      	ldr	r3, [pc, #40]	@ (8002838 <RCC_Delay+0x34>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a0a      	ldr	r2, [pc, #40]	@ (800283c <RCC_Delay+0x38>)
 8002812:	fba2 2303 	umull	r2, r3, r2, r3
 8002816:	0a5b      	lsrs	r3, r3, #9
 8002818:	687a      	ldr	r2, [r7, #4]
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002820:	bf00      	nop
  }
  while (Delay --);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	1e5a      	subs	r2, r3, #1
 8002826:	60fa      	str	r2, [r7, #12]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1f9      	bne.n	8002820 <RCC_Delay+0x1c>
}
 800282c:	bf00      	nop
 800282e:	bf00      	nop
 8002830:	3714      	adds	r7, #20
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr
 8002838:	20000008 	.word	0x20000008
 800283c:	10624dd3 	.word	0x10624dd3

08002840 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002840:	b480      	push	{r7}
 8002842:	b085      	sub	sp, #20
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800284a:	2300      	movs	r3, #0
 800284c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800284e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002852:	2b84      	cmp	r3, #132	@ 0x84
 8002854:	d005      	beq.n	8002862 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002856:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	4413      	add	r3, r2
 800285e:	3303      	adds	r3, #3
 8002860:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002862:	68fb      	ldr	r3, [r7, #12]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002874:	f3ef 8305 	mrs	r3, IPSR
 8002878:	607b      	str	r3, [r7, #4]
  return(result);
 800287a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800287c:	2b00      	cmp	r3, #0
 800287e:	bf14      	ite	ne
 8002880:	2301      	movne	r3, #1
 8002882:	2300      	moveq	r3, #0
 8002884:	b2db      	uxtb	r3, r3
}
 8002886:	4618      	mov	r0, r3
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002894:	f001 fa1a 	bl	8003ccc <vTaskStartScheduler>
  
  return osOK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	bd80      	pop	{r7, pc}

0800289e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800289e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028a0:	b089      	sub	sp, #36	@ 0x24
 80028a2:	af04      	add	r7, sp, #16
 80028a4:	6078      	str	r0, [r7, #4]
 80028a6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	695b      	ldr	r3, [r3, #20]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d020      	beq.n	80028f2 <osThreadCreate+0x54>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	699b      	ldr	r3, [r3, #24]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d01c      	beq.n	80028f2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685c      	ldr	r4, [r3, #4]
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	691e      	ldr	r6, [r3, #16]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7ff ffb8 	bl	8002840 <makeFreeRtosPriority>
 80028d0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	695b      	ldr	r3, [r3, #20]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028da:	9202      	str	r2, [sp, #8]
 80028dc:	9301      	str	r3, [sp, #4]
 80028de:	9100      	str	r1, [sp, #0]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	4632      	mov	r2, r6
 80028e4:	4629      	mov	r1, r5
 80028e6:	4620      	mov	r0, r4
 80028e8:	f001 f82c 	bl	8003944 <xTaskCreateStatic>
 80028ec:	4603      	mov	r3, r0
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	e01c      	b.n	800292c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685c      	ldr	r4, [r3, #4]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80028fe:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ff9a 	bl	8002840 <makeFreeRtosPriority>
 800290c:	4602      	mov	r2, r0
 800290e:	f107 030c 	add.w	r3, r7, #12
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	9200      	str	r2, [sp, #0]
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	4632      	mov	r2, r6
 800291a:	4629      	mov	r1, r5
 800291c:	4620      	mov	r0, r4
 800291e:	f001 f870 	bl	8003a02 <xTaskCreate>
 8002922:	4603      	mov	r3, r0
 8002924:	2b01      	cmp	r3, #1
 8002926:	d001      	beq.n	800292c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002928:	2300      	movs	r3, #0
 800292a:	e000      	b.n	800292e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800292c:	68fb      	ldr	r3, [r7, #12]
}
 800292e:	4618      	mov	r0, r3
 8002930:	3714      	adds	r7, #20
 8002932:	46bd      	mov	sp, r7
 8002934:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002936 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	b084      	sub	sp, #16
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d001      	beq.n	800294c <osDelay+0x16>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	e000      	b.n	800294e <osDelay+0x18>
 800294c:	2301      	movs	r3, #1
 800294e:	4618      	mov	r0, r3
 8002950:	f001 f986 	bl	8003c60 <vTaskDelay>
  
  return osOK;
 8002954:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b086      	sub	sp, #24
 8002964:	af02      	add	r7, sp, #8
 8002966:	60f8      	str	r0, [r7, #12]
 8002968:	460b      	mov	r3, r1
 800296a:	607a      	str	r2, [r7, #4]
 800296c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d013      	beq.n	800299e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8002976:	7afb      	ldrb	r3, [r7, #11]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d101      	bne.n	8002980 <osTimerCreate+0x20>
 800297c:	2101      	movs	r1, #1
 800297e:	e000      	b.n	8002982 <osTimerCreate+0x22>
 8002980:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800298a:	9201      	str	r2, [sp, #4]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	460a      	mov	r2, r1
 8002992:	2101      	movs	r1, #1
 8002994:	480b      	ldr	r0, [pc, #44]	@ (80029c4 <osTimerCreate+0x64>)
 8002996:	f001 ff62 	bl	800485e <xTimerCreateStatic>
 800299a:	4603      	mov	r3, r0
 800299c:	e00e      	b.n	80029bc <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800299e:	7afb      	ldrb	r3, [r7, #11]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d101      	bne.n	80029a8 <osTimerCreate+0x48>
 80029a4:	2201      	movs	r2, #1
 80029a6:	e000      	b.n	80029aa <osTimerCreate+0x4a>
 80029a8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2101      	movs	r1, #1
 80029b4:	4803      	ldr	r0, [pc, #12]	@ (80029c4 <osTimerCreate+0x64>)
 80029b6:	f001 ff31 	bl	800481c <xTimerCreate>
 80029ba:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3710      	adds	r7, #16
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	08005818 	.word	0x08005818

080029c8 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af02      	add	r7, sp, #8
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80029d2:	2300      	movs	r3, #0
 80029d4:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80029d6:	2300      	movs	r3, #0
 80029d8:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d101      	bne.n	80029e8 <osTimerStart+0x20>
    ticks = 1;
 80029e4:	2301      	movs	r3, #1
 80029e6:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 80029e8:	f7ff ff41 	bl	800286e <inHandlerMode>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d01a      	beq.n	8002a28 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80029f2:	f107 030c 	add.w	r3, r7, #12
 80029f6:	2200      	movs	r2, #0
 80029f8:	9200      	str	r2, [sp, #0]
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	2109      	movs	r1, #9
 80029fe:	6878      	ldr	r0, [r7, #4]
 8002a00:	f001 ffa0 	bl	8004944 <xTimerGenericCommand>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d002      	beq.n	8002a10 <osTimerStart+0x48>
    {
      result = osErrorOS;
 8002a0a:	23ff      	movs	r3, #255	@ 0xff
 8002a0c:	617b      	str	r3, [r7, #20]
 8002a0e:	e018      	b.n	8002a42 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d015      	beq.n	8002a42 <osTimerStart+0x7a>
 8002a16:	4b0d      	ldr	r3, [pc, #52]	@ (8002a4c <osTimerStart+0x84>)
 8002a18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	f3bf 8f6f 	isb	sy
 8002a26:	e00c      	b.n	8002a42 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8002a28:	2300      	movs	r3, #0
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	693a      	ldr	r2, [r7, #16]
 8002a30:	2104      	movs	r1, #4
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f001 ff86 	bl	8004944 <xTimerGenericCommand>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d001      	beq.n	8002a42 <osTimerStart+0x7a>
      result = osErrorOS;
 8002a3e:	23ff      	movs	r3, #255	@ 0xff
 8002a40:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8002a42:	697b      	ldr	r3, [r7, #20]
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	e000ed04 	.word	0xe000ed04

08002a50 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af02      	add	r7, sp, #8
 8002a56:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8002a60:	f7ff ff05 	bl	800286e <inHandlerMode>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d019      	beq.n	8002a9e <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8002a6a:	f107 0308 	add.w	r3, r7, #8
 8002a6e:	2200      	movs	r2, #0
 8002a70:	9200      	str	r2, [sp, #0]
 8002a72:	2200      	movs	r2, #0
 8002a74:	2108      	movs	r1, #8
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f001 ff64 	bl	8004944 <xTimerGenericCommand>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d001      	beq.n	8002a86 <osTimerStop+0x36>
      return osErrorOS;
 8002a82:	23ff      	movs	r3, #255	@ 0xff
 8002a84:	e019      	b.n	8002aba <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d015      	beq.n	8002ab8 <osTimerStop+0x68>
 8002a8c:	4b0d      	ldr	r3, [pc, #52]	@ (8002ac4 <osTimerStop+0x74>)
 8002a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	f3bf 8f6f 	isb	sy
 8002a9c:	e00c      	b.n	8002ab8 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	9300      	str	r3, [sp, #0]
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	2103      	movs	r1, #3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f001 ff4b 	bl	8004944 <xTimerGenericCommand>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d001      	beq.n	8002ab8 <osTimerStop+0x68>
      result = osErrorOS;
 8002ab4:	23ff      	movs	r3, #255	@ 0xff
 8002ab6:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	e000ed04 	.word	0xe000ed04

08002ac8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002ac8:	b590      	push	{r4, r7, lr}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af02      	add	r7, sp, #8
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d011      	beq.n	8002afe <osMessageCreate+0x36>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00d      	beq.n	8002afe <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6818      	ldr	r0, [r3, #0]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6859      	ldr	r1, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	2400      	movs	r4, #0
 8002af4:	9400      	str	r4, [sp, #0]
 8002af6:	f000 f9dd 	bl	8002eb4 <xQueueGenericCreateStatic>
 8002afa:	4603      	mov	r3, r0
 8002afc:	e008      	b.n	8002b10 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6818      	ldr	r0, [r3, #0]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	4619      	mov	r1, r3
 8002b0a:	f000 fa4f 	bl	8002fac <xQueueGenericCreate>
 8002b0e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd90      	pop	{r4, r7, pc}

08002b18 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	60f8      	str	r0, [r7, #12]
 8002b20:	60b9      	str	r1, [r7, #8]
 8002b22:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002b24:	2300      	movs	r3, #0
 8002b26:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <osMessagePut+0x1e>
    ticks = 1;
 8002b32:	2301      	movs	r3, #1
 8002b34:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8002b36:	f7ff fe9a 	bl	800286e <inHandlerMode>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d018      	beq.n	8002b72 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002b40:	f107 0210 	add.w	r2, r7, #16
 8002b44:	f107 0108 	add.w	r1, r7, #8
 8002b48:	2300      	movs	r3, #0
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 fb8e 	bl	800326c <xQueueGenericSendFromISR>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d001      	beq.n	8002b5a <osMessagePut+0x42>
      return osErrorOS;
 8002b56:	23ff      	movs	r3, #255	@ 0xff
 8002b58:	e018      	b.n	8002b8c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d014      	beq.n	8002b8a <osMessagePut+0x72>
 8002b60:	4b0c      	ldr	r3, [pc, #48]	@ (8002b94 <osMessagePut+0x7c>)
 8002b62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b66:	601a      	str	r2, [r3, #0]
 8002b68:	f3bf 8f4f 	dsb	sy
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	e00b      	b.n	8002b8a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002b72:	f107 0108 	add.w	r1, r7, #8
 8002b76:	2300      	movs	r3, #0
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	68f8      	ldr	r0, [r7, #12]
 8002b7c:	f000 fa74 	bl	8003068 <xQueueGenericSend>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b01      	cmp	r3, #1
 8002b84:	d001      	beq.n	8002b8a <osMessagePut+0x72>
      return osErrorOS;
 8002b86:	23ff      	movs	r3, #255	@ 0xff
 8002b88:	e000      	b.n	8002b8c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3718      	adds	r7, #24
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	e000ed04 	.word	0xe000ed04

08002b98 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b08b      	sub	sp, #44	@ 0x2c
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	60f8      	str	r0, [r7, #12]
 8002ba0:	60b9      	str	r1, [r7, #8]
 8002ba2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10a      	bne.n	8002bc8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8002bb2:	2380      	movs	r3, #128	@ 0x80
 8002bb4:	617b      	str	r3, [r7, #20]
    return event;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	461c      	mov	r4, r3
 8002bba:	f107 0314 	add.w	r3, r7, #20
 8002bbe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002bc2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002bc6:	e054      	b.n	8002c72 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd6:	d103      	bne.n	8002be0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8002bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bde:	e009      	b.n	8002bf4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d006      	beq.n	8002bf4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 8002bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d101      	bne.n	8002bf4 <osMessageGet+0x5c>
      ticks = 1;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8002bf4:	f7ff fe3b 	bl	800286e <inHandlerMode>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d01c      	beq.n	8002c38 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002bfe:	f107 0220 	add.w	r2, r7, #32
 8002c02:	f107 0314 	add.w	r3, r7, #20
 8002c06:	3304      	adds	r3, #4
 8002c08:	4619      	mov	r1, r3
 8002c0a:	68b8      	ldr	r0, [r7, #8]
 8002c0c:	f000 fcac 	bl	8003568 <xQueueReceiveFromISR>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d102      	bne.n	8002c1c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8002c16:	2310      	movs	r3, #16
 8002c18:	617b      	str	r3, [r7, #20]
 8002c1a:	e001      	b.n	8002c20 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002c20:	6a3b      	ldr	r3, [r7, #32]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d01d      	beq.n	8002c62 <osMessageGet+0xca>
 8002c26:	4b15      	ldr	r3, [pc, #84]	@ (8002c7c <osMessageGet+0xe4>)
 8002c28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	f3bf 8f4f 	dsb	sy
 8002c32:	f3bf 8f6f 	isb	sy
 8002c36:	e014      	b.n	8002c62 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002c38:	f107 0314 	add.w	r3, r7, #20
 8002c3c:	3304      	adds	r3, #4
 8002c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c40:	4619      	mov	r1, r3
 8002c42:	68b8      	ldr	r0, [r7, #8]
 8002c44:	f000 fbae 	bl	80033a4 <xQueueReceive>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d102      	bne.n	8002c54 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8002c4e:	2310      	movs	r3, #16
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	e006      	b.n	8002c62 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d101      	bne.n	8002c5e <osMessageGet+0xc6>
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	e000      	b.n	8002c60 <osMessageGet+0xc8>
 8002c5e:	2340      	movs	r3, #64	@ 0x40
 8002c60:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	461c      	mov	r4, r3
 8002c66:	f107 0314 	add.w	r3, r7, #20
 8002c6a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c6e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002c72:	68f8      	ldr	r0, [r7, #12]
 8002c74:	372c      	adds	r7, #44	@ 0x2c
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd90      	pop	{r4, r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	e000ed04 	.word	0xe000ed04

08002c80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f103 0208 	add.w	r2, r3, #8
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f04f 32ff 	mov.w	r2, #4294967295
 8002c98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f103 0208 	add.w	r2, r3, #8
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f103 0208 	add.w	r2, r3, #8
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr

08002cbe <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002cbe:	b480      	push	{r7}
 8002cc0:	b083      	sub	sp, #12
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	2200      	movs	r2, #0
 8002cca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bc80      	pop	{r7}
 8002cd4:	4770      	bx	lr

08002cd6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002cd6:	b480      	push	{r7}
 8002cd8:	b085      	sub	sp, #20
 8002cda:	af00      	add	r7, sp, #0
 8002cdc:	6078      	str	r0, [r7, #4]
 8002cde:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	689a      	ldr	r2, [r3, #8]
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	683a      	ldr	r2, [r7, #0]
 8002cfa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	683a      	ldr	r2, [r7, #0]
 8002d00:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	687a      	ldr	r2, [r7, #4]
 8002d06:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	1c5a      	adds	r2, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	601a      	str	r2, [r3, #0]
}
 8002d12:	bf00      	nop
 8002d14:	3714      	adds	r7, #20
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bc80      	pop	{r7}
 8002d1a:	4770      	bx	lr

08002d1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d32:	d103      	bne.n	8002d3c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	691b      	ldr	r3, [r3, #16]
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	e00c      	b.n	8002d56 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3308      	adds	r3, #8
 8002d40:	60fb      	str	r3, [r7, #12]
 8002d42:	e002      	b.n	8002d4a <vListInsert+0x2e>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	60fb      	str	r3, [r7, #12]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d2f6      	bcs.n	8002d44 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	683a      	ldr	r2, [r7, #0]
 8002d64:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68fa      	ldr	r2, [r7, #12]
 8002d6a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	683a      	ldr	r2, [r7, #0]
 8002d70:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	601a      	str	r2, [r3, #0]
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	687a      	ldr	r2, [r7, #4]
 8002da0:	6892      	ldr	r2, [r2, #8]
 8002da2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	687a      	ldr	r2, [r7, #4]
 8002daa:	6852      	ldr	r2, [r2, #4]
 8002dac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	687a      	ldr	r2, [r7, #4]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d103      	bne.n	8002dc0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	689a      	ldr	r2, [r3, #8]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	1e5a      	subs	r2, r3, #1
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3714      	adds	r7, #20
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
	...

08002de0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b084      	sub	sp, #16
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10b      	bne.n	8002e0c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002df8:	f383 8811 	msr	BASEPRI, r3
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	f3bf 8f4f 	dsb	sy
 8002e04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002e06:	bf00      	nop
 8002e08:	bf00      	nop
 8002e0a:	e7fd      	b.n	8002e08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e0c:	f002 f96e 	bl	80050ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e18:	68f9      	ldr	r1, [r7, #12]
 8002e1a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e1c:	fb01 f303 	mul.w	r3, r1, r3
 8002e20:	441a      	add	r2, r3
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e3c:	3b01      	subs	r3, #1
 8002e3e:	68f9      	ldr	r1, [r7, #12]
 8002e40:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002e42:	fb01 f303 	mul.w	r3, r1, r3
 8002e46:	441a      	add	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	22ff      	movs	r2, #255	@ 0xff
 8002e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	22ff      	movs	r2, #255	@ 0xff
 8002e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d114      	bne.n	8002e8c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	691b      	ldr	r3, [r3, #16]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d01a      	beq.n	8002ea0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	3310      	adds	r3, #16
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f001 f9ba 	bl	80041e8 <xTaskRemoveFromEventList>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d012      	beq.n	8002ea0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002e7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002eb0 <xQueueGenericReset+0xd0>)
 8002e7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	f3bf 8f4f 	dsb	sy
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	e009      	b.n	8002ea0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3310      	adds	r3, #16
 8002e90:	4618      	mov	r0, r3
 8002e92:	f7ff fef5 	bl	8002c80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	3324      	adds	r3, #36	@ 0x24
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff fef0 	bl	8002c80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ea0:	f002 f954 	bl	800514c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ea4:	2301      	movs	r3, #1
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	e000ed04 	.word	0xe000ed04

08002eb4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b08e      	sub	sp, #56	@ 0x38
 8002eb8:	af02      	add	r7, sp, #8
 8002eba:	60f8      	str	r0, [r7, #12]
 8002ebc:	60b9      	str	r1, [r7, #8]
 8002ebe:	607a      	str	r2, [r7, #4]
 8002ec0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d10b      	bne.n	8002ee0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ecc:	f383 8811 	msr	BASEPRI, r3
 8002ed0:	f3bf 8f6f 	isb	sy
 8002ed4:	f3bf 8f4f 	dsb	sy
 8002ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002eda:	bf00      	nop
 8002edc:	bf00      	nop
 8002ede:	e7fd      	b.n	8002edc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10b      	bne.n	8002efe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eea:	f383 8811 	msr	BASEPRI, r3
 8002eee:	f3bf 8f6f 	isb	sy
 8002ef2:	f3bf 8f4f 	dsb	sy
 8002ef6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002ef8:	bf00      	nop
 8002efa:	bf00      	nop
 8002efc:	e7fd      	b.n	8002efa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <xQueueGenericCreateStatic+0x56>
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d001      	beq.n	8002f0e <xQueueGenericCreateStatic+0x5a>
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e000      	b.n	8002f10 <xQueueGenericCreateStatic+0x5c>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d10b      	bne.n	8002f2c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f18:	f383 8811 	msr	BASEPRI, r3
 8002f1c:	f3bf 8f6f 	isb	sy
 8002f20:	f3bf 8f4f 	dsb	sy
 8002f24:	623b      	str	r3, [r7, #32]
}
 8002f26:	bf00      	nop
 8002f28:	bf00      	nop
 8002f2a:	e7fd      	b.n	8002f28 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d102      	bne.n	8002f38 <xQueueGenericCreateStatic+0x84>
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <xQueueGenericCreateStatic+0x88>
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e000      	b.n	8002f3e <xQueueGenericCreateStatic+0x8a>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d10b      	bne.n	8002f5a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f46:	f383 8811 	msr	BASEPRI, r3
 8002f4a:	f3bf 8f6f 	isb	sy
 8002f4e:	f3bf 8f4f 	dsb	sy
 8002f52:	61fb      	str	r3, [r7, #28]
}
 8002f54:	bf00      	nop
 8002f56:	bf00      	nop
 8002f58:	e7fd      	b.n	8002f56 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002f5a:	2348      	movs	r3, #72	@ 0x48
 8002f5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	2b48      	cmp	r3, #72	@ 0x48
 8002f62:	d00b      	beq.n	8002f7c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	61bb      	str	r3, [r7, #24]
}
 8002f76:	bf00      	nop
 8002f78:	bf00      	nop
 8002f7a:	e7fd      	b.n	8002f78 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002f80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00d      	beq.n	8002fa2 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002f86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f88:	2201      	movs	r2, #1
 8002f8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f8e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f94:	9300      	str	r3, [sp, #0]
 8002f96:	4613      	mov	r3, r2
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	68f8      	ldr	r0, [r7, #12]
 8002f9e:	f000 f844 	bl	800302a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002fa2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3730      	adds	r7, #48	@ 0x30
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b08a      	sub	sp, #40	@ 0x28
 8002fb0:	af02      	add	r7, sp, #8
 8002fb2:	60f8      	str	r0, [r7, #12]
 8002fb4:	60b9      	str	r1, [r7, #8]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d10b      	bne.n	8002fd8 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc4:	f383 8811 	msr	BASEPRI, r3
 8002fc8:	f3bf 8f6f 	isb	sy
 8002fcc:	f3bf 8f4f 	dsb	sy
 8002fd0:	613b      	str	r3, [r7, #16]
}
 8002fd2:	bf00      	nop
 8002fd4:	bf00      	nop
 8002fd6:	e7fd      	b.n	8002fd4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d102      	bne.n	8002fe4 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61fb      	str	r3, [r7, #28]
 8002fe2:	e004      	b.n	8002fee <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	fb02 f303 	mul.w	r3, r2, r3
 8002fec:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002fee:	69fb      	ldr	r3, [r7, #28]
 8002ff0:	3348      	adds	r3, #72	@ 0x48
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f002 f97c 	bl	80052f0 <pvPortMalloc>
 8002ff8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00f      	beq.n	8003020 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	3348      	adds	r3, #72	@ 0x48
 8003004:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800300e:	79fa      	ldrb	r2, [r7, #7]
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	4613      	mov	r3, r2
 8003016:	697a      	ldr	r2, [r7, #20]
 8003018:	68b9      	ldr	r1, [r7, #8]
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f805 	bl	800302a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003020:	69bb      	ldr	r3, [r7, #24]
	}
 8003022:	4618      	mov	r0, r3
 8003024:	3720      	adds	r7, #32
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800302a:	b580      	push	{r7, lr}
 800302c:	b084      	sub	sp, #16
 800302e:	af00      	add	r7, sp, #0
 8003030:	60f8      	str	r0, [r7, #12]
 8003032:	60b9      	str	r1, [r7, #8]
 8003034:	607a      	str	r2, [r7, #4]
 8003036:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003038:	68bb      	ldr	r3, [r7, #8]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d103      	bne.n	8003046 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	601a      	str	r2, [r3, #0]
 8003044:	e002      	b.n	800304c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800304c:	69bb      	ldr	r3, [r7, #24]
 800304e:	68fa      	ldr	r2, [r7, #12]
 8003050:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	68ba      	ldr	r2, [r7, #8]
 8003056:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003058:	2101      	movs	r1, #1
 800305a:	69b8      	ldr	r0, [r7, #24]
 800305c:	f7ff fec0 	bl	8002de0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003060:	bf00      	nop
 8003062:	3710      	adds	r7, #16
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b08e      	sub	sp, #56	@ 0x38
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
 8003074:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003076:	2300      	movs	r3, #0
 8003078:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800307e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10b      	bne.n	800309c <xQueueGenericSend+0x34>
	__asm volatile
 8003084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003088:	f383 8811 	msr	BASEPRI, r3
 800308c:	f3bf 8f6f 	isb	sy
 8003090:	f3bf 8f4f 	dsb	sy
 8003094:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003096:	bf00      	nop
 8003098:	bf00      	nop
 800309a:	e7fd      	b.n	8003098 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d103      	bne.n	80030aa <xQueueGenericSend+0x42>
 80030a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <xQueueGenericSend+0x46>
 80030aa:	2301      	movs	r3, #1
 80030ac:	e000      	b.n	80030b0 <xQueueGenericSend+0x48>
 80030ae:	2300      	movs	r3, #0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10b      	bne.n	80030cc <xQueueGenericSend+0x64>
	__asm volatile
 80030b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030b8:	f383 8811 	msr	BASEPRI, r3
 80030bc:	f3bf 8f6f 	isb	sy
 80030c0:	f3bf 8f4f 	dsb	sy
 80030c4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80030c6:	bf00      	nop
 80030c8:	bf00      	nop
 80030ca:	e7fd      	b.n	80030c8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d103      	bne.n	80030da <xQueueGenericSend+0x72>
 80030d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80030d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <xQueueGenericSend+0x76>
 80030da:	2301      	movs	r3, #1
 80030dc:	e000      	b.n	80030e0 <xQueueGenericSend+0x78>
 80030de:	2300      	movs	r3, #0
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d10b      	bne.n	80030fc <xQueueGenericSend+0x94>
	__asm volatile
 80030e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e8:	f383 8811 	msr	BASEPRI, r3
 80030ec:	f3bf 8f6f 	isb	sy
 80030f0:	f3bf 8f4f 	dsb	sy
 80030f4:	623b      	str	r3, [r7, #32]
}
 80030f6:	bf00      	nop
 80030f8:	bf00      	nop
 80030fa:	e7fd      	b.n	80030f8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030fc:	f001 fa38 	bl	8004570 <xTaskGetSchedulerState>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d102      	bne.n	800310c <xQueueGenericSend+0xa4>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <xQueueGenericSend+0xa8>
 800310c:	2301      	movs	r3, #1
 800310e:	e000      	b.n	8003112 <xQueueGenericSend+0xaa>
 8003110:	2300      	movs	r3, #0
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10b      	bne.n	800312e <xQueueGenericSend+0xc6>
	__asm volatile
 8003116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800311a:	f383 8811 	msr	BASEPRI, r3
 800311e:	f3bf 8f6f 	isb	sy
 8003122:	f3bf 8f4f 	dsb	sy
 8003126:	61fb      	str	r3, [r7, #28]
}
 8003128:	bf00      	nop
 800312a:	bf00      	nop
 800312c:	e7fd      	b.n	800312a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800312e:	f001 ffdd 	bl	80050ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003134:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003138:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800313a:	429a      	cmp	r2, r3
 800313c:	d302      	bcc.n	8003144 <xQueueGenericSend+0xdc>
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	2b02      	cmp	r3, #2
 8003142:	d129      	bne.n	8003198 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003144:	683a      	ldr	r2, [r7, #0]
 8003146:	68b9      	ldr	r1, [r7, #8]
 8003148:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800314a:	f000 fa8f 	bl	800366c <prvCopyDataToQueue>
 800314e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003152:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003154:	2b00      	cmp	r3, #0
 8003156:	d010      	beq.n	800317a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800315a:	3324      	adds	r3, #36	@ 0x24
 800315c:	4618      	mov	r0, r3
 800315e:	f001 f843 	bl	80041e8 <xTaskRemoveFromEventList>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d013      	beq.n	8003190 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003168:	4b3f      	ldr	r3, [pc, #252]	@ (8003268 <xQueueGenericSend+0x200>)
 800316a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800316e:	601a      	str	r2, [r3, #0]
 8003170:	f3bf 8f4f 	dsb	sy
 8003174:	f3bf 8f6f 	isb	sy
 8003178:	e00a      	b.n	8003190 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800317a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800317c:	2b00      	cmp	r3, #0
 800317e:	d007      	beq.n	8003190 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003180:	4b39      	ldr	r3, [pc, #228]	@ (8003268 <xQueueGenericSend+0x200>)
 8003182:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	f3bf 8f4f 	dsb	sy
 800318c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003190:	f001 ffdc 	bl	800514c <vPortExitCritical>
				return pdPASS;
 8003194:	2301      	movs	r3, #1
 8003196:	e063      	b.n	8003260 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d103      	bne.n	80031a6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800319e:	f001 ffd5 	bl	800514c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80031a2:	2300      	movs	r3, #0
 80031a4:	e05c      	b.n	8003260 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80031a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d106      	bne.n	80031ba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80031ac:	f107 0314 	add.w	r3, r7, #20
 80031b0:	4618      	mov	r0, r3
 80031b2:	f001 f87d 	bl	80042b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80031b6:	2301      	movs	r3, #1
 80031b8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80031ba:	f001 ffc7 	bl	800514c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80031be:	f000 fded 	bl	8003d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80031c2:	f001 ff93 	bl	80050ec <vPortEnterCritical>
 80031c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031cc:	b25b      	sxtb	r3, r3
 80031ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031d2:	d103      	bne.n	80031dc <xQueueGenericSend+0x174>
 80031d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80031e2:	b25b      	sxtb	r3, r3
 80031e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e8:	d103      	bne.n	80031f2 <xQueueGenericSend+0x18a>
 80031ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031f2:	f001 ffab 	bl	800514c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80031f6:	1d3a      	adds	r2, r7, #4
 80031f8:	f107 0314 	add.w	r3, r7, #20
 80031fc:	4611      	mov	r1, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	f001 f86c 	bl	80042dc <xTaskCheckForTimeOut>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d124      	bne.n	8003254 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800320a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800320c:	f000 fb26 	bl	800385c <prvIsQueueFull>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d018      	beq.n	8003248 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003218:	3310      	adds	r3, #16
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	4611      	mov	r1, r2
 800321e:	4618      	mov	r0, r3
 8003220:	f000 ff90 	bl	8004144 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003224:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003226:	f000 fab1 	bl	800378c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800322a:	f000 fdc5 	bl	8003db8 <xTaskResumeAll>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	f47f af7c 	bne.w	800312e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003236:	4b0c      	ldr	r3, [pc, #48]	@ (8003268 <xQueueGenericSend+0x200>)
 8003238:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800323c:	601a      	str	r2, [r3, #0]
 800323e:	f3bf 8f4f 	dsb	sy
 8003242:	f3bf 8f6f 	isb	sy
 8003246:	e772      	b.n	800312e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003248:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800324a:	f000 fa9f 	bl	800378c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800324e:	f000 fdb3 	bl	8003db8 <xTaskResumeAll>
 8003252:	e76c      	b.n	800312e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003254:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003256:	f000 fa99 	bl	800378c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800325a:	f000 fdad 	bl	8003db8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800325e:	2300      	movs	r3, #0
		}
	}
}
 8003260:	4618      	mov	r0, r3
 8003262:	3738      	adds	r7, #56	@ 0x38
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}
 8003268:	e000ed04 	.word	0xe000ed04

0800326c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b08e      	sub	sp, #56	@ 0x38
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
 8003278:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800327e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10b      	bne.n	800329c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003288:	f383 8811 	msr	BASEPRI, r3
 800328c:	f3bf 8f6f 	isb	sy
 8003290:	f3bf 8f4f 	dsb	sy
 8003294:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003296:	bf00      	nop
 8003298:	bf00      	nop
 800329a:	e7fd      	b.n	8003298 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d103      	bne.n	80032aa <xQueueGenericSendFromISR+0x3e>
 80032a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <xQueueGenericSendFromISR+0x42>
 80032aa:	2301      	movs	r3, #1
 80032ac:	e000      	b.n	80032b0 <xQueueGenericSendFromISR+0x44>
 80032ae:	2300      	movs	r3, #0
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10b      	bne.n	80032cc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80032b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b8:	f383 8811 	msr	BASEPRI, r3
 80032bc:	f3bf 8f6f 	isb	sy
 80032c0:	f3bf 8f4f 	dsb	sy
 80032c4:	623b      	str	r3, [r7, #32]
}
 80032c6:	bf00      	nop
 80032c8:	bf00      	nop
 80032ca:	e7fd      	b.n	80032c8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	2b02      	cmp	r3, #2
 80032d0:	d103      	bne.n	80032da <xQueueGenericSendFromISR+0x6e>
 80032d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d101      	bne.n	80032de <xQueueGenericSendFromISR+0x72>
 80032da:	2301      	movs	r3, #1
 80032dc:	e000      	b.n	80032e0 <xQueueGenericSendFromISR+0x74>
 80032de:	2300      	movs	r3, #0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d10b      	bne.n	80032fc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80032e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e8:	f383 8811 	msr	BASEPRI, r3
 80032ec:	f3bf 8f6f 	isb	sy
 80032f0:	f3bf 8f4f 	dsb	sy
 80032f4:	61fb      	str	r3, [r7, #28]
}
 80032f6:	bf00      	nop
 80032f8:	bf00      	nop
 80032fa:	e7fd      	b.n	80032f8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80032fc:	f001 ffb8 	bl	8005270 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003300:	f3ef 8211 	mrs	r2, BASEPRI
 8003304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003308:	f383 8811 	msr	BASEPRI, r3
 800330c:	f3bf 8f6f 	isb	sy
 8003310:	f3bf 8f4f 	dsb	sy
 8003314:	61ba      	str	r2, [r7, #24]
 8003316:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003318:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800331a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800331c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800331e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003320:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003324:	429a      	cmp	r2, r3
 8003326:	d302      	bcc.n	800332e <xQueueGenericSendFromISR+0xc2>
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	2b02      	cmp	r3, #2
 800332c:	d12c      	bne.n	8003388 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800332e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003330:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003334:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800333e:	f000 f995 	bl	800366c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003342:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8003346:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334a:	d112      	bne.n	8003372 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800334c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800334e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003350:	2b00      	cmp	r3, #0
 8003352:	d016      	beq.n	8003382 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003356:	3324      	adds	r3, #36	@ 0x24
 8003358:	4618      	mov	r0, r3
 800335a:	f000 ff45 	bl	80041e8 <xTaskRemoveFromEventList>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d00e      	beq.n	8003382 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00b      	beq.n	8003382 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2201      	movs	r2, #1
 800336e:	601a      	str	r2, [r3, #0]
 8003370:	e007      	b.n	8003382 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003372:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003376:	3301      	adds	r3, #1
 8003378:	b2db      	uxtb	r3, r3
 800337a:	b25a      	sxtb	r2, r3
 800337c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800337e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8003382:	2301      	movs	r3, #1
 8003384:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8003386:	e001      	b.n	800338c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003388:	2300      	movs	r3, #0
 800338a:	637b      	str	r3, [r7, #52]	@ 0x34
 800338c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800338e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003396:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800339a:	4618      	mov	r0, r3
 800339c:	3738      	adds	r7, #56	@ 0x38
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
	...

080033a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b08c      	sub	sp, #48	@ 0x30
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80033b0:	2300      	movs	r3, #0
 80033b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10b      	bne.n	80033d6 <xQueueReceive+0x32>
	__asm volatile
 80033be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	623b      	str	r3, [r7, #32]
}
 80033d0:	bf00      	nop
 80033d2:	bf00      	nop
 80033d4:	e7fd      	b.n	80033d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d103      	bne.n	80033e4 <xQueueReceive+0x40>
 80033dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d101      	bne.n	80033e8 <xQueueReceive+0x44>
 80033e4:	2301      	movs	r3, #1
 80033e6:	e000      	b.n	80033ea <xQueueReceive+0x46>
 80033e8:	2300      	movs	r3, #0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10b      	bne.n	8003406 <xQueueReceive+0x62>
	__asm volatile
 80033ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f2:	f383 8811 	msr	BASEPRI, r3
 80033f6:	f3bf 8f6f 	isb	sy
 80033fa:	f3bf 8f4f 	dsb	sy
 80033fe:	61fb      	str	r3, [r7, #28]
}
 8003400:	bf00      	nop
 8003402:	bf00      	nop
 8003404:	e7fd      	b.n	8003402 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003406:	f001 f8b3 	bl	8004570 <xTaskGetSchedulerState>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d102      	bne.n	8003416 <xQueueReceive+0x72>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <xQueueReceive+0x76>
 8003416:	2301      	movs	r3, #1
 8003418:	e000      	b.n	800341c <xQueueReceive+0x78>
 800341a:	2300      	movs	r3, #0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d10b      	bne.n	8003438 <xQueueReceive+0x94>
	__asm volatile
 8003420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003424:	f383 8811 	msr	BASEPRI, r3
 8003428:	f3bf 8f6f 	isb	sy
 800342c:	f3bf 8f4f 	dsb	sy
 8003430:	61bb      	str	r3, [r7, #24]
}
 8003432:	bf00      	nop
 8003434:	bf00      	nop
 8003436:	e7fd      	b.n	8003434 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003438:	f001 fe58 	bl	80050ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800343c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800343e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003440:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01f      	beq.n	8003488 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800344c:	f000 f978 	bl	8003740 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003452:	1e5a      	subs	r2, r3, #1
 8003454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003456:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003458:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d00f      	beq.n	8003480 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003462:	3310      	adds	r3, #16
 8003464:	4618      	mov	r0, r3
 8003466:	f000 febf 	bl	80041e8 <xTaskRemoveFromEventList>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d007      	beq.n	8003480 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003470:	4b3c      	ldr	r3, [pc, #240]	@ (8003564 <xQueueReceive+0x1c0>)
 8003472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003480:	f001 fe64 	bl	800514c <vPortExitCritical>
				return pdPASS;
 8003484:	2301      	movs	r3, #1
 8003486:	e069      	b.n	800355c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d103      	bne.n	8003496 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800348e:	f001 fe5d 	bl	800514c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003492:	2300      	movs	r3, #0
 8003494:	e062      	b.n	800355c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003498:	2b00      	cmp	r3, #0
 800349a:	d106      	bne.n	80034aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800349c:	f107 0310 	add.w	r3, r7, #16
 80034a0:	4618      	mov	r0, r3
 80034a2:	f000 ff05 	bl	80042b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034a6:	2301      	movs	r3, #1
 80034a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034aa:	f001 fe4f 	bl	800514c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034ae:	f000 fc75 	bl	8003d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034b2:	f001 fe1b 	bl	80050ec <vPortEnterCritical>
 80034b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034bc:	b25b      	sxtb	r3, r3
 80034be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034c2:	d103      	bne.n	80034cc <xQueueReceive+0x128>
 80034c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80034cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034d2:	b25b      	sxtb	r3, r3
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d103      	bne.n	80034e2 <xQueueReceive+0x13e>
 80034da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80034e2:	f001 fe33 	bl	800514c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80034e6:	1d3a      	adds	r2, r7, #4
 80034e8:	f107 0310 	add.w	r3, r7, #16
 80034ec:	4611      	mov	r1, r2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fef4 	bl	80042dc <xTaskCheckForTimeOut>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d123      	bne.n	8003542 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80034fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80034fc:	f000 f998 	bl	8003830 <prvIsQueueEmpty>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d017      	beq.n	8003536 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003508:	3324      	adds	r3, #36	@ 0x24
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	4611      	mov	r1, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fe18 	bl	8004144 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003514:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003516:	f000 f939 	bl	800378c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800351a:	f000 fc4d 	bl	8003db8 <xTaskResumeAll>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d189      	bne.n	8003438 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003524:	4b0f      	ldr	r3, [pc, #60]	@ (8003564 <xQueueReceive+0x1c0>)
 8003526:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800352a:	601a      	str	r2, [r3, #0]
 800352c:	f3bf 8f4f 	dsb	sy
 8003530:	f3bf 8f6f 	isb	sy
 8003534:	e780      	b.n	8003438 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003536:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003538:	f000 f928 	bl	800378c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800353c:	f000 fc3c 	bl	8003db8 <xTaskResumeAll>
 8003540:	e77a      	b.n	8003438 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003544:	f000 f922 	bl	800378c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003548:	f000 fc36 	bl	8003db8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800354c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800354e:	f000 f96f 	bl	8003830 <prvIsQueueEmpty>
 8003552:	4603      	mov	r3, r0
 8003554:	2b00      	cmp	r3, #0
 8003556:	f43f af6f 	beq.w	8003438 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800355a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800355c:	4618      	mov	r0, r3
 800355e:	3730      	adds	r7, #48	@ 0x30
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	e000ed04 	.word	0xe000ed04

08003568 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b08e      	sub	sp, #56	@ 0x38
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10b      	bne.n	8003596 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800357e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003582:	f383 8811 	msr	BASEPRI, r3
 8003586:	f3bf 8f6f 	isb	sy
 800358a:	f3bf 8f4f 	dsb	sy
 800358e:	623b      	str	r3, [r7, #32]
}
 8003590:	bf00      	nop
 8003592:	bf00      	nop
 8003594:	e7fd      	b.n	8003592 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	2b00      	cmp	r3, #0
 800359a:	d103      	bne.n	80035a4 <xQueueReceiveFromISR+0x3c>
 800359c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800359e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <xQueueReceiveFromISR+0x40>
 80035a4:	2301      	movs	r3, #1
 80035a6:	e000      	b.n	80035aa <xQueueReceiveFromISR+0x42>
 80035a8:	2300      	movs	r3, #0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d10b      	bne.n	80035c6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80035ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	61fb      	str	r3, [r7, #28]
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	e7fd      	b.n	80035c2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80035c6:	f001 fe53 	bl	8005270 <vPortValidateInterruptPriority>
	__asm volatile
 80035ca:	f3ef 8211 	mrs	r2, BASEPRI
 80035ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	61ba      	str	r2, [r7, #24]
 80035e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80035e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80035e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80035e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80035ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d02f      	beq.n	8003652 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80035f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80035f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80035fc:	68b9      	ldr	r1, [r7, #8]
 80035fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003600:	f000 f89e 	bl	8003740 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003606:	1e5a      	subs	r2, r3, #1
 8003608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800360c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003614:	d112      	bne.n	800363c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d016      	beq.n	800364c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800361e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003620:	3310      	adds	r3, #16
 8003622:	4618      	mov	r0, r3
 8003624:	f000 fde0 	bl	80041e8 <xTaskRemoveFromEventList>
 8003628:	4603      	mov	r3, r0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00e      	beq.n	800364c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00b      	beq.n	800364c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	601a      	str	r2, [r3, #0]
 800363a:	e007      	b.n	800364c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800363c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003640:	3301      	adds	r3, #1
 8003642:	b2db      	uxtb	r3, r3
 8003644:	b25a      	sxtb	r2, r3
 8003646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003648:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800364c:	2301      	movs	r3, #1
 800364e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003650:	e001      	b.n	8003656 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003652:	2300      	movs	r3, #0
 8003654:	637b      	str	r3, [r7, #52]	@ 0x34
 8003656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003658:	613b      	str	r3, [r7, #16]
	__asm volatile
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f383 8811 	msr	BASEPRI, r3
}
 8003660:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003662:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003664:	4618      	mov	r0, r3
 8003666:	3738      	adds	r7, #56	@ 0x38
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003678:	2300      	movs	r3, #0
 800367a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003680:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d10d      	bne.n	80036a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d14d      	bne.n	800372e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	4618      	mov	r0, r3
 8003698:	f000 ff88 	bl	80045ac <xTaskPriorityDisinherit>
 800369c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	605a      	str	r2, [r3, #4]
 80036a4:	e043      	b.n	800372e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d119      	bne.n	80036e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6898      	ldr	r0, [r3, #8]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b4:	461a      	mov	r2, r3
 80036b6:	68b9      	ldr	r1, [r7, #8]
 80036b8:	f002 f824 	bl	8005704 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	689a      	ldr	r2, [r3, #8]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c4:	441a      	add	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	689a      	ldr	r2, [r3, #8]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	429a      	cmp	r2, r3
 80036d4:	d32b      	bcc.n	800372e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	609a      	str	r2, [r3, #8]
 80036de:	e026      	b.n	800372e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	68d8      	ldr	r0, [r3, #12]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e8:	461a      	mov	r2, r3
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	f002 f80a 	bl	8005704 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f8:	425b      	negs	r3, r3
 80036fa:	441a      	add	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	429a      	cmp	r2, r3
 800370a:	d207      	bcs.n	800371c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	685a      	ldr	r2, [r3, #4]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003714:	425b      	negs	r3, r3
 8003716:	441a      	add	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2b02      	cmp	r3, #2
 8003720:	d105      	bne.n	800372e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d002      	beq.n	800372e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	3b01      	subs	r3, #1
 800372c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800372e:	693b      	ldr	r3, [r7, #16]
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003736:	697b      	ldr	r3, [r7, #20]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b082      	sub	sp, #8
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374e:	2b00      	cmp	r3, #0
 8003750:	d018      	beq.n	8003784 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	68da      	ldr	r2, [r3, #12]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375a:	441a      	add	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	429a      	cmp	r2, r3
 800376a:	d303      	bcc.n	8003774 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68d9      	ldr	r1, [r3, #12]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	461a      	mov	r2, r3
 800377e:	6838      	ldr	r0, [r7, #0]
 8003780:	f001 ffc0 	bl	8005704 <memcpy>
	}
}
 8003784:	bf00      	nop
 8003786:	3708      	adds	r7, #8
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b084      	sub	sp, #16
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003794:	f001 fcaa 	bl	80050ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800379e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037a0:	e011      	b.n	80037c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d012      	beq.n	80037d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	3324      	adds	r3, #36	@ 0x24
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 fd1a 	bl	80041e8 <xTaskRemoveFromEventList>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80037ba:	f000 fdf3 	bl	80043a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80037be:	7bfb      	ldrb	r3, [r7, #15]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80037c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	dce9      	bgt.n	80037a2 <prvUnlockQueue+0x16>
 80037ce:	e000      	b.n	80037d2 <prvUnlockQueue+0x46>
					break;
 80037d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	22ff      	movs	r2, #255	@ 0xff
 80037d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80037da:	f001 fcb7 	bl	800514c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80037de:	f001 fc85 	bl	80050ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80037e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80037ea:	e011      	b.n	8003810 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d012      	beq.n	800381a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3310      	adds	r3, #16
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fcf5 	bl	80041e8 <xTaskRemoveFromEventList>
 80037fe:	4603      	mov	r3, r0
 8003800:	2b00      	cmp	r3, #0
 8003802:	d001      	beq.n	8003808 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003804:	f000 fdce 	bl	80043a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003808:	7bbb      	ldrb	r3, [r7, #14]
 800380a:	3b01      	subs	r3, #1
 800380c:	b2db      	uxtb	r3, r3
 800380e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003810:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003814:	2b00      	cmp	r3, #0
 8003816:	dce9      	bgt.n	80037ec <prvUnlockQueue+0x60>
 8003818:	e000      	b.n	800381c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800381a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	22ff      	movs	r2, #255	@ 0xff
 8003820:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003824:	f001 fc92 	bl	800514c <vPortExitCritical>
}
 8003828:	bf00      	nop
 800382a:	3710      	adds	r7, #16
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003838:	f001 fc58 	bl	80050ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003844:	2301      	movs	r3, #1
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	e001      	b.n	800384e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800384a:	2300      	movs	r3, #0
 800384c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800384e:	f001 fc7d 	bl	800514c <vPortExitCritical>

	return xReturn;
 8003852:	68fb      	ldr	r3, [r7, #12]
}
 8003854:	4618      	mov	r0, r3
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003864:	f001 fc42 	bl	80050ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003870:	429a      	cmp	r2, r3
 8003872:	d102      	bne.n	800387a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003874:	2301      	movs	r3, #1
 8003876:	60fb      	str	r3, [r7, #12]
 8003878:	e001      	b.n	800387e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800387e:	f001 fc65 	bl	800514c <vPortExitCritical>

	return xReturn;
 8003882:	68fb      	ldr	r3, [r7, #12]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3710      	adds	r7, #16
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003896:	2300      	movs	r3, #0
 8003898:	60fb      	str	r3, [r7, #12]
 800389a:	e014      	b.n	80038c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800389c:	4a0e      	ldr	r2, [pc, #56]	@ (80038d8 <vQueueAddToRegistry+0x4c>)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10b      	bne.n	80038c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80038a8:	490b      	ldr	r1, [pc, #44]	@ (80038d8 <vQueueAddToRegistry+0x4c>)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80038b2:	4a09      	ldr	r2, [pc, #36]	@ (80038d8 <vQueueAddToRegistry+0x4c>)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	00db      	lsls	r3, r3, #3
 80038b8:	4413      	add	r3, r2
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80038be:	e006      	b.n	80038ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	3301      	adds	r3, #1
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2b07      	cmp	r3, #7
 80038ca:	d9e7      	bls.n	800389c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80038cc:	bf00      	nop
 80038ce:	bf00      	nop
 80038d0:	3714      	adds	r7, #20
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr
 80038d8:	20000b4c 	.word	0x20000b4c

080038dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b086      	sub	sp, #24
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	60f8      	str	r0, [r7, #12]
 80038e4:	60b9      	str	r1, [r7, #8]
 80038e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80038ec:	f001 fbfe 	bl	80050ec <vPortEnterCritical>
 80038f0:	697b      	ldr	r3, [r7, #20]
 80038f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80038f6:	b25b      	sxtb	r3, r3
 80038f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fc:	d103      	bne.n	8003906 <vQueueWaitForMessageRestricted+0x2a>
 80038fe:	697b      	ldr	r3, [r7, #20]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800390c:	b25b      	sxtb	r3, r3
 800390e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003912:	d103      	bne.n	800391c <vQueueWaitForMessageRestricted+0x40>
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800391c:	f001 fc16 	bl	800514c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003924:	2b00      	cmp	r3, #0
 8003926:	d106      	bne.n	8003936 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	3324      	adds	r3, #36	@ 0x24
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	68b9      	ldr	r1, [r7, #8]
 8003930:	4618      	mov	r0, r3
 8003932:	f000 fc2d 	bl	8004190 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003936:	6978      	ldr	r0, [r7, #20]
 8003938:	f7ff ff28 	bl	800378c <prvUnlockQueue>
	}
 800393c:	bf00      	nop
 800393e:	3718      	adds	r7, #24
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08e      	sub	sp, #56	@ 0x38
 8003948:	af04      	add	r7, sp, #16
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10b      	bne.n	8003970 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	623b      	str	r3, [r7, #32]
}
 800396a:	bf00      	nop
 800396c:	bf00      	nop
 800396e:	e7fd      	b.n	800396c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003970:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003972:	2b00      	cmp	r3, #0
 8003974:	d10b      	bne.n	800398e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003976:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397a:	f383 8811 	msr	BASEPRI, r3
 800397e:	f3bf 8f6f 	isb	sy
 8003982:	f3bf 8f4f 	dsb	sy
 8003986:	61fb      	str	r3, [r7, #28]
}
 8003988:	bf00      	nop
 800398a:	bf00      	nop
 800398c:	e7fd      	b.n	800398a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800398e:	2354      	movs	r3, #84	@ 0x54
 8003990:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	2b54      	cmp	r3, #84	@ 0x54
 8003996:	d00b      	beq.n	80039b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	61bb      	str	r3, [r7, #24]
}
 80039aa:	bf00      	nop
 80039ac:	bf00      	nop
 80039ae:	e7fd      	b.n	80039ac <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80039b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d01e      	beq.n	80039f4 <xTaskCreateStatic+0xb0>
 80039b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01b      	beq.n	80039f4 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80039bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039be:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80039c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039c4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80039c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039c8:	2202      	movs	r2, #2
 80039ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039ce:	2300      	movs	r3, #0
 80039d0:	9303      	str	r3, [sp, #12]
 80039d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039d4:	9302      	str	r3, [sp, #8]
 80039d6:	f107 0314 	add.w	r3, r7, #20
 80039da:	9301      	str	r3, [sp, #4]
 80039dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80039de:	9300      	str	r3, [sp, #0]
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	68f8      	ldr	r0, [r7, #12]
 80039e8:	f000 f850 	bl	8003a8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80039ee:	f000 f8cd 	bl	8003b8c <prvAddNewTaskToReadyList>
 80039f2:	e001      	b.n	80039f8 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80039f4:	2300      	movs	r3, #0
 80039f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039f8:	697b      	ldr	r3, [r7, #20]
	}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3728      	adds	r7, #40	@ 0x28
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b08c      	sub	sp, #48	@ 0x30
 8003a06:	af04      	add	r7, sp, #16
 8003a08:	60f8      	str	r0, [r7, #12]
 8003a0a:	60b9      	str	r1, [r7, #8]
 8003a0c:	603b      	str	r3, [r7, #0]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4618      	mov	r0, r3
 8003a18:	f001 fc6a 	bl	80052f0 <pvPortMalloc>
 8003a1c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d00e      	beq.n	8003a42 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003a24:	2054      	movs	r0, #84	@ 0x54
 8003a26:	f001 fc63 	bl	80052f0 <pvPortMalloc>
 8003a2a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d003      	beq.n	8003a3a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a32:	69fb      	ldr	r3, [r7, #28]
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	631a      	str	r2, [r3, #48]	@ 0x30
 8003a38:	e005      	b.n	8003a46 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a3a:	6978      	ldr	r0, [r7, #20]
 8003a3c:	f001 fd20 	bl	8005480 <vPortFree>
 8003a40:	e001      	b.n	8003a46 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a42:	2300      	movs	r3, #0
 8003a44:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d017      	beq.n	8003a7c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a54:	88fa      	ldrh	r2, [r7, #6]
 8003a56:	2300      	movs	r3, #0
 8003a58:	9303      	str	r3, [sp, #12]
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	9302      	str	r3, [sp, #8]
 8003a5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a60:	9301      	str	r3, [sp, #4]
 8003a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a64:	9300      	str	r3, [sp, #0]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	68b9      	ldr	r1, [r7, #8]
 8003a6a:	68f8      	ldr	r0, [r7, #12]
 8003a6c:	f000 f80e 	bl	8003a8c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a70:	69f8      	ldr	r0, [r7, #28]
 8003a72:	f000 f88b 	bl	8003b8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a76:	2301      	movs	r3, #1
 8003a78:	61bb      	str	r3, [r7, #24]
 8003a7a:	e002      	b.n	8003a82 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a7c:	f04f 33ff 	mov.w	r3, #4294967295
 8003a80:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a82:	69bb      	ldr	r3, [r7, #24]
	}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3720      	adds	r7, #32
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	60f8      	str	r0, [r7, #12]
 8003a94:	60b9      	str	r1, [r7, #8]
 8003a96:	607a      	str	r2, [r7, #4]
 8003a98:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a9c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	009b      	lsls	r3, r3, #2
 8003aa8:	4413      	add	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	f023 0307 	bic.w	r3, r3, #7
 8003ab2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003ab4:	69bb      	ldr	r3, [r7, #24]
 8003ab6:	f003 0307 	and.w	r3, r3, #7
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d00b      	beq.n	8003ad6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	617b      	str	r3, [r7, #20]
}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	e7fd      	b.n	8003ad2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61fb      	str	r3, [r7, #28]
 8003ada:	e012      	b.n	8003b02 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003adc:	68ba      	ldr	r2, [r7, #8]
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	7819      	ldrb	r1, [r3, #0]
 8003ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	4413      	add	r3, r2
 8003aea:	3334      	adds	r3, #52	@ 0x34
 8003aec:	460a      	mov	r2, r1
 8003aee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	4413      	add	r3, r2
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d006      	beq.n	8003b0a <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	3301      	adds	r3, #1
 8003b00:	61fb      	str	r3, [r7, #28]
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	2b0f      	cmp	r3, #15
 8003b06:	d9e9      	bls.n	8003adc <prvInitialiseNewTask+0x50>
 8003b08:	e000      	b.n	8003b0c <prvInitialiseNewTask+0x80>
		{
			break;
 8003b0a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003b0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b16:	2b06      	cmp	r3, #6
 8003b18:	d901      	bls.n	8003b1e <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003b1a:	2306      	movs	r3, #6
 8003b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b22:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003b28:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b32:	3304      	adds	r3, #4
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7ff f8c2 	bl	8002cbe <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b3c:	3318      	adds	r3, #24
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff f8bd 	bl	8002cbe <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b48:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b4c:	f1c3 0207 	rsb	r2, r3, #7
 8003b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b52:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b58:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b68:	683a      	ldr	r2, [r7, #0]
 8003b6a:	68f9      	ldr	r1, [r7, #12]
 8003b6c:	69b8      	ldr	r0, [r7, #24]
 8003b6e:	f001 f9c9 	bl	8004f04 <pxPortInitialiseStack>
 8003b72:	4602      	mov	r2, r0
 8003b74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b76:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003b78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b84:	bf00      	nop
 8003b86:	3720      	adds	r7, #32
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b94:	f001 faaa 	bl	80050ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b98:	4b2a      	ldr	r3, [pc, #168]	@ (8003c44 <prvAddNewTaskToReadyList+0xb8>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	3301      	adds	r3, #1
 8003b9e:	4a29      	ldr	r2, [pc, #164]	@ (8003c44 <prvAddNewTaskToReadyList+0xb8>)
 8003ba0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003ba2:	4b29      	ldr	r3, [pc, #164]	@ (8003c48 <prvAddNewTaskToReadyList+0xbc>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d109      	bne.n	8003bbe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003baa:	4a27      	ldr	r2, [pc, #156]	@ (8003c48 <prvAddNewTaskToReadyList+0xbc>)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003bb0:	4b24      	ldr	r3, [pc, #144]	@ (8003c44 <prvAddNewTaskToReadyList+0xb8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d110      	bne.n	8003bda <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003bb8:	f000 fc18 	bl	80043ec <prvInitialiseTaskLists>
 8003bbc:	e00d      	b.n	8003bda <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003bbe:	4b23      	ldr	r3, [pc, #140]	@ (8003c4c <prvAddNewTaskToReadyList+0xc0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d109      	bne.n	8003bda <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003bc6:	4b20      	ldr	r3, [pc, #128]	@ (8003c48 <prvAddNewTaskToReadyList+0xbc>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d802      	bhi.n	8003bda <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003bd4:	4a1c      	ldr	r2, [pc, #112]	@ (8003c48 <prvAddNewTaskToReadyList+0xbc>)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bda:	4b1d      	ldr	r3, [pc, #116]	@ (8003c50 <prvAddNewTaskToReadyList+0xc4>)
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	3301      	adds	r3, #1
 8003be0:	4a1b      	ldr	r2, [pc, #108]	@ (8003c50 <prvAddNewTaskToReadyList+0xc4>)
 8003be2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be8:	2201      	movs	r2, #1
 8003bea:	409a      	lsls	r2, r3
 8003bec:	4b19      	ldr	r3, [pc, #100]	@ (8003c54 <prvAddNewTaskToReadyList+0xc8>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	4a18      	ldr	r2, [pc, #96]	@ (8003c54 <prvAddNewTaskToReadyList+0xc8>)
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4a15      	ldr	r2, [pc, #84]	@ (8003c58 <prvAddNewTaskToReadyList+0xcc>)
 8003c04:	441a      	add	r2, r3
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	f7ff f862 	bl	8002cd6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003c12:	f001 fa9b 	bl	800514c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003c16:	4b0d      	ldr	r3, [pc, #52]	@ (8003c4c <prvAddNewTaskToReadyList+0xc0>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d00e      	beq.n	8003c3c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c48 <prvAddNewTaskToReadyList+0xbc>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d207      	bcs.n	8003c3c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c5c <prvAddNewTaskToReadyList+0xd0>)
 8003c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	f3bf 8f4f 	dsb	sy
 8003c38:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c3c:	bf00      	nop
 8003c3e:	3708      	adds	r7, #8
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20000c8c 	.word	0x20000c8c
 8003c48:	20000b8c 	.word	0x20000b8c
 8003c4c:	20000c98 	.word	0x20000c98
 8003c50:	20000ca8 	.word	0x20000ca8
 8003c54:	20000c94 	.word	0x20000c94
 8003c58:	20000b90 	.word	0x20000b90
 8003c5c:	e000ed04 	.word	0xe000ed04

08003c60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b084      	sub	sp, #16
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d018      	beq.n	8003ca4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003c72:	4b14      	ldr	r3, [pc, #80]	@ (8003cc4 <vTaskDelay+0x64>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00b      	beq.n	8003c92 <vTaskDelay+0x32>
	__asm volatile
 8003c7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c7e:	f383 8811 	msr	BASEPRI, r3
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	f3bf 8f4f 	dsb	sy
 8003c8a:	60bb      	str	r3, [r7, #8]
}
 8003c8c:	bf00      	nop
 8003c8e:	bf00      	nop
 8003c90:	e7fd      	b.n	8003c8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003c92:	f000 f883 	bl	8003d9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003c96:	2100      	movs	r1, #0
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 fd0f 	bl	80046bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003c9e:	f000 f88b 	bl	8003db8 <xTaskResumeAll>
 8003ca2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d107      	bne.n	8003cba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003caa:	4b07      	ldr	r3, [pc, #28]	@ (8003cc8 <vTaskDelay+0x68>)
 8003cac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cb0:	601a      	str	r2, [r3, #0]
 8003cb2:	f3bf 8f4f 	dsb	sy
 8003cb6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003cba:	bf00      	nop
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000cb4 	.word	0x20000cb4
 8003cc8:	e000ed04 	.word	0xe000ed04

08003ccc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	@ 0x28
 8003cd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003cda:	463a      	mov	r2, r7
 8003cdc:	1d39      	adds	r1, r7, #4
 8003cde:	f107 0308 	add.w	r3, r7, #8
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fc fa34 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ce8:	6839      	ldr	r1, [r7, #0]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	9202      	str	r2, [sp, #8]
 8003cf0:	9301      	str	r3, [sp, #4]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	460a      	mov	r2, r1
 8003cfa:	4922      	ldr	r1, [pc, #136]	@ (8003d84 <vTaskStartScheduler+0xb8>)
 8003cfc:	4822      	ldr	r0, [pc, #136]	@ (8003d88 <vTaskStartScheduler+0xbc>)
 8003cfe:	f7ff fe21 	bl	8003944 <xTaskCreateStatic>
 8003d02:	4603      	mov	r3, r0
 8003d04:	4a21      	ldr	r2, [pc, #132]	@ (8003d8c <vTaskStartScheduler+0xc0>)
 8003d06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003d08:	4b20      	ldr	r3, [pc, #128]	@ (8003d8c <vTaskStartScheduler+0xc0>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003d10:	2301      	movs	r3, #1
 8003d12:	617b      	str	r3, [r7, #20]
 8003d14:	e001      	b.n	8003d1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d102      	bne.n	8003d26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003d20:	f000 fd32 	bl	8004788 <xTimerCreateTimerTask>
 8003d24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d116      	bne.n	8003d5a <vTaskStartScheduler+0x8e>
	__asm volatile
 8003d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	613b      	str	r3, [r7, #16]
}
 8003d3e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003d40:	4b13      	ldr	r3, [pc, #76]	@ (8003d90 <vTaskStartScheduler+0xc4>)
 8003d42:	f04f 32ff 	mov.w	r2, #4294967295
 8003d46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003d48:	4b12      	ldr	r3, [pc, #72]	@ (8003d94 <vTaskStartScheduler+0xc8>)
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003d4e:	4b12      	ldr	r3, [pc, #72]	@ (8003d98 <vTaskStartScheduler+0xcc>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003d54:	f001 f958 	bl	8005008 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003d58:	e00f      	b.n	8003d7a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d60:	d10b      	bne.n	8003d7a <vTaskStartScheduler+0xae>
	__asm volatile
 8003d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d66:	f383 8811 	msr	BASEPRI, r3
 8003d6a:	f3bf 8f6f 	isb	sy
 8003d6e:	f3bf 8f4f 	dsb	sy
 8003d72:	60fb      	str	r3, [r7, #12]
}
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop
 8003d78:	e7fd      	b.n	8003d76 <vTaskStartScheduler+0xaa>
}
 8003d7a:	bf00      	nop
 8003d7c:	3718      	adds	r7, #24
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	bd80      	pop	{r7, pc}
 8003d82:	bf00      	nop
 8003d84:	0800581c 	.word	0x0800581c
 8003d88:	080043bd 	.word	0x080043bd
 8003d8c:	20000cb0 	.word	0x20000cb0
 8003d90:	20000cac 	.word	0x20000cac
 8003d94:	20000c98 	.word	0x20000c98
 8003d98:	20000c90 	.word	0x20000c90

08003d9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003da0:	4b04      	ldr	r3, [pc, #16]	@ (8003db4 <vTaskSuspendAll+0x18>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	3301      	adds	r3, #1
 8003da6:	4a03      	ldr	r2, [pc, #12]	@ (8003db4 <vTaskSuspendAll+0x18>)
 8003da8:	6013      	str	r3, [r2, #0]
}
 8003daa:	bf00      	nop
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	20000cb4 	.word	0x20000cb4

08003db8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003dc6:	4b42      	ldr	r3, [pc, #264]	@ (8003ed0 <xTaskResumeAll+0x118>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10b      	bne.n	8003de6 <xTaskResumeAll+0x2e>
	__asm volatile
 8003dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd2:	f383 8811 	msr	BASEPRI, r3
 8003dd6:	f3bf 8f6f 	isb	sy
 8003dda:	f3bf 8f4f 	dsb	sy
 8003dde:	603b      	str	r3, [r7, #0]
}
 8003de0:	bf00      	nop
 8003de2:	bf00      	nop
 8003de4:	e7fd      	b.n	8003de2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003de6:	f001 f981 	bl	80050ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003dea:	4b39      	ldr	r3, [pc, #228]	@ (8003ed0 <xTaskResumeAll+0x118>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	4a37      	ldr	r2, [pc, #220]	@ (8003ed0 <xTaskResumeAll+0x118>)
 8003df2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003df4:	4b36      	ldr	r3, [pc, #216]	@ (8003ed0 <xTaskResumeAll+0x118>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d161      	bne.n	8003ec0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003dfc:	4b35      	ldr	r3, [pc, #212]	@ (8003ed4 <xTaskResumeAll+0x11c>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d05d      	beq.n	8003ec0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e04:	e02e      	b.n	8003e64 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003e06:	4b34      	ldr	r3, [pc, #208]	@ (8003ed8 <xTaskResumeAll+0x120>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	68db      	ldr	r3, [r3, #12]
 8003e0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	3318      	adds	r3, #24
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe ffba 	bl	8002d8c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	3304      	adds	r3, #4
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7fe ffb5 	bl	8002d8c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e26:	2201      	movs	r2, #1
 8003e28:	409a      	lsls	r2, r3
 8003e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8003edc <xTaskResumeAll+0x124>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	4a2a      	ldr	r2, [pc, #168]	@ (8003edc <xTaskResumeAll+0x124>)
 8003e32:	6013      	str	r3, [r2, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e38:	4613      	mov	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4a27      	ldr	r2, [pc, #156]	@ (8003ee0 <xTaskResumeAll+0x128>)
 8003e42:	441a      	add	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	3304      	adds	r3, #4
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	f7fe ff43 	bl	8002cd6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e54:	4b23      	ldr	r3, [pc, #140]	@ (8003ee4 <xTaskResumeAll+0x12c>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d302      	bcc.n	8003e64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003e5e:	4b22      	ldr	r3, [pc, #136]	@ (8003ee8 <xTaskResumeAll+0x130>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e64:	4b1c      	ldr	r3, [pc, #112]	@ (8003ed8 <xTaskResumeAll+0x120>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d1cc      	bne.n	8003e06 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003e72:	f000 fb59 	bl	8004528 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003e76:	4b1d      	ldr	r3, [pc, #116]	@ (8003eec <xTaskResumeAll+0x134>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d010      	beq.n	8003ea4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003e82:	f000 f845 	bl	8003f10 <xTaskIncrementTick>
 8003e86:	4603      	mov	r3, r0
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d002      	beq.n	8003e92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003e8c:	4b16      	ldr	r3, [pc, #88]	@ (8003ee8 <xTaskResumeAll+0x130>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	3b01      	subs	r3, #1
 8003e96:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1f1      	bne.n	8003e82 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003e9e:	4b13      	ldr	r3, [pc, #76]	@ (8003eec <xTaskResumeAll+0x134>)
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003ea4:	4b10      	ldr	r3, [pc, #64]	@ (8003ee8 <xTaskResumeAll+0x130>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d009      	beq.n	8003ec0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003eac:	2301      	movs	r3, #1
 8003eae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef0 <xTaskResumeAll+0x138>)
 8003eb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003eb6:	601a      	str	r2, [r3, #0]
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ec0:	f001 f944 	bl	800514c <vPortExitCritical>

	return xAlreadyYielded;
 8003ec4:	68bb      	ldr	r3, [r7, #8]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
 8003ece:	bf00      	nop
 8003ed0:	20000cb4 	.word	0x20000cb4
 8003ed4:	20000c8c 	.word	0x20000c8c
 8003ed8:	20000c4c 	.word	0x20000c4c
 8003edc:	20000c94 	.word	0x20000c94
 8003ee0:	20000b90 	.word	0x20000b90
 8003ee4:	20000b8c 	.word	0x20000b8c
 8003ee8:	20000ca0 	.word	0x20000ca0
 8003eec:	20000c9c 	.word	0x20000c9c
 8003ef0:	e000ed04 	.word	0xe000ed04

08003ef4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b083      	sub	sp, #12
 8003ef8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003efa:	4b04      	ldr	r3, [pc, #16]	@ (8003f0c <xTaskGetTickCount+0x18>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003f00:	687b      	ldr	r3, [r7, #4]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	370c      	adds	r7, #12
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bc80      	pop	{r7}
 8003f0a:	4770      	bx	lr
 8003f0c:	20000c90 	.word	0x20000c90

08003f10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b086      	sub	sp, #24
 8003f14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003f16:	2300      	movs	r3, #0
 8003f18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f1a:	4b51      	ldr	r3, [pc, #324]	@ (8004060 <xTaskIncrementTick+0x150>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	f040 808e 	bne.w	8004040 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003f24:	4b4f      	ldr	r3, [pc, #316]	@ (8004064 <xTaskIncrementTick+0x154>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3301      	adds	r3, #1
 8003f2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003f2c:	4a4d      	ldr	r2, [pc, #308]	@ (8004064 <xTaskIncrementTick+0x154>)
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d121      	bne.n	8003f7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003f38:	4b4b      	ldr	r3, [pc, #300]	@ (8004068 <xTaskIncrementTick+0x158>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00b      	beq.n	8003f5a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	603b      	str	r3, [r7, #0]
}
 8003f54:	bf00      	nop
 8003f56:	bf00      	nop
 8003f58:	e7fd      	b.n	8003f56 <xTaskIncrementTick+0x46>
 8003f5a:	4b43      	ldr	r3, [pc, #268]	@ (8004068 <xTaskIncrementTick+0x158>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	4b42      	ldr	r3, [pc, #264]	@ (800406c <xTaskIncrementTick+0x15c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a40      	ldr	r2, [pc, #256]	@ (8004068 <xTaskIncrementTick+0x158>)
 8003f66:	6013      	str	r3, [r2, #0]
 8003f68:	4a40      	ldr	r2, [pc, #256]	@ (800406c <xTaskIncrementTick+0x15c>)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	6013      	str	r3, [r2, #0]
 8003f6e:	4b40      	ldr	r3, [pc, #256]	@ (8004070 <xTaskIncrementTick+0x160>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	3301      	adds	r3, #1
 8003f74:	4a3e      	ldr	r2, [pc, #248]	@ (8004070 <xTaskIncrementTick+0x160>)
 8003f76:	6013      	str	r3, [r2, #0]
 8003f78:	f000 fad6 	bl	8004528 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003f7c:	4b3d      	ldr	r3, [pc, #244]	@ (8004074 <xTaskIncrementTick+0x164>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d34d      	bcc.n	8004022 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f86:	4b38      	ldr	r3, [pc, #224]	@ (8004068 <xTaskIncrementTick+0x158>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <xTaskIncrementTick+0x84>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <xTaskIncrementTick+0x86>
 8003f94:	2300      	movs	r3, #0
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d004      	beq.n	8003fa4 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f9a:	4b36      	ldr	r3, [pc, #216]	@ (8004074 <xTaskIncrementTick+0x164>)
 8003f9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003fa0:	601a      	str	r2, [r3, #0]
					break;
 8003fa2:	e03e      	b.n	8004022 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fa4:	4b30      	ldr	r3, [pc, #192]	@ (8004068 <xTaskIncrementTick+0x158>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	429a      	cmp	r2, r3
 8003fba:	d203      	bcs.n	8003fc4 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003fbc:	4a2d      	ldr	r2, [pc, #180]	@ (8004074 <xTaskIncrementTick+0x164>)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6013      	str	r3, [r2, #0]
						break;
 8003fc2:	e02e      	b.n	8004022 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	3304      	adds	r3, #4
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f7fe fedf 	bl	8002d8c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d004      	beq.n	8003fe0 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	3318      	adds	r3, #24
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fe fed6 	bl	8002d8c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe4:	2201      	movs	r2, #1
 8003fe6:	409a      	lsls	r2, r3
 8003fe8:	4b23      	ldr	r3, [pc, #140]	@ (8004078 <xTaskIncrementTick+0x168>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	4a22      	ldr	r2, [pc, #136]	@ (8004078 <xTaskIncrementTick+0x168>)
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	009b      	lsls	r3, r3, #2
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4a1f      	ldr	r2, [pc, #124]	@ (800407c <xTaskIncrementTick+0x16c>)
 8004000:	441a      	add	r2, r3
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	3304      	adds	r3, #4
 8004006:	4619      	mov	r1, r3
 8004008:	4610      	mov	r0, r2
 800400a:	f7fe fe64 	bl	8002cd6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800400e:	68bb      	ldr	r3, [r7, #8]
 8004010:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004012:	4b1b      	ldr	r3, [pc, #108]	@ (8004080 <xTaskIncrementTick+0x170>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004018:	429a      	cmp	r2, r3
 800401a:	d3b4      	bcc.n	8003f86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800401c:	2301      	movs	r3, #1
 800401e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004020:	e7b1      	b.n	8003f86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004022:	4b17      	ldr	r3, [pc, #92]	@ (8004080 <xTaskIncrementTick+0x170>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004028:	4914      	ldr	r1, [pc, #80]	@ (800407c <xTaskIncrementTick+0x16c>)
 800402a:	4613      	mov	r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	440b      	add	r3, r1
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b01      	cmp	r3, #1
 8004038:	d907      	bls.n	800404a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800403a:	2301      	movs	r3, #1
 800403c:	617b      	str	r3, [r7, #20]
 800403e:	e004      	b.n	800404a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004040:	4b10      	ldr	r3, [pc, #64]	@ (8004084 <xTaskIncrementTick+0x174>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	3301      	adds	r3, #1
 8004046:	4a0f      	ldr	r2, [pc, #60]	@ (8004084 <xTaskIncrementTick+0x174>)
 8004048:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800404a:	4b0f      	ldr	r3, [pc, #60]	@ (8004088 <xTaskIncrementTick+0x178>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d001      	beq.n	8004056 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8004052:	2301      	movs	r3, #1
 8004054:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004056:	697b      	ldr	r3, [r7, #20]
}
 8004058:	4618      	mov	r0, r3
 800405a:	3718      	adds	r7, #24
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	20000cb4 	.word	0x20000cb4
 8004064:	20000c90 	.word	0x20000c90
 8004068:	20000c44 	.word	0x20000c44
 800406c:	20000c48 	.word	0x20000c48
 8004070:	20000ca4 	.word	0x20000ca4
 8004074:	20000cac 	.word	0x20000cac
 8004078:	20000c94 	.word	0x20000c94
 800407c:	20000b90 	.word	0x20000b90
 8004080:	20000b8c 	.word	0x20000b8c
 8004084:	20000c9c 	.word	0x20000c9c
 8004088:	20000ca0 	.word	0x20000ca0

0800408c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004092:	4b27      	ldr	r3, [pc, #156]	@ (8004130 <vTaskSwitchContext+0xa4>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800409a:	4b26      	ldr	r3, [pc, #152]	@ (8004134 <vTaskSwitchContext+0xa8>)
 800409c:	2201      	movs	r2, #1
 800409e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80040a0:	e040      	b.n	8004124 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80040a2:	4b24      	ldr	r3, [pc, #144]	@ (8004134 <vTaskSwitchContext+0xa8>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80040a8:	4b23      	ldr	r3, [pc, #140]	@ (8004138 <vTaskSwitchContext+0xac>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	fab3 f383 	clz	r3, r3
 80040b4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80040b6:	7afb      	ldrb	r3, [r7, #11]
 80040b8:	f1c3 031f 	rsb	r3, r3, #31
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	491f      	ldr	r1, [pc, #124]	@ (800413c <vTaskSwitchContext+0xb0>)
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	009b      	lsls	r3, r3, #2
 80040ca:	440b      	add	r3, r1
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d10b      	bne.n	80040ea <vTaskSwitchContext+0x5e>
	__asm volatile
 80040d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d6:	f383 8811 	msr	BASEPRI, r3
 80040da:	f3bf 8f6f 	isb	sy
 80040de:	f3bf 8f4f 	dsb	sy
 80040e2:	607b      	str	r3, [r7, #4]
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	e7fd      	b.n	80040e6 <vTaskSwitchContext+0x5a>
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4613      	mov	r3, r2
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	4413      	add	r3, r2
 80040f2:	009b      	lsls	r3, r3, #2
 80040f4:	4a11      	ldr	r2, [pc, #68]	@ (800413c <vTaskSwitchContext+0xb0>)
 80040f6:	4413      	add	r3, r2
 80040f8:	613b      	str	r3, [r7, #16]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	685a      	ldr	r2, [r3, #4]
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	605a      	str	r2, [r3, #4]
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	685a      	ldr	r2, [r3, #4]
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	3308      	adds	r3, #8
 800410c:	429a      	cmp	r2, r3
 800410e:	d104      	bne.n	800411a <vTaskSwitchContext+0x8e>
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	685a      	ldr	r2, [r3, #4]
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	605a      	str	r2, [r3, #4]
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	4a07      	ldr	r2, [pc, #28]	@ (8004140 <vTaskSwitchContext+0xb4>)
 8004122:	6013      	str	r3, [r2, #0]
}
 8004124:	bf00      	nop
 8004126:	371c      	adds	r7, #28
 8004128:	46bd      	mov	sp, r7
 800412a:	bc80      	pop	{r7}
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	20000cb4 	.word	0x20000cb4
 8004134:	20000ca0 	.word	0x20000ca0
 8004138:	20000c94 	.word	0x20000c94
 800413c:	20000b90 	.word	0x20000b90
 8004140:	20000b8c 	.word	0x20000b8c

08004144 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
 800414c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10b      	bne.n	800416c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004158:	f383 8811 	msr	BASEPRI, r3
 800415c:	f3bf 8f6f 	isb	sy
 8004160:	f3bf 8f4f 	dsb	sy
 8004164:	60fb      	str	r3, [r7, #12]
}
 8004166:	bf00      	nop
 8004168:	bf00      	nop
 800416a:	e7fd      	b.n	8004168 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800416c:	4b07      	ldr	r3, [pc, #28]	@ (800418c <vTaskPlaceOnEventList+0x48>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3318      	adds	r3, #24
 8004172:	4619      	mov	r1, r3
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f7fe fdd1 	bl	8002d1c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800417a:	2101      	movs	r1, #1
 800417c:	6838      	ldr	r0, [r7, #0]
 800417e:	f000 fa9d 	bl	80046bc <prvAddCurrentTaskToDelayedList>
}
 8004182:	bf00      	nop
 8004184:	3710      	adds	r7, #16
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	20000b8c 	.word	0x20000b8c

08004190 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004190:	b580      	push	{r7, lr}
 8004192:	b086      	sub	sp, #24
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10b      	bne.n	80041ba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80041a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	617b      	str	r3, [r7, #20]
}
 80041b4:	bf00      	nop
 80041b6:	bf00      	nop
 80041b8:	e7fd      	b.n	80041b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80041ba:	4b0a      	ldr	r3, [pc, #40]	@ (80041e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	3318      	adds	r3, #24
 80041c0:	4619      	mov	r1, r3
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f7fe fd87 	bl	8002cd6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d002      	beq.n	80041d4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295
 80041d2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80041d4:	6879      	ldr	r1, [r7, #4]
 80041d6:	68b8      	ldr	r0, [r7, #8]
 80041d8:	f000 fa70 	bl	80046bc <prvAddCurrentTaskToDelayedList>
	}
 80041dc:	bf00      	nop
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	20000b8c 	.word	0x20000b8c

080041e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b086      	sub	sp, #24
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	68db      	ldr	r3, [r3, #12]
 80041f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d10b      	bne.n	8004216 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80041fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004202:	f383 8811 	msr	BASEPRI, r3
 8004206:	f3bf 8f6f 	isb	sy
 800420a:	f3bf 8f4f 	dsb	sy
 800420e:	60fb      	str	r3, [r7, #12]
}
 8004210:	bf00      	nop
 8004212:	bf00      	nop
 8004214:	e7fd      	b.n	8004212 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	3318      	adds	r3, #24
 800421a:	4618      	mov	r0, r3
 800421c:	f7fe fdb6 	bl	8002d8c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004220:	4b1d      	ldr	r3, [pc, #116]	@ (8004298 <xTaskRemoveFromEventList+0xb0>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d11c      	bne.n	8004262 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	3304      	adds	r3, #4
 800422c:	4618      	mov	r0, r3
 800422e:	f7fe fdad 	bl	8002d8c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004236:	2201      	movs	r2, #1
 8004238:	409a      	lsls	r2, r3
 800423a:	4b18      	ldr	r3, [pc, #96]	@ (800429c <xTaskRemoveFromEventList+0xb4>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4313      	orrs	r3, r2
 8004240:	4a16      	ldr	r2, [pc, #88]	@ (800429c <xTaskRemoveFromEventList+0xb4>)
 8004242:	6013      	str	r3, [r2, #0]
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004248:	4613      	mov	r3, r2
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	4413      	add	r3, r2
 800424e:	009b      	lsls	r3, r3, #2
 8004250:	4a13      	ldr	r2, [pc, #76]	@ (80042a0 <xTaskRemoveFromEventList+0xb8>)
 8004252:	441a      	add	r2, r3
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	3304      	adds	r3, #4
 8004258:	4619      	mov	r1, r3
 800425a:	4610      	mov	r0, r2
 800425c:	f7fe fd3b 	bl	8002cd6 <vListInsertEnd>
 8004260:	e005      	b.n	800426e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	3318      	adds	r3, #24
 8004266:	4619      	mov	r1, r3
 8004268:	480e      	ldr	r0, [pc, #56]	@ (80042a4 <xTaskRemoveFromEventList+0xbc>)
 800426a:	f7fe fd34 	bl	8002cd6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004272:	4b0d      	ldr	r3, [pc, #52]	@ (80042a8 <xTaskRemoveFromEventList+0xc0>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004278:	429a      	cmp	r2, r3
 800427a:	d905      	bls.n	8004288 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800427c:	2301      	movs	r3, #1
 800427e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004280:	4b0a      	ldr	r3, [pc, #40]	@ (80042ac <xTaskRemoveFromEventList+0xc4>)
 8004282:	2201      	movs	r2, #1
 8004284:	601a      	str	r2, [r3, #0]
 8004286:	e001      	b.n	800428c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004288:	2300      	movs	r3, #0
 800428a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800428c:	697b      	ldr	r3, [r7, #20]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3718      	adds	r7, #24
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	20000cb4 	.word	0x20000cb4
 800429c:	20000c94 	.word	0x20000c94
 80042a0:	20000b90 	.word	0x20000b90
 80042a4:	20000c4c 	.word	0x20000c4c
 80042a8:	20000b8c 	.word	0x20000b8c
 80042ac:	20000ca0 	.word	0x20000ca0

080042b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80042b8:	4b06      	ldr	r3, [pc, #24]	@ (80042d4 <vTaskInternalSetTimeOutState+0x24>)
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80042c0:	4b05      	ldr	r3, [pc, #20]	@ (80042d8 <vTaskInternalSetTimeOutState+0x28>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	605a      	str	r2, [r3, #4]
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bc80      	pop	{r7}
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	20000ca4 	.word	0x20000ca4
 80042d8:	20000c90 	.word	0x20000c90

080042dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b088      	sub	sp, #32
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
 80042e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10b      	bne.n	8004304 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80042ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042f0:	f383 8811 	msr	BASEPRI, r3
 80042f4:	f3bf 8f6f 	isb	sy
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	613b      	str	r3, [r7, #16]
}
 80042fe:	bf00      	nop
 8004300:	bf00      	nop
 8004302:	e7fd      	b.n	8004300 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d10b      	bne.n	8004322 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800430a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	60fb      	str	r3, [r7, #12]
}
 800431c:	bf00      	nop
 800431e:	bf00      	nop
 8004320:	e7fd      	b.n	800431e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004322:	f000 fee3 	bl	80050ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004326:	4b1d      	ldr	r3, [pc, #116]	@ (800439c <xTaskCheckForTimeOut+0xc0>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800433e:	d102      	bne.n	8004346 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004340:	2300      	movs	r3, #0
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	e023      	b.n	800438e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	4b15      	ldr	r3, [pc, #84]	@ (80043a0 <xTaskCheckForTimeOut+0xc4>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	429a      	cmp	r2, r3
 8004350:	d007      	beq.n	8004362 <xTaskCheckForTimeOut+0x86>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	429a      	cmp	r2, r3
 800435a:	d302      	bcc.n	8004362 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800435c:	2301      	movs	r3, #1
 800435e:	61fb      	str	r3, [r7, #28]
 8004360:	e015      	b.n	800438e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	697a      	ldr	r2, [r7, #20]
 8004368:	429a      	cmp	r2, r3
 800436a:	d20b      	bcs.n	8004384 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	1ad2      	subs	r2, r2, r3
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff ff99 	bl	80042b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800437e:	2300      	movs	r3, #0
 8004380:	61fb      	str	r3, [r7, #28]
 8004382:	e004      	b.n	800438e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	2200      	movs	r2, #0
 8004388:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800438a:	2301      	movs	r3, #1
 800438c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800438e:	f000 fedd 	bl	800514c <vPortExitCritical>

	return xReturn;
 8004392:	69fb      	ldr	r3, [r7, #28]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3720      	adds	r7, #32
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	20000c90 	.word	0x20000c90
 80043a0:	20000ca4 	.word	0x20000ca4

080043a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80043a4:	b480      	push	{r7}
 80043a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80043a8:	4b03      	ldr	r3, [pc, #12]	@ (80043b8 <vTaskMissedYield+0x14>)
 80043aa:	2201      	movs	r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
}
 80043ae:	bf00      	nop
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bc80      	pop	{r7}
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	20000ca0 	.word	0x20000ca0

080043bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80043c4:	f000 f852 	bl	800446c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043c8:	4b06      	ldr	r3, [pc, #24]	@ (80043e4 <prvIdleTask+0x28>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d9f9      	bls.n	80043c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80043d0:	4b05      	ldr	r3, [pc, #20]	@ (80043e8 <prvIdleTask+0x2c>)
 80043d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	f3bf 8f4f 	dsb	sy
 80043dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80043e0:	e7f0      	b.n	80043c4 <prvIdleTask+0x8>
 80043e2:	bf00      	nop
 80043e4:	20000b90 	.word	0x20000b90
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80043f2:	2300      	movs	r3, #0
 80043f4:	607b      	str	r3, [r7, #4]
 80043f6:	e00c      	b.n	8004412 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	4613      	mov	r3, r2
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4413      	add	r3, r2
 8004400:	009b      	lsls	r3, r3, #2
 8004402:	4a12      	ldr	r2, [pc, #72]	@ (800444c <prvInitialiseTaskLists+0x60>)
 8004404:	4413      	add	r3, r2
 8004406:	4618      	mov	r0, r3
 8004408:	f7fe fc3a 	bl	8002c80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3301      	adds	r3, #1
 8004410:	607b      	str	r3, [r7, #4]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2b06      	cmp	r3, #6
 8004416:	d9ef      	bls.n	80043f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004418:	480d      	ldr	r0, [pc, #52]	@ (8004450 <prvInitialiseTaskLists+0x64>)
 800441a:	f7fe fc31 	bl	8002c80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800441e:	480d      	ldr	r0, [pc, #52]	@ (8004454 <prvInitialiseTaskLists+0x68>)
 8004420:	f7fe fc2e 	bl	8002c80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004424:	480c      	ldr	r0, [pc, #48]	@ (8004458 <prvInitialiseTaskLists+0x6c>)
 8004426:	f7fe fc2b 	bl	8002c80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800442a:	480c      	ldr	r0, [pc, #48]	@ (800445c <prvInitialiseTaskLists+0x70>)
 800442c:	f7fe fc28 	bl	8002c80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004430:	480b      	ldr	r0, [pc, #44]	@ (8004460 <prvInitialiseTaskLists+0x74>)
 8004432:	f7fe fc25 	bl	8002c80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004436:	4b0b      	ldr	r3, [pc, #44]	@ (8004464 <prvInitialiseTaskLists+0x78>)
 8004438:	4a05      	ldr	r2, [pc, #20]	@ (8004450 <prvInitialiseTaskLists+0x64>)
 800443a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800443c:	4b0a      	ldr	r3, [pc, #40]	@ (8004468 <prvInitialiseTaskLists+0x7c>)
 800443e:	4a05      	ldr	r2, [pc, #20]	@ (8004454 <prvInitialiseTaskLists+0x68>)
 8004440:	601a      	str	r2, [r3, #0]
}
 8004442:	bf00      	nop
 8004444:	3708      	adds	r7, #8
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	20000b90 	.word	0x20000b90
 8004450:	20000c1c 	.word	0x20000c1c
 8004454:	20000c30 	.word	0x20000c30
 8004458:	20000c4c 	.word	0x20000c4c
 800445c:	20000c60 	.word	0x20000c60
 8004460:	20000c78 	.word	0x20000c78
 8004464:	20000c44 	.word	0x20000c44
 8004468:	20000c48 	.word	0x20000c48

0800446c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b082      	sub	sp, #8
 8004470:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004472:	e019      	b.n	80044a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004474:	f000 fe3a 	bl	80050ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004478:	4b10      	ldr	r3, [pc, #64]	@ (80044bc <prvCheckTasksWaitingTermination+0x50>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	3304      	adds	r3, #4
 8004484:	4618      	mov	r0, r3
 8004486:	f7fe fc81 	bl	8002d8c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800448a:	4b0d      	ldr	r3, [pc, #52]	@ (80044c0 <prvCheckTasksWaitingTermination+0x54>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	3b01      	subs	r3, #1
 8004490:	4a0b      	ldr	r2, [pc, #44]	@ (80044c0 <prvCheckTasksWaitingTermination+0x54>)
 8004492:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004494:	4b0b      	ldr	r3, [pc, #44]	@ (80044c4 <prvCheckTasksWaitingTermination+0x58>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	3b01      	subs	r3, #1
 800449a:	4a0a      	ldr	r2, [pc, #40]	@ (80044c4 <prvCheckTasksWaitingTermination+0x58>)
 800449c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800449e:	f000 fe55 	bl	800514c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f000 f810 	bl	80044c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80044a8:	4b06      	ldr	r3, [pc, #24]	@ (80044c4 <prvCheckTasksWaitingTermination+0x58>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d1e1      	bne.n	8004474 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80044b0:	bf00      	nop
 80044b2:	bf00      	nop
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20000c60 	.word	0x20000c60
 80044c0:	20000c8c 	.word	0x20000c8c
 80044c4:	20000c74 	.word	0x20000c74

080044c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
 80044ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d108      	bne.n	80044ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044de:	4618      	mov	r0, r3
 80044e0:	f000 ffce 	bl	8005480 <vPortFree>
				vPortFree( pxTCB );
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 ffcb 	bl	8005480 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80044ea:	e019      	b.n	8004520 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d103      	bne.n	80044fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f000 ffc2 	bl	8005480 <vPortFree>
	}
 80044fc:	e010      	b.n	8004520 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004504:	2b02      	cmp	r3, #2
 8004506:	d00b      	beq.n	8004520 <prvDeleteTCB+0x58>
	__asm volatile
 8004508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800450c:	f383 8811 	msr	BASEPRI, r3
 8004510:	f3bf 8f6f 	isb	sy
 8004514:	f3bf 8f4f 	dsb	sy
 8004518:	60fb      	str	r3, [r7, #12]
}
 800451a:	bf00      	nop
 800451c:	bf00      	nop
 800451e:	e7fd      	b.n	800451c <prvDeleteTCB+0x54>
	}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800452e:	4b0e      	ldr	r3, [pc, #56]	@ (8004568 <prvResetNextTaskUnblockTime+0x40>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d101      	bne.n	800453c <prvResetNextTaskUnblockTime+0x14>
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <prvResetNextTaskUnblockTime+0x16>
 800453c:	2300      	movs	r3, #0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d004      	beq.n	800454c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004542:	4b0a      	ldr	r3, [pc, #40]	@ (800456c <prvResetNextTaskUnblockTime+0x44>)
 8004544:	f04f 32ff 	mov.w	r2, #4294967295
 8004548:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800454a:	e008      	b.n	800455e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800454c:	4b06      	ldr	r3, [pc, #24]	@ (8004568 <prvResetNextTaskUnblockTime+0x40>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	4a04      	ldr	r2, [pc, #16]	@ (800456c <prvResetNextTaskUnblockTime+0x44>)
 800455c:	6013      	str	r3, [r2, #0]
}
 800455e:	bf00      	nop
 8004560:	370c      	adds	r7, #12
 8004562:	46bd      	mov	sp, r7
 8004564:	bc80      	pop	{r7}
 8004566:	4770      	bx	lr
 8004568:	20000c44 	.word	0x20000c44
 800456c:	20000cac 	.word	0x20000cac

08004570 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004576:	4b0b      	ldr	r3, [pc, #44]	@ (80045a4 <xTaskGetSchedulerState+0x34>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d102      	bne.n	8004584 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800457e:	2301      	movs	r3, #1
 8004580:	607b      	str	r3, [r7, #4]
 8004582:	e008      	b.n	8004596 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004584:	4b08      	ldr	r3, [pc, #32]	@ (80045a8 <xTaskGetSchedulerState+0x38>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d102      	bne.n	8004592 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800458c:	2302      	movs	r3, #2
 800458e:	607b      	str	r3, [r7, #4]
 8004590:	e001      	b.n	8004596 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004592:	2300      	movs	r3, #0
 8004594:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004596:	687b      	ldr	r3, [r7, #4]
	}
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	bc80      	pop	{r7}
 80045a0:	4770      	bx	lr
 80045a2:	bf00      	nop
 80045a4:	20000c98 	.word	0x20000c98
 80045a8:	20000cb4 	.word	0x20000cb4

080045ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b086      	sub	sp, #24
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d070      	beq.n	80046a4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80045c2:	4b3b      	ldr	r3, [pc, #236]	@ (80046b0 <xTaskPriorityDisinherit+0x104>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	693a      	ldr	r2, [r7, #16]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d00b      	beq.n	80045e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80045cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d0:	f383 8811 	msr	BASEPRI, r3
 80045d4:	f3bf 8f6f 	isb	sy
 80045d8:	f3bf 8f4f 	dsb	sy
 80045dc:	60fb      	str	r3, [r7, #12]
}
 80045de:	bf00      	nop
 80045e0:	bf00      	nop
 80045e2:	e7fd      	b.n	80045e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80045ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	60bb      	str	r3, [r7, #8]
}
 80045fe:	bf00      	nop
 8004600:	bf00      	nop
 8004602:	e7fd      	b.n	8004600 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004608:	1e5a      	subs	r2, r3, #1
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004616:	429a      	cmp	r2, r3
 8004618:	d044      	beq.n	80046a4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800461e:	2b00      	cmp	r3, #0
 8004620:	d140      	bne.n	80046a4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	3304      	adds	r3, #4
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe fbb0 	bl	8002d8c <uxListRemove>
 800462c:	4603      	mov	r3, r0
 800462e:	2b00      	cmp	r3, #0
 8004630:	d115      	bne.n	800465e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004636:	491f      	ldr	r1, [pc, #124]	@ (80046b4 <xTaskPriorityDisinherit+0x108>)
 8004638:	4613      	mov	r3, r2
 800463a:	009b      	lsls	r3, r3, #2
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	440b      	add	r3, r1
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <xTaskPriorityDisinherit+0xb2>
 8004648:	693b      	ldr	r3, [r7, #16]
 800464a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800464c:	2201      	movs	r2, #1
 800464e:	fa02 f303 	lsl.w	r3, r2, r3
 8004652:	43da      	mvns	r2, r3
 8004654:	4b18      	ldr	r3, [pc, #96]	@ (80046b8 <xTaskPriorityDisinherit+0x10c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4013      	ands	r3, r2
 800465a:	4a17      	ldr	r2, [pc, #92]	@ (80046b8 <xTaskPriorityDisinherit+0x10c>)
 800465c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466a:	f1c3 0207 	rsb	r2, r3, #7
 800466e:	693b      	ldr	r3, [r7, #16]
 8004670:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004676:	2201      	movs	r2, #1
 8004678:	409a      	lsls	r2, r3
 800467a:	4b0f      	ldr	r3, [pc, #60]	@ (80046b8 <xTaskPriorityDisinherit+0x10c>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4313      	orrs	r3, r2
 8004680:	4a0d      	ldr	r2, [pc, #52]	@ (80046b8 <xTaskPriorityDisinherit+0x10c>)
 8004682:	6013      	str	r3, [r2, #0]
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004688:	4613      	mov	r3, r2
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4a08      	ldr	r2, [pc, #32]	@ (80046b4 <xTaskPriorityDisinherit+0x108>)
 8004692:	441a      	add	r2, r3
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	3304      	adds	r3, #4
 8004698:	4619      	mov	r1, r3
 800469a:	4610      	mov	r0, r2
 800469c:	f7fe fb1b 	bl	8002cd6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80046a0:	2301      	movs	r3, #1
 80046a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80046a4:	697b      	ldr	r3, [r7, #20]
	}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3718      	adds	r7, #24
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000b8c 	.word	0x20000b8c
 80046b4:	20000b90 	.word	0x20000b90
 80046b8:	20000c94 	.word	0x20000c94

080046bc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b084      	sub	sp, #16
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
 80046c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80046c6:	4b29      	ldr	r3, [pc, #164]	@ (800476c <prvAddCurrentTaskToDelayedList+0xb0>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80046cc:	4b28      	ldr	r3, [pc, #160]	@ (8004770 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3304      	adds	r3, #4
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fe fb5a 	bl	8002d8c <uxListRemove>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10b      	bne.n	80046f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80046de:	4b24      	ldr	r3, [pc, #144]	@ (8004770 <prvAddCurrentTaskToDelayedList+0xb4>)
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046e4:	2201      	movs	r2, #1
 80046e6:	fa02 f303 	lsl.w	r3, r2, r3
 80046ea:	43da      	mvns	r2, r3
 80046ec:	4b21      	ldr	r3, [pc, #132]	@ (8004774 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4013      	ands	r3, r2
 80046f2:	4a20      	ldr	r2, [pc, #128]	@ (8004774 <prvAddCurrentTaskToDelayedList+0xb8>)
 80046f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fc:	d10a      	bne.n	8004714 <prvAddCurrentTaskToDelayedList+0x58>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d007      	beq.n	8004714 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004704:	4b1a      	ldr	r3, [pc, #104]	@ (8004770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	3304      	adds	r3, #4
 800470a:	4619      	mov	r1, r3
 800470c:	481a      	ldr	r0, [pc, #104]	@ (8004778 <prvAddCurrentTaskToDelayedList+0xbc>)
 800470e:	f7fe fae2 	bl	8002cd6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004712:	e026      	b.n	8004762 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4413      	add	r3, r2
 800471a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800471c:	4b14      	ldr	r3, [pc, #80]	@ (8004770 <prvAddCurrentTaskToDelayedList+0xb4>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	68ba      	ldr	r2, [r7, #8]
 8004722:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	429a      	cmp	r2, r3
 800472a:	d209      	bcs.n	8004740 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800472c:	4b13      	ldr	r3, [pc, #76]	@ (800477c <prvAddCurrentTaskToDelayedList+0xc0>)
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b0f      	ldr	r3, [pc, #60]	@ (8004770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	3304      	adds	r3, #4
 8004736:	4619      	mov	r1, r3
 8004738:	4610      	mov	r0, r2
 800473a:	f7fe faef 	bl	8002d1c <vListInsert>
}
 800473e:	e010      	b.n	8004762 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004740:	4b0f      	ldr	r3, [pc, #60]	@ (8004780 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004742:	681a      	ldr	r2, [r3, #0]
 8004744:	4b0a      	ldr	r3, [pc, #40]	@ (8004770 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	3304      	adds	r3, #4
 800474a:	4619      	mov	r1, r3
 800474c:	4610      	mov	r0, r2
 800474e:	f7fe fae5 	bl	8002d1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004752:	4b0c      	ldr	r3, [pc, #48]	@ (8004784 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68ba      	ldr	r2, [r7, #8]
 8004758:	429a      	cmp	r2, r3
 800475a:	d202      	bcs.n	8004762 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800475c:	4a09      	ldr	r2, [pc, #36]	@ (8004784 <prvAddCurrentTaskToDelayedList+0xc8>)
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	6013      	str	r3, [r2, #0]
}
 8004762:	bf00      	nop
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	20000c90 	.word	0x20000c90
 8004770:	20000b8c 	.word	0x20000b8c
 8004774:	20000c94 	.word	0x20000c94
 8004778:	20000c78 	.word	0x20000c78
 800477c:	20000c48 	.word	0x20000c48
 8004780:	20000c44 	.word	0x20000c44
 8004784:	20000cac 	.word	0x20000cac

08004788 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b08a      	sub	sp, #40	@ 0x28
 800478c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800478e:	2300      	movs	r3, #0
 8004790:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004792:	f000 fb51 	bl	8004e38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004796:	4b1d      	ldr	r3, [pc, #116]	@ (800480c <xTimerCreateTimerTask+0x84>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d021      	beq.n	80047e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80047a2:	2300      	movs	r3, #0
 80047a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80047a6:	1d3a      	adds	r2, r7, #4
 80047a8:	f107 0108 	add.w	r1, r7, #8
 80047ac:	f107 030c 	add.w	r3, r7, #12
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fb fce5 	bl	8000180 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80047b6:	6879      	ldr	r1, [r7, #4]
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	68fa      	ldr	r2, [r7, #12]
 80047bc:	9202      	str	r2, [sp, #8]
 80047be:	9301      	str	r3, [sp, #4]
 80047c0:	2302      	movs	r3, #2
 80047c2:	9300      	str	r3, [sp, #0]
 80047c4:	2300      	movs	r3, #0
 80047c6:	460a      	mov	r2, r1
 80047c8:	4911      	ldr	r1, [pc, #68]	@ (8004810 <xTimerCreateTimerTask+0x88>)
 80047ca:	4812      	ldr	r0, [pc, #72]	@ (8004814 <xTimerCreateTimerTask+0x8c>)
 80047cc:	f7ff f8ba 	bl	8003944 <xTaskCreateStatic>
 80047d0:	4603      	mov	r3, r0
 80047d2:	4a11      	ldr	r2, [pc, #68]	@ (8004818 <xTimerCreateTimerTask+0x90>)
 80047d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80047d6:	4b10      	ldr	r3, [pc, #64]	@ (8004818 <xTimerCreateTimerTask+0x90>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d001      	beq.n	80047e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80047de:	2301      	movs	r3, #1
 80047e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10b      	bne.n	8004800 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80047e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ec:	f383 8811 	msr	BASEPRI, r3
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	613b      	str	r3, [r7, #16]
}
 80047fa:	bf00      	nop
 80047fc:	bf00      	nop
 80047fe:	e7fd      	b.n	80047fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004800:	697b      	ldr	r3, [r7, #20]
}
 8004802:	4618      	mov	r0, r3
 8004804:	3718      	adds	r7, #24
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	20000ce8 	.word	0x20000ce8
 8004810:	08005824 	.word	0x08005824
 8004814:	08004a65 	.word	0x08004a65
 8004818:	20000cec 	.word	0x20000cec

0800481c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800481c:	b580      	push	{r7, lr}
 800481e:	b088      	sub	sp, #32
 8004820:	af02      	add	r7, sp, #8
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800482a:	202c      	movs	r0, #44	@ 0x2c
 800482c:	f000 fd60 	bl	80052f0 <pvPortMalloc>
 8004830:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004832:	697b      	ldr	r3, [r7, #20]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00d      	beq.n	8004854 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004838:	697b      	ldr	r3, [r7, #20]
 800483a:	9301      	str	r3, [sp, #4]
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	9300      	str	r3, [sp, #0]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	68b9      	ldr	r1, [r7, #8]
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f000 f848 	bl	80048dc <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8004854:	697b      	ldr	r3, [r7, #20]
	}
 8004856:	4618      	mov	r0, r3
 8004858:	3718      	adds	r7, #24
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}

0800485e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800485e:	b580      	push	{r7, lr}
 8004860:	b08a      	sub	sp, #40	@ 0x28
 8004862:	af02      	add	r7, sp, #8
 8004864:	60f8      	str	r0, [r7, #12]
 8004866:	60b9      	str	r1, [r7, #8]
 8004868:	607a      	str	r2, [r7, #4]
 800486a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800486c:	232c      	movs	r3, #44	@ 0x2c
 800486e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8004870:	693b      	ldr	r3, [r7, #16]
 8004872:	2b2c      	cmp	r3, #44	@ 0x2c
 8004874:	d00b      	beq.n	800488e <xTimerCreateStatic+0x30>
	__asm volatile
 8004876:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487a:	f383 8811 	msr	BASEPRI, r3
 800487e:	f3bf 8f6f 	isb	sy
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	61bb      	str	r3, [r7, #24]
}
 8004888:	bf00      	nop
 800488a:	bf00      	nop
 800488c:	e7fd      	b.n	800488a <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800488e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10b      	bne.n	80048ac <xTimerCreateStatic+0x4e>
	__asm volatile
 8004894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	617b      	str	r3, [r7, #20]
}
 80048a6:	bf00      	nop
 80048a8:	bf00      	nop
 80048aa:	e7fd      	b.n	80048a8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80048ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048ae:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00d      	beq.n	80048d2 <xTimerCreateStatic+0x74>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	9301      	str	r3, [sp, #4]
 80048ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048bc:	9300      	str	r3, [sp, #0]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	68b9      	ldr	r1, [r7, #8]
 80048c4:	68f8      	ldr	r0, [r7, #12]
 80048c6:	f000 f809 	bl	80048dc <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 80048d2:	69fb      	ldr	r3, [r7, #28]
	}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3720      	adds	r7, #32
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b086      	sub	sp, #24
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	607a      	str	r2, [r7, #4]
 80048e8:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d10b      	bne.n	8004908 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	617b      	str	r3, [r7, #20]
}
 8004902:	bf00      	nop
 8004904:	bf00      	nop
 8004906:	e7fd      	b.n	8004904 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800490a:	2b00      	cmp	r3, #0
 800490c:	d015      	beq.n	800493a <prvInitialiseNewTimer+0x5e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800490e:	f000 fa93 	bl	8004e38 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004914:	68fa      	ldr	r2, [r7, #12]
 8004916:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004918:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800491e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8004924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004926:	683a      	ldr	r2, [r7, #0]
 8004928:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492c:	6a3a      	ldr	r2, [r7, #32]
 800492e:	625a      	str	r2, [r3, #36]	@ 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004932:	3304      	adds	r3, #4
 8004934:	4618      	mov	r0, r3
 8004936:	f7fe f9c2 	bl	8002cbe <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800493a:	bf00      	nop
 800493c:	3718      	adds	r7, #24
 800493e:	46bd      	mov	sp, r7
 8004940:	bd80      	pop	{r7, pc}
	...

08004944 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b08a      	sub	sp, #40	@ 0x28
 8004948:	af00      	add	r7, sp, #0
 800494a:	60f8      	str	r0, [r7, #12]
 800494c:	60b9      	str	r1, [r7, #8]
 800494e:	607a      	str	r2, [r7, #4]
 8004950:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004952:	2300      	movs	r3, #0
 8004954:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10b      	bne.n	8004974 <xTimerGenericCommand+0x30>
	__asm volatile
 800495c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004960:	f383 8811 	msr	BASEPRI, r3
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	f3bf 8f4f 	dsb	sy
 800496c:	623b      	str	r3, [r7, #32]
}
 800496e:	bf00      	nop
 8004970:	bf00      	nop
 8004972:	e7fd      	b.n	8004970 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004974:	4b19      	ldr	r3, [pc, #100]	@ (80049dc <xTimerGenericCommand+0x98>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d02a      	beq.n	80049d2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b05      	cmp	r3, #5
 800498c:	dc18      	bgt.n	80049c0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800498e:	f7ff fdef 	bl	8004570 <xTaskGetSchedulerState>
 8004992:	4603      	mov	r3, r0
 8004994:	2b02      	cmp	r3, #2
 8004996:	d109      	bne.n	80049ac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004998:	4b10      	ldr	r3, [pc, #64]	@ (80049dc <xTimerGenericCommand+0x98>)
 800499a:	6818      	ldr	r0, [r3, #0]
 800499c:	f107 0114 	add.w	r1, r7, #20
 80049a0:	2300      	movs	r3, #0
 80049a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049a4:	f7fe fb60 	bl	8003068 <xQueueGenericSend>
 80049a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80049aa:	e012      	b.n	80049d2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80049ac:	4b0b      	ldr	r3, [pc, #44]	@ (80049dc <xTimerGenericCommand+0x98>)
 80049ae:	6818      	ldr	r0, [r3, #0]
 80049b0:	f107 0114 	add.w	r1, r7, #20
 80049b4:	2300      	movs	r3, #0
 80049b6:	2200      	movs	r2, #0
 80049b8:	f7fe fb56 	bl	8003068 <xQueueGenericSend>
 80049bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80049be:	e008      	b.n	80049d2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80049c0:	4b06      	ldr	r3, [pc, #24]	@ (80049dc <xTimerGenericCommand+0x98>)
 80049c2:	6818      	ldr	r0, [r3, #0]
 80049c4:	f107 0114 	add.w	r1, r7, #20
 80049c8:	2300      	movs	r3, #0
 80049ca:	683a      	ldr	r2, [r7, #0]
 80049cc:	f7fe fc4e 	bl	800326c <xQueueGenericSendFromISR>
 80049d0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80049d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3728      	adds	r7, #40	@ 0x28
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	20000ce8 	.word	0x20000ce8

080049e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b088      	sub	sp, #32
 80049e4:	af02      	add	r7, sp, #8
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004a60 <prvProcessExpiredTimer+0x80>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68db      	ldr	r3, [r3, #12]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	3304      	adds	r3, #4
 80049f8:	4618      	mov	r0, r3
 80049fa:	f7fe f9c7 	bl	8002d8c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d123      	bne.n	8004a4e <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	699a      	ldr	r2, [r3, #24]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	18d1      	adds	r1, r2, r3
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	683a      	ldr	r2, [r7, #0]
 8004a12:	6978      	ldr	r0, [r7, #20]
 8004a14:	f000 f8cc 	bl	8004bb0 <prvInsertTimerInActiveList>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d017      	beq.n	8004a4e <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a1e:	2300      	movs	r3, #0
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	2300      	movs	r3, #0
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	2100      	movs	r1, #0
 8004a28:	6978      	ldr	r0, [r7, #20]
 8004a2a:	f7ff ff8b 	bl	8004944 <xTimerGenericCommand>
 8004a2e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10b      	bne.n	8004a4e <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8004a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	60fb      	str	r3, [r7, #12]
}
 8004a48:	bf00      	nop
 8004a4a:	bf00      	nop
 8004a4c:	e7fd      	b.n	8004a4a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a52:	6978      	ldr	r0, [r7, #20]
 8004a54:	4798      	blx	r3
}
 8004a56:	bf00      	nop
 8004a58:	3718      	adds	r7, #24
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	20000ce0 	.word	0x20000ce0

08004a64 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b084      	sub	sp, #16
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a6c:	f107 0308 	add.w	r3, r7, #8
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 f859 	bl	8004b28 <prvGetNextExpireTime>
 8004a76:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4619      	mov	r1, r3
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 f805 	bl	8004a8c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004a82:	f000 f8d7 	bl	8004c34 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004a86:	bf00      	nop
 8004a88:	e7f0      	b.n	8004a6c <prvTimerTask+0x8>
	...

08004a8c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004a96:	f7ff f981 	bl	8003d9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004a9a:	f107 0308 	add.w	r3, r7, #8
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f000 f866 	bl	8004b70 <prvSampleTimeNow>
 8004aa4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004aa6:	68bb      	ldr	r3, [r7, #8]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d130      	bne.n	8004b0e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d10a      	bne.n	8004ac8 <prvProcessTimerOrBlockTask+0x3c>
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	429a      	cmp	r2, r3
 8004ab8:	d806      	bhi.n	8004ac8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004aba:	f7ff f97d 	bl	8003db8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004abe:	68f9      	ldr	r1, [r7, #12]
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f7ff ff8d 	bl	80049e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004ac6:	e024      	b.n	8004b12 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d008      	beq.n	8004ae0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004ace:	4b13      	ldr	r3, [pc, #76]	@ (8004b1c <prvProcessTimerOrBlockTask+0x90>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	bf0c      	ite	eq
 8004ad8:	2301      	moveq	r3, #1
 8004ada:	2300      	movne	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ae0:	4b0f      	ldr	r3, [pc, #60]	@ (8004b20 <prvProcessTimerOrBlockTask+0x94>)
 8004ae2:	6818      	ldr	r0, [r3, #0]
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	683a      	ldr	r2, [r7, #0]
 8004aec:	4619      	mov	r1, r3
 8004aee:	f7fe fef5 	bl	80038dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004af2:	f7ff f961 	bl	8003db8 <xTaskResumeAll>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10a      	bne.n	8004b12 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004afc:	4b09      	ldr	r3, [pc, #36]	@ (8004b24 <prvProcessTimerOrBlockTask+0x98>)
 8004afe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b02:	601a      	str	r2, [r3, #0]
 8004b04:	f3bf 8f4f 	dsb	sy
 8004b08:	f3bf 8f6f 	isb	sy
}
 8004b0c:	e001      	b.n	8004b12 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004b0e:	f7ff f953 	bl	8003db8 <xTaskResumeAll>
}
 8004b12:	bf00      	nop
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	20000ce4 	.word	0x20000ce4
 8004b20:	20000ce8 	.word	0x20000ce8
 8004b24:	e000ed04 	.word	0xe000ed04

08004b28 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004b30:	4b0e      	ldr	r3, [pc, #56]	@ (8004b6c <prvGetNextExpireTime+0x44>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bf0c      	ite	eq
 8004b3a:	2301      	moveq	r3, #1
 8004b3c:	2300      	movne	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	461a      	mov	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d105      	bne.n	8004b5a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004b4e:	4b07      	ldr	r3, [pc, #28]	@ (8004b6c <prvGetNextExpireTime+0x44>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60fb      	str	r3, [r7, #12]
 8004b58:	e001      	b.n	8004b5e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bc80      	pop	{r7}
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	20000ce0 	.word	0x20000ce0

08004b70 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b084      	sub	sp, #16
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004b78:	f7ff f9bc 	bl	8003ef4 <xTaskGetTickCount>
 8004b7c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004b7e:	4b0b      	ldr	r3, [pc, #44]	@ (8004bac <prvSampleTimeNow+0x3c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68fa      	ldr	r2, [r7, #12]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d205      	bcs.n	8004b94 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004b88:	f000 f8f4 	bl	8004d74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	601a      	str	r2, [r3, #0]
 8004b92:	e002      	b.n	8004b9a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004b9a:	4a04      	ldr	r2, [pc, #16]	@ (8004bac <prvSampleTimeNow+0x3c>)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3710      	adds	r7, #16
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000cf0 	.word	0x20000cf0

08004bb0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b086      	sub	sp, #24
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	68ba      	ldr	r2, [r7, #8]
 8004bc6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	68fa      	ldr	r2, [r7, #12]
 8004bcc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004bce:	68ba      	ldr	r2, [r7, #8]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	429a      	cmp	r2, r3
 8004bd4:	d812      	bhi.n	8004bfc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	1ad2      	subs	r2, r2, r3
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d302      	bcc.n	8004bea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004be4:	2301      	movs	r3, #1
 8004be6:	617b      	str	r3, [r7, #20]
 8004be8:	e01b      	b.n	8004c22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004bea:	4b10      	ldr	r3, [pc, #64]	@ (8004c2c <prvInsertTimerInActiveList+0x7c>)
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	3304      	adds	r3, #4
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	4610      	mov	r0, r2
 8004bf6:	f7fe f891 	bl	8002d1c <vListInsert>
 8004bfa:	e012      	b.n	8004c22 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d206      	bcs.n	8004c12 <prvInsertTimerInActiveList+0x62>
 8004c04:	68ba      	ldr	r2, [r7, #8]
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d302      	bcc.n	8004c12 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	617b      	str	r3, [r7, #20]
 8004c10:	e007      	b.n	8004c22 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004c12:	4b07      	ldr	r3, [pc, #28]	@ (8004c30 <prvInsertTimerInActiveList+0x80>)
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	4610      	mov	r0, r2
 8004c1e:	f7fe f87d 	bl	8002d1c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004c22:	697b      	ldr	r3, [r7, #20]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3718      	adds	r7, #24
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	20000ce4 	.word	0x20000ce4
 8004c30:	20000ce0 	.word	0x20000ce0

08004c34 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08c      	sub	sp, #48	@ 0x30
 8004c38:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004c3a:	e087      	b.n	8004d4c <prvProcessReceivedCommands+0x118>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	f2c0 8084 	blt.w	8004d4c <prvProcessReceivedCommands+0x118>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d004      	beq.n	8004c5a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c52:	3304      	adds	r3, #4
 8004c54:	4618      	mov	r0, r3
 8004c56:	f7fe f899 	bl	8002d8c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004c5a:	1d3b      	adds	r3, r7, #4
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	f7ff ff87 	bl	8004b70 <prvSampleTimeNow>
 8004c62:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	2b09      	cmp	r3, #9
 8004c68:	d86b      	bhi.n	8004d42 <prvProcessReceivedCommands+0x10e>
 8004c6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c70 <prvProcessReceivedCommands+0x3c>)
 8004c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c70:	08004c99 	.word	0x08004c99
 8004c74:	08004c99 	.word	0x08004c99
 8004c78:	08004c99 	.word	0x08004c99
 8004c7c:	08004d43 	.word	0x08004d43
 8004c80:	08004cf7 	.word	0x08004cf7
 8004c84:	08004d31 	.word	0x08004d31
 8004c88:	08004c99 	.word	0x08004c99
 8004c8c:	08004c99 	.word	0x08004c99
 8004c90:	08004d43 	.word	0x08004d43
 8004c94:	08004cf7 	.word	0x08004cf7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004c98:	68fa      	ldr	r2, [r7, #12]
 8004c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	18d1      	adds	r1, r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a3a      	ldr	r2, [r7, #32]
 8004ca4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ca6:	f7ff ff83 	bl	8004bb0 <prvInsertTimerInActiveList>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d04a      	beq.n	8004d46 <prvProcessReceivedCommands+0x112>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cb6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cba:	69db      	ldr	r3, [r3, #28]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d142      	bne.n	8004d46 <prvProcessReceivedCommands+0x112>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	441a      	add	r2, r3
 8004cc8:	2300      	movs	r3, #0
 8004cca:	9300      	str	r3, [sp, #0]
 8004ccc:	2300      	movs	r3, #0
 8004cce:	2100      	movs	r1, #0
 8004cd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cd2:	f7ff fe37 	bl	8004944 <xTimerGenericCommand>
 8004cd6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d133      	bne.n	8004d46 <prvProcessReceivedCommands+0x112>
	__asm volatile
 8004cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ce2:	f383 8811 	msr	BASEPRI, r3
 8004ce6:	f3bf 8f6f 	isb	sy
 8004cea:	f3bf 8f4f 	dsb	sy
 8004cee:	61bb      	str	r3, [r7, #24]
}
 8004cf0:	bf00      	nop
 8004cf2:	bf00      	nop
 8004cf4:	e7fd      	b.n	8004cf2 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004cfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cfe:	699b      	ldr	r3, [r3, #24]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10b      	bne.n	8004d1c <prvProcessReceivedCommands+0xe8>
	__asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	617b      	str	r3, [r7, #20]
}
 8004d16:	bf00      	nop
 8004d18:	bf00      	nop
 8004d1a:	e7fd      	b.n	8004d18 <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d1e:	699a      	ldr	r2, [r3, #24]
 8004d20:	6a3b      	ldr	r3, [r7, #32]
 8004d22:	18d1      	adds	r1, r2, r3
 8004d24:	6a3b      	ldr	r3, [r7, #32]
 8004d26:	6a3a      	ldr	r2, [r7, #32]
 8004d28:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d2a:	f7ff ff41 	bl	8004bb0 <prvInsertTimerInActiveList>
					break;
 8004d2e:	e00d      	b.n	8004d4c <prvProcessReceivedCommands+0x118>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d32:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d107      	bne.n	8004d4a <prvProcessReceivedCommands+0x116>
						{
							vPortFree( pxTimer );
 8004d3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d3c:	f000 fba0 	bl	8005480 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004d40:	e003      	b.n	8004d4a <prvProcessReceivedCommands+0x116>

				default	:
					/* Don't expect to get here. */
					break;
 8004d42:	bf00      	nop
 8004d44:	e002      	b.n	8004d4c <prvProcessReceivedCommands+0x118>
					break;
 8004d46:	bf00      	nop
 8004d48:	e000      	b.n	8004d4c <prvProcessReceivedCommands+0x118>
					break;
 8004d4a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004d4c:	4b08      	ldr	r3, [pc, #32]	@ (8004d70 <prvProcessReceivedCommands+0x13c>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f107 0108 	add.w	r1, r7, #8
 8004d54:	2200      	movs	r2, #0
 8004d56:	4618      	mov	r0, r3
 8004d58:	f7fe fb24 	bl	80033a4 <xQueueReceive>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	f47f af6c 	bne.w	8004c3c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004d64:	bf00      	nop
 8004d66:	bf00      	nop
 8004d68:	3728      	adds	r7, #40	@ 0x28
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
 8004d6e:	bf00      	nop
 8004d70:	20000ce8 	.word	0x20000ce8

08004d74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b088      	sub	sp, #32
 8004d78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004d7a:	e046      	b.n	8004e0a <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8004e30 <prvSwitchTimerLists+0xbc>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004d86:	4b2a      	ldr	r3, [pc, #168]	@ (8004e30 <prvSwitchTimerLists+0xbc>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	68db      	ldr	r3, [r3, #12]
 8004d8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	3304      	adds	r3, #4
 8004d94:	4618      	mov	r0, r3
 8004d96:	f7fd fff9 	bl	8002d8c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	69db      	ldr	r3, [r3, #28]
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d12f      	bne.n	8004e0a <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	4413      	add	r3, r2
 8004db2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d90e      	bls.n	8004dda <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004dc8:	4b19      	ldr	r3, [pc, #100]	@ (8004e30 <prvSwitchTimerLists+0xbc>)
 8004dca:	681a      	ldr	r2, [r3, #0]
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	3304      	adds	r3, #4
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4610      	mov	r0, r2
 8004dd4:	f7fd ffa2 	bl	8002d1c <vListInsert>
 8004dd8:	e017      	b.n	8004e0a <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004dda:	2300      	movs	r3, #0
 8004ddc:	9300      	str	r3, [sp, #0]
 8004dde:	2300      	movs	r3, #0
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	2100      	movs	r1, #0
 8004de4:	68f8      	ldr	r0, [r7, #12]
 8004de6:	f7ff fdad 	bl	8004944 <xTimerGenericCommand>
 8004dea:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10b      	bne.n	8004e0a <prvSwitchTimerLists+0x96>
	__asm volatile
 8004df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df6:	f383 8811 	msr	BASEPRI, r3
 8004dfa:	f3bf 8f6f 	isb	sy
 8004dfe:	f3bf 8f4f 	dsb	sy
 8004e02:	603b      	str	r3, [r7, #0]
}
 8004e04:	bf00      	nop
 8004e06:	bf00      	nop
 8004e08:	e7fd      	b.n	8004e06 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004e0a:	4b09      	ldr	r3, [pc, #36]	@ (8004e30 <prvSwitchTimerLists+0xbc>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1b3      	bne.n	8004d7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004e14:	4b06      	ldr	r3, [pc, #24]	@ (8004e30 <prvSwitchTimerLists+0xbc>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004e1a:	4b06      	ldr	r3, [pc, #24]	@ (8004e34 <prvSwitchTimerLists+0xc0>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a04      	ldr	r2, [pc, #16]	@ (8004e30 <prvSwitchTimerLists+0xbc>)
 8004e20:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004e22:	4a04      	ldr	r2, [pc, #16]	@ (8004e34 <prvSwitchTimerLists+0xc0>)
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	6013      	str	r3, [r2, #0]
}
 8004e28:	bf00      	nop
 8004e2a:	3718      	adds	r7, #24
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	20000ce0 	.word	0x20000ce0
 8004e34:	20000ce4 	.word	0x20000ce4

08004e38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004e3e:	f000 f955 	bl	80050ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004e42:	4b15      	ldr	r3, [pc, #84]	@ (8004e98 <prvCheckForValidListAndQueue+0x60>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d120      	bne.n	8004e8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004e4a:	4814      	ldr	r0, [pc, #80]	@ (8004e9c <prvCheckForValidListAndQueue+0x64>)
 8004e4c:	f7fd ff18 	bl	8002c80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004e50:	4813      	ldr	r0, [pc, #76]	@ (8004ea0 <prvCheckForValidListAndQueue+0x68>)
 8004e52:	f7fd ff15 	bl	8002c80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004e56:	4b13      	ldr	r3, [pc, #76]	@ (8004ea4 <prvCheckForValidListAndQueue+0x6c>)
 8004e58:	4a10      	ldr	r2, [pc, #64]	@ (8004e9c <prvCheckForValidListAndQueue+0x64>)
 8004e5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004e5c:	4b12      	ldr	r3, [pc, #72]	@ (8004ea8 <prvCheckForValidListAndQueue+0x70>)
 8004e5e:	4a10      	ldr	r2, [pc, #64]	@ (8004ea0 <prvCheckForValidListAndQueue+0x68>)
 8004e60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004e62:	2300      	movs	r3, #0
 8004e64:	9300      	str	r3, [sp, #0]
 8004e66:	4b11      	ldr	r3, [pc, #68]	@ (8004eac <prvCheckForValidListAndQueue+0x74>)
 8004e68:	4a11      	ldr	r2, [pc, #68]	@ (8004eb0 <prvCheckForValidListAndQueue+0x78>)
 8004e6a:	210c      	movs	r1, #12
 8004e6c:	200a      	movs	r0, #10
 8004e6e:	f7fe f821 	bl	8002eb4 <xQueueGenericCreateStatic>
 8004e72:	4603      	mov	r3, r0
 8004e74:	4a08      	ldr	r2, [pc, #32]	@ (8004e98 <prvCheckForValidListAndQueue+0x60>)
 8004e76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004e78:	4b07      	ldr	r3, [pc, #28]	@ (8004e98 <prvCheckForValidListAndQueue+0x60>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d005      	beq.n	8004e8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004e80:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <prvCheckForValidListAndQueue+0x60>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	490b      	ldr	r1, [pc, #44]	@ (8004eb4 <prvCheckForValidListAndQueue+0x7c>)
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7fe fd00 	bl	800388c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e8c:	f000 f95e 	bl	800514c <vPortExitCritical>
}
 8004e90:	bf00      	nop
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20000ce8 	.word	0x20000ce8
 8004e9c:	20000cb8 	.word	0x20000cb8
 8004ea0:	20000ccc 	.word	0x20000ccc
 8004ea4:	20000ce0 	.word	0x20000ce0
 8004ea8:	20000ce4 	.word	0x20000ce4
 8004eac:	20000d6c 	.word	0x20000d6c
 8004eb0:	20000cf4 	.word	0x20000cf4
 8004eb4:	0800582c 	.word	0x0800582c

08004eb8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10b      	bne.n	8004ee2 <xTimerIsTimerActive+0x2a>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	60fb      	str	r3, [r7, #12]
}
 8004edc:	bf00      	nop
 8004ede:	bf00      	nop
 8004ee0:	e7fd      	b.n	8004ede <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8004ee2:	f000 f903 	bl	80050ec <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	bf14      	ite	ne
 8004eee:	2301      	movne	r3, #1
 8004ef0:	2300      	moveq	r3, #0
 8004ef2:	b2db      	uxtb	r3, r3
 8004ef4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8004ef6:	f000 f929 	bl	800514c <vPortExitCritical>

	return xTimerIsInActiveList;
 8004efa:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8004efc:	4618      	mov	r0, r3
 8004efe:	3718      	adds	r7, #24
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	3b04      	subs	r3, #4
 8004f14:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004f1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	3b04      	subs	r3, #4
 8004f22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	f023 0201 	bic.w	r2, r3, #1
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	3b04      	subs	r3, #4
 8004f32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004f34:	4a08      	ldr	r2, [pc, #32]	@ (8004f58 <pxPortInitialiseStack+0x54>)
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	3b14      	subs	r3, #20
 8004f3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	3b20      	subs	r3, #32
 8004f4a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr
 8004f58:	08004f5d 	.word	0x08004f5d

08004f5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004f62:	2300      	movs	r3, #0
 8004f64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004f66:	4b12      	ldr	r3, [pc, #72]	@ (8004fb0 <prvTaskExitError+0x54>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f6e:	d00b      	beq.n	8004f88 <prvTaskExitError+0x2c>
	__asm volatile
 8004f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f74:	f383 8811 	msr	BASEPRI, r3
 8004f78:	f3bf 8f6f 	isb	sy
 8004f7c:	f3bf 8f4f 	dsb	sy
 8004f80:	60fb      	str	r3, [r7, #12]
}
 8004f82:	bf00      	nop
 8004f84:	bf00      	nop
 8004f86:	e7fd      	b.n	8004f84 <prvTaskExitError+0x28>
	__asm volatile
 8004f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8c:	f383 8811 	msr	BASEPRI, r3
 8004f90:	f3bf 8f6f 	isb	sy
 8004f94:	f3bf 8f4f 	dsb	sy
 8004f98:	60bb      	str	r3, [r7, #8]
}
 8004f9a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004f9c:	bf00      	nop
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0fc      	beq.n	8004f9e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004fa4:	bf00      	nop
 8004fa6:	bf00      	nop
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bc80      	pop	{r7}
 8004fae:	4770      	bx	lr
 8004fb0:	20000014 	.word	0x20000014
	...

08004fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004fc0:	4b07      	ldr	r3, [pc, #28]	@ (8004fe0 <pxCurrentTCBConst2>)
 8004fc2:	6819      	ldr	r1, [r3, #0]
 8004fc4:	6808      	ldr	r0, [r1, #0]
 8004fc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004fca:	f380 8809 	msr	PSP, r0
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f04f 0000 	mov.w	r0, #0
 8004fd6:	f380 8811 	msr	BASEPRI, r0
 8004fda:	f04e 0e0d 	orr.w	lr, lr, #13
 8004fde:	4770      	bx	lr

08004fe0 <pxCurrentTCBConst2>:
 8004fe0:	20000b8c 	.word	0x20000b8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004fe4:	bf00      	nop
 8004fe6:	bf00      	nop

08004fe8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004fe8:	4806      	ldr	r0, [pc, #24]	@ (8005004 <prvPortStartFirstTask+0x1c>)
 8004fea:	6800      	ldr	r0, [r0, #0]
 8004fec:	6800      	ldr	r0, [r0, #0]
 8004fee:	f380 8808 	msr	MSP, r0
 8004ff2:	b662      	cpsie	i
 8004ff4:	b661      	cpsie	f
 8004ff6:	f3bf 8f4f 	dsb	sy
 8004ffa:	f3bf 8f6f 	isb	sy
 8004ffe:	df00      	svc	0
 8005000:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005002:	bf00      	nop
 8005004:	e000ed08 	.word	0xe000ed08

08005008 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800500e:	4b32      	ldr	r3, [pc, #200]	@ (80050d8 <xPortStartScheduler+0xd0>)
 8005010:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	b2db      	uxtb	r3, r3
 8005018:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	22ff      	movs	r2, #255	@ 0xff
 800501e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	b2db      	uxtb	r3, r3
 8005026:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005028:	78fb      	ldrb	r3, [r7, #3]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005030:	b2da      	uxtb	r2, r3
 8005032:	4b2a      	ldr	r3, [pc, #168]	@ (80050dc <xPortStartScheduler+0xd4>)
 8005034:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005036:	4b2a      	ldr	r3, [pc, #168]	@ (80050e0 <xPortStartScheduler+0xd8>)
 8005038:	2207      	movs	r2, #7
 800503a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800503c:	e009      	b.n	8005052 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800503e:	4b28      	ldr	r3, [pc, #160]	@ (80050e0 <xPortStartScheduler+0xd8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	3b01      	subs	r3, #1
 8005044:	4a26      	ldr	r2, [pc, #152]	@ (80050e0 <xPortStartScheduler+0xd8>)
 8005046:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005048:	78fb      	ldrb	r3, [r7, #3]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	005b      	lsls	r3, r3, #1
 800504e:	b2db      	uxtb	r3, r3
 8005050:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005052:	78fb      	ldrb	r3, [r7, #3]
 8005054:	b2db      	uxtb	r3, r3
 8005056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800505a:	2b80      	cmp	r3, #128	@ 0x80
 800505c:	d0ef      	beq.n	800503e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800505e:	4b20      	ldr	r3, [pc, #128]	@ (80050e0 <xPortStartScheduler+0xd8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f1c3 0307 	rsb	r3, r3, #7
 8005066:	2b04      	cmp	r3, #4
 8005068:	d00b      	beq.n	8005082 <xPortStartScheduler+0x7a>
	__asm volatile
 800506a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	60bb      	str	r3, [r7, #8]
}
 800507c:	bf00      	nop
 800507e:	bf00      	nop
 8005080:	e7fd      	b.n	800507e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005082:	4b17      	ldr	r3, [pc, #92]	@ (80050e0 <xPortStartScheduler+0xd8>)
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	021b      	lsls	r3, r3, #8
 8005088:	4a15      	ldr	r2, [pc, #84]	@ (80050e0 <xPortStartScheduler+0xd8>)
 800508a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800508c:	4b14      	ldr	r3, [pc, #80]	@ (80050e0 <xPortStartScheduler+0xd8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005094:	4a12      	ldr	r2, [pc, #72]	@ (80050e0 <xPortStartScheduler+0xd8>)
 8005096:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	b2da      	uxtb	r2, r3
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80050a0:	4b10      	ldr	r3, [pc, #64]	@ (80050e4 <xPortStartScheduler+0xdc>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a0f      	ldr	r2, [pc, #60]	@ (80050e4 <xPortStartScheduler+0xdc>)
 80050a6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80050aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80050ac:	4b0d      	ldr	r3, [pc, #52]	@ (80050e4 <xPortStartScheduler+0xdc>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a0c      	ldr	r2, [pc, #48]	@ (80050e4 <xPortStartScheduler+0xdc>)
 80050b2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80050b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80050b8:	f000 f8b8 	bl	800522c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80050bc:	4b0a      	ldr	r3, [pc, #40]	@ (80050e8 <xPortStartScheduler+0xe0>)
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80050c2:	f7ff ff91 	bl	8004fe8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80050c6:	f7fe ffe1 	bl	800408c <vTaskSwitchContext>
	prvTaskExitError();
 80050ca:	f7ff ff47 	bl	8004f5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3710      	adds	r7, #16
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	e000e400 	.word	0xe000e400
 80050dc:	20000db4 	.word	0x20000db4
 80050e0:	20000db8 	.word	0x20000db8
 80050e4:	e000ed20 	.word	0xe000ed20
 80050e8:	20000014 	.word	0x20000014

080050ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80050ec:	b480      	push	{r7}
 80050ee:	b083      	sub	sp, #12
 80050f0:	af00      	add	r7, sp, #0
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	607b      	str	r3, [r7, #4]
}
 8005104:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005106:	4b0f      	ldr	r3, [pc, #60]	@ (8005144 <vPortEnterCritical+0x58>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	3301      	adds	r3, #1
 800510c:	4a0d      	ldr	r2, [pc, #52]	@ (8005144 <vPortEnterCritical+0x58>)
 800510e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005110:	4b0c      	ldr	r3, [pc, #48]	@ (8005144 <vPortEnterCritical+0x58>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d110      	bne.n	800513a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005118:	4b0b      	ldr	r3, [pc, #44]	@ (8005148 <vPortEnterCritical+0x5c>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	b2db      	uxtb	r3, r3
 800511e:	2b00      	cmp	r3, #0
 8005120:	d00b      	beq.n	800513a <vPortEnterCritical+0x4e>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	603b      	str	r3, [r7, #0]
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop
 8005138:	e7fd      	b.n	8005136 <vPortEnterCritical+0x4a>
	}
}
 800513a:	bf00      	nop
 800513c:	370c      	adds	r7, #12
 800513e:	46bd      	mov	sp, r7
 8005140:	bc80      	pop	{r7}
 8005142:	4770      	bx	lr
 8005144:	20000014 	.word	0x20000014
 8005148:	e000ed04 	.word	0xe000ed04

0800514c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005152:	4b12      	ldr	r3, [pc, #72]	@ (800519c <vPortExitCritical+0x50>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d10b      	bne.n	8005172 <vPortExitCritical+0x26>
	__asm volatile
 800515a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	607b      	str	r3, [r7, #4]
}
 800516c:	bf00      	nop
 800516e:	bf00      	nop
 8005170:	e7fd      	b.n	800516e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005172:	4b0a      	ldr	r3, [pc, #40]	@ (800519c <vPortExitCritical+0x50>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	3b01      	subs	r3, #1
 8005178:	4a08      	ldr	r2, [pc, #32]	@ (800519c <vPortExitCritical+0x50>)
 800517a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800517c:	4b07      	ldr	r3, [pc, #28]	@ (800519c <vPortExitCritical+0x50>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d105      	bne.n	8005190 <vPortExitCritical+0x44>
 8005184:	2300      	movs	r3, #0
 8005186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	f383 8811 	msr	BASEPRI, r3
}
 800518e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	bc80      	pop	{r7}
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	20000014 	.word	0x20000014

080051a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80051a0:	f3ef 8009 	mrs	r0, PSP
 80051a4:	f3bf 8f6f 	isb	sy
 80051a8:	4b0d      	ldr	r3, [pc, #52]	@ (80051e0 <pxCurrentTCBConst>)
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051b0:	6010      	str	r0, [r2, #0]
 80051b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80051b6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80051ba:	f380 8811 	msr	BASEPRI, r0
 80051be:	f7fe ff65 	bl	800408c <vTaskSwitchContext>
 80051c2:	f04f 0000 	mov.w	r0, #0
 80051c6:	f380 8811 	msr	BASEPRI, r0
 80051ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80051ce:	6819      	ldr	r1, [r3, #0]
 80051d0:	6808      	ldr	r0, [r1, #0]
 80051d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80051d6:	f380 8809 	msr	PSP, r0
 80051da:	f3bf 8f6f 	isb	sy
 80051de:	4770      	bx	lr

080051e0 <pxCurrentTCBConst>:
 80051e0:	20000b8c 	.word	0x20000b8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80051e4:	bf00      	nop
 80051e6:	bf00      	nop

080051e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
	__asm volatile
 80051ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f2:	f383 8811 	msr	BASEPRI, r3
 80051f6:	f3bf 8f6f 	isb	sy
 80051fa:	f3bf 8f4f 	dsb	sy
 80051fe:	607b      	str	r3, [r7, #4]
}
 8005200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005202:	f7fe fe85 	bl	8003f10 <xTaskIncrementTick>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d003      	beq.n	8005214 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800520c:	4b06      	ldr	r3, [pc, #24]	@ (8005228 <xPortSysTickHandler+0x40>)
 800520e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005212:	601a      	str	r2, [r3, #0]
 8005214:	2300      	movs	r3, #0
 8005216:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	f383 8811 	msr	BASEPRI, r3
}
 800521e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005220:	bf00      	nop
 8005222:	3708      	adds	r7, #8
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	e000ed04 	.word	0xe000ed04

0800522c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005230:	4b0a      	ldr	r3, [pc, #40]	@ (800525c <vPortSetupTimerInterrupt+0x30>)
 8005232:	2200      	movs	r2, #0
 8005234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005236:	4b0a      	ldr	r3, [pc, #40]	@ (8005260 <vPortSetupTimerInterrupt+0x34>)
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800523c:	4b09      	ldr	r3, [pc, #36]	@ (8005264 <vPortSetupTimerInterrupt+0x38>)
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a09      	ldr	r2, [pc, #36]	@ (8005268 <vPortSetupTimerInterrupt+0x3c>)
 8005242:	fba2 2303 	umull	r2, r3, r2, r3
 8005246:	099b      	lsrs	r3, r3, #6
 8005248:	4a08      	ldr	r2, [pc, #32]	@ (800526c <vPortSetupTimerInterrupt+0x40>)
 800524a:	3b01      	subs	r3, #1
 800524c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800524e:	4b03      	ldr	r3, [pc, #12]	@ (800525c <vPortSetupTimerInterrupt+0x30>)
 8005250:	2207      	movs	r2, #7
 8005252:	601a      	str	r2, [r3, #0]
}
 8005254:	bf00      	nop
 8005256:	46bd      	mov	sp, r7
 8005258:	bc80      	pop	{r7}
 800525a:	4770      	bx	lr
 800525c:	e000e010 	.word	0xe000e010
 8005260:	e000e018 	.word	0xe000e018
 8005264:	20000008 	.word	0x20000008
 8005268:	10624dd3 	.word	0x10624dd3
 800526c:	e000e014 	.word	0xe000e014

08005270 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005276:	f3ef 8305 	mrs	r3, IPSR
 800527a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	2b0f      	cmp	r3, #15
 8005280:	d915      	bls.n	80052ae <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005282:	4a17      	ldr	r2, [pc, #92]	@ (80052e0 <vPortValidateInterruptPriority+0x70>)
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4413      	add	r3, r2
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800528c:	4b15      	ldr	r3, [pc, #84]	@ (80052e4 <vPortValidateInterruptPriority+0x74>)
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	7afa      	ldrb	r2, [r7, #11]
 8005292:	429a      	cmp	r2, r3
 8005294:	d20b      	bcs.n	80052ae <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800529a:	f383 8811 	msr	BASEPRI, r3
 800529e:	f3bf 8f6f 	isb	sy
 80052a2:	f3bf 8f4f 	dsb	sy
 80052a6:	607b      	str	r3, [r7, #4]
}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	e7fd      	b.n	80052aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80052ae:	4b0e      	ldr	r3, [pc, #56]	@ (80052e8 <vPortValidateInterruptPriority+0x78>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80052b6:	4b0d      	ldr	r3, [pc, #52]	@ (80052ec <vPortValidateInterruptPriority+0x7c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d90b      	bls.n	80052d6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	603b      	str	r3, [r7, #0]
}
 80052d0:	bf00      	nop
 80052d2:	bf00      	nop
 80052d4:	e7fd      	b.n	80052d2 <vPortValidateInterruptPriority+0x62>
	}
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	bc80      	pop	{r7}
 80052de:	4770      	bx	lr
 80052e0:	e000e3f0 	.word	0xe000e3f0
 80052e4:	20000db4 	.word	0x20000db4
 80052e8:	e000ed0c 	.word	0xe000ed0c
 80052ec:	20000db8 	.word	0x20000db8

080052f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08a      	sub	sp, #40	@ 0x28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80052f8:	2300      	movs	r3, #0
 80052fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80052fc:	f7fe fd4e 	bl	8003d9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005300:	4b5a      	ldr	r3, [pc, #360]	@ (800546c <pvPortMalloc+0x17c>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d101      	bne.n	800530c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005308:	f000 f916 	bl	8005538 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800530c:	4b58      	ldr	r3, [pc, #352]	@ (8005470 <pvPortMalloc+0x180>)
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4013      	ands	r3, r2
 8005314:	2b00      	cmp	r3, #0
 8005316:	f040 8090 	bne.w	800543a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d01e      	beq.n	800535e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005320:	2208      	movs	r2, #8
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4413      	add	r3, r2
 8005326:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f003 0307 	and.w	r3, r3, #7
 800532e:	2b00      	cmp	r3, #0
 8005330:	d015      	beq.n	800535e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f023 0307 	bic.w	r3, r3, #7
 8005338:	3308      	adds	r3, #8
 800533a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f003 0307 	and.w	r3, r3, #7
 8005342:	2b00      	cmp	r3, #0
 8005344:	d00b      	beq.n	800535e <pvPortMalloc+0x6e>
	__asm volatile
 8005346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	617b      	str	r3, [r7, #20]
}
 8005358:	bf00      	nop
 800535a:	bf00      	nop
 800535c:	e7fd      	b.n	800535a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d06a      	beq.n	800543a <pvPortMalloc+0x14a>
 8005364:	4b43      	ldr	r3, [pc, #268]	@ (8005474 <pvPortMalloc+0x184>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	429a      	cmp	r2, r3
 800536c:	d865      	bhi.n	800543a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800536e:	4b42      	ldr	r3, [pc, #264]	@ (8005478 <pvPortMalloc+0x188>)
 8005370:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005372:	4b41      	ldr	r3, [pc, #260]	@ (8005478 <pvPortMalloc+0x188>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005378:	e004      	b.n	8005384 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800537a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800537e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	685b      	ldr	r3, [r3, #4]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	429a      	cmp	r2, r3
 800538c:	d903      	bls.n	8005396 <pvPortMalloc+0xa6>
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1f1      	bne.n	800537a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005396:	4b35      	ldr	r3, [pc, #212]	@ (800546c <pvPortMalloc+0x17c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800539c:	429a      	cmp	r2, r3
 800539e:	d04c      	beq.n	800543a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	2208      	movs	r2, #8
 80053a6:	4413      	add	r3, r2
 80053a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	6a3b      	ldr	r3, [r7, #32]
 80053b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	1ad2      	subs	r2, r2, r3
 80053ba:	2308      	movs	r3, #8
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	429a      	cmp	r2, r3
 80053c0:	d920      	bls.n	8005404 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80053c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4413      	add	r3, r2
 80053c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80053ca:	69bb      	ldr	r3, [r7, #24]
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00b      	beq.n	80053ec <pvPortMalloc+0xfc>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	613b      	str	r3, [r7, #16]
}
 80053e6:	bf00      	nop
 80053e8:	bf00      	nop
 80053ea:	e7fd      	b.n	80053e8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80053ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ee:	685a      	ldr	r2, [r3, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	1ad2      	subs	r2, r2, r3
 80053f4:	69bb      	ldr	r3, [r7, #24]
 80053f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80053f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053fa:	687a      	ldr	r2, [r7, #4]
 80053fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80053fe:	69b8      	ldr	r0, [r7, #24]
 8005400:	f000 f8fc 	bl	80055fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005404:	4b1b      	ldr	r3, [pc, #108]	@ (8005474 <pvPortMalloc+0x184>)
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	4a19      	ldr	r2, [pc, #100]	@ (8005474 <pvPortMalloc+0x184>)
 8005410:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005412:	4b18      	ldr	r3, [pc, #96]	@ (8005474 <pvPortMalloc+0x184>)
 8005414:	681a      	ldr	r2, [r3, #0]
 8005416:	4b19      	ldr	r3, [pc, #100]	@ (800547c <pvPortMalloc+0x18c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	429a      	cmp	r2, r3
 800541c:	d203      	bcs.n	8005426 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800541e:	4b15      	ldr	r3, [pc, #84]	@ (8005474 <pvPortMalloc+0x184>)
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a16      	ldr	r2, [pc, #88]	@ (800547c <pvPortMalloc+0x18c>)
 8005424:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	4b11      	ldr	r3, [pc, #68]	@ (8005470 <pvPortMalloc+0x180>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	431a      	orrs	r2, r3
 8005430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005432:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800543a:	f7fe fcbd 	bl	8003db8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00b      	beq.n	8005460 <pvPortMalloc+0x170>
	__asm volatile
 8005448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800544c:	f383 8811 	msr	BASEPRI, r3
 8005450:	f3bf 8f6f 	isb	sy
 8005454:	f3bf 8f4f 	dsb	sy
 8005458:	60fb      	str	r3, [r7, #12]
}
 800545a:	bf00      	nop
 800545c:	bf00      	nop
 800545e:	e7fd      	b.n	800545c <pvPortMalloc+0x16c>
	return pvReturn;
 8005460:	69fb      	ldr	r3, [r7, #28]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3728      	adds	r7, #40	@ 0x28
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
 800546a:	bf00      	nop
 800546c:	200019c4 	.word	0x200019c4
 8005470:	200019d0 	.word	0x200019d0
 8005474:	200019c8 	.word	0x200019c8
 8005478:	200019bc 	.word	0x200019bc
 800547c:	200019cc 	.word	0x200019cc

08005480 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b086      	sub	sp, #24
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d04a      	beq.n	8005528 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005492:	2308      	movs	r3, #8
 8005494:	425b      	negs	r3, r3
 8005496:	697a      	ldr	r2, [r7, #20]
 8005498:	4413      	add	r3, r2
 800549a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	4b22      	ldr	r3, [pc, #136]	@ (8005530 <vPortFree+0xb0>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	4013      	ands	r3, r2
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10b      	bne.n	80054c6 <vPortFree+0x46>
	__asm volatile
 80054ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b2:	f383 8811 	msr	BASEPRI, r3
 80054b6:	f3bf 8f6f 	isb	sy
 80054ba:	f3bf 8f4f 	dsb	sy
 80054be:	60fb      	str	r3, [r7, #12]
}
 80054c0:	bf00      	nop
 80054c2:	bf00      	nop
 80054c4:	e7fd      	b.n	80054c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054c6:	693b      	ldr	r3, [r7, #16]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00b      	beq.n	80054e6 <vPortFree+0x66>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	60bb      	str	r3, [r7, #8]
}
 80054e0:	bf00      	nop
 80054e2:	bf00      	nop
 80054e4:	e7fd      	b.n	80054e2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	685a      	ldr	r2, [r3, #4]
 80054ea:	4b11      	ldr	r3, [pc, #68]	@ (8005530 <vPortFree+0xb0>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4013      	ands	r3, r2
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d019      	beq.n	8005528 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d115      	bne.n	8005528 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	4b0b      	ldr	r3, [pc, #44]	@ (8005530 <vPortFree+0xb0>)
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	43db      	mvns	r3, r3
 8005506:	401a      	ands	r2, r3
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800550c:	f7fe fc46 	bl	8003d9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	685a      	ldr	r2, [r3, #4]
 8005514:	4b07      	ldr	r3, [pc, #28]	@ (8005534 <vPortFree+0xb4>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4413      	add	r3, r2
 800551a:	4a06      	ldr	r2, [pc, #24]	@ (8005534 <vPortFree+0xb4>)
 800551c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800551e:	6938      	ldr	r0, [r7, #16]
 8005520:	f000 f86c 	bl	80055fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005524:	f7fe fc48 	bl	8003db8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005528:	bf00      	nop
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	200019d0 	.word	0x200019d0
 8005534:	200019c8 	.word	0x200019c8

08005538 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005538:	b480      	push	{r7}
 800553a:	b085      	sub	sp, #20
 800553c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800553e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005542:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005544:	4b27      	ldr	r3, [pc, #156]	@ (80055e4 <prvHeapInit+0xac>)
 8005546:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f003 0307 	and.w	r3, r3, #7
 800554e:	2b00      	cmp	r3, #0
 8005550:	d00c      	beq.n	800556c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	3307      	adds	r3, #7
 8005556:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	f023 0307 	bic.w	r3, r3, #7
 800555e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	1ad3      	subs	r3, r2, r3
 8005566:	4a1f      	ldr	r2, [pc, #124]	@ (80055e4 <prvHeapInit+0xac>)
 8005568:	4413      	add	r3, r2
 800556a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005570:	4a1d      	ldr	r2, [pc, #116]	@ (80055e8 <prvHeapInit+0xb0>)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005576:	4b1c      	ldr	r3, [pc, #112]	@ (80055e8 <prvHeapInit+0xb0>)
 8005578:	2200      	movs	r2, #0
 800557a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	4413      	add	r3, r2
 8005582:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005584:	2208      	movs	r2, #8
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	1a9b      	subs	r3, r3, r2
 800558a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f023 0307 	bic.w	r3, r3, #7
 8005592:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	4a15      	ldr	r2, [pc, #84]	@ (80055ec <prvHeapInit+0xb4>)
 8005598:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800559a:	4b14      	ldr	r3, [pc, #80]	@ (80055ec <prvHeapInit+0xb4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2200      	movs	r2, #0
 80055a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80055a2:	4b12      	ldr	r3, [pc, #72]	@ (80055ec <prvHeapInit+0xb4>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	2200      	movs	r2, #0
 80055a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68fa      	ldr	r2, [r7, #12]
 80055b2:	1ad2      	subs	r2, r2, r3
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055b8:	4b0c      	ldr	r3, [pc, #48]	@ (80055ec <prvHeapInit+0xb4>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	4a0a      	ldr	r2, [pc, #40]	@ (80055f0 <prvHeapInit+0xb8>)
 80055c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	4a09      	ldr	r2, [pc, #36]	@ (80055f4 <prvHeapInit+0xbc>)
 80055ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055d0:	4b09      	ldr	r3, [pc, #36]	@ (80055f8 <prvHeapInit+0xc0>)
 80055d2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80055d6:	601a      	str	r2, [r3, #0]
}
 80055d8:	bf00      	nop
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	bc80      	pop	{r7}
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	20000dbc 	.word	0x20000dbc
 80055e8:	200019bc 	.word	0x200019bc
 80055ec:	200019c4 	.word	0x200019c4
 80055f0:	200019cc 	.word	0x200019cc
 80055f4:	200019c8 	.word	0x200019c8
 80055f8:	200019d0 	.word	0x200019d0

080055fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005604:	4b27      	ldr	r3, [pc, #156]	@ (80056a4 <prvInsertBlockIntoFreeList+0xa8>)
 8005606:	60fb      	str	r3, [r7, #12]
 8005608:	e002      	b.n	8005610 <prvInsertBlockIntoFreeList+0x14>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	60fb      	str	r3, [r7, #12]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	687a      	ldr	r2, [r7, #4]
 8005616:	429a      	cmp	r2, r3
 8005618:	d8f7      	bhi.n	800560a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	68ba      	ldr	r2, [r7, #8]
 8005624:	4413      	add	r3, r2
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	429a      	cmp	r2, r3
 800562a:	d108      	bne.n	800563e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	441a      	add	r2, r3
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	68ba      	ldr	r2, [r7, #8]
 8005648:	441a      	add	r2, r3
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	429a      	cmp	r2, r3
 8005650:	d118      	bne.n	8005684 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	4b14      	ldr	r3, [pc, #80]	@ (80056a8 <prvInsertBlockIntoFreeList+0xac>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d00d      	beq.n	800567a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	685a      	ldr	r2, [r3, #4]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	441a      	add	r2, r3
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	681a      	ldr	r2, [r3, #0]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	601a      	str	r2, [r3, #0]
 8005678:	e008      	b.n	800568c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800567a:	4b0b      	ldr	r3, [pc, #44]	@ (80056a8 <prvInsertBlockIntoFreeList+0xac>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	e003      	b.n	800568c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	429a      	cmp	r2, r3
 8005692:	d002      	beq.n	800569a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800569a:	bf00      	nop
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	bc80      	pop	{r7}
 80056a2:	4770      	bx	lr
 80056a4:	200019bc 	.word	0x200019bc
 80056a8:	200019c4 	.word	0x200019c4

080056ac <memset>:
 80056ac:	4603      	mov	r3, r0
 80056ae:	4402      	add	r2, r0
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d100      	bne.n	80056b6 <memset+0xa>
 80056b4:	4770      	bx	lr
 80056b6:	f803 1b01 	strb.w	r1, [r3], #1
 80056ba:	e7f9      	b.n	80056b0 <memset+0x4>

080056bc <__libc_init_array>:
 80056bc:	b570      	push	{r4, r5, r6, lr}
 80056be:	2600      	movs	r6, #0
 80056c0:	4d0c      	ldr	r5, [pc, #48]	@ (80056f4 <__libc_init_array+0x38>)
 80056c2:	4c0d      	ldr	r4, [pc, #52]	@ (80056f8 <__libc_init_array+0x3c>)
 80056c4:	1b64      	subs	r4, r4, r5
 80056c6:	10a4      	asrs	r4, r4, #2
 80056c8:	42a6      	cmp	r6, r4
 80056ca:	d109      	bne.n	80056e0 <__libc_init_array+0x24>
 80056cc:	f000 f828 	bl	8005720 <_init>
 80056d0:	2600      	movs	r6, #0
 80056d2:	4d0a      	ldr	r5, [pc, #40]	@ (80056fc <__libc_init_array+0x40>)
 80056d4:	4c0a      	ldr	r4, [pc, #40]	@ (8005700 <__libc_init_array+0x44>)
 80056d6:	1b64      	subs	r4, r4, r5
 80056d8:	10a4      	asrs	r4, r4, #2
 80056da:	42a6      	cmp	r6, r4
 80056dc:	d105      	bne.n	80056ea <__libc_init_array+0x2e>
 80056de:	bd70      	pop	{r4, r5, r6, pc}
 80056e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80056e4:	4798      	blx	r3
 80056e6:	3601      	adds	r6, #1
 80056e8:	e7ee      	b.n	80056c8 <__libc_init_array+0xc>
 80056ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80056ee:	4798      	blx	r3
 80056f0:	3601      	adds	r6, #1
 80056f2:	e7f2      	b.n	80056da <__libc_init_array+0x1e>
 80056f4:	0800701c 	.word	0x0800701c
 80056f8:	0800701c 	.word	0x0800701c
 80056fc:	0800701c 	.word	0x0800701c
 8005700:	08007020 	.word	0x08007020

08005704 <memcpy>:
 8005704:	440a      	add	r2, r1
 8005706:	4291      	cmp	r1, r2
 8005708:	f100 33ff 	add.w	r3, r0, #4294967295
 800570c:	d100      	bne.n	8005710 <memcpy+0xc>
 800570e:	4770      	bx	lr
 8005710:	b510      	push	{r4, lr}
 8005712:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005716:	4291      	cmp	r1, r2
 8005718:	f803 4f01 	strb.w	r4, [r3, #1]!
 800571c:	d1f9      	bne.n	8005712 <memcpy+0xe>
 800571e:	bd10      	pop	{r4, pc}

08005720 <_init>:
 8005720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005722:	bf00      	nop
 8005724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005726:	bc08      	pop	{r3}
 8005728:	469e      	mov	lr, r3
 800572a:	4770      	bx	lr

0800572c <_fini>:
 800572c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800572e:	bf00      	nop
 8005730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005732:	bc08      	pop	{r3}
 8005734:	469e      	mov	lr, r3
 8005736:	4770      	bx	lr
