
auto_mangal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005bc8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001970  08005cd8  08005cd8  00006cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007648  08007648  00009078  2**0
                  CONTENTS
  4 .ARM          00000000  08007648  08007648  00009078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007648  08007648  00009078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007648  08007648  00008648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800764c  0800764c  0000864c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000078  20000000  08007650  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b44  20000078  080076c8  00009078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bbc  080076c8  00009bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018560  00000000  00000000  000090a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004121  00000000  00000000  00021601  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00025728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001195  00000000  00000000  00026638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a43c  00000000  00000000  000277cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a985  00000000  00000000  00041c09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090dd6  00000000  00000000  0005c58e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed364  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003454  00000000  00000000  000ed3a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 000083b3  00000000  00000000  000f07fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000f8baf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	08005cc0 	.word	0x08005cc0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	08005cc0 	.word	0x08005cc0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_d2uiz>:
 80004c8:	004a      	lsls	r2, r1, #1
 80004ca:	d211      	bcs.n	80004f0 <__aeabi_d2uiz+0x28>
 80004cc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80004d0:	d211      	bcs.n	80004f6 <__aeabi_d2uiz+0x2e>
 80004d2:	d50d      	bpl.n	80004f0 <__aeabi_d2uiz+0x28>
 80004d4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80004d8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80004dc:	d40e      	bmi.n	80004fc <__aeabi_d2uiz+0x34>
 80004de:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80004e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004e6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80004ea:	fa23 f002 	lsr.w	r0, r3, r2
 80004ee:	4770      	bx	lr
 80004f0:	f04f 0000 	mov.w	r0, #0
 80004f4:	4770      	bx	lr
 80004f6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80004fa:	d102      	bne.n	8000502 <__aeabi_d2uiz+0x3a>
 80004fc:	f04f 30ff 	mov.w	r0, #4294967295
 8000500:	4770      	bx	lr
 8000502:	f04f 0000 	mov.w	r0, #0
 8000506:	4770      	bx	lr

08000508 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000508:	4b03      	ldr	r3, [pc, #12]	@ (8000518 <vApplicationGetIdleTaskMemory+0x10>)
 800050a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800050c:	4b03      	ldr	r3, [pc, #12]	@ (800051c <vApplicationGetIdleTaskMemory+0x14>)
 800050e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000510:	2380      	movs	r3, #128	@ 0x80
 8000512:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop
 8000518:	200006e8 	.word	0x200006e8
 800051c:	200004e8 	.word	0x200004e8

08000520 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000520:	4b03      	ldr	r3, [pc, #12]	@ (8000530 <vApplicationGetTimerTaskMemory+0x10>)
 8000522:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000524:	4b03      	ldr	r3, [pc, #12]	@ (8000534 <vApplicationGetTimerTaskMemory+0x14>)
 8000526:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000528:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800052c:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 800052e:	4770      	bx	lr
 8000530:	20000494 	.word	0x20000494
 8000534:	20000094 	.word	0x20000094

08000538 <StartReadKeyTask>:
/* USER CODE END Header_StartReadKeyTask */
void StartReadKeyTask(void const * argument)
{
  /* USER CODE BEGIN 5 */
  #define SCREEN_TIMEOUT 30000
  osTimerStart(screenTimeoutTimerHandle, SCREEN_TIMEOUT);
 8000538:	4c55      	ldr	r4, [pc, #340]	@ (8000690 <StartReadKeyTask+0x158>)
{
 800053a:	b580      	push	{r7, lr}
  osTimerStart(screenTimeoutTimerHandle, SCREEN_TIMEOUT);
 800053c:	f247 5130 	movw	r1, #30000	@ 0x7530
 8000540:	6820      	ldr	r0, [r4, #0]
 8000542:	f002 fb2f 	bl	8002ba4 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {

	if (HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0) {
 8000546:	4f53      	ldr	r7, [pc, #332]	@ (8000694 <StartReadKeyTask+0x15c>)
		    osDelay(1);
	    }
	    osTimerStart(screenTimeoutTimerHandle, SCREEN_TIMEOUT);
	}
	else if (HAL_GPIO_ReadPin(btn_ok_GPIO_Port, btn_ok_Pin) == 0) {
	    osTimerStart(cancelButtonHandle, 1000);
 8000548:	4e53      	ldr	r6, [pc, #332]	@ (8000698 <StartReadKeyTask+0x160>)
	if (HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0) {
 800054a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800054e:	4638      	mov	r0, r7
 8000550:	f001 fcee 	bl	8001f30 <HAL_GPIO_ReadPin>
 8000554:	4605      	mov	r5, r0
 8000556:	b9e8      	cbnz	r0, 8000594 <StartReadKeyTask+0x5c>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 0, 100);
 8000558:	f000 ff6a 	bl	8001430 <ssd1306_GetDisplayOn>
 800055c:	2264      	movs	r2, #100	@ 0x64
 800055e:	4b4f      	ldr	r3, [pc, #316]	@ (800069c <StartReadKeyTask+0x164>)
 8000560:	b990      	cbnz	r0, 8000588 <StartReadKeyTask+0x50>
 8000562:	2106      	movs	r1, #6
 8000564:	6818      	ldr	r0, [r3, #0]
 8000566:	f002 fb7f 	bl	8002c68 <osMessagePut>
	    while(HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0)
 800056a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800056e:	4638      	mov	r0, r7
 8000570:	f001 fcde 	bl	8001f30 <HAL_GPIO_ReadPin>
 8000574:	b150      	cbz	r0, 800058c <StartReadKeyTask+0x54>
	    osTimerStart(screenTimeoutTimerHandle, SCREEN_TIMEOUT);
 8000576:	f247 5130 	movw	r1, #30000	@ 0x7530
 800057a:	6820      	ldr	r0, [r4, #0]
 800057c:	f002 fb12 	bl	8002ba4 <osTimerStart>
		//short press
	    }
	    osTimerStop(cancelButtonHandle);
	}

    osDelay(10);
 8000580:	200a      	movs	r0, #10
 8000582:	f002 faee 	bl	8002b62 <osDelay>
	if (HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0) {
 8000586:	e7e0      	b.n	800054a <StartReadKeyTask+0x12>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 0, 100);
 8000588:	4629      	mov	r1, r5
 800058a:	e7eb      	b.n	8000564 <StartReadKeyTask+0x2c>
		    osDelay(1);
 800058c:	2001      	movs	r0, #1
 800058e:	f002 fae8 	bl	8002b62 <osDelay>
 8000592:	e7ea      	b.n	800056a <StartReadKeyTask+0x32>
	else if (HAL_GPIO_ReadPin(btn_top_GPIO_Port, btn_top_Pin) == 0) {
 8000594:	2180      	movs	r1, #128	@ 0x80
 8000596:	4842      	ldr	r0, [pc, #264]	@ (80006a0 <StartReadKeyTask+0x168>)
 8000598:	f001 fcca 	bl	8001f30 <HAL_GPIO_ReadPin>
 800059c:	b9a8      	cbnz	r0, 80005ca <StartReadKeyTask+0x92>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 1, 100);
 800059e:	f000 ff47 	bl	8001430 <ssd1306_GetDisplayOn>
 80005a2:	2264      	movs	r2, #100	@ 0x64
 80005a4:	4b3d      	ldr	r3, [pc, #244]	@ (800069c <StartReadKeyTask+0x164>)
 80005a6:	b970      	cbnz	r0, 80005c6 <StartReadKeyTask+0x8e>
 80005a8:	2106      	movs	r1, #6
 80005aa:	6818      	ldr	r0, [r3, #0]
 80005ac:	f002 fb5c 	bl	8002c68 <osMessagePut>
	    while(HAL_GPIO_ReadPin(btn_top_GPIO_Port, btn_top_Pin) == 0)
 80005b0:	4d3b      	ldr	r5, [pc, #236]	@ (80006a0 <StartReadKeyTask+0x168>)
 80005b2:	2180      	movs	r1, #128	@ 0x80
 80005b4:	4628      	mov	r0, r5
 80005b6:	f001 fcbb 	bl	8001f30 <HAL_GPIO_ReadPin>
 80005ba:	2800      	cmp	r0, #0
 80005bc:	d1db      	bne.n	8000576 <StartReadKeyTask+0x3e>
		    osDelay(1);
 80005be:	2001      	movs	r0, #1
 80005c0:	f002 facf 	bl	8002b62 <osDelay>
 80005c4:	e7f5      	b.n	80005b2 <StartReadKeyTask+0x7a>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 1, 100);
 80005c6:	2101      	movs	r1, #1
 80005c8:	e7ef      	b.n	80005aa <StartReadKeyTask+0x72>
	else if (HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin) == 0) {
 80005ca:	2110      	movs	r1, #16
 80005cc:	4834      	ldr	r0, [pc, #208]	@ (80006a0 <StartReadKeyTask+0x168>)
 80005ce:	f001 fcaf 	bl	8001f30 <HAL_GPIO_ReadPin>
 80005d2:	b9a8      	cbnz	r0, 8000600 <StartReadKeyTask+0xc8>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 2, 100);
 80005d4:	f000 ff2c 	bl	8001430 <ssd1306_GetDisplayOn>
 80005d8:	2264      	movs	r2, #100	@ 0x64
 80005da:	4b30      	ldr	r3, [pc, #192]	@ (800069c <StartReadKeyTask+0x164>)
 80005dc:	b970      	cbnz	r0, 80005fc <StartReadKeyTask+0xc4>
 80005de:	2106      	movs	r1, #6
 80005e0:	6818      	ldr	r0, [r3, #0]
 80005e2:	f002 fb41 	bl	8002c68 <osMessagePut>
	    while(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin) == 0)
 80005e6:	4d2e      	ldr	r5, [pc, #184]	@ (80006a0 <StartReadKeyTask+0x168>)
 80005e8:	2110      	movs	r1, #16
 80005ea:	4628      	mov	r0, r5
 80005ec:	f001 fca0 	bl	8001f30 <HAL_GPIO_ReadPin>
 80005f0:	2800      	cmp	r0, #0
 80005f2:	d1c0      	bne.n	8000576 <StartReadKeyTask+0x3e>
		    osDelay(1);
 80005f4:	2001      	movs	r0, #1
 80005f6:	f002 fab4 	bl	8002b62 <osDelay>
 80005fa:	e7f5      	b.n	80005e8 <StartReadKeyTask+0xb0>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 2, 100);
 80005fc:	2102      	movs	r1, #2
 80005fe:	e7ef      	b.n	80005e0 <StartReadKeyTask+0xa8>
	else if (HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin) == 0) {
 8000600:	2140      	movs	r1, #64	@ 0x40
 8000602:	4827      	ldr	r0, [pc, #156]	@ (80006a0 <StartReadKeyTask+0x168>)
 8000604:	f001 fc94 	bl	8001f30 <HAL_GPIO_ReadPin>
 8000608:	b9a8      	cbnz	r0, 8000636 <StartReadKeyTask+0xfe>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 3, 100);
 800060a:	f000 ff11 	bl	8001430 <ssd1306_GetDisplayOn>
 800060e:	2264      	movs	r2, #100	@ 0x64
 8000610:	4b22      	ldr	r3, [pc, #136]	@ (800069c <StartReadKeyTask+0x164>)
 8000612:	b970      	cbnz	r0, 8000632 <StartReadKeyTask+0xfa>
 8000614:	2106      	movs	r1, #6
 8000616:	6818      	ldr	r0, [r3, #0]
 8000618:	f002 fb26 	bl	8002c68 <osMessagePut>
	    while(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin) == 0)
 800061c:	4d20      	ldr	r5, [pc, #128]	@ (80006a0 <StartReadKeyTask+0x168>)
 800061e:	2140      	movs	r1, #64	@ 0x40
 8000620:	4628      	mov	r0, r5
 8000622:	f001 fc85 	bl	8001f30 <HAL_GPIO_ReadPin>
 8000626:	2800      	cmp	r0, #0
 8000628:	d1a5      	bne.n	8000576 <StartReadKeyTask+0x3e>
		    osDelay(1);
 800062a:	2001      	movs	r0, #1
 800062c:	f002 fa99 	bl	8002b62 <osDelay>
 8000630:	e7f5      	b.n	800061e <StartReadKeyTask+0xe6>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 3, 100);
 8000632:	2103      	movs	r1, #3
 8000634:	e7ef      	b.n	8000616 <StartReadKeyTask+0xde>
	else if (HAL_GPIO_ReadPin(btn_ok_GPIO_Port, btn_ok_Pin) == 0) {
 8000636:	2120      	movs	r1, #32
 8000638:	4819      	ldr	r0, [pc, #100]	@ (80006a0 <StartReadKeyTask+0x168>)
 800063a:	f001 fc79 	bl	8001f30 <HAL_GPIO_ReadPin>
 800063e:	2800      	cmp	r0, #0
 8000640:	d19e      	bne.n	8000580 <StartReadKeyTask+0x48>
	    osTimerStart(cancelButtonHandle, 1000);
 8000642:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000646:	6830      	ldr	r0, [r6, #0]
 8000648:	f002 faac 	bl	8002ba4 <osTimerStart>
	    while(HAL_GPIO_ReadPin(btn_ok_GPIO_Port, btn_ok_Pin) == 0)
 800064c:	4d14      	ldr	r5, [pc, #80]	@ (80006a0 <StartReadKeyTask+0x168>)
 800064e:	2120      	movs	r1, #32
 8000650:	4628      	mov	r0, r5
 8000652:	f001 fc6d 	bl	8001f30 <HAL_GPIO_ReadPin>
 8000656:	b1a8      	cbz	r0, 8000684 <StartReadKeyTask+0x14c>
	    osTimerStart(screenTimeoutTimerHandle, SCREEN_TIMEOUT);
 8000658:	f247 5130 	movw	r1, #30000	@ 0x7530
 800065c:	6820      	ldr	r0, [r4, #0]
 800065e:	f002 faa1 	bl	8002ba4 <osTimerStart>
	    if (xTimerIsTimerActive(cancelButtonHandle) != pdFALSE) {
 8000662:	6830      	ldr	r0, [r6, #0]
 8000664:	f003 ffbc 	bl	80045e0 <xTimerIsTimerActive>
 8000668:	b140      	cbz	r0, 800067c <StartReadKeyTask+0x144>
		if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 4, 100);
 800066a:	f000 fee1 	bl	8001430 <ssd1306_GetDisplayOn>
 800066e:	2264      	movs	r2, #100	@ 0x64
 8000670:	4b0a      	ldr	r3, [pc, #40]	@ (800069c <StartReadKeyTask+0x164>)
 8000672:	b958      	cbnz	r0, 800068c <StartReadKeyTask+0x154>
 8000674:	2106      	movs	r1, #6
 8000676:	6818      	ldr	r0, [r3, #0]
 8000678:	f002 faf6 	bl	8002c68 <osMessagePut>
	    osTimerStop(cancelButtonHandle);
 800067c:	6830      	ldr	r0, [r6, #0]
 800067e:	f002 faba 	bl	8002bf6 <osTimerStop>
 8000682:	e77d      	b.n	8000580 <StartReadKeyTask+0x48>
		    osDelay(1);
 8000684:	2001      	movs	r0, #1
 8000686:	f002 fa6c 	bl	8002b62 <osDelay>
 800068a:	e7e0      	b.n	800064e <StartReadKeyTask+0x116>
		if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 4, 100);
 800068c:	2104      	movs	r1, #4
 800068e:	e7f2      	b.n	8000676 <StartReadKeyTask+0x13e>
 8000690:	20000740 	.word	0x20000740
 8000694:	40010800 	.word	0x40010800
 8000698:	20000744 	.word	0x20000744
 800069c:	20000748 	.word	0x20000748
 80006a0:	40010c00 	.word	0x40010c00

080006a4 <StartGuiTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGuiTask */
void StartGuiTask(void const * argument)
{
 80006a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* USER CODE BEGIN StartGuiTask */
  osEvent btnEvent;
  uint8_t selectedMode = 0;
  uint8_t intermittentModeMenuPointer = 0;
 80006a8:	2600      	movs	r6, #0
{
 80006aa:	b08f      	sub	sp, #60	@ 0x3c
	  ssd1306_DrawRectangle(123, 6, 124, 9, White);
	}

      btnEvent = osMessageGet(buttonPressedQueueHandle, 100);

      switch (guiState) {
 80006ac:	f8df 9270 	ldr.w	r9, [pc, #624]	@ 8000920 <StartGuiTask+0x27c>
  uint8_t selectedMode = 0;
 80006b0:	9603      	str	r6, [sp, #12]
      HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 80006b2:	489c      	ldr	r0, [pc, #624]	@ (8000924 <StartGuiTask+0x280>)
 80006b4:	f001 f984 	bl	80019c0 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 80006b8:	2164      	movs	r1, #100	@ 0x64
 80006ba:	489a      	ldr	r0, [pc, #616]	@ (8000924 <StartGuiTask+0x280>)
 80006bc:	f001 f81e 	bl	80016fc <HAL_ADC_PollForConversion>
      adcBatteryVoltage = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 80006c0:	4898      	ldr	r0, [pc, #608]	@ (8000924 <StartGuiTask+0x280>)
 80006c2:	f001 f8bf 	bl	8001844 <HAL_ADC_GetValue>
 80006c6:	4d98      	ldr	r5, [pc, #608]	@ (8000928 <StartGuiTask+0x284>)
      ssd1306_DrawRectangle(0, 0, 127, 63, White);
 80006c8:	2401      	movs	r4, #1
      adcBatteryVoltage = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 80006ca:	8028      	strh	r0, [r5, #0]
      HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
 80006cc:	4895      	ldr	r0, [pc, #596]	@ (8000924 <StartGuiTask+0x280>)
 80006ce:	f001 fa7d 	bl	8001bcc <HAL_ADC_Stop>
      printf("ADC %d\n", adcBatteryVoltage);
 80006d2:	8829      	ldrh	r1, [r5, #0]
 80006d4:	4895      	ldr	r0, [pc, #596]	@ (800092c <StartGuiTask+0x288>)
 80006d6:	f004 faa5 	bl	8004c24 <iprintf>
      ssd1306_Fill(Black);
 80006da:	2000      	movs	r0, #0
 80006dc:	f000 fcae 	bl	800103c <ssd1306_Fill>
      ssd1306_DrawRectangle(0, 0, 127, 63, White);
 80006e0:	2100      	movs	r1, #0
 80006e2:	233f      	movs	r3, #63	@ 0x3f
 80006e4:	227f      	movs	r2, #127	@ 0x7f
 80006e6:	4608      	mov	r0, r1
 80006e8:	9400      	str	r4, [sp, #0]
 80006ea:	f000 fd99 	bl	8001220 <ssd1306_DrawRectangle>
      if(adcBatteryVoltage > 3523)
 80006ee:	f640 52c3 	movw	r2, #3523	@ 0xdc3
 80006f2:	882b      	ldrh	r3, [r5, #0]
 80006f4:	4293      	cmp	r3, r2
 80006f6:	d96d      	bls.n	80007d4 <StartGuiTask+0x130>
	  ssd1306_DrawRectangle(102, 3, 122, 12, White);
 80006f8:	230c      	movs	r3, #12
 80006fa:	227a      	movs	r2, #122	@ 0x7a
 80006fc:	2103      	movs	r1, #3
 80006fe:	2066      	movs	r0, #102	@ 0x66
 8000700:	9400      	str	r4, [sp, #0]
 8000702:	f000 fd8d 	bl	8001220 <ssd1306_DrawRectangle>
	  ssd1306_FillRectangle(104, 5, 108, 10, White);
 8000706:	230a      	movs	r3, #10
 8000708:	226c      	movs	r2, #108	@ 0x6c
 800070a:	2105      	movs	r1, #5
 800070c:	2068      	movs	r0, #104	@ 0x68
 800070e:	9400      	str	r4, [sp, #0]
 8000710:	f000 fdae 	bl	8001270 <ssd1306_FillRectangle>
	  ssd1306_FillRectangle(110, 5, 114, 10, White);
 8000714:	230a      	movs	r3, #10
 8000716:	2272      	movs	r2, #114	@ 0x72
 8000718:	2105      	movs	r1, #5
 800071a:	206e      	movs	r0, #110	@ 0x6e
 800071c:	9400      	str	r4, [sp, #0]
 800071e:	f000 fda7 	bl	8001270 <ssd1306_FillRectangle>
	  ssd1306_FillRectangle(116, 5, 120, 10, White);
 8000722:	230a      	movs	r3, #10
 8000724:	2278      	movs	r2, #120	@ 0x78
 8000726:	2105      	movs	r1, #5
 8000728:	2074      	movs	r0, #116	@ 0x74
 800072a:	9400      	str	r4, [sp, #0]
	  ssd1306_FillRectangle(104, 5, 108, 10, White);
 800072c:	f000 fda0 	bl	8001270 <ssd1306_FillRectangle>
	  ssd1306_DrawRectangle(123, 6, 124, 9, White);
 8000730:	2309      	movs	r3, #9
 8000732:	227c      	movs	r2, #124	@ 0x7c
 8000734:	2106      	movs	r1, #6
 8000736:	207b      	movs	r0, #123	@ 0x7b
 8000738:	9400      	str	r4, [sp, #0]
 800073a:	f000 fd71 	bl	8001220 <ssd1306_DrawRectangle>
      btnEvent = osMessageGet(buttonPressedQueueHandle, 100);
 800073e:	4b7c      	ldr	r3, [pc, #496]	@ (8000930 <StartGuiTask+0x28c>)
 8000740:	2264      	movs	r2, #100	@ 0x64
 8000742:	6819      	ldr	r1, [r3, #0]
 8000744:	a80b      	add	r0, sp, #44	@ 0x2c
 8000746:	f002 fab8 	bl	8002cba <osMessageGet>
 800074a:	e9dd a50b 	ldrd	sl, r5, [sp, #44]	@ 0x2c
      switch (guiState) {
 800074e:	f899 4000 	ldrb.w	r4, [r9]
 8000752:	2c01      	cmp	r4, #1
 8000754:	f000 808f 	beq.w	8000876 <StartGuiTask+0x1d2>
 8000758:	2c02      	cmp	r4, #2
 800075a:	f000 8103 	beq.w	8000964 <StartGuiTask+0x2c0>
 800075e:	2c00      	cmp	r4, #0
 8000760:	f040 820d 	bne.w	8000b7e <StartGuiTask+0x4da>
	case 0: // mode select
	  ssd1306_SetCursor(1,1);
 8000764:	2101      	movs	r1, #1
	  ssd1306_WriteString("Выбор режима", RuFont_7x13, Black);
 8000766:	4f73      	ldr	r7, [pc, #460]	@ (8000934 <StartGuiTask+0x290>)
	  ssd1306_SetCursor(1,1);
 8000768:	4608      	mov	r0, r1
 800076a:	f000 fd0d 	bl	8001188 <ssd1306_SetCursor>
	  ssd1306_WriteString("Выбор режима", RuFont_7x13, Black);
 800076e:	e897 0006 	ldmia.w	r7, {r1, r2}
 8000772:	4623      	mov	r3, r4
 8000774:	4870      	ldr	r0, [pc, #448]	@ (8000938 <StartGuiTask+0x294>)
 8000776:	f000 fcf3 	bl	8001160 <ssd1306_WriteString>
	  if (selectedMode == 0) {
 800077a:	9b03      	ldr	r3, [sp, #12]
	    ssd1306_SetCursor(4,16);
 800077c:	2110      	movs	r1, #16
 800077e:	2004      	movs	r0, #4
	  if (selectedMode == 0) {
 8000780:	2b00      	cmp	r3, #0
 8000782:	d15d      	bne.n	8000840 <StartGuiTask+0x19c>
	    ssd1306_SetCursor(4,16);
 8000784:	f000 fd00 	bl	8001188 <ssd1306_SetCursor>
	    ssd1306_WriteString("> Постоянный", RuFont_7x13, White);
 8000788:	e897 0006 	ldmia.w	r7, {r1, r2}
 800078c:	2301      	movs	r3, #1
 800078e:	486b      	ldr	r0, [pc, #428]	@ (800093c <StartGuiTask+0x298>)
 8000790:	f000 fce6 	bl	8001160 <ssd1306_WriteString>
	    ssd1306_SetCursor(4,30);
 8000794:	211e      	movs	r1, #30
 8000796:	2004      	movs	r0, #4
 8000798:	f000 fcf6 	bl	8001188 <ssd1306_SetCursor>
	    ssd1306_WriteString("  Прерывистый", RuFont_7x13, White);
 800079c:	e897 0006 	ldmia.w	r7, {r1, r2}
 80007a0:	2301      	movs	r3, #1
 80007a2:	4867      	ldr	r0, [pc, #412]	@ (8000940 <StartGuiTask+0x29c>)
	  } else if (selectedMode == 1) {
	    ssd1306_SetCursor(4,16);
	    ssd1306_WriteString("  Постоянный", RuFont_7x13, White);
	    ssd1306_SetCursor(4,30);
	    ssd1306_WriteString("> Прерывистый", RuFont_7x13, White);
 80007a4:	f000 fcdc 	bl	8001160 <ssd1306_WriteString>
	  }
	  if (btnEvent.status == osEventMessage)
 80007a8:	f1ba 0f10 	cmp.w	sl, #16
 80007ac:	f040 81eb 	bne.w	8000b86 <StartGuiTask+0x4e2>
	  {
	    if (btnEvent.value.v == 0 || btnEvent.value.v == 1)
 80007b0:	2d01      	cmp	r5, #1
 80007b2:	d856      	bhi.n	8000862 <StartGuiTask+0x1be>
	    { //bottom or top
	      selectedMode = !selectedMode;
 80007b4:	9b03      	ldr	r3, [sp, #12]
 80007b6:	f083 0301 	eor.w	r3, r3, #1
 80007ba:	9303      	str	r3, [sp, #12]

	}

	if (btnEvent.status == osEventMessage)
	{
	  if (btnEvent.value.v == 0) { //bottom
 80007bc:	2d06      	cmp	r5, #6
 80007be:	f200 81e2 	bhi.w	8000b86 <StartGuiTask+0x4e2>
 80007c2:	e8df f015 	tbh	[pc, r5, lsl #1]
 80007c6:	01f6      	.short	0x01f6
 80007c8:	01f601f6 	.word	0x01f601f6
 80007cc:	01e601f6 	.word	0x01e601f6
 80007d0:	020b0204 	.word	0x020b0204
      else if(adcBatteryVoltage > 3237 && adcBatteryVoltage < 3522)
 80007d4:	f6a3 42a6 	subw	r2, r3, #3238	@ 0xca6
 80007d8:	f5b2 7f8e 	cmp.w	r2, #284	@ 0x11c
 80007dc:	d213      	bcs.n	8000806 <StartGuiTask+0x162>
	  ssd1306_DrawRectangle(102, 3, 122, 12, White);
 80007de:	230c      	movs	r3, #12
 80007e0:	227a      	movs	r2, #122	@ 0x7a
 80007e2:	2103      	movs	r1, #3
 80007e4:	2066      	movs	r0, #102	@ 0x66
 80007e6:	9400      	str	r4, [sp, #0]
 80007e8:	f000 fd1a 	bl	8001220 <ssd1306_DrawRectangle>
	  ssd1306_FillRectangle(104, 5, 108, 10, White);
 80007ec:	230a      	movs	r3, #10
 80007ee:	226c      	movs	r2, #108	@ 0x6c
 80007f0:	2105      	movs	r1, #5
 80007f2:	2068      	movs	r0, #104	@ 0x68
 80007f4:	9400      	str	r4, [sp, #0]
 80007f6:	f000 fd3b 	bl	8001270 <ssd1306_FillRectangle>
	  ssd1306_FillRectangle(110, 5, 114, 10, White);
 80007fa:	230a      	movs	r3, #10
 80007fc:	2272      	movs	r2, #114	@ 0x72
 80007fe:	2105      	movs	r1, #5
 8000800:	206e      	movs	r0, #110	@ 0x6e
 8000802:	9400      	str	r4, [sp, #0]
 8000804:	e792      	b.n	800072c <StartGuiTask+0x88>
      else if(adcBatteryVoltage > 3047 && adcBatteryVoltage < 3236)
 8000806:	f6a3 32e8 	subw	r2, r3, #3048	@ 0xbe8
 800080a:	2abb      	cmp	r2, #187	@ 0xbb
 800080c:	d80c      	bhi.n	8000828 <StartGuiTask+0x184>
	  ssd1306_DrawRectangle(102, 3, 122, 12, White);
 800080e:	230c      	movs	r3, #12
 8000810:	227a      	movs	r2, #122	@ 0x7a
 8000812:	2103      	movs	r1, #3
 8000814:	2066      	movs	r0, #102	@ 0x66
 8000816:	9400      	str	r4, [sp, #0]
 8000818:	f000 fd02 	bl	8001220 <ssd1306_DrawRectangle>
	  ssd1306_FillRectangle(104, 5, 108, 10, White);
 800081c:	230a      	movs	r3, #10
 800081e:	226c      	movs	r2, #108	@ 0x6c
 8000820:	2105      	movs	r1, #5
 8000822:	2068      	movs	r0, #104	@ 0x68
 8000824:	9400      	str	r4, [sp, #0]
 8000826:	e781      	b.n	800072c <StartGuiTask+0x88>
      else if(adcBatteryVoltage < 3046)
 8000828:	f640 32e5 	movw	r2, #3045	@ 0xbe5
 800082c:	4293      	cmp	r3, r2
 800082e:	d886      	bhi.n	800073e <StartGuiTask+0x9a>
	  ssd1306_DrawRectangle(102, 3, 122, 12, White);
 8000830:	230c      	movs	r3, #12
 8000832:	227a      	movs	r2, #122	@ 0x7a
 8000834:	2103      	movs	r1, #3
 8000836:	2066      	movs	r0, #102	@ 0x66
 8000838:	9400      	str	r4, [sp, #0]
 800083a:	f000 fcf1 	bl	8001220 <ssd1306_DrawRectangle>
 800083e:	e777      	b.n	8000730 <StartGuiTask+0x8c>
	    ssd1306_SetCursor(4,16);
 8000840:	f000 fca2 	bl	8001188 <ssd1306_SetCursor>
	    ssd1306_WriteString("  Постоянный", RuFont_7x13, White);
 8000844:	e897 0006 	ldmia.w	r7, {r1, r2}
 8000848:	2301      	movs	r3, #1
 800084a:	483e      	ldr	r0, [pc, #248]	@ (8000944 <StartGuiTask+0x2a0>)
 800084c:	f000 fc88 	bl	8001160 <ssd1306_WriteString>
	    ssd1306_SetCursor(4,30);
 8000850:	211e      	movs	r1, #30
 8000852:	2004      	movs	r0, #4
 8000854:	f000 fc98 	bl	8001188 <ssd1306_SetCursor>
	    ssd1306_WriteString("> Прерывистый", RuFont_7x13, White);
 8000858:	e897 0006 	ldmia.w	r7, {r1, r2}
 800085c:	2301      	movs	r3, #1
 800085e:	483a      	ldr	r0, [pc, #232]	@ (8000948 <StartGuiTask+0x2a4>)
 8000860:	e7a0      	b.n	80007a4 <StartGuiTask+0x100>
	    } else if (btnEvent.value.v == 4)
 8000862:	2d04      	cmp	r5, #4
 8000864:	d1aa      	bne.n	80007bc <StartGuiTask+0x118>
	      if (selectedMode == 0)
 8000866:	9b03      	ldr	r3, [sp, #12]
 8000868:	b91b      	cbnz	r3, 8000872 <StartGuiTask+0x1ce>
		  guiState = 1;
 800086a:	2301      	movs	r3, #1
		  guiState = 2;
 800086c:	f889 3000 	strb.w	r3, [r9]
 8000870:	e7a4      	b.n	80007bc <StartGuiTask+0x118>
 8000872:	2302      	movs	r3, #2
 8000874:	e7fa      	b.n	800086c <StartGuiTask+0x1c8>
	  osThreadResume(driverTaskHandle);
 8000876:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 800094c <StartGuiTask+0x2a8>
	  ssd1306_WriteString("Пост. реж.", RuFont_7x13, Black);
 800087a:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 8000934 <StartGuiTask+0x290>
	  osThreadResume(driverTaskHandle);
 800087e:	f8db 0000 	ldr.w	r0, [fp]
 8000882:	f002 fa59 	bl	8002d38 <osThreadResume>
	  ssd1306_SetCursor(1,1);
 8000886:	4621      	mov	r1, r4
 8000888:	4620      	mov	r0, r4
 800088a:	f000 fc7d 	bl	8001188 <ssd1306_SetCursor>
	  ssd1306_WriteString("Пост. реж.", RuFont_7x13, Black);
 800088e:	e898 0006 	ldmia.w	r8, {r1, r2}
 8000892:	2300      	movs	r3, #0
 8000894:	482e      	ldr	r0, [pc, #184]	@ (8000950 <StartGuiTask+0x2ac>)
 8000896:	f000 fc63 	bl	8001160 <ssd1306_WriteString>
	  ssd1306_SetCursor(4,16);
 800089a:	2110      	movs	r1, #16
 800089c:	2004      	movs	r0, #4
 800089e:	f000 fc73 	bl	8001188 <ssd1306_SetCursor>
	  ssd1306_WriteString("> Скорость: ", RuFont_7x13, White);
 80008a2:	e898 0006 	ldmia.w	r8, {r1, r2}
 80008a6:	4623      	mov	r3, r4
 80008a8:	482a      	ldr	r0, [pc, #168]	@ (8000954 <StartGuiTask+0x2b0>)
	  sprintf(speedStr, "%d", speed);
 80008aa:	4f2b      	ldr	r7, [pc, #172]	@ (8000958 <StartGuiTask+0x2b4>)
	  ssd1306_WriteString("> Скорость: ", RuFont_7x13, White);
 80008ac:	f000 fc58 	bl	8001160 <ssd1306_WriteString>
	  ssd1306_SetCursor(88,16);
 80008b0:	2110      	movs	r1, #16
 80008b2:	2058      	movs	r0, #88	@ 0x58
 80008b4:	f000 fc68 	bl	8001188 <ssd1306_SetCursor>
	  sprintf(speedStr, "%d", speed);
 80008b8:	783a      	ldrb	r2, [r7, #0]
 80008ba:	4928      	ldr	r1, [pc, #160]	@ (800095c <StartGuiTask+0x2b8>)
 80008bc:	a809      	add	r0, sp, #36	@ 0x24
 80008be:	f004 f9c3 	bl	8004c48 <siprintf>
	  ssd1306_WriteString(speedStr, RuFont_7x13, White);
 80008c2:	e898 0006 	ldmia.w	r8, {r1, r2}
 80008c6:	4623      	mov	r3, r4
 80008c8:	a809      	add	r0, sp, #36	@ 0x24
 80008ca:	f000 fc49 	bl	8001160 <ssd1306_WriteString>
	  if (btnEvent.status == osEventMessage)
 80008ce:	f1ba 0f10 	cmp.w	sl, #16
 80008d2:	f040 8158 	bne.w	8000b86 <StartGuiTask+0x4e2>
	    if (btnEvent.value.v == 2)
 80008d6:	2d02      	cmp	r5, #2
 80008d8:	d107      	bne.n	80008ea <StartGuiTask+0x246>
		if(speed == 1)
 80008da:	783b      	ldrb	r3, [r7, #0]
 80008dc:	2b01      	cmp	r3, #1
		  speed = 10;
 80008de:	bf0c      	ite	eq
 80008e0:	230a      	moveq	r3, #10
		  speed--;
 80008e2:	f103 33ff 	addne.w	r3, r3, #4294967295
		      sleep-=10;
 80008e6:	703b      	strb	r3, [r7, #0]
 80008e8:	e768      	b.n	80007bc <StartGuiTask+0x118>
	    } else if ( btnEvent.value.v == 3)
 80008ea:	2d03      	cmp	r5, #3
 80008ec:	d106      	bne.n	80008fc <StartGuiTask+0x258>
		if(speed == 10)
 80008ee:	783b      	ldrb	r3, [r7, #0]
 80008f0:	2b0a      	cmp	r3, #10
 80008f2:	d101      	bne.n	80008f8 <StartGuiTask+0x254>
		  speed = 1;
 80008f4:	703c      	strb	r4, [r7, #0]
 80008f6:	e761      	b.n	80007bc <StartGuiTask+0x118>
		  speed++;
 80008f8:	3301      	adds	r3, #1
 80008fa:	e7f4      	b.n	80008e6 <StartGuiTask+0x242>
	      else if (btnEvent.value.v == 5)
 80008fc:	2d05      	cmp	r5, #5
 80008fe:	f47f af5d 	bne.w	80007bc <StartGuiTask+0x118>
		guiState = 0;
 8000902:	2300      	movs	r3, #0
		osThreadSuspend(driverTaskHandle);
 8000904:	f8db 0000 	ldr.w	r0, [fp]
		guiState = 0;
 8000908:	f889 3000 	strb.w	r3, [r9]
		osThreadSuspend(driverTaskHandle);
 800090c:	f002 fa0f 	bl	8002d2e <osThreadSuspend>
		HAL_GPIO_WritePin(drv_en_GPIO_Port, drv_en_Pin, 1);
 8000910:	4622      	mov	r2, r4
 8000912:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000916:	4812      	ldr	r0, [pc, #72]	@ (8000960 <StartGuiTask+0x2bc>)
 8000918:	f001 fb10 	bl	8001f3c <HAL_GPIO_WritePin>
 800091c:	e74e      	b.n	80007bc <StartGuiTask+0x118>
 800091e:	bf00      	nop
 8000920:	2000073c 	.word	0x2000073c
 8000924:	200007ac 	.word	0x200007ac
 8000928:	2000073e 	.word	0x2000073e
 800092c:	08005d3c 	.word	0x08005d3c
 8000930:	20000748 	.word	0x20000748
 8000934:	20000004 	.word	0x20000004
 8000938:	08005d44 	.word	0x08005d44
 800093c:	08005d51 	.word	0x08005d51
 8000940:	08005d5e 	.word	0x08005d5e
 8000944:	08005d6c 	.word	0x08005d6c
 8000948:	08005d79 	.word	0x08005d79
 800094c:	2000074c 	.word	0x2000074c
 8000950:	08005d87 	.word	0x08005d87
 8000954:	08005d92 	.word	0x08005d92
 8000958:	20000002 	.word	0x20000002
 800095c:	08005d9f 	.word	0x08005d9f
 8000960:	40010800 	.word	0x40010800
	  osThreadResume(driverTaskHandle);
 8000964:	f8df b27c 	ldr.w	fp, [pc, #636]	@ 8000be4 <StartGuiTask+0x540>
	  ssd1306_WriteString("Прерыв. реж.", RuFont_7x13, Black);
 8000968:	4c9f      	ldr	r4, [pc, #636]	@ (8000be8 <StartGuiTask+0x544>)
	  osThreadResume(driverTaskHandle);
 800096a:	f8db 0000 	ldr.w	r0, [fp]
 800096e:	f002 f9e3 	bl	8002d38 <osThreadResume>
	  ssd1306_SetCursor(1,1);
 8000972:	2101      	movs	r1, #1
 8000974:	4608      	mov	r0, r1
 8000976:	f000 fc07 	bl	8001188 <ssd1306_SetCursor>
	  ssd1306_WriteString("Прерыв. реж.", RuFont_7x13, Black);
 800097a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800097e:	2300      	movs	r3, #0
 8000980:	489a      	ldr	r0, [pc, #616]	@ (8000bec <StartGuiTask+0x548>)
 8000982:	f000 fbed 	bl	8001160 <ssd1306_WriteString>
	  if(intermittentModeMenuPointer == 0)
 8000986:	4f9a      	ldr	r7, [pc, #616]	@ (8000bf0 <StartGuiTask+0x54c>)
	      ssd1306_SetCursor(4,16);
 8000988:	2110      	movs	r1, #16
 800098a:	2004      	movs	r0, #4
	  if(intermittentModeMenuPointer == 0)
 800098c:	2e00      	cmp	r6, #0
 800098e:	d16b      	bne.n	8000a68 <StartGuiTask+0x3c4>
	      ssd1306_SetCursor(4,16);
 8000990:	f000 fbfa 	bl	8001188 <ssd1306_SetCursor>
	      ssd1306_WriteString("> Задержка: ", RuFont_7x13, White);
 8000994:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000998:	2301      	movs	r3, #1
 800099a:	4896      	ldr	r0, [pc, #600]	@ (8000bf4 <StartGuiTask+0x550>)
 800099c:	f000 fbe0 	bl	8001160 <ssd1306_WriteString>
	      ssd1306_SetCursor(88,16);
 80009a0:	2110      	movs	r1, #16
 80009a2:	2058      	movs	r0, #88	@ 0x58
 80009a4:	f000 fbf0 	bl	8001188 <ssd1306_SetCursor>
	      uint8_t sec = sleep % 60;
 80009a8:	233c      	movs	r3, #60	@ 0x3c
	      uint8_t min = sleep / 60;
 80009aa:	f897 8000 	ldrb.w	r8, [r7]
	      sprintf(minStr, "%d", min);
 80009ae:	4992      	ldr	r1, [pc, #584]	@ (8000bf8 <StartGuiTask+0x554>)
	      uint8_t sec = sleep % 60;
 80009b0:	fbb8 f2f3 	udiv	r2, r8, r3
 80009b4:	fb03 8812 	mls	r8, r3, r2, r8
	      sprintf(minStr, "%d", min);
 80009b8:	a805      	add	r0, sp, #20
	      uint8_t sec = sleep % 60;
 80009ba:	fa5f f888 	uxtb.w	r8, r8
	      sprintf(minStr, "%d", min);
 80009be:	f004 f943 	bl	8004c48 <siprintf>
	      sprintf(secStr, "%d", sec);
 80009c2:	4642      	mov	r2, r8
 80009c4:	498c      	ldr	r1, [pc, #560]	@ (8000bf8 <StartGuiTask+0x554>)
 80009c6:	a806      	add	r0, sp, #24
 80009c8:	f004 f93e 	bl	8004c48 <siprintf>
		timeStr[1] = minStr[0];
 80009cc:	f89d 3014 	ldrb.w	r3, [sp, #20]
		timeStr[0] = '0';
 80009d0:	2230      	movs	r2, #48	@ 0x30
		timeStr[1] = minStr[0];
 80009d2:	f88d 301d 	strb.w	r3, [sp, #29]
	      timeStr[2] = ':';
 80009d6:	233a      	movs	r3, #58	@ 0x3a
 80009d8:	f88d 301e 	strb.w	r3, [sp, #30]
 80009dc:	f89d 3018 	ldrb.w	r3, [sp, #24]
	      if(sec <= 9)
 80009e0:	f1b8 0f09 	cmp.w	r8, #9
		timeStr[3] = secStr[0];
 80009e4:	bf86      	itte	hi
 80009e6:	f88d 301f 	strbhi.w	r3, [sp, #31]
		timeStr[4] = secStr[1];
 80009ea:	f89d 3019 	ldrbhi.w	r3, [sp, #25]
		timeStr[3] = '0';
 80009ee:	f88d 201f 	strbls.w	r2, [sp, #31]
		timeStr[0] = '0';
 80009f2:	f88d 201c 	strb.w	r2, [sp, #28]
		timeStr[4] = secStr[0];
 80009f6:	f88d 3020 	strb.w	r3, [sp, #32]
	      ssd1306_WriteString(timeStr, RuFont_7x13, White);
 80009fa:	e894 0006 	ldmia.w	r4, {r1, r2}
 80009fe:	2301      	movs	r3, #1
 8000a00:	a807      	add	r0, sp, #28
 8000a02:	f000 fbad 	bl	8001160 <ssd1306_WriteString>
	      ssd1306_SetCursor(4,30);
 8000a06:	211e      	movs	r1, #30
 8000a08:	2004      	movs	r0, #4
 8000a0a:	f000 fbbd 	bl	8001188 <ssd1306_SetCursor>
	      ssd1306_WriteString("  Угол: ", RuFont_7x13, White);
 8000a0e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000a12:	2301      	movs	r3, #1
 8000a14:	4879      	ldr	r0, [pc, #484]	@ (8000bfc <StartGuiTask+0x558>)
 8000a16:	f000 fba3 	bl	8001160 <ssd1306_WriteString>
	      ssd1306_SetCursor(56, 30);
 8000a1a:	211e      	movs	r1, #30
 8000a1c:	2038      	movs	r0, #56	@ 0x38
 8000a1e:	f000 fbb3 	bl	8001188 <ssd1306_SetCursor>
	      sprintf(cornerStr, "%d", corner);
 8000a22:	4b77      	ldr	r3, [pc, #476]	@ (8000c00 <StartGuiTask+0x55c>)
 8000a24:	4974      	ldr	r1, [pc, #464]	@ (8000bf8 <StartGuiTask+0x554>)
 8000a26:	781a      	ldrb	r2, [r3, #0]
 8000a28:	a809      	add	r0, sp, #36	@ 0x24
 8000a2a:	f004 f90d 	bl	8004c48 <siprintf>
	      ssd1306_WriteString(cornerStr, RuFont_7x13, White);
 8000a2e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000a32:	2301      	movs	r3, #1
 8000a34:	a809      	add	r0, sp, #36	@ 0x24
	      ssd1306_WriteString(cornerStr, RuFont_7x13, White);
 8000a36:	f000 fb93 	bl	8001160 <ssd1306_WriteString>
	  if (btnEvent.status == osEventMessage)
 8000a3a:	f1ba 0f10 	cmp.w	sl, #16
 8000a3e:	f040 80a2 	bne.w	8000b86 <StartGuiTask+0x4e2>
	    if (btnEvent.value.v == 0 || btnEvent.value.v == 1)
 8000a42:	2d05      	cmp	r5, #5
 8000a44:	f63f aeba 	bhi.w	80007bc <StartGuiTask+0x118>
 8000a48:	a301      	add	r3, pc, #4	@ (adr r3, 8000a50 <StartGuiTask+0x3ac>)
 8000a4a:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 8000a4e:	bf00      	nop
 8000a50:	08000b11 	.word	0x08000b11
 8000a54:	08000b11 	.word	0x08000b11
 8000a58:	08000b37 	.word	0x08000b37
 8000a5c:	08000b17 	.word	0x08000b17
 8000a60:	080007bd 	.word	0x080007bd
 8000a64:	08000b63 	.word	0x08000b63
	      ssd1306_SetCursor(4,16);
 8000a68:	f000 fb8e 	bl	8001188 <ssd1306_SetCursor>
	      ssd1306_WriteString("  Задержка: ", RuFont_7x13, White);
 8000a6c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000a70:	2301      	movs	r3, #1
 8000a72:	4864      	ldr	r0, [pc, #400]	@ (8000c04 <StartGuiTask+0x560>)
 8000a74:	f000 fb74 	bl	8001160 <ssd1306_WriteString>
	      ssd1306_SetCursor(88,16);
 8000a78:	2110      	movs	r1, #16
 8000a7a:	2058      	movs	r0, #88	@ 0x58
 8000a7c:	f000 fb84 	bl	8001188 <ssd1306_SetCursor>
	      uint8_t sec = sleep % 60;
 8000a80:	233c      	movs	r3, #60	@ 0x3c
	      uint8_t min = sleep / 60;
 8000a82:	f897 8000 	ldrb.w	r8, [r7]
	      sprintf(minStr, "%d", min);
 8000a86:	495c      	ldr	r1, [pc, #368]	@ (8000bf8 <StartGuiTask+0x554>)
	      uint8_t sec = sleep % 60;
 8000a88:	fbb8 f2f3 	udiv	r2, r8, r3
 8000a8c:	fb03 8812 	mls	r8, r3, r2, r8
	      sprintf(minStr, "%d", min);
 8000a90:	a805      	add	r0, sp, #20
	      uint8_t sec = sleep % 60;
 8000a92:	fa5f f888 	uxtb.w	r8, r8
	      sprintf(minStr, "%d", min);
 8000a96:	f004 f8d7 	bl	8004c48 <siprintf>
	      sprintf(secStr, "%d", sec);
 8000a9a:	4642      	mov	r2, r8
 8000a9c:	4956      	ldr	r1, [pc, #344]	@ (8000bf8 <StartGuiTask+0x554>)
 8000a9e:	a806      	add	r0, sp, #24
 8000aa0:	f004 f8d2 	bl	8004c48 <siprintf>
		timeStr[1] = minStr[0];
 8000aa4:	f89d 3014 	ldrb.w	r3, [sp, #20]
		timeStr[0] = '0';
 8000aa8:	2230      	movs	r2, #48	@ 0x30
		timeStr[1] = minStr[0];
 8000aaa:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
	      timeStr[2] = ':';
 8000aae:	233a      	movs	r3, #58	@ 0x3a
 8000ab0:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
 8000ab4:	f89d 3018 	ldrb.w	r3, [sp, #24]
	      if(sec <= 9)
 8000ab8:	f1b8 0f09 	cmp.w	r8, #9
		timeStr[3] = secStr[0];
 8000abc:	bf86      	itte	hi
 8000abe:	f88d 3027 	strbhi.w	r3, [sp, #39]	@ 0x27
		timeStr[4] = secStr[1];
 8000ac2:	f89d 3019 	ldrbhi.w	r3, [sp, #25]
		timeStr[3] = '0';
 8000ac6:	f88d 2027 	strbls.w	r2, [sp, #39]	@ 0x27
		timeStr[0] = '0';
 8000aca:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
		timeStr[4] = secStr[0];
 8000ace:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
	      ssd1306_WriteString(timeStr, RuFont_7x13, White);
 8000ad2:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	a809      	add	r0, sp, #36	@ 0x24
 8000ada:	f000 fb41 	bl	8001160 <ssd1306_WriteString>
	      ssd1306_SetCursor(4,30);
 8000ade:	211e      	movs	r1, #30
 8000ae0:	2004      	movs	r0, #4
 8000ae2:	f000 fb51 	bl	8001188 <ssd1306_SetCursor>
	      ssd1306_WriteString("> Угол: ", RuFont_7x13, White);
 8000ae6:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000aea:	2301      	movs	r3, #1
 8000aec:	4846      	ldr	r0, [pc, #280]	@ (8000c08 <StartGuiTask+0x564>)
 8000aee:	f000 fb37 	bl	8001160 <ssd1306_WriteString>
	      ssd1306_SetCursor(56, 30);
 8000af2:	211e      	movs	r1, #30
 8000af4:	2038      	movs	r0, #56	@ 0x38
 8000af6:	f000 fb47 	bl	8001188 <ssd1306_SetCursor>
	      sprintf(cornerStr, "%d", corner);
 8000afa:	4b41      	ldr	r3, [pc, #260]	@ (8000c00 <StartGuiTask+0x55c>)
 8000afc:	493e      	ldr	r1, [pc, #248]	@ (8000bf8 <StartGuiTask+0x554>)
 8000afe:	781a      	ldrb	r2, [r3, #0]
 8000b00:	a807      	add	r0, sp, #28
 8000b02:	f004 f8a1 	bl	8004c48 <siprintf>
	      ssd1306_WriteString(cornerStr, RuFont_7x13, White);
 8000b06:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	a807      	add	r0, sp, #28
 8000b0e:	e792      	b.n	8000a36 <StartGuiTask+0x392>
		intermittentModeMenuPointer = !intermittentModeMenuPointer;
 8000b10:	f086 0601 	eor.w	r6, r6, #1
 8000b14:	e652      	b.n	80007bc <StartGuiTask+0x118>
		xTaskAbortDelay(driverTaskHandle);
 8000b16:	f8db 0000 	ldr.w	r0, [fp]
 8000b1a:	f003 f907 	bl	8003d2c <xTaskAbortDelay>
		if(intermittentModeMenuPointer == 0)
 8000b1e:	b9a6      	cbnz	r6, 8000b4a <StartGuiTask+0x4a6>
		    if(sleep == 250)
 8000b20:	783b      	ldrb	r3, [r7, #0]
 8000b22:	2bfa      	cmp	r3, #250	@ 0xfa
 8000b24:	d105      	bne.n	8000b32 <StartGuiTask+0x48e>
 8000b26:	230a      	movs	r3, #10
		      sleep = 10;
 8000b28:	2600      	movs	r6, #0
 8000b2a:	703b      	strb	r3, [r7, #0]
 8000b2c:	e646      	b.n	80007bc <StartGuiTask+0x118>
 8000b2e:	23fa      	movs	r3, #250	@ 0xfa
 8000b30:	e7fa      	b.n	8000b28 <StartGuiTask+0x484>
		      sleep+=10;
 8000b32:	330a      	adds	r3, #10
 8000b34:	e6d7      	b.n	80008e6 <StartGuiTask+0x242>
		xTaskAbortDelay(driverTaskHandle);
 8000b36:	f8db 0000 	ldr.w	r0, [fp]
 8000b3a:	f003 f8f7 	bl	8003d2c <xTaskAbortDelay>
		if(intermittentModeMenuPointer == 0)
 8000b3e:	b926      	cbnz	r6, 8000b4a <StartGuiTask+0x4a6>
		    if(sleep == 10)
 8000b40:	783b      	ldrb	r3, [r7, #0]
 8000b42:	2b0a      	cmp	r3, #10
 8000b44:	d0f3      	beq.n	8000b2e <StartGuiTask+0x48a>
		      sleep-=10;
 8000b46:	3b0a      	subs	r3, #10
 8000b48:	e6cd      	b.n	80008e6 <StartGuiTask+0x242>
		    if(corner == 45)
 8000b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8000c00 <StartGuiTask+0x55c>)
 8000b4c:	781a      	ldrb	r2, [r3, #0]
 8000b4e:	2a2d      	cmp	r2, #45	@ 0x2d
 8000b50:	d102      	bne.n	8000b58 <StartGuiTask+0x4b4>
 8000b52:	225a      	movs	r2, #90	@ 0x5a
			corner = 90;
 8000b54:	701a      	strb	r2, [r3, #0]
 8000b56:	e631      	b.n	80007bc <StartGuiTask+0x118>
		    else if(corner == 90)
 8000b58:	2a5a      	cmp	r2, #90	@ 0x5a
 8000b5a:	f47f ae2f 	bne.w	80007bc <StartGuiTask+0x118>
 8000b5e:	222d      	movs	r2, #45	@ 0x2d
 8000b60:	e7f8      	b.n	8000b54 <StartGuiTask+0x4b0>
		guiState = 0;
 8000b62:	2300      	movs	r3, #0
		HAL_GPIO_WritePin(drv_en_GPIO_Port, drv_en_Pin, 1);
 8000b64:	2201      	movs	r2, #1
 8000b66:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b6a:	4828      	ldr	r0, [pc, #160]	@ (8000c0c <StartGuiTask+0x568>)
		guiState = 0;
 8000b6c:	f889 3000 	strb.w	r3, [r9]
		HAL_GPIO_WritePin(drv_en_GPIO_Port, drv_en_Pin, 1);
 8000b70:	f001 f9e4 	bl	8001f3c <HAL_GPIO_WritePin>
		osThreadSuspend(driverTaskHandle);
 8000b74:	f8db 0000 	ldr.w	r0, [fp]
 8000b78:	f002 f8d9 	bl	8002d2e <osThreadSuspend>
 8000b7c:	e61e      	b.n	80007bc <StartGuiTask+0x118>
	if (btnEvent.status == osEventMessage)
 8000b7e:	f1ba 0f10 	cmp.w	sl, #16
 8000b82:	f43f ae1b 	beq.w	80007bc <StartGuiTask+0x118>
		  ssd1306_SetDisplayOn(1);
	  }

	}

	ssd1306_UpdateScreen();
 8000b86:	f000 fa65 	bl	8001054 <ssd1306_UpdateScreen>
	osDelay(10);//
 8000b8a:	200a      	movs	r0, #10
 8000b8c:	f001 ffe9 	bl	8002b62 <osDelay>
      HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 8000b90:	e58f      	b.n	80006b2 <StartGuiTask+0xe>
		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 8000b92:	2201      	movs	r2, #1
 8000b94:	2110      	movs	r1, #16
 8000b96:	481d      	ldr	r0, [pc, #116]	@ (8000c0c <StartGuiTask+0x568>)
 8000b98:	f001 f9d0 	bl	8001f3c <HAL_GPIO_WritePin>
		  osDelay(50);
 8000b9c:	2032      	movs	r0, #50	@ 0x32
 8000b9e:	f001 ffe0 	bl	8002b62 <osDelay>
		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 8000ba2:	481a      	ldr	r0, [pc, #104]	@ (8000c0c <StartGuiTask+0x568>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2110      	movs	r1, #16
 8000ba8:	f001 f9c8 	bl	8001f3c <HAL_GPIO_WritePin>
		  osDelay(50);
 8000bac:	2032      	movs	r0, #50	@ 0x32
 8000bae:	f001 ffd8 	bl	8002b62 <osDelay>
		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 8000bb2:	4816      	ldr	r0, [pc, #88]	@ (8000c0c <StartGuiTask+0x568>)
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	2110      	movs	r1, #16
 8000bb8:	f001 f9c0 	bl	8001f3c <HAL_GPIO_WritePin>
		  osDelay(30);
 8000bbc:	201e      	movs	r0, #30
		  osDelay(250);
 8000bbe:	f001 ffd0 	bl	8002b62 <osDelay>
		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2110      	movs	r1, #16
 8000bc6:	4811      	ldr	r0, [pc, #68]	@ (8000c0c <StartGuiTask+0x568>)
 8000bc8:	f001 f9b8 	bl	8001f3c <HAL_GPIO_WritePin>
 8000bcc:	e7db      	b.n	8000b86 <StartGuiTask+0x4e2>
		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 8000bce:	480f      	ldr	r0, [pc, #60]	@ (8000c0c <StartGuiTask+0x568>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	2110      	movs	r1, #16
 8000bd4:	f001 f9b2 	bl	8001f3c <HAL_GPIO_WritePin>
		  osDelay(250);
 8000bd8:	20fa      	movs	r0, #250	@ 0xfa
 8000bda:	e7f0      	b.n	8000bbe <StartGuiTask+0x51a>
		  ssd1306_SetDisplayOn(1);
 8000bdc:	2001      	movs	r0, #1
 8000bde:	f000 fbb5 	bl	800134c <ssd1306_SetDisplayOn>
 8000be2:	e7d0      	b.n	8000b86 <StartGuiTask+0x4e2>
 8000be4:	2000074c 	.word	0x2000074c
 8000be8:	20000004 	.word	0x20000004
 8000bec:	08005da2 	.word	0x08005da2
 8000bf0:	20000001 	.word	0x20000001
 8000bf4:	08005daf 	.word	0x08005daf
 8000bf8:	08005d9f 	.word	0x08005d9f
 8000bfc:	08005dbc 	.word	0x08005dbc
 8000c00:	20000000 	.word	0x20000000
 8000c04:	08005dc5 	.word	0x08005dc5
 8000c08:	08005dd2 	.word	0x08005dd2
 8000c0c:	40010800 	.word	0x40010800

08000c10 <screenTimeoutCallback>:

/* screenTimeoutCallback function */
void screenTimeoutCallback(void const * argument)
{
  /* USER CODE BEGIN screenTimeoutCallback */
  ssd1306_SetDisplayOn(0);
 8000c10:	2000      	movs	r0, #0
 8000c12:	f000 bb9b 	b.w	800134c <ssd1306_SetDisplayOn>
	...

08000c18 <StartDriverTask>:
{
 8000c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    HAL_GPIO_WritePin(drv_en_GPIO_Port, drv_en_Pin, 0);
 8000c1c:	4c24      	ldr	r4, [pc, #144]	@ (8000cb0 <StartDriverTask+0x98>)
    if (guiState == 1)  { //Постоянный
 8000c1e:	4d25      	ldr	r5, [pc, #148]	@ (8000cb4 <StartDriverTask+0x9c>)
      switch (corner) {
 8000c20:	f8df 8094 	ldr.w	r8, [pc, #148]	@ 8000cb8 <StartDriverTask+0xa0>
    HAL_GPIO_WritePin(drv_en_GPIO_Port, drv_en_Pin, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	f001 f986 	bl	8001f3c <HAL_GPIO_WritePin>
    if (guiState == 1)  { //Постоянный
 8000c30:	782b      	ldrb	r3, [r5, #0]
 8000c32:	2b01      	cmp	r3, #1
 8000c34:	d111      	bne.n	8000c5a <StartDriverTask+0x42>
	HAL_GPIO_TogglePin(drv_step_GPIO_Port, drv_step_Pin);
 8000c36:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c3a:	4620      	mov	r0, r4
 8000c3c:	f001 f983 	bl	8001f46 <HAL_GPIO_TogglePin>
	osDelay(fabs(speed-11));
 8000c40:	4b1e      	ldr	r3, [pc, #120]	@ (8000cbc <StartDriverTask+0xa4>)
 8000c42:	7818      	ldrb	r0, [r3, #0]
 8000c44:	380b      	subs	r0, #11
 8000c46:	f7ff fbd5 	bl	80003f4 <__aeabi_i2d>
 8000c4a:	f021 4700 	bic.w	r7, r1, #2147483648	@ 0x80000000
 8000c4e:	4639      	mov	r1, r7
 8000c50:	f7ff fc3a 	bl	80004c8 <__aeabi_d2uiz>
      osDelay(sleep*1000);
 8000c54:	f001 ff85 	bl	8002b62 <osDelay>
 8000c58:	e7e4      	b.n	8000c24 <StartDriverTask+0xc>
    if (guiState == 2)  { //Прерывистый
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d1e2      	bne.n	8000c24 <StartDriverTask+0xc>
      switch (corner) {
 8000c5e:	f898 3000 	ldrb.w	r3, [r8]
 8000c62:	2b2d      	cmp	r3, #45	@ 0x2d
 8000c64:	d007      	beq.n	8000c76 <StartDriverTask+0x5e>
 8000c66:	2b5a      	cmp	r3, #90	@ 0x5a
 8000c68:	d013      	beq.n	8000c92 <StartDriverTask+0x7a>
      osDelay(sleep*1000);
 8000c6a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c6e:	4b14      	ldr	r3, [pc, #80]	@ (8000cc0 <StartDriverTask+0xa8>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	4358      	muls	r0, r3
 8000c74:	e7ee      	b.n	8000c54 <StartDriverTask+0x3c>
      switch (corner) {
 8000c76:	f44f 7948 	mov.w	r9, #800	@ 0x320
	    HAL_GPIO_TogglePin(drv_step_GPIO_Port, drv_step_Pin);
 8000c7a:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c7e:	4620      	mov	r0, r4
 8000c80:	f001 f961 	bl	8001f46 <HAL_GPIO_TogglePin>
	    osDelay(1);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f001 ff6c 	bl	8002b62 <osDelay>
	  for (int var = 0; var < 800; var++) {
 8000c8a:	f1b9 0901 	subs.w	r9, r9, #1
 8000c8e:	d1f4      	bne.n	8000c7a <StartDriverTask+0x62>
 8000c90:	e7eb      	b.n	8000c6a <StartDriverTask+0x52>
      switch (corner) {
 8000c92:	f44f 69c8 	mov.w	r9, #1600	@ 0x640
	    HAL_GPIO_TogglePin(drv_step_GPIO_Port, drv_step_Pin);
 8000c96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c9a:	4620      	mov	r0, r4
 8000c9c:	f001 f953 	bl	8001f46 <HAL_GPIO_TogglePin>
	    osDelay(1);
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f001 ff5e 	bl	8002b62 <osDelay>
	  for (int var = 0; var < 1600; var++) {
 8000ca6:	f1b9 0901 	subs.w	r9, r9, #1
 8000caa:	d1f4      	bne.n	8000c96 <StartDriverTask+0x7e>
 8000cac:	e7dd      	b.n	8000c6a <StartDriverTask+0x52>
 8000cae:	bf00      	nop
 8000cb0:	40010800 	.word	0x40010800
 8000cb4:	2000073c 	.word	0x2000073c
 8000cb8:	20000000 	.word	0x20000000
 8000cbc:	20000002 	.word	0x20000002
 8000cc0:	20000001 	.word	0x20000001

08000cc4 <cancelButtonCallback>:
{
 8000cc4:	b508      	push	{r3, lr}
  if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 5, 100);
 8000cc6:	f000 fbb3 	bl	8001430 <ssd1306_GetDisplayOn>
 8000cca:	2264      	movs	r2, #100	@ 0x64
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <cancelButtonCallback+0x1c>)
 8000cce:	b928      	cbnz	r0, 8000cdc <cancelButtonCallback+0x18>
 8000cd0:	2106      	movs	r1, #6
 8000cd2:	6818      	ldr	r0, [r3, #0]
}
 8000cd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 5, 100);
 8000cd8:	f001 bfc6 	b.w	8002c68 <osMessagePut>
 8000cdc:	2105      	movs	r1, #5
 8000cde:	e7f8      	b.n	8000cd2 <cancelButtonCallback+0xe>
 8000ce0:	20000748 	.word	0x20000748

08000ce4 <_write>:
{
 8000ce4:	4610      	mov	r0, r2
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce6:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000ce8:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
{
 8000cec:	b530      	push	{r4, r5, lr}
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cee:	4283      	cmp	r3, r0
 8000cf0:	db00      	blt.n	8000cf4 <_write+0x10>
}
 8000cf2:	bd30      	pop	{r4, r5, pc}
 8000cf4:	f8d2 4e80 	ldr.w	r4, [r2, #3712]	@ 0xe80
 8000cf8:	07e5      	lsls	r5, r4, #31
 8000cfa:	d507      	bpl.n	8000d0c <_write+0x28>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000cfc:	f8d2 4e00 	ldr.w	r4, [r2, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000d00:	07e4      	lsls	r4, r4, #31
 8000d02:	d503      	bpl.n	8000d0c <_write+0x28>
    ITM_SendChar(*ptr++);
 8000d04:	5ccc      	ldrb	r4, [r1, r3]
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000d06:	6815      	ldr	r5, [r2, #0]
 8000d08:	b115      	cbz	r5, 8000d10 <_write+0x2c>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000d0a:	7014      	strb	r4, [r2, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	e7ee      	b.n	8000cee <_write+0xa>
      __NOP();
 8000d10:	bf00      	nop
 8000d12:	e7f8      	b.n	8000d06 <_write+0x22>

08000d14 <SystemClock_Config>:
{
 8000d14:	b510      	push	{r4, lr}
 8000d16:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d18:	2214      	movs	r2, #20
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	a80c      	add	r0, sp, #48	@ 0x30
 8000d1e:	f003 fff6 	bl	8004d0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d22:	2214      	movs	r2, #20
 8000d24:	2100      	movs	r1, #0
 8000d26:	eb0d 0002 	add.w	r0, sp, r2
 8000d2a:	f003 fff0 	bl	8004d0e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d2e:	2210      	movs	r2, #16
 8000d30:	2100      	movs	r1, #0
 8000d32:	a801      	add	r0, sp, #4
 8000d34:	f003 ffeb 	bl	8004d0e <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d38:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d3a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d3e:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d40:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d44:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d48:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d4c:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d4e:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d50:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d52:	f001 fb83 	bl	800245c <HAL_RCC_OscConfig>
 8000d56:	b108      	cbz	r0, 8000d5c <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d58:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d5c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d5e:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d66:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d68:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d6c:	4621      	mov	r1, r4
 8000d6e:	a805      	add	r0, sp, #20
 8000d70:	f001 fd36 	bl	80027e0 <HAL_RCC_ClockConfig>
 8000d74:	b108      	cbz	r0, 8000d7a <SystemClock_Config+0x66>
 8000d76:	b672      	cpsid	i
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <SystemClock_Config+0x64>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d7e:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000d80:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000d82:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d84:	f001 fde8 	bl	8002958 <HAL_RCCEx_PeriphCLKConfig>
 8000d88:	b108      	cbz	r0, 8000d8e <SystemClock_Config+0x7a>
 8000d8a:	b672      	cpsid	i
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <SystemClock_Config+0x78>
}
 8000d8e:	b014      	add	sp, #80	@ 0x50
 8000d90:	bd10      	pop	{r4, pc}
	...

08000d94 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d94:	2410      	movs	r4, #16
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	b0a2      	sub	sp, #136	@ 0x88
  HAL_Init();
 8000d9a:	f000 fc79 	bl	8001690 <HAL_Init>
  SystemClock_Config();
 8000d9e:	f7ff ffb9 	bl	8000d14 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000da2:	4622      	mov	r2, r4
 8000da4:	2100      	movs	r1, #0
 8000da6:	a81b      	add	r0, sp, #108	@ 0x6c
 8000da8:	f003 ffb1 	bl	8004d0e <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dac:	4b7b      	ldr	r3, [pc, #492]	@ (8000f9c <main+0x208>)
  HAL_GPIO_WritePin(GPIOA, buzzer_Pin|drv_step_Pin, GPIO_PIN_RESET);
 8000dae:	f44f 6182 	mov.w	r1, #1040	@ 0x410
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db2:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, buzzer_Pin|drv_step_Pin, GPIO_PIN_RESET);
 8000db4:	487a      	ldr	r0, [pc, #488]	@ (8000fa0 <main+0x20c>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db6:	f042 0220 	orr.w	r2, r2, #32
 8000dba:	619a      	str	r2, [r3, #24]
 8000dbc:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	2500      	movs	r5, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc0:	f002 0220 	and.w	r2, r2, #32
 8000dc4:	9202      	str	r2, [sp, #8]
 8000dc6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dca:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dcc:	f042 0204 	orr.w	r2, r2, #4
 8000dd0:	619a      	str	r2, [r3, #24]
 8000dd2:	699a      	ldr	r2, [r3, #24]
 8000dd4:	f002 0204 	and.w	r2, r2, #4
 8000dd8:	9203      	str	r2, [sp, #12]
 8000dda:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ddc:	699a      	ldr	r2, [r3, #24]
 8000dde:	f042 0208 	orr.w	r2, r2, #8
 8000de2:	619a      	str	r2, [r3, #24]
 8000de4:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, buzzer_Pin|drv_step_Pin, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de8:	f003 0308 	and.w	r3, r3, #8
 8000dec:	9304      	str	r3, [sp, #16]
 8000dee:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, buzzer_Pin|drv_step_Pin, GPIO_PIN_RESET);
 8000df0:	f001 f8a4 	bl	8001f3c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(drv_en_GPIO_Port, drv_en_Pin, GPIO_PIN_SET);
 8000df4:	2201      	movs	r2, #1
 8000df6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000dfa:	4869      	ldr	r0, [pc, #420]	@ (8000fa0 <main+0x20c>)
 8000dfc:	f001 f89e 	bl	8001f3c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = buzzer_Pin;
 8000e00:	941b      	str	r4, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e02:	2401      	movs	r4, #1
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8000e04:	4866      	ldr	r0, [pc, #408]	@ (8000fa0 <main+0x20c>)
 8000e06:	a91b      	add	r1, sp, #108	@ 0x6c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	e9cd 451c 	strd	r4, r5, [sp, #112]	@ 0x70
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0c:	971e      	str	r7, [sp, #120]	@ 0x78
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8000e0e:	f000 ffbd 	bl	8001d8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = drv_en_Pin;
 8000e12:	f44f 7300 	mov.w	r3, #512	@ 0x200
  HAL_GPIO_Init(drv_en_GPIO_Port, &GPIO_InitStruct);
 8000e16:	4862      	ldr	r0, [pc, #392]	@ (8000fa0 <main+0x20c>)
 8000e18:	a91b      	add	r1, sp, #108	@ 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1a:	e9cd 341b 	strd	r3, r4, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1e:	e9cd 471d 	strd	r4, r7, [sp, #116]	@ 0x74
  HAL_GPIO_Init(drv_en_GPIO_Port, &GPIO_InitStruct);
 8000e22:	f000 ffb3 	bl	8001d8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = drv_step_Pin;
 8000e26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  HAL_GPIO_Init(drv_step_GPIO_Port, &GPIO_InitStruct);
 8000e2a:	485d      	ldr	r0, [pc, #372]	@ (8000fa0 <main+0x20c>)
 8000e2c:	a91b      	add	r1, sp, #108	@ 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2e:	e9cd 341b 	strd	r3, r4, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e32:	e9cd 771d 	strd	r7, r7, [sp, #116]	@ 0x74
  HAL_GPIO_Init(drv_step_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f000 ffa9 	bl	8001d8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = btn_bottom_Pin;
 8000e3a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(btn_bottom_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	4858      	ldr	r0, [pc, #352]	@ (8000fa0 <main+0x20c>)
 8000e40:	a91b      	add	r1, sp, #108	@ 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e42:	e9cd 351b 	strd	r3, r5, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e46:	941d      	str	r4, [sp, #116]	@ 0x74
  HAL_GPIO_Init(btn_bottom_GPIO_Port, &GPIO_InitStruct);
 8000e48:	f000 ffa0 	bl	8001d8c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = btn_left_Pin|btn_ok_Pin|btn_right_Pin|btn_top_Pin;
 8000e4c:	23f0      	movs	r3, #240	@ 0xf0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4e:	4855      	ldr	r0, [pc, #340]	@ (8000fa4 <main+0x210>)
 8000e50:	a91b      	add	r1, sp, #108	@ 0x6c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e52:	e9cd 351b 	strd	r3, r5, [sp, #108]	@ 0x6c
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e56:	941d      	str	r4, [sp, #116]	@ 0x74
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e58:	f000 ff98 	bl	8001d8c <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8000e5c:	4852      	ldr	r0, [pc, #328]	@ (8000fa8 <main+0x214>)
  hi2c1.Init.ClockSpeed = 100000;
 8000e5e:	4b53      	ldr	r3, [pc, #332]	@ (8000fac <main+0x218>)
 8000e60:	4a53      	ldr	r2, [pc, #332]	@ (8000fb0 <main+0x21c>)
  hi2c1.Init.OwnAddress1 = 0;
 8000e62:	e9c0 5502 	strd	r5, r5, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8000e66:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e6a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e6e:	e9c0 5506 	strd	r5, r5, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e72:	e9c0 3504 	strd	r3, r5, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e76:	6205      	str	r5, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e78:	f001 f9b8 	bl	80021ec <HAL_I2C_Init>
 8000e7c:	b108      	cbz	r0, 8000e82 <main+0xee>
 8000e7e:	b672      	cpsid	i
  while (1)
 8000e80:	e7fe      	b.n	8000e80 <main+0xec>
  hadc1.Instance = ADC1;
 8000e82:	4e4c      	ldr	r6, [pc, #304]	@ (8000fb4 <main+0x220>)
 8000e84:	4b4c      	ldr	r3, [pc, #304]	@ (8000fb8 <main+0x224>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e86:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  hadc1.Instance = ADC1;
 8000e8a:	6033      	str	r3, [r6, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e8c:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e90:	901d      	str	r0, [sp, #116]	@ 0x74
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e92:	60b0      	str	r0, [r6, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e94:	7530      	strb	r0, [r6, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e96:	6070      	str	r0, [r6, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e98:	4630      	mov	r0, r6
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e9a:	7334      	strb	r4, [r6, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e9c:	61f3      	str	r3, [r6, #28]
  hadc1.Init.NbrOfConversion = 1;
 8000e9e:	6134      	str	r4, [r6, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ea0:	f000 fe16 	bl	8001ad0 <HAL_ADC_Init>
 8000ea4:	b108      	cbz	r0, 8000eaa <main+0x116>
 8000ea6:	b672      	cpsid	i
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <main+0x114>
  sConfig.Channel = ADC_CHANNEL_5;
 8000eaa:	2305      	movs	r3, #5
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000eac:	901d      	str	r0, [sp, #116]	@ 0x74
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eae:	a91b      	add	r1, sp, #108	@ 0x6c
 8000eb0:	4630      	mov	r0, r6
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eb2:	e9cd 341b 	strd	r3, r4, [sp, #108]	@ 0x6c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb6:	f000 fcc9 	bl	800184c <HAL_ADC_ConfigChannel>
 8000eba:	4605      	mov	r5, r0
 8000ebc:	b108      	cbz	r0, 8000ec2 <main+0x12e>
 8000ebe:	b672      	cpsid	i
  while (1)
 8000ec0:	e7fe      	b.n	8000ec0 <main+0x12c>
  ssd1306_Init();
 8000ec2:	f000 fa51 	bl	8001368 <ssd1306_Init>
  ssd1306_Fill(Black);
 8000ec6:	4628      	mov	r0, r5
 8000ec8:	f000 f8b8 	bl	800103c <ssd1306_Fill>
  ssd1306_DrawBitmap(43, 2, logo, 42, 42, White);
 8000ecc:	232a      	movs	r3, #42	@ 0x2a
 8000ece:	4639      	mov	r1, r7
 8000ed0:	4a3a      	ldr	r2, [pc, #232]	@ (8000fbc <main+0x228>)
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	202b      	movs	r0, #43	@ 0x2b
 8000ed6:	9401      	str	r4, [sp, #4]
 8000ed8:	f000 f9f4 	bl	80012c4 <ssd1306_DrawBitmap>
  ssd1306_SetCursor(11, 46);
 8000edc:	212e      	movs	r1, #46	@ 0x2e
 8000ede:	200b      	movs	r0, #11
 8000ee0:	f000 f952 	bl	8001188 <ssd1306_SetCursor>
  ssd1306_WriteString("АвтоШашлык V0.1", RuFont_7x13, White);
 8000ee4:	4a36      	ldr	r2, [pc, #216]	@ (8000fc0 <main+0x22c>)
 8000ee6:	4623      	mov	r3, r4
 8000ee8:	ca06      	ldmia	r2, {r1, r2}
 8000eea:	4836      	ldr	r0, [pc, #216]	@ (8000fc4 <main+0x230>)
 8000eec:	f000 f938 	bl	8001160 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000ef0:	f000 f8b0 	bl	8001054 <ssd1306_UpdateScreen>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8000ef4:	4630      	mov	r0, r6
 8000ef6:	f000 fe83 	bl	8001c00 <HAL_ADCEx_Calibration_Start>
  osTimerDef(cancelButton, cancelButtonCallback);
 8000efa:	4b33      	ldr	r3, [pc, #204]	@ (8000fc8 <main+0x234>)
  cancelButtonHandle = osTimerCreate(osTimer(cancelButton), osTimerOnce, NULL);
 8000efc:	462a      	mov	r2, r5
 8000efe:	4629      	mov	r1, r5
 8000f00:	a805      	add	r0, sp, #20
  osTimerDef(cancelButton, cancelButtonCallback);
 8000f02:	e9cd 3505 	strd	r3, r5, [sp, #20]
  cancelButtonHandle = osTimerCreate(osTimer(cancelButton), osTimerOnce, NULL);
 8000f06:	f001 fe35 	bl	8002b74 <osTimerCreate>
 8000f0a:	4b30      	ldr	r3, [pc, #192]	@ (8000fcc <main+0x238>)
  screenTimeoutTimerHandle = osTimerCreate(osTimer(screenTimeoutTimer), osTimerOnce, NULL);
 8000f0c:	462a      	mov	r2, r5
  cancelButtonHandle = osTimerCreate(osTimer(cancelButton), osTimerOnce, NULL);
 8000f0e:	6018      	str	r0, [r3, #0]
  osTimerDef(screenTimeoutTimer, screenTimeoutCallback);
 8000f10:	4b2f      	ldr	r3, [pc, #188]	@ (8000fd0 <main+0x23c>)
  screenTimeoutTimerHandle = osTimerCreate(osTimer(screenTimeoutTimer), osTimerOnce, NULL);
 8000f12:	4629      	mov	r1, r5
 8000f14:	a807      	add	r0, sp, #28
  osTimerDef(screenTimeoutTimer, screenTimeoutCallback);
 8000f16:	e9cd 3507 	strd	r3, r5, [sp, #28]
  screenTimeoutTimerHandle = osTimerCreate(osTimer(screenTimeoutTimer), osTimerOnce, NULL);
 8000f1a:	f001 fe2b 	bl	8002b74 <osTimerCreate>
  osMessageQDef(buttonPressedQueue, 8, uint8_t);
 8000f1e:	4c2d      	ldr	r4, [pc, #180]	@ (8000fd4 <main+0x240>)
  screenTimeoutTimerHandle = osTimerCreate(osTimer(screenTimeoutTimer), osTimerOnce, NULL);
 8000f20:	4b2d      	ldr	r3, [pc, #180]	@ (8000fd8 <main+0x244>)
  osMessageQDef(buttonPressedQueue, 8, uint8_t);
 8000f22:	ae09      	add	r6, sp, #36	@ 0x24
  screenTimeoutTimerHandle = osTimerCreate(osTimer(screenTimeoutTimer), osTimerOnce, NULL);
 8000f24:	6018      	str	r0, [r3, #0]
  osMessageQDef(buttonPressedQueue, 8, uint8_t);
 8000f26:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000f2a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  buttonPressedQueueHandle = osMessageCreate(osMessageQ(buttonPressedQueue), NULL);
 8000f2e:	4629      	mov	r1, r5
 8000f30:	4630      	mov	r0, r6
 8000f32:	f001 fe87 	bl	8002c44 <osMessageCreate>
 8000f36:	4b29      	ldr	r3, [pc, #164]	@ (8000fdc <main+0x248>)
  osThreadDef(readKeyTask, StartReadKeyTask, osPriorityAboveNormal, 0, 128);
 8000f38:	f104 0710 	add.w	r7, r4, #16
 8000f3c:	ae0d      	add	r6, sp, #52	@ 0x34
  buttonPressedQueueHandle = osMessageCreate(osMessageQ(buttonPressedQueue), NULL);
 8000f3e:	6018      	str	r0, [r3, #0]
  osThreadDef(readKeyTask, StartReadKeyTask, osPriorityAboveNormal, 0, 128);
 8000f40:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000f42:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f44:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8000f48:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  readKeyTaskHandle = osThreadCreate(osThread(readKeyTask), NULL);
 8000f4c:	4629      	mov	r1, r5
 8000f4e:	a80d      	add	r0, sp, #52	@ 0x34
 8000f50:	f001 fddf 	bl	8002b12 <osThreadCreate>
 8000f54:	4b22      	ldr	r3, [pc, #136]	@ (8000fe0 <main+0x24c>)
  osThreadDef(guiTask, StartGuiTask, osPriorityNormal, 0, 128);
 8000f56:	f104 072c 	add.w	r7, r4, #44	@ 0x2c
 8000f5a:	ae14      	add	r6, sp, #80	@ 0x50
  readKeyTaskHandle = osThreadCreate(osThread(readKeyTask), NULL);
 8000f5c:	6018      	str	r0, [r3, #0]
  osThreadDef(guiTask, StartGuiTask, osPriorityNormal, 0, 128);
 8000f5e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000f60:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f62:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8000f66:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  guiTaskHandle = osThreadCreate(osThread(guiTask), NULL);
 8000f6a:	4629      	mov	r1, r5
 8000f6c:	a814      	add	r0, sp, #80	@ 0x50
 8000f6e:	f001 fdd0 	bl	8002b12 <osThreadCreate>
 8000f72:	4b1c      	ldr	r3, [pc, #112]	@ (8000fe4 <main+0x250>)
  osThreadDef(driverTask, StartDriverTask, osPriorityHigh, 0, 128);
 8000f74:	ae1b      	add	r6, sp, #108	@ 0x6c
 8000f76:	3448      	adds	r4, #72	@ 0x48
  guiTaskHandle = osThreadCreate(osThread(guiTask), NULL);
 8000f78:	6018      	str	r0, [r3, #0]
  osThreadDef(driverTask, StartDriverTask, osPriorityHigh, 0, 128);
 8000f7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f7c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000f7e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000f82:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  driverTaskHandle = osThreadCreate(osThread(driverTask), NULL);
 8000f86:	4629      	mov	r1, r5
 8000f88:	a81b      	add	r0, sp, #108	@ 0x6c
 8000f8a:	f001 fdc2 	bl	8002b12 <osThreadCreate>
 8000f8e:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <main+0x254>)
 8000f90:	6018      	str	r0, [r3, #0]
  osThreadSuspend(driverTaskHandle);
 8000f92:	f001 fecc 	bl	8002d2e <osThreadSuspend>
  osKernelStart();
 8000f96:	f001 fdb7 	bl	8002b08 <osKernelStart>
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <main+0x206>
 8000f9c:	40021000 	.word	0x40021000
 8000fa0:	40010800 	.word	0x40010800
 8000fa4:	40010c00 	.word	0x40010c00
 8000fa8:	20000758 	.word	0x20000758
 8000fac:	000186a0 	.word	0x000186a0
 8000fb0:	40005400 	.word	0x40005400
 8000fb4:	200007ac 	.word	0x200007ac
 8000fb8:	40012400 	.word	0x40012400
 8000fbc:	08005e0a 	.word	0x08005e0a
 8000fc0:	20000004 	.word	0x20000004
 8000fc4:	08005ddb 	.word	0x08005ddb
 8000fc8:	08000cc5 	.word	0x08000cc5
 8000fcc:	20000744 	.word	0x20000744
 8000fd0:	08000c11 	.word	0x08000c11
 8000fd4:	08005cd8 	.word	0x08005cd8
 8000fd8:	20000740 	.word	0x20000740
 8000fdc:	20000748 	.word	0x20000748
 8000fe0:	20000754 	.word	0x20000754
 8000fe4:	20000750 	.word	0x20000750
 8000fe8:	2000074c 	.word	0x2000074c

08000fec <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000fec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000fee:	2301      	movs	r3, #1
 8000ff0:	f04f 32ff 	mov.w	r2, #4294967295
 8000ff4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000ff8:	f10d 0217 	add.w	r2, sp, #23
void ssd1306_WriteCommand(uint8_t byte) {
 8000ffc:	f88d 0017 	strb.w	r0, [sp, #23]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8001000:	9200      	str	r2, [sp, #0]
 8001002:	2178      	movs	r1, #120	@ 0x78
 8001004:	2200      	movs	r2, #0
 8001006:	4803      	ldr	r0, [pc, #12]	@ (8001014 <ssd1306_WriteCommand+0x28>)
 8001008:	f001 f998 	bl	800233c <HAL_I2C_Mem_Write>
}
 800100c:	b007      	add	sp, #28
 800100e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001012:	bf00      	nop
 8001014:	20000758 	.word	0x20000758

08001018 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001018:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
 800101e:	b289      	uxth	r1, r1
 8001020:	e9cd 0100 	strd	r0, r1, [sp]
 8001024:	9302      	str	r3, [sp, #8]
 8001026:	2240      	movs	r2, #64	@ 0x40
 8001028:	2301      	movs	r3, #1
 800102a:	2178      	movs	r1, #120	@ 0x78
 800102c:	4802      	ldr	r0, [pc, #8]	@ (8001038 <ssd1306_WriteData+0x20>)
 800102e:	f001 f985 	bl	800233c <HAL_I2C_Mem_Write>
}
 8001032:	b005      	add	sp, #20
 8001034:	f85d fb04 	ldr.w	pc, [sp], #4
 8001038:	20000758 	.word	0x20000758

0800103c <ssd1306_Fill>:
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800103c:	2800      	cmp	r0, #0
 800103e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001042:	bf14      	ite	ne
 8001044:	21ff      	movne	r1, #255	@ 0xff
 8001046:	2100      	moveq	r1, #0
 8001048:	4801      	ldr	r0, [pc, #4]	@ (8001050 <ssd1306_Fill+0x14>)
 800104a:	f003 be60 	b.w	8004d0e <memset>
 800104e:	bf00      	nop
 8001050:	200007e2 	.word	0x200007e2

08001054 <ssd1306_UpdateScreen>:
}

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001054:	b538      	push	{r3, r4, r5, lr}
 8001056:	24b0      	movs	r4, #176	@ 0xb0
 8001058:	4d0a      	ldr	r5, [pc, #40]	@ (8001084 <ssd1306_UpdateScreen+0x30>)
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800105a:	4620      	mov	r0, r4
 800105c:	f7ff ffc6 	bl	8000fec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001060:	2000      	movs	r0, #0
 8001062:	f7ff ffc3 	bl	8000fec <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001066:	3401      	adds	r4, #1
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001068:	2010      	movs	r0, #16
 800106a:	f7ff ffbf 	bl	8000fec <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800106e:	b2e4      	uxtb	r4, r4
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001070:	4628      	mov	r0, r5
 8001072:	2180      	movs	r1, #128	@ 0x80
 8001074:	f7ff ffd0 	bl	8001018 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001078:	2cb8      	cmp	r4, #184	@ 0xb8
 800107a:	f105 0580 	add.w	r5, r5, #128	@ 0x80
 800107e:	d1ec      	bne.n	800105a <ssd1306_UpdateScreen+0x6>
    }
}
 8001080:	bd38      	pop	{r3, r4, r5, pc}
 8001082:	bf00      	nop
 8001084:	200007e2 	.word	0x200007e2

08001088 <ssd1306_DrawPixel>:
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001088:	0603      	lsls	r3, r0, #24
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 800108a:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800108c:	d410      	bmi.n	80010b0 <ssd1306_DrawPixel+0x28>
 800108e:	293f      	cmp	r1, #63	@ 0x3f
 8001090:	d80e      	bhi.n	80010b0 <ssd1306_DrawPixel+0x28>
        return;
    }
   
    // Draw in the right color
    if(color == White) {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001092:	2401      	movs	r4, #1
 8001094:	08cb      	lsrs	r3, r1, #3
 8001096:	4d07      	ldr	r5, [pc, #28]	@ (80010b4 <ssd1306_DrawPixel+0x2c>)
 8001098:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 800109c:	5c2b      	ldrb	r3, [r5, r0]
 800109e:	f001 0107 	and.w	r1, r1, #7
 80010a2:	fa04 f101 	lsl.w	r1, r4, r1
    if(color == White) {
 80010a6:	42a2      	cmp	r2, r4
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010a8:	bf0c      	ite	eq
 80010aa:	430b      	orreq	r3, r1
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80010ac:	438b      	bicne	r3, r1
 80010ae:	542b      	strb	r3, [r5, r0]
    }
}
 80010b0:	bd30      	pop	{r4, r5, pc}
 80010b2:	bf00      	nop
 80010b4:	200007e2 	.word	0x200007e2

080010b8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80010b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010bc:	4604      	mov	r4, r0
 80010be:	b087      	sub	sp, #28
 80010c0:	a806      	add	r0, sp, #24
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 255)
 80010c2:	2c1f      	cmp	r4, #31
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 80010c4:	e900 0006 	stmdb	r0, {r1, r2}
 80010c8:	9301      	str	r3, [sp, #4]
    if (ch < 32 || ch > 255)
 80010ca:	d944      	bls.n	8001156 <ssd1306_WriteChar+0x9e>
        return 0;

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80010cc:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800115c <ssd1306_WriteChar+0xa4>
 80010d0:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80010d4:	f8b9 a000 	ldrh.w	sl, [r9]
 80010d8:	eb0a 0306 	add.w	r3, sl, r6
 80010dc:	2b80      	cmp	r3, #128	@ 0x80
 80010de:	dc3a      	bgt.n	8001156 <ssd1306_WriteChar+0x9e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80010e0:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 80010e4:	f89d b011 	ldrb.w	fp, [sp, #17]
 80010e8:	9300      	str	r3, [sp, #0]
 80010ea:	eb03 020b 	add.w	r2, r3, fp
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80010ee:	2a40      	cmp	r2, #64	@ 0x40
 80010f0:	dc31      	bgt.n	8001156 <ssd1306_WriteChar+0x9e>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80010f2:	f04f 0800 	mov.w	r8, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80010f6:	f1a4 0520 	sub.w	r5, r4, #32
 80010fa:	fb0b f505 	mul.w	r5, fp, r5
 80010fe:	006d      	lsls	r5, r5, #1
    for(i = 0; i < Font.FontHeight; i++) {
 8001100:	45c3      	cmp	fp, r8
 8001102:	d806      	bhi.n	8001112 <ssd1306_WriteChar+0x5a>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001104:	4456      	add	r6, sl
 8001106:	f8a9 6000 	strh.w	r6, [r9]
    
    // Return written char for validation
    return ch;
}
 800110a:	4620      	mov	r0, r4
 800110c:	b007      	add	sp, #28
 800110e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(j = 0; j < Font.FontWidth; j++) {
 8001112:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001114:	9a05      	ldr	r2, [sp, #20]
 8001116:	5b53      	ldrh	r3, [r2, r5]
 8001118:	9303      	str	r3, [sp, #12]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 800111a:	9b00      	ldr	r3, [sp, #0]
 800111c:	eb08 0203 	add.w	r2, r8, r3
 8001120:	b2d3      	uxtb	r3, r2
 8001122:	9302      	str	r3, [sp, #8]
        for(j = 0; j < Font.FontWidth; j++) {
 8001124:	42be      	cmp	r6, r7
 8001126:	d803      	bhi.n	8001130 <ssd1306_WriteChar+0x78>
    for(i = 0; i < Font.FontHeight; i++) {
 8001128:	f108 0801 	add.w	r8, r8, #1
 800112c:	3502      	adds	r5, #2
 800112e:	e7e7      	b.n	8001100 <ssd1306_WriteChar+0x48>
            if((b << j) & 0x8000)  {
 8001130:	9b03      	ldr	r3, [sp, #12]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001132:	eb07 000a 	add.w	r0, r7, sl
            if((b << j) & 0x8000)  {
 8001136:	fa03 f207 	lsl.w	r2, r3, r7
 800113a:	0413      	lsls	r3, r2, #16
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800113c:	bf56      	itet	pl
 800113e:	9b01      	ldrpl	r3, [sp, #4]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001140:	9a01      	ldrmi	r2, [sp, #4]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001142:	fab3 f283 	clzpl	r2, r3
 8001146:	9902      	ldr	r1, [sp, #8]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001148:	b2c0      	uxtb	r0, r0
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800114a:	bf58      	it	pl
 800114c:	0952      	lsrpl	r2, r2, #5
 800114e:	f7ff ff9b 	bl	8001088 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001152:	3701      	adds	r7, #1
 8001154:	e7e6      	b.n	8001124 <ssd1306_WriteChar+0x6c>
        return 0;
 8001156:	2400      	movs	r4, #0
 8001158:	e7d7      	b.n	800110a <ssd1306_WriteChar+0x52>
 800115a:	bf00      	nop
 800115c:	200007dc 	.word	0x200007dc

08001160 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001160:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001162:	466d      	mov	r5, sp
 8001164:	461e      	mov	r6, r3
 8001166:	e885 0006 	stmia.w	r5, {r1, r2}
 800116a:	1e44      	subs	r4, r0, #1
    while (*str) {
 800116c:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8001170:	b140      	cbz	r0, 8001184 <ssd1306_WriteString+0x24>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001172:	e895 0006 	ldmia.w	r5, {r1, r2}
 8001176:	4633      	mov	r3, r6
 8001178:	f7ff ff9e 	bl	80010b8 <ssd1306_WriteChar>
 800117c:	4603      	mov	r3, r0
 800117e:	7820      	ldrb	r0, [r4, #0]
 8001180:	4283      	cmp	r3, r0
 8001182:	d0f3      	beq.n	800116c <ssd1306_WriteString+0xc>
        str++;
    }
    
    // Everything ok
    return *str;
}
 8001184:	b002      	add	sp, #8
 8001186:	bd70      	pop	{r4, r5, r6, pc}

08001188 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 8001188:	4b01      	ldr	r3, [pc, #4]	@ (8001190 <ssd1306_SetCursor+0x8>)
 800118a:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 800118c:	8059      	strh	r1, [r3, #2]
}
 800118e:	4770      	bx	lr
 8001190:	200007dc 	.word	0x200007dc

08001194 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001194:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001198:	4690      	mov	r8, r2
    int32_t deltaX = abs(x2 - x1);
 800119a:	eba8 0900 	sub.w	r9, r8, r0
    int32_t deltaY = abs(y2 - y1);
 800119e:	eba3 0a01 	sub.w	sl, r3, r1
    int32_t deltaX = abs(x2 - x1);
 80011a2:	f1b9 0f00 	cmp.w	r9, #0
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80011a6:	461e      	mov	r6, r3
    int32_t deltaX = abs(x2 - x1);
 80011a8:	bfb8      	it	lt
 80011aa:	f1c9 0900 	rsblt	r9, r9, #0
    int32_t deltaY = abs(y2 - y1);
 80011ae:	f1ba 0f00 	cmp.w	sl, #0
 80011b2:	bfb8      	it	lt
 80011b4:	f1ca 0a00 	rsblt	sl, sl, #0
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80011b8:	4580      	cmp	r8, r0
 80011ba:	bf8c      	ite	hi
 80011bc:	2301      	movhi	r3, #1
 80011be:	f04f 33ff 	movls.w	r3, #4294967295
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80011c2:	4605      	mov	r5, r0
 80011c4:	460c      	mov	r4, r1
    int32_t signY = ((y1 < y2) ? 1 : -1);
 80011c6:	428e      	cmp	r6, r1
 80011c8:	bf8c      	ite	hi
 80011ca:	f04f 0b01 	movhi.w	fp, #1
 80011ce:	f04f 3bff 	movls.w	fp, #4294967295
    int32_t error = deltaX - deltaY;
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 80011d2:	4640      	mov	r0, r8
 80011d4:	4631      	mov	r1, r6
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80011d6:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
    int32_t signX = ((x1 < x2) ? 1 : -1);
 80011da:	9300      	str	r3, [sp, #0]
    int32_t error = deltaX - deltaY;
 80011dc:	eba9 070a 	sub.w	r7, r9, sl
    ssd1306_DrawPixel(x2, y2, color);
 80011e0:	f7ff ff52 	bl	8001088 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
        ssd1306_DrawPixel(x1, y1, color);
        error2 = error * 2;
        if(error2 > -deltaY) {
 80011e4:	f1ca 0300 	rsb	r3, sl, #0
    while((x1 != x2) || (y1 != y2)) {
 80011e8:	4545      	cmp	r5, r8
 80011ea:	d104      	bne.n	80011f6 <ssd1306_Line+0x62>
 80011ec:	42b4      	cmp	r4, r6
 80011ee:	d102      	bne.n	80011f6 <ssd1306_Line+0x62>
            error += deltaX;
            y1 += signY;
        }
    }
    return;
}
 80011f0:	b003      	add	sp, #12
 80011f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ssd1306_DrawPixel(x1, y1, color);
 80011f6:	4621      	mov	r1, r4
 80011f8:	4628      	mov	r0, r5
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	f7ff ff44 	bl	8001088 <ssd1306_DrawPixel>
        if(error2 > -deltaY) {
 8001200:	9b01      	ldr	r3, [sp, #4]
        error2 = error * 2;
 8001202:	0079      	lsls	r1, r7, #1
        if(error2 > -deltaY) {
 8001204:	ebb3 0f47 	cmp.w	r3, r7, lsl #1
            x1 += signX;
 8001208:	bfbf      	itttt	lt
 800120a:	9800      	ldrlt	r0, [sp, #0]
            error -= deltaY;
 800120c:	eba7 070a 	sublt.w	r7, r7, sl
            x1 += signX;
 8001210:	182d      	addlt	r5, r5, r0
 8001212:	b2ed      	uxtblt	r5, r5
        if(error2 < deltaX) {
 8001214:	4589      	cmp	r9, r1
            y1 += signY;
 8001216:	bfc2      	ittt	gt
 8001218:	445c      	addgt	r4, fp
            error += deltaX;
 800121a:	444f      	addgt	r7, r9
            y1 += signY;
 800121c:	b2e4      	uxtbgt	r4, r4
 800121e:	e7e3      	b.n	80011e8 <ssd1306_Line+0x54>

08001220 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001220:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001224:	461c      	mov	r4, r3
 8001226:	4616      	mov	r6, r2
 8001228:	460d      	mov	r5, r1
 800122a:	4607      	mov	r7, r0
 800122c:	f89d 8020 	ldrb.w	r8, [sp, #32]
    ssd1306_Line(x1,y1,x2,y1,color);
 8001230:	460b      	mov	r3, r1
 8001232:	f8cd 8000 	str.w	r8, [sp]
 8001236:	f7ff ffad 	bl	8001194 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 800123a:	4623      	mov	r3, r4
 800123c:	4632      	mov	r2, r6
 800123e:	4629      	mov	r1, r5
 8001240:	4630      	mov	r0, r6
 8001242:	f8cd 8000 	str.w	r8, [sp]
 8001246:	f7ff ffa5 	bl	8001194 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 800124a:	4623      	mov	r3, r4
 800124c:	463a      	mov	r2, r7
 800124e:	4621      	mov	r1, r4
 8001250:	4630      	mov	r0, r6
 8001252:	f8cd 8000 	str.w	r8, [sp]
 8001256:	f7ff ff9d 	bl	8001194 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 800125a:	462b      	mov	r3, r5
 800125c:	463a      	mov	r2, r7
 800125e:	4621      	mov	r1, r4
 8001260:	4638      	mov	r0, r7
 8001262:	f8cd 8020 	str.w	r8, [sp, #32]

    return;
}
 8001266:	b002      	add	sp, #8
 8001268:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ssd1306_Line(x1,y2,x1,y1,color);
 800126c:	f7ff bf92 	b.w	8001194 <ssd1306_Line>

08001270 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001274:	4614      	mov	r4, r2
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8001276:	42a0      	cmp	r0, r4
 8001278:	4680      	mov	r8, r0
 800127a:	bf28      	it	cs
 800127c:	46a0      	movcs	r8, r4
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 800127e:	42a0      	cmp	r0, r4
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001280:	4606      	mov	r6, r0
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8001282:	bf38      	it	cc
 8001284:	4626      	movcc	r6, r4
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8001286:	4299      	cmp	r1, r3
 8001288:	460c      	mov	r4, r1
 800128a:	bf28      	it	cs
 800128c:	461c      	movcs	r4, r3
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 800128e:	4299      	cmp	r1, r3
 8001290:	bf38      	it	cc
 8001292:	4619      	movcc	r1, r3
 8001294:	460f      	mov	r7, r1
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001296:	f89d 2018 	ldrb.w	r2, [sp, #24]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800129a:	42bc      	cmp	r4, r7
 800129c:	d801      	bhi.n	80012a2 <ssd1306_FillRectangle+0x32>
 800129e:	2c3f      	cmp	r4, #63	@ 0x3f
 80012a0:	d90e      	bls.n	80012c0 <ssd1306_FillRectangle+0x50>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
            ssd1306_DrawPixel(x, y, color);
        }
    }
    return;
}
 80012a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ssd1306_DrawPixel(x, y, color);
 80012a6:	4628      	mov	r0, r5
 80012a8:	4621      	mov	r1, r4
 80012aa:	f7ff feed 	bl	8001088 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80012ae:	3501      	adds	r5, #1
 80012b0:	b2ed      	uxtb	r5, r5
 80012b2:	42b5      	cmp	r5, r6
 80012b4:	d801      	bhi.n	80012ba <ssd1306_FillRectangle+0x4a>
 80012b6:	062b      	lsls	r3, r5, #24
 80012b8:	d5f5      	bpl.n	80012a6 <ssd1306_FillRectangle+0x36>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80012ba:	3401      	adds	r4, #1
 80012bc:	b2e4      	uxtb	r4, r4
 80012be:	e7ec      	b.n	800129a <ssd1306_FillRectangle+0x2a>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80012c0:	4645      	mov	r5, r8
 80012c2:	e7f6      	b.n	80012b2 <ssd1306_FillRectangle+0x42>

080012c4 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80012c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80012c8:	f010 0f80 	tst.w	r0, #128	@ 0x80
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80012cc:	9200      	str	r2, [sp, #0]
 80012ce:	4681      	mov	r9, r0
 80012d0:	460c      	mov	r4, r1
 80012d2:	469a      	mov	sl, r3
 80012d4:	f89d 2034 	ldrb.w	r2, [sp, #52]	@ 0x34
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80012d8:	d12b      	bne.n	8001332 <ssd1306_DrawBitmap+0x6e>
 80012da:	293f      	cmp	r1, #63	@ 0x3f
 80012dc:	d829      	bhi.n	8001332 <ssd1306_DrawBitmap+0x6e>
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80012de:	2700      	movs	r7, #0
    uint8_t byte = 0;
 80012e0:	463d      	mov	r5, r7
 80012e2:	f89d 6030 	ldrb.w	r6, [sp, #48]	@ 0x30
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80012e6:	f103 0b07 	add.w	fp, r3, #7
 80012ea:	440e      	add	r6, r1
 80012ec:	ea4f 0beb 	mov.w	fp, fp, asr #3
 80012f0:	b2f6      	uxtb	r6, r6
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 80012f2:	42b4      	cmp	r4, r6
 80012f4:	d01d      	beq.n	8001332 <ssd1306_DrawBitmap+0x6e>
        for (uint8_t i = 0; i < w; i++) {
            if (i & 7) {
                byte <<= 1;
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80012f6:	9b00      	ldr	r3, [sp, #0]
    for (uint8_t j = 0; j < h; j++, y++) {
 80012f8:	f04f 0800 	mov.w	r8, #0
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80012fc:	443b      	add	r3, r7
 80012fe:	e010      	b.n	8001322 <ssd1306_DrawBitmap+0x5e>
            if (i & 7) {
 8001300:	0741      	lsls	r1, r0, #29
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001302:	bf0b      	itete	eq
 8001304:	08c1      	lsreq	r1, r0, #3
                byte <<= 1;
 8001306:	006d      	lslne	r5, r5, #1
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001308:	5c5d      	ldrbeq	r5, [r3, r1]
                byte <<= 1;
 800130a:	b2ed      	uxtbne	r5, r5
            }

            if (byte & 0x80) {
 800130c:	0629      	lsls	r1, r5, #24
 800130e:	d506      	bpl.n	800131e <ssd1306_DrawBitmap+0x5a>
                ssd1306_DrawPixel(x + i, y, color);
 8001310:	4448      	add	r0, r9
 8001312:	4621      	mov	r1, r4
 8001314:	b2c0      	uxtb	r0, r0
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	f7ff feb6 	bl	8001088 <ssd1306_DrawPixel>
 800131c:	9b01      	ldr	r3, [sp, #4]
        for (uint8_t i = 0; i < w; i++) {
 800131e:	f108 0801 	add.w	r8, r8, #1
 8001322:	45d0      	cmp	r8, sl
 8001324:	fa5f f088 	uxtb.w	r0, r8
 8001328:	d1ea      	bne.n	8001300 <ssd1306_DrawBitmap+0x3c>
    for (uint8_t j = 0; j < h; j++, y++) {
 800132a:	3401      	adds	r4, #1
 800132c:	b2e4      	uxtb	r4, r4
 800132e:	445f      	add	r7, fp
 8001330:	e7df      	b.n	80012f2 <ssd1306_DrawBitmap+0x2e>
            }
        }
    }
    return;
}
 8001332:	b003      	add	sp, #12
 8001334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001338 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001338:	b510      	push	{r4, lr}
 800133a:	4604      	mov	r4, r0
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800133c:	2081      	movs	r0, #129	@ 0x81
 800133e:	f7ff fe55 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001342:	4620      	mov	r0, r4
}
 8001344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ssd1306_WriteCommand(value);
 8001348:	f7ff be50 	b.w	8000fec <ssd1306_WriteCommand>

0800134c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
    uint8_t value;
    if (on) {
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
 800134c:	2800      	cmp	r0, #0
    if (on) {
 800134e:	4603      	mov	r3, r0
        SSD1306.DisplayOn = 1;
 8001350:	bf0c      	ite	eq
 8001352:	4603      	moveq	r3, r0
 8001354:	2301      	movne	r3, #1
 8001356:	4a03      	ldr	r2, [pc, #12]	@ (8001364 <ssd1306_SetDisplayOn+0x18>)
 8001358:	bf0c      	ite	eq
 800135a:	20ae      	moveq	r0, #174	@ 0xae
 800135c:	20af      	movne	r0, #175	@ 0xaf
 800135e:	7153      	strb	r3, [r2, #5]
    } else {
        value = 0xAE;   // Display off
        SSD1306.DisplayOn = 0;
    }
    ssd1306_WriteCommand(value);
 8001360:	f7ff be44 	b.w	8000fec <ssd1306_WriteCommand>
 8001364:	200007dc 	.word	0x200007dc

08001368 <ssd1306_Init>:
void ssd1306_Init(void) {
 8001368:	b508      	push	{r3, lr}
    HAL_Delay(100);
 800136a:	2064      	movs	r0, #100	@ 0x64
 800136c:	f000 f9b4 	bl	80016d8 <HAL_Delay>
    ssd1306_SetDisplayOn(0); //display off
 8001370:	2000      	movs	r0, #0
 8001372:	f7ff ffeb 	bl	800134c <ssd1306_SetDisplayOn>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001376:	2020      	movs	r0, #32
 8001378:	f7ff fe38 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800137c:	2000      	movs	r0, #0
 800137e:	f7ff fe35 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001382:	20b0      	movs	r0, #176	@ 0xb0
 8001384:	f7ff fe32 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001388:	20c8      	movs	r0, #200	@ 0xc8
 800138a:	f7ff fe2f 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 800138e:	2000      	movs	r0, #0
 8001390:	f7ff fe2c 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001394:	2010      	movs	r0, #16
 8001396:	f7ff fe29 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 800139a:	2040      	movs	r0, #64	@ 0x40
 800139c:	f7ff fe26 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_SetContrast(0xFF);
 80013a0:	20ff      	movs	r0, #255	@ 0xff
 80013a2:	f7ff ffc9 	bl	8001338 <ssd1306_SetContrast>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80013a6:	20a1      	movs	r0, #161	@ 0xa1
 80013a8:	f7ff fe20 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 80013ac:	20a6      	movs	r0, #166	@ 0xa6
 80013ae:	f7ff fe1d 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80013b2:	20a8      	movs	r0, #168	@ 0xa8
 80013b4:	f7ff fe1a 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 80013b8:	203f      	movs	r0, #63	@ 0x3f
 80013ba:	f7ff fe17 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80013be:	20a4      	movs	r0, #164	@ 0xa4
 80013c0:	f7ff fe14 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80013c4:	20d3      	movs	r0, #211	@ 0xd3
 80013c6:	f7ff fe11 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80013ca:	2000      	movs	r0, #0
 80013cc:	f7ff fe0e 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80013d0:	20d5      	movs	r0, #213	@ 0xd5
 80013d2:	f7ff fe0b 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80013d6:	20f0      	movs	r0, #240	@ 0xf0
 80013d8:	f7ff fe08 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80013dc:	20d9      	movs	r0, #217	@ 0xd9
 80013de:	f7ff fe05 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80013e2:	2022      	movs	r0, #34	@ 0x22
 80013e4:	f7ff fe02 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80013e8:	20da      	movs	r0, #218	@ 0xda
 80013ea:	f7ff fdff 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 80013ee:	2012      	movs	r0, #18
 80013f0:	f7ff fdfc 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 80013f4:	20db      	movs	r0, #219	@ 0xdb
 80013f6:	f7ff fdf9 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80013fa:	2020      	movs	r0, #32
 80013fc:	f7ff fdf6 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001400:	208d      	movs	r0, #141	@ 0x8d
 8001402:	f7ff fdf3 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001406:	2014      	movs	r0, #20
 8001408:	f7ff fdf0 	bl	8000fec <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800140c:	2001      	movs	r0, #1
 800140e:	f7ff ff9d 	bl	800134c <ssd1306_SetDisplayOn>
    ssd1306_Fill(Black);
 8001412:	2000      	movs	r0, #0
 8001414:	f7ff fe12 	bl	800103c <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8001418:	f7ff fe1c 	bl	8001054 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 800141c:	2200      	movs	r2, #0
 800141e:	4b03      	ldr	r3, [pc, #12]	@ (800142c <ssd1306_Init+0xc4>)
 8001420:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001422:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8001424:	2201      	movs	r2, #1
 8001426:	711a      	strb	r2, [r3, #4]
}
 8001428:	bd08      	pop	{r3, pc}
 800142a:	bf00      	nop
 800142c:	200007dc 	.word	0x200007dc

08001430 <ssd1306_GetDisplayOn>:
}

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}
 8001430:	4b01      	ldr	r3, [pc, #4]	@ (8001438 <ssd1306_GetDisplayOn+0x8>)
 8001432:	7958      	ldrb	r0, [r3, #5]
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	200007dc 	.word	0x200007dc

0800143c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <HAL_MspInit+0x48>)
{
 800143e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001440:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001442:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001444:	f042 0201 	orr.w	r2, r2, #1
 8001448:	619a      	str	r2, [r3, #24]
 800144a:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800144c:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001450:	f002 0201 	and.w	r2, r2, #1
 8001454:	9200      	str	r2, [sp, #0]
 8001456:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001458:	69da      	ldr	r2, [r3, #28]
 800145a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800145e:	61da      	str	r2, [r3, #28]
 8001460:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001462:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8001464:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001468:	9301      	str	r3, [sp, #4]
 800146a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800146c:	f000 fc4a 	bl	8001d04 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001470:	4a05      	ldr	r2, [pc, #20]	@ (8001488 <HAL_MspInit+0x4c>)
 8001472:	6853      	ldr	r3, [r2, #4]
 8001474:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001478:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800147c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800147e:	b003      	add	sp, #12
 8001480:	f85d fb04 	ldr.w	pc, [sp], #4
 8001484:	40021000 	.word	0x40021000
 8001488:	40010000 	.word	0x40010000

0800148c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800148c:	b510      	push	{r4, lr}
 800148e:	4604      	mov	r4, r0
 8001490:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001492:	2210      	movs	r2, #16
 8001494:	2100      	movs	r1, #0
 8001496:	a802      	add	r0, sp, #8
 8001498:	f003 fc39 	bl	8004d0e <memset>
  if(hadc->Instance==ADC1)
 800149c:	6822      	ldr	r2, [r4, #0]
 800149e:	4b10      	ldr	r3, [pc, #64]	@ (80014e0 <HAL_ADC_MspInit+0x54>)
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d11b      	bne.n	80014dc <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014a4:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 80014a8:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014aa:	480e      	ldr	r0, [pc, #56]	@ (80014e4 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014b0:	619a      	str	r2, [r3, #24]
 80014b2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014b6:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 80014ba:	9200      	str	r2, [sp, #0]
 80014bc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014be:	699a      	ldr	r2, [r3, #24]
 80014c0:	f042 0204 	orr.w	r2, r2, #4
 80014c4:	619a      	str	r2, [r3, #24]
 80014c6:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c8:	2220      	movs	r2, #32
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ca:	f003 0304 	and.w	r3, r3, #4
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014d8:	f000 fc58 	bl	8001d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80014dc:	b006      	add	sp, #24
 80014de:	bd10      	pop	{r4, pc}
 80014e0:	40012400 	.word	0x40012400
 80014e4:	40010800 	.word	0x40010800

080014e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014e8:	b510      	push	{r4, lr}
 80014ea:	4604      	mov	r4, r0
 80014ec:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ee:	2210      	movs	r2, #16
 80014f0:	2100      	movs	r1, #0
 80014f2:	a802      	add	r0, sp, #8
 80014f4:	f003 fc0b 	bl	8004d0e <memset>
  if(hi2c->Instance==I2C1)
 80014f8:	6822      	ldr	r2, [r4, #0]
 80014fa:	4b15      	ldr	r3, [pc, #84]	@ (8001550 <HAL_I2C_MspInit+0x68>)
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d124      	bne.n	800154a <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001500:	4c14      	ldr	r4, [pc, #80]	@ (8001554 <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001502:	f44f 7240 	mov.w	r2, #768	@ 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001508:	4813      	ldr	r0, [pc, #76]	@ (8001558 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150a:	f043 0308 	orr.w	r3, r3, #8
 800150e:	61a3      	str	r3, [r4, #24]
 8001510:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001514:	f003 0308 	and.w	r3, r3, #8
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800151c:	2312      	movs	r3, #18
 800151e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	f000 fc31 	bl	8001d8c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800152a:	4a0c      	ldr	r2, [pc, #48]	@ (800155c <HAL_I2C_MspInit+0x74>)
 800152c:	6853      	ldr	r3, [r2, #4]
 800152e:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001532:	f043 0302 	orr.w	r3, r3, #2
 8001536:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001538:	69e3      	ldr	r3, [r4, #28]
 800153a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800153e:	61e3      	str	r3, [r4, #28]
 8001540:	69e3      	ldr	r3, [r4, #28]
 8001542:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001546:	9301      	str	r3, [sp, #4]
 8001548:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800154a:	b006      	add	sp, #24
 800154c:	bd10      	pop	{r4, pc}
 800154e:	bf00      	nop
 8001550:	40005400 	.word	0x40005400
 8001554:	40021000 	.word	0x40021000
 8001558:	40010c00 	.word	0x40010c00
 800155c:	40010000 	.word	0x40010000

08001560 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001560:	e7fe      	b.n	8001560 <NMI_Handler>

08001562 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001562:	e7fe      	b.n	8001562 <HardFault_Handler>

08001564 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001564:	e7fe      	b.n	8001564 <MemManage_Handler>

08001566 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001566:	e7fe      	b.n	8001566 <BusFault_Handler>

08001568 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001568:	e7fe      	b.n	8001568 <UsageFault_Handler>

0800156a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800156a:	4770      	bx	lr

0800156c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156e:	f000 f8a1 	bl	80016b4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001572:	f002 fda1 	bl	80040b8 <xTaskGetSchedulerState>
 8001576:	2801      	cmp	r0, #1
 8001578:	d003      	beq.n	8001582 <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 800157e:	f003 b8f1 	b.w	8004764 <xPortSysTickHandler>
}
 8001582:	bd08      	pop	{r3, pc}

08001584 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001584:	b570      	push	{r4, r5, r6, lr}
 8001586:	460d      	mov	r5, r1
 8001588:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800158a:	460e      	mov	r6, r1
 800158c:	1b73      	subs	r3, r6, r5
 800158e:	429c      	cmp	r4, r3
 8001590:	dc01      	bgt.n	8001596 <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 8001592:	4620      	mov	r0, r4
 8001594:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 8001596:	f3af 8000 	nop.w
 800159a:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159e:	e7f5      	b.n	800158c <_read+0x8>

080015a0 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	4770      	bx	lr

080015a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80015a6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 80015aa:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 80015ac:	604b      	str	r3, [r1, #4]
}
 80015ae:	4770      	bx	lr

080015b0 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80015b0:	2001      	movs	r0, #1
 80015b2:	4770      	bx	lr

080015b4 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80015b4:	2000      	movs	r0, #0
 80015b6:	4770      	bx	lr

080015b8 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b8:	4a0b      	ldr	r2, [pc, #44]	@ (80015e8 <_sbrk+0x30>)
{
 80015ba:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80015bc:	6811      	ldr	r1, [r2, #0]
{
 80015be:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80015c0:	b909      	cbnz	r1, 80015c6 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80015c2:	490a      	ldr	r1, [pc, #40]	@ (80015ec <_sbrk+0x34>)
 80015c4:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015c6:	6810      	ldr	r0, [r2, #0]
 80015c8:	4909      	ldr	r1, [pc, #36]	@ (80015f0 <_sbrk+0x38>)
 80015ca:	4c0a      	ldr	r4, [pc, #40]	@ (80015f4 <_sbrk+0x3c>)
 80015cc:	4403      	add	r3, r0
 80015ce:	1b09      	subs	r1, r1, r4
 80015d0:	428b      	cmp	r3, r1
 80015d2:	d906      	bls.n	80015e2 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80015d4:	f003 fbea 	bl	8004dac <__errno>
 80015d8:	230c      	movs	r3, #12
 80015da:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80015e0:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80015e2:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80015e4:	e7fc      	b.n	80015e0 <_sbrk+0x28>
 80015e6:	bf00      	nop
 80015e8:	20000be4 	.word	0x20000be4
 80015ec:	20001bc0 	.word	0x20001bc0
 80015f0:	20002800 	.word	0x20002800
 80015f4:	00000400 	.word	0x00000400

080015f8 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015f8:	4770      	bx	lr
	...

080015fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015fc:	f7ff fffc 	bl	80015f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001600:	480b      	ldr	r0, [pc, #44]	@ (8001630 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001602:	490c      	ldr	r1, [pc, #48]	@ (8001634 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001604:	4a0c      	ldr	r2, [pc, #48]	@ (8001638 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001608:	e002      	b.n	8001610 <LoopCopyDataInit>

0800160a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800160a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800160c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160e:	3304      	adds	r3, #4

08001610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001614:	d3f9      	bcc.n	800160a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001616:	4a09      	ldr	r2, [pc, #36]	@ (800163c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001618:	4c09      	ldr	r4, [pc, #36]	@ (8001640 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800161a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800161c:	e001      	b.n	8001622 <LoopFillZerobss>

0800161e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001620:	3204      	adds	r2, #4

08001622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001624:	d3fb      	bcc.n	800161e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001626:	f003 fbc7 	bl	8004db8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800162a:	f7ff fbb3 	bl	8000d94 <main>
  bx lr
 800162e:	4770      	bx	lr
  ldr r0, =_sdata
 8001630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001634:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001638:	08007650 	.word	0x08007650
  ldr r2, =_sbss
 800163c:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001640:	20001bbc 	.word	0x20001bbc

08001644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <ADC1_2_IRQHandler>
	...

08001648 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001648:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800164a:	4b0e      	ldr	r3, [pc, #56]	@ (8001684 <HAL_InitTick+0x3c>)
{
 800164c:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800164e:	781a      	ldrb	r2, [r3, #0]
 8001650:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001654:	fbb3 f3f2 	udiv	r3, r3, r2
 8001658:	4a0b      	ldr	r2, [pc, #44]	@ (8001688 <HAL_InitTick+0x40>)
 800165a:	6810      	ldr	r0, [r2, #0]
 800165c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001660:	f000 fb80 	bl	8001d64 <HAL_SYSTICK_Config>
 8001664:	4604      	mov	r4, r0
 8001666:	b958      	cbnz	r0, 8001680 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001668:	2d0f      	cmp	r5, #15
 800166a:	d809      	bhi.n	8001680 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800166c:	4602      	mov	r2, r0
 800166e:	4629      	mov	r1, r5
 8001670:	f04f 30ff 	mov.w	r0, #4294967295
 8001674:	f000 fb46 	bl	8001d04 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001678:	4620      	mov	r0, r4
 800167a:	4b04      	ldr	r3, [pc, #16]	@ (800168c <HAL_InitTick+0x44>)
 800167c:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 800167e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001680:	2001      	movs	r0, #1
 8001682:	e7fc      	b.n	800167e <HAL_InitTick+0x36>
 8001684:	20000010 	.word	0x20000010
 8001688:	2000000c 	.word	0x2000000c
 800168c:	20000014 	.word	0x20000014

08001690 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001690:	4a07      	ldr	r2, [pc, #28]	@ (80016b0 <HAL_Init+0x20>)
{
 8001692:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001694:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001696:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001698:	f043 0310 	orr.w	r3, r3, #16
 800169c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800169e:	f000 fb1f 	bl	8001ce0 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80016a2:	200f      	movs	r0, #15
 80016a4:	f7ff ffd0 	bl	8001648 <HAL_InitTick>
  HAL_MspInit();
 80016a8:	f7ff fec8 	bl	800143c <HAL_MspInit>
}
 80016ac:	2000      	movs	r0, #0
 80016ae:	bd08      	pop	{r3, pc}
 80016b0:	40022000 	.word	0x40022000

080016b4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016b4:	4a03      	ldr	r2, [pc, #12]	@ (80016c4 <HAL_IncTick+0x10>)
 80016b6:	4b04      	ldr	r3, [pc, #16]	@ (80016c8 <HAL_IncTick+0x14>)
 80016b8:	6811      	ldr	r1, [r2, #0]
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	440b      	add	r3, r1
 80016be:	6013      	str	r3, [r2, #0]
}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	20000be8 	.word	0x20000be8
 80016c8:	20000010 	.word	0x20000010

080016cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016cc:	4b01      	ldr	r3, [pc, #4]	@ (80016d4 <HAL_GetTick+0x8>)
 80016ce:	6818      	ldr	r0, [r3, #0]
}
 80016d0:	4770      	bx	lr
 80016d2:	bf00      	nop
 80016d4:	20000be8 	.word	0x20000be8

080016d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016d8:	b538      	push	{r3, r4, r5, lr}
 80016da:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80016dc:	f7ff fff6 	bl	80016cc <HAL_GetTick>
 80016e0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016e2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80016e4:	bf1e      	ittt	ne
 80016e6:	4b04      	ldrne	r3, [pc, #16]	@ (80016f8 <HAL_Delay+0x20>)
 80016e8:	781b      	ldrbne	r3, [r3, #0]
 80016ea:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016ec:	f7ff ffee 	bl	80016cc <HAL_GetTick>
 80016f0:	1b43      	subs	r3, r0, r5
 80016f2:	42a3      	cmp	r3, r4
 80016f4:	d3fa      	bcc.n	80016ec <HAL_Delay+0x14>
  {
  }
}
 80016f6:	bd38      	pop	{r3, r4, r5, pc}
 80016f8:	20000010 	.word	0x20000010

080016fc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80016fe:	2600      	movs	r6, #0
{
 8001700:	4604      	mov	r4, r0
 8001702:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001704:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8001706:	f7ff ffe1 	bl	80016cc <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800170a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800170c:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 800170e:	689a      	ldr	r2, [r3, #8]
 8001710:	05d1      	lsls	r1, r2, #23
 8001712:	d508      	bpl.n	8001726 <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 8001714:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001716:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    __HAL_UNLOCK(hadc);
 8001718:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800171c:	f043 0320 	orr.w	r3, r3, #32
 8001720:	62a3      	str	r3, [r4, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 8001722:	b003      	add	sp, #12
 8001724:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001726:	685a      	ldr	r2, [r3, #4]
 8001728:	05d2      	lsls	r2, r2, #23
 800172a:	d403      	bmi.n	8001734 <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800172c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800172e:	f413 0f70 	tst.w	r3, #15728640	@ 0xf00000
 8001732:	d03d      	beq.n	80017b0 <HAL_ADC_PollForConversion+0xb4>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001734:	4b3d      	ldr	r3, [pc, #244]	@ (800182c <HAL_ADC_PollForConversion+0x130>)
 8001736:	2002      	movs	r0, #2
 8001738:	681e      	ldr	r6, [r3, #0]
 800173a:	f001 f987 	bl	8002a4c <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	4a3b      	ldr	r2, [pc, #236]	@ (8001830 <HAL_ADC_PollForConversion+0x134>)
 8001742:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001744:	fbb6 f6f0 	udiv	r6, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001748:	4211      	tst	r1, r2
 800174a:	4a3a      	ldr	r2, [pc, #232]	@ (8001834 <HAL_ADC_PollForConversion+0x138>)
 800174c:	d151      	bne.n	80017f2 <HAL_ADC_PollForConversion+0xf6>
 800174e:	68d8      	ldr	r0, [r3, #12]
 8001750:	4939      	ldr	r1, [pc, #228]	@ (8001838 <HAL_ADC_PollForConversion+0x13c>)
 8001752:	4208      	tst	r0, r1
 8001754:	d14d      	bne.n	80017f2 <HAL_ADC_PollForConversion+0xf6>
 8001756:	6919      	ldr	r1, [r3, #16]
 8001758:	4211      	tst	r1, r2
 800175a:	d15b      	bne.n	8001814 <HAL_ADC_PollForConversion+0x118>
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	4b37      	ldr	r3, [pc, #220]	@ (800183c <HAL_ADC_PollForConversion+0x140>)
 8001760:	421a      	tst	r2, r3
 8001762:	bf14      	ite	ne
 8001764:	2329      	movne	r3, #41	@ 0x29
 8001766:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001768:	435e      	muls	r6, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800176a:	9b01      	ldr	r3, [sp, #4]
 800176c:	42b3      	cmp	r3, r6
 800176e:	d223      	bcs.n	80017b8 <HAL_ADC_PollForConversion+0xbc>
      if(Timeout != HAL_MAX_DELAY)
 8001770:	1c6a      	adds	r2, r5, #1
 8001772:	d004      	beq.n	800177e <HAL_ADC_PollForConversion+0x82>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001774:	2d00      	cmp	r5, #0
 8001776:	d153      	bne.n	8001820 <HAL_ADC_PollForConversion+0x124>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001778:	9b01      	ldr	r3, [sp, #4]
 800177a:	42b3      	cmp	r3, r6
 800177c:	d30a      	bcc.n	8001794 <HAL_ADC_PollForConversion+0x98>
      Conversion_Timeout_CPU_cycles ++;
 800177e:	9b01      	ldr	r3, [sp, #4]
 8001780:	3301      	adds	r3, #1
 8001782:	9301      	str	r3, [sp, #4]
 8001784:	e7f1      	b.n	800176a <HAL_ADC_PollForConversion+0x6e>
      if(Timeout != HAL_MAX_DELAY)
 8001786:	1c6e      	adds	r6, r5, #1
 8001788:	d013      	beq.n	80017b2 <HAL_ADC_PollForConversion+0xb6>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800178a:	b965      	cbnz	r5, 80017a6 <HAL_ADC_PollForConversion+0xaa>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	0798      	lsls	r0, r3, #30
 8001792:	d40d      	bmi.n	80017b0 <HAL_ADC_PollForConversion+0xb4>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001794:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            return HAL_TIMEOUT;
 8001796:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	62a3      	str	r3, [r4, #40]	@ 0x28
            __HAL_UNLOCK(hadc);
 800179e:	2300      	movs	r3, #0
 80017a0:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 80017a4:	e7bd      	b.n	8001722 <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80017a6:	f7ff ff91 	bl	80016cc <HAL_GetTick>
 80017aa:	1bc0      	subs	r0, r0, r7
 80017ac:	42a8      	cmp	r0, r5
 80017ae:	d8ed      	bhi.n	800178c <HAL_ADC_PollForConversion+0x90>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80017b0:	6822      	ldr	r2, [r4, #0]
 80017b2:	6813      	ldr	r3, [r2, #0]
 80017b4:	0799      	lsls	r1, r3, #30
 80017b6:	d5e6      	bpl.n	8001786 <HAL_ADC_PollForConversion+0x8a>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017b8:	f06f 0312 	mvn.w	r3, #18
 80017bc:	6822      	ldr	r2, [r4, #0]
 80017be:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017c0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80017c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017c6:	62a3      	str	r3, [r4, #40]	@ 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80017c8:	6893      	ldr	r3, [r2, #8]
 80017ca:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80017ce:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80017d2:	d10c      	bne.n	80017ee <HAL_ADC_PollForConversion+0xf2>
 80017d4:	7b23      	ldrb	r3, [r4, #12]
 80017d6:	b953      	cbnz	r3, 80017ee <HAL_ADC_PollForConversion+0xf2>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80017d8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80017da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80017de:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017e0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80017e2:	04db      	lsls	r3, r3, #19
 80017e4:	d403      	bmi.n	80017ee <HAL_ADC_PollForConversion+0xf2>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80017e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	62a3      	str	r3, [r4, #40]	@ 0x28
  return HAL_OK;
 80017ee:	2000      	movs	r0, #0
 80017f0:	e797      	b.n	8001722 <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80017f2:	6919      	ldr	r1, [r3, #16]
 80017f4:	4211      	tst	r1, r2
 80017f6:	d103      	bne.n	8001800 <HAL_ADC_PollForConversion+0x104>
 80017f8:	68d9      	ldr	r1, [r3, #12]
 80017fa:	4a10      	ldr	r2, [pc, #64]	@ (800183c <HAL_ADC_PollForConversion+0x140>)
 80017fc:	4211      	tst	r1, r2
 80017fe:	d00b      	beq.n	8001818 <HAL_ADC_PollForConversion+0x11c>
 8001800:	6919      	ldr	r1, [r3, #16]
 8001802:	4a0f      	ldr	r2, [pc, #60]	@ (8001840 <HAL_ADC_PollForConversion+0x144>)
 8001804:	4211      	tst	r1, r2
 8001806:	d109      	bne.n	800181c <HAL_ADC_PollForConversion+0x120>
 8001808:	68db      	ldr	r3, [r3, #12]
 800180a:	4213      	tst	r3, r2
 800180c:	bf14      	ite	ne
 800180e:	23fc      	movne	r3, #252	@ 0xfc
 8001810:	2354      	moveq	r3, #84	@ 0x54
 8001812:	e7a9      	b.n	8001768 <HAL_ADC_PollForConversion+0x6c>
 8001814:	2329      	movs	r3, #41	@ 0x29
 8001816:	e7a7      	b.n	8001768 <HAL_ADC_PollForConversion+0x6c>
 8001818:	2354      	movs	r3, #84	@ 0x54
 800181a:	e7a5      	b.n	8001768 <HAL_ADC_PollForConversion+0x6c>
 800181c:	23fc      	movs	r3, #252	@ 0xfc
 800181e:	e7a3      	b.n	8001768 <HAL_ADC_PollForConversion+0x6c>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001820:	f7ff ff54 	bl	80016cc <HAL_GetTick>
 8001824:	1bc0      	subs	r0, r0, r7
 8001826:	42a8      	cmp	r0, r5
 8001828:	d8a6      	bhi.n	8001778 <HAL_ADC_PollForConversion+0x7c>
 800182a:	e7a8      	b.n	800177e <HAL_ADC_PollForConversion+0x82>
 800182c:	2000000c 	.word	0x2000000c
 8001830:	24924924 	.word	0x24924924
 8001834:	12492492 	.word	0x12492492
 8001838:	00924924 	.word	0x00924924
 800183c:	00492492 	.word	0x00492492
 8001840:	00249249 	.word	0x00249249

08001844 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001844:	6803      	ldr	r3, [r0, #0]
 8001846:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8001848:	4770      	bx	lr
	...

0800184c <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 800184c:	2300      	movs	r3, #0
{ 
 800184e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001850:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001852:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{ 
 8001856:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001858:	2b01      	cmp	r3, #1
 800185a:	d06c      	beq.n	8001936 <HAL_ADC_ConfigChannel+0xea>
 800185c:	2301      	movs	r3, #1
 800185e:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001862:	684d      	ldr	r5, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001864:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 8001866:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001868:	6808      	ldr	r0, [r1, #0]
 800186a:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 800186e:	d822      	bhi.n	80018b6 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001870:	261f      	movs	r6, #31
 8001872:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8001874:	3b05      	subs	r3, #5
 8001876:	409e      	lsls	r6, r3
 8001878:	ea25 0506 	bic.w	r5, r5, r6
 800187c:	fa00 f303 	lsl.w	r3, r0, r3
 8001880:	432b      	orrs	r3, r5
 8001882:	6353      	str	r3, [r2, #52]	@ 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001884:	2809      	cmp	r0, #9
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001886:	688b      	ldr	r3, [r1, #8]
 8001888:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 800188c:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001890:	d929      	bls.n	80018e6 <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001892:	68d6      	ldr	r6, [r2, #12]
 8001894:	3d1e      	subs	r5, #30
 8001896:	40a9      	lsls	r1, r5
 8001898:	ea26 0101 	bic.w	r1, r6, r1
 800189c:	40ab      	lsls	r3, r5
 800189e:	430b      	orrs	r3, r1
 80018a0:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018a2:	f1a0 0310 	sub.w	r3, r0, #16
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d925      	bls.n	80018f6 <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80018aa:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ac:	2300      	movs	r3, #0
 80018ae:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 80018b2:	b002      	add	sp, #8
 80018b4:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 80018b6:	2d0c      	cmp	r5, #12
 80018b8:	f04f 051f 	mov.w	r5, #31
 80018bc:	d809      	bhi.n	80018d2 <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80018be:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 80018c0:	3b23      	subs	r3, #35	@ 0x23
 80018c2:	409d      	lsls	r5, r3
 80018c4:	ea26 0505 	bic.w	r5, r6, r5
 80018c8:	fa00 f303 	lsl.w	r3, r0, r3
 80018cc:	432b      	orrs	r3, r5
 80018ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80018d0:	e7d8      	b.n	8001884 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80018d2:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
 80018d4:	3b41      	subs	r3, #65	@ 0x41
 80018d6:	409d      	lsls	r5, r3
 80018d8:	ea26 0505 	bic.w	r5, r6, r5
 80018dc:	fa00 f303 	lsl.w	r3, r0, r3
 80018e0:	432b      	orrs	r3, r5
 80018e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80018e4:	e7ce      	b.n	8001884 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80018e6:	6910      	ldr	r0, [r2, #16]
 80018e8:	40a9      	lsls	r1, r5
 80018ea:	ea20 0101 	bic.w	r1, r0, r1
 80018ee:	40ab      	lsls	r3, r5
 80018f0:	430b      	orrs	r3, r1
 80018f2:	6113      	str	r3, [r2, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018f4:	e7d9      	b.n	80018aa <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80018f6:	4b11      	ldr	r3, [pc, #68]	@ (800193c <HAL_ADC_ConfigChannel+0xf0>)
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d116      	bne.n	800192a <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80018fc:	6893      	ldr	r3, [r2, #8]
 80018fe:	021b      	lsls	r3, r3, #8
 8001900:	d4d3      	bmi.n	80018aa <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001902:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001904:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001906:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800190a:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800190c:	d1cd      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800190e:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <HAL_ADC_ConfigChannel+0xf4>)
 8001910:	4a0c      	ldr	r2, [pc, #48]	@ (8001944 <HAL_ADC_ConfigChannel+0xf8>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	fbb3 f3f2 	udiv	r3, r3, r2
 8001918:	220a      	movs	r2, #10
 800191a:	4353      	muls	r3, r2
            wait_loop_index--;
 800191c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 800191e:	9b01      	ldr	r3, [sp, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0c2      	beq.n	80018aa <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8001924:	9b01      	ldr	r3, [sp, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	e7f8      	b.n	800191c <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800192a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 800192c:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800192e:	f043 0320 	orr.w	r3, r3, #32
 8001932:	62a3      	str	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8001934:	e7ba      	b.n	80018ac <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 8001936:	2002      	movs	r0, #2
 8001938:	e7bb      	b.n	80018b2 <HAL_ADC_ConfigChannel+0x66>
 800193a:	bf00      	nop
 800193c:	40012400 	.word	0x40012400
 8001940:	2000000c 	.word	0x2000000c
 8001944:	000f4240 	.word	0x000f4240

08001948 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001948:	2300      	movs	r3, #0
{
 800194a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 800194c:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800194e:	6803      	ldr	r3, [r0, #0]
{
 8001950:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	07d2      	lsls	r2, r2, #31
 8001956:	d502      	bpl.n	800195e <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001958:	2000      	movs	r0, #0
}
 800195a:	b003      	add	sp, #12
 800195c:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	f042 0201 	orr.w	r2, r2, #1
 8001964:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001966:	4b14      	ldr	r3, [pc, #80]	@ (80019b8 <ADC_Enable+0x70>)
 8001968:	4a14      	ldr	r2, [pc, #80]	@ (80019bc <ADC_Enable+0x74>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001970:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001972:	9b01      	ldr	r3, [sp, #4]
 8001974:	b9e3      	cbnz	r3, 80019b0 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 8001976:	f7ff fea9 	bl	80016cc <HAL_GetTick>
 800197a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800197c:	6823      	ldr	r3, [r4, #0]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	07db      	lsls	r3, r3, #31
 8001982:	d4e9      	bmi.n	8001958 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001984:	f7ff fea2 	bl	80016cc <HAL_GetTick>
 8001988:	1b40      	subs	r0, r0, r5
 800198a:	2802      	cmp	r0, #2
 800198c:	d9f6      	bls.n	800197c <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 800198e:	6823      	ldr	r3, [r4, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f013 0301 	ands.w	r3, r3, #1
 8001996:	d1f1      	bne.n	800197c <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001998:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          return HAL_ERROR;
 800199a:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800199c:	f042 0210 	orr.w	r2, r2, #16
 80019a0:	62a2      	str	r2, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 80019a4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019a8:	f042 0201 	orr.w	r2, r2, #1
 80019ac:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 80019ae:	e7d4      	b.n	800195a <ADC_Enable+0x12>
      wait_loop_index--;
 80019b0:	9b01      	ldr	r3, [sp, #4]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	e7dc      	b.n	8001970 <ADC_Enable+0x28>
 80019b6:	bf00      	nop
 80019b8:	2000000c 	.word	0x2000000c
 80019bc:	000f4240 	.word	0x000f4240

080019c0 <HAL_ADC_Start>:
{
 80019c0:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80019c2:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 80019c6:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d054      	beq.n	8001a76 <HAL_ADC_Start+0xb6>
 80019cc:	2301      	movs	r3, #1
 80019ce:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80019d2:	f7ff ffb9 	bl	8001948 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80019d6:	2800      	cmp	r0, #0
 80019d8:	d149      	bne.n	8001a6e <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 80019da:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80019dc:	4a27      	ldr	r2, [pc, #156]	@ (8001a7c <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 80019de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80019e2:	f023 0301 	bic.w	r3, r3, #1
 80019e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019ea:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80019ec:	6823      	ldr	r3, [r4, #0]
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d104      	bne.n	80019fc <HAL_ADC_Start+0x3c>
 80019f2:	4923      	ldr	r1, [pc, #140]	@ (8001a80 <HAL_ADC_Start+0xc0>)
 80019f4:	684a      	ldr	r2, [r1, #4]
 80019f6:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 80019fa:	d12e      	bne.n	8001a5a <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80019fc:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80019fe:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 8001a02:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a04:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a06:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001a08:	bf41      	itttt	mi
 8001a0a:	6aa2      	ldrmi	r2, [r4, #40]	@ 0x28
 8001a0c:	f422 5240 	bicmi.w	r2, r2, #12288	@ 0x3000
 8001a10:	f442 5280 	orrmi.w	r2, r2, #4096	@ 0x1000
 8001a14:	62a2      	strmi	r2, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a16:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001a18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a1c:	bf1c      	itt	ne
 8001a1e:	6ae2      	ldrne	r2, [r4, #44]	@ 0x2c
 8001a20:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001a24:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_UNLOCK(hadc);
 8001a26:	2200      	movs	r2, #0
 8001a28:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001a2c:	f06f 0202 	mvn.w	r2, #2
 8001a30:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a32:	689a      	ldr	r2, [r3, #8]
 8001a34:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8001a38:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8001a3c:	d113      	bne.n	8001a66 <HAL_ADC_Start+0xa6>
 8001a3e:	4a0f      	ldr	r2, [pc, #60]	@ (8001a7c <HAL_ADC_Start+0xbc>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d105      	bne.n	8001a50 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001a44:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8001a48:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001a4a:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 8001a4e:	d10a      	bne.n	8001a66 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001a50:	689a      	ldr	r2, [r3, #8]
 8001a52:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a56:	609a      	str	r2, [r3, #8]
}
 8001a58:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001a5a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001a5c:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001a60:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001a62:	684a      	ldr	r2, [r1, #4]
 8001a64:	e7cf      	b.n	8001a06 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001a6c:	e7f3      	b.n	8001a56 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8001a6e:	2300      	movs	r3, #0
 8001a70:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8001a74:	e7f0      	b.n	8001a58 <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 8001a76:	2002      	movs	r0, #2
 8001a78:	e7ee      	b.n	8001a58 <HAL_ADC_Start+0x98>
 8001a7a:	bf00      	nop
 8001a7c:	40012800 	.word	0x40012800
 8001a80:	40012400 	.word	0x40012400

08001a84 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001a84:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a86:	6803      	ldr	r3, [r0, #0]
{
 8001a88:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	07d1      	lsls	r1, r2, #31
 8001a8e:	d401      	bmi.n	8001a94 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001a90:	2000      	movs	r0, #0
}
 8001a92:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	f022 0201 	bic.w	r2, r2, #1
 8001a9a:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001a9c:	f7ff fe16 	bl	80016cc <HAL_GetTick>
 8001aa0:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001aa2:	6823      	ldr	r3, [r4, #0]
 8001aa4:	689b      	ldr	r3, [r3, #8]
 8001aa6:	07db      	lsls	r3, r3, #31
 8001aa8:	d5f2      	bpl.n	8001a90 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001aaa:	f7ff fe0f 	bl	80016cc <HAL_GetTick>
 8001aae:	1b40      	subs	r0, r0, r5
 8001ab0:	2802      	cmp	r0, #2
 8001ab2:	d9f6      	bls.n	8001aa2 <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001ab4:	6823      	ldr	r3, [r4, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	07da      	lsls	r2, r3, #31
 8001aba:	d5f2      	bpl.n	8001aa2 <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001abc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8001abe:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ac0:	f043 0310 	orr.w	r3, r3, #16
 8001ac4:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ac6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8001ace:	e7e0      	b.n	8001a92 <ADC_ConversionStop_Disable+0xe>

08001ad0 <HAL_ADC_Init>:
{
 8001ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 8001ad2:	4604      	mov	r4, r0
 8001ad4:	2800      	cmp	r0, #0
 8001ad6:	d06d      	beq.n	8001bb4 <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ad8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001ada:	b923      	cbnz	r3, 8001ae6 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8001adc:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001ade:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8001ae2:	f7ff fcd3 	bl	800148c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001ae6:	4620      	mov	r0, r4
 8001ae8:	f7ff ffcc 	bl	8001a84 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001aec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001aee:	f013 0310 	ands.w	r3, r3, #16
 8001af2:	d161      	bne.n	8001bb8 <HAL_ADC_Init+0xe8>
 8001af4:	2800      	cmp	r0, #0
 8001af6:	d15f      	bne.n	8001bb8 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 8001af8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001afa:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 8001afc:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8001b00:	f022 0202 	bic.w	r2, r2, #2
 8001b04:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b08:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b0a:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8001b0c:	62a2      	str	r2, [r4, #40]	@ 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b0e:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b10:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b12:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b16:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b1a:	d036      	beq.n	8001b8a <HAL_ADC_Init+0xba>
 8001b1c:	1e77      	subs	r7, r6, #1
 8001b1e:	427d      	negs	r5, r7
 8001b20:	417d      	adcs	r5, r7
 8001b22:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b24:	7d27      	ldrb	r7, [r4, #20]
 8001b26:	2f01      	cmp	r7, #1
 8001b28:	d106      	bne.n	8001b38 <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b2a:	bb82      	cbnz	r2, 8001b8e <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b2c:	69a2      	ldr	r2, [r4, #24]
 8001b2e:	3a01      	subs	r2, #1
 8001b30:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 8001b34:	f442 6500 	orr.w	r5, r2, #2048	@ 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001b38:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b3a:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001b3e:	6857      	ldr	r7, [r2, #4]
 8001b40:	f427 4769 	bic.w	r7, r7, #59648	@ 0xe900
 8001b44:	ea45 0507 	orr.w	r5, r5, r7
 8001b48:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001b4a:	6897      	ldr	r7, [r2, #8]
 8001b4c:	4d1d      	ldr	r5, [pc, #116]	@ (8001bc4 <HAL_ADC_Init+0xf4>)
 8001b4e:	ea05 0507 	and.w	r5, r5, r7
 8001b52:	ea45 0501 	orr.w	r5, r5, r1
 8001b56:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001b58:	d001      	beq.n	8001b5e <HAL_ADC_Init+0x8e>
 8001b5a:	2e01      	cmp	r6, #1
 8001b5c:	d102      	bne.n	8001b64 <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001b5e:	6923      	ldr	r3, [r4, #16]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001b64:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 8001b66:	f425 0570 	bic.w	r5, r5, #15728640	@ 0xf00000
 8001b6a:	432b      	orrs	r3, r5
 8001b6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001b6e:	6892      	ldr	r2, [r2, #8]
 8001b70:	4b15      	ldr	r3, [pc, #84]	@ (8001bc8 <HAL_ADC_Init+0xf8>)
 8001b72:	4013      	ands	r3, r2
 8001b74:	4299      	cmp	r1, r3
 8001b76:	d113      	bne.n	8001ba0 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001b7c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001b7e:	f023 0303 	bic.w	r3, r3, #3
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8001b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b8a:	4635      	mov	r5, r6
 8001b8c:	e7ca      	b.n	8001b24 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b8e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001b90:	f042 0220 	orr.w	r2, r2, #32
 8001b94:	62a2      	str	r2, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b96:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001b98:	f042 0201 	orr.w	r2, r2, #1
 8001b9c:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8001b9e:	e7cb      	b.n	8001b38 <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 8001ba0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001ba2:	f023 0312 	bic.w	r3, r3, #18
 8001ba6:	f043 0310 	orr.w	r3, r3, #16
 8001baa:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bac:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	62e3      	str	r3, [r4, #44]	@ 0x2c
    return HAL_ERROR;
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	e7e7      	b.n	8001b88 <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001bba:	f043 0310 	orr.w	r3, r3, #16
 8001bbe:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8001bc0:	e7f8      	b.n	8001bb4 <HAL_ADC_Init+0xe4>
 8001bc2:	bf00      	nop
 8001bc4:	ffe1f7fd 	.word	0xffe1f7fd
 8001bc8:	ff1f0efe 	.word	0xff1f0efe

08001bcc <HAL_ADC_Stop>:
{
 8001bcc:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001bce:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8001bd2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d011      	beq.n	8001bfc <HAL_ADC_Stop+0x30>
 8001bd8:	2301      	movs	r3, #1
 8001bda:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001bde:	f7ff ff51 	bl	8001a84 <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 8001be2:	b938      	cbnz	r0, 8001bf4 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 8001be4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001be6:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001bea:	f023 0301 	bic.w	r3, r3, #1
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	62a3      	str	r3, [r4, #40]	@ 0x28
  __HAL_UNLOCK(hadc);
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8001bfa:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001bfc:	2002      	movs	r0, #2
 8001bfe:	e7fc      	b.n	8001bfa <HAL_ADC_Stop+0x2e>

08001c00 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001c00:	2300      	movs	r3, #0
{
 8001c02:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001c04:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001c06:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8001c0a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d062      	beq.n	8001cd6 <HAL_ADCEx_Calibration_Start+0xd6>
 8001c10:	2301      	movs	r3, #1
 8001c12:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c16:	f7ff ff35 	bl	8001a84 <ADC_ConversionStop_Disable>
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f7ff fe94 	bl	8001948 <ADC_Enable>

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8001c20:	4605      	mov	r5, r0
 8001c22:	2800      	cmp	r0, #0
 8001c24:	d12f      	bne.n	8001c86 <HAL_ADCEx_Calibration_Start+0x86>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001c26:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c28:	2002      	movs	r0, #2
     ADC_STATE_CLR_SET(hadc->State,
 8001c2a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c2e:	f023 0302 	bic.w	r3, r3, #2
 8001c32:	f043 0302 	orr.w	r3, r3, #2
 8001c36:	62a3      	str	r3, [r4, #40]	@ 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001c38:	4b28      	ldr	r3, [pc, #160]	@ (8001cdc <HAL_ADCEx_Calibration_Start+0xdc>)
 8001c3a:	681e      	ldr	r6, [r3, #0]
 8001c3c:	f000 ff06 	bl	8002a4c <HAL_RCCEx_GetPeriphCLKFreq>
 8001c40:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8001c44:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 8001c46:	9601      	str	r6, [sp, #4]

    while(wait_loop_index != 0U)
 8001c48:	9b01      	ldr	r3, [sp, #4]
 8001c4a:	bb03      	cbnz	r3, 8001c8e <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001c4c:	6822      	ldr	r2, [r4, #0]
 8001c4e:	6893      	ldr	r3, [r2, #8]
 8001c50:	f043 0308 	orr.w	r3, r3, #8
 8001c54:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 8001c56:	f7ff fd39 	bl	80016cc <HAL_GetTick>
 8001c5a:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	689a      	ldr	r2, [r3, #8]
 8001c60:	0711      	lsls	r1, r2, #28
 8001c62:	d418      	bmi.n	8001c96 <HAL_ADCEx_Calibration_Start+0x96>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8001c64:	689a      	ldr	r2, [r3, #8]
 8001c66:	f042 0204 	orr.w	r2, r2, #4
 8001c6a:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001c6c:	f7ff fd2e 	bl	80016cc <HAL_GetTick>
 8001c70:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001c72:	6823      	ldr	r3, [r4, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	075b      	lsls	r3, r3, #29
 8001c78:	d423      	bmi.n	8001cc2 <HAL_ADCEx_Calibration_Start+0xc2>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c7a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001c7c:	f023 0303 	bic.w	r3, r3, #3
 8001c80:	f043 0301 	orr.w	r3, r3, #1
 8001c84:	62a3      	str	r3, [r4, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c86:	2300      	movs	r3, #0
 8001c88:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001c8c:	e016      	b.n	8001cbc <HAL_ADCEx_Calibration_Start+0xbc>
      wait_loop_index--;
 8001c8e:	9b01      	ldr	r3, [sp, #4]
 8001c90:	3b01      	subs	r3, #1
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	e7d8      	b.n	8001c48 <HAL_ADCEx_Calibration_Start+0x48>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001c96:	f7ff fd19 	bl	80016cc <HAL_GetTick>
 8001c9a:	1b80      	subs	r0, r0, r6
 8001c9c:	280a      	cmp	r0, #10
 8001c9e:	d9dd      	bls.n	8001c5c <HAL_ADCEx_Calibration_Start+0x5c>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001ca0:	6823      	ldr	r3, [r4, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	0718      	lsls	r0, r3, #28
 8001ca6:	d5d9      	bpl.n	8001c5c <HAL_ADCEx_Calibration_Start+0x5c>
          ADC_STATE_CLR_SET(hadc->State,
 8001ca8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8001caa:	2501      	movs	r5, #1
          ADC_STATE_CLR_SET(hadc->State,
 8001cac:	f023 0312 	bic.w	r3, r3, #18
 8001cb0:	f043 0310 	orr.w	r3, r3, #16
 8001cb4:	62a3      	str	r3, [r4, #40]	@ 0x28
          __HAL_UNLOCK(hadc);
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8001cbc:	4628      	mov	r0, r5
 8001cbe:	b002      	add	sp, #8
 8001cc0:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001cc2:	f7ff fd03 	bl	80016cc <HAL_GetTick>
 8001cc6:	1b80      	subs	r0, r0, r6
 8001cc8:	280a      	cmp	r0, #10
 8001cca:	d9d2      	bls.n	8001c72 <HAL_ADCEx_Calibration_Start+0x72>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001ccc:	6823      	ldr	r3, [r4, #0]
 8001cce:	689b      	ldr	r3, [r3, #8]
 8001cd0:	075a      	lsls	r2, r3, #29
 8001cd2:	d5ce      	bpl.n	8001c72 <HAL_ADCEx_Calibration_Start+0x72>
 8001cd4:	e7e8      	b.n	8001ca8 <HAL_ADCEx_Calibration_Start+0xa8>
  __HAL_LOCK(hadc);
 8001cd6:	2502      	movs	r5, #2
 8001cd8:	e7f0      	b.n	8001cbc <HAL_ADCEx_Calibration_Start+0xbc>
 8001cda:	bf00      	nop
 8001cdc:	2000000c 	.word	0x2000000c

08001ce0 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce0:	4907      	ldr	r1, [pc, #28]	@ (8001d00 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ce2:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ce4:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ce6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001cee:	0412      	lsls	r2, r2, #16
 8001cf0:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001cfc:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001cfe:	4770      	bx	lr
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d04:	4b15      	ldr	r3, [pc, #84]	@ (8001d5c <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d06:	b530      	push	{r4, r5, lr}
 8001d08:	68dc      	ldr	r4, [r3, #12]
 8001d0a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d0e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d12:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d14:	2b04      	cmp	r3, #4
 8001d16:	bf28      	it	cs
 8001d18:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d1a:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d1c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d20:	bf94      	ite	ls
 8001d22:	2400      	movls	r4, #0
 8001d24:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d26:	fa05 f303 	lsl.w	r3, r5, r3
 8001d2a:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d2e:	40a5      	lsls	r5, r4
 8001d30:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d34:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8001d36:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3c:	bfac      	ite	ge
 8001d3e:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d42:	4a07      	ldrlt	r2, [pc, #28]	@ (8001d60 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d44:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	bfab      	itete	ge
 8001d4c:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d50:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d54:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d58:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001d5a:	bd30      	pop	{r4, r5, pc}
 8001d5c:	e000ed00 	.word	0xe000ed00
 8001d60:	e000ed14 	.word	0xe000ed14

08001d64 <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d64:	3801      	subs	r0, #1
 8001d66:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001d6a:	d20b      	bcs.n	8001d84 <HAL_SYSTICK_Config+0x20>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d6c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d70:	21f0      	movs	r1, #240	@ 0xf0
 8001d72:	4a05      	ldr	r2, [pc, #20]	@ (8001d88 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d74:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7a:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d7c:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d7e:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d80:	611a      	str	r2, [r3, #16]
  return (0UL);                                                     /* Function successful */
 8001d82:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001d84:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d90:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8001d92:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d94:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 8001f14 <HAL_GPIO_Init+0x188>
 8001d98:	4b5f      	ldr	r3, [pc, #380]	@ (8001f18 <HAL_GPIO_Init+0x18c>)
      switch (GPIO_Init->Mode)
 8001d9a:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8001f1c <HAL_GPIO_Init+0x190>
 8001d9e:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 8001f20 <HAL_GPIO_Init+0x194>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001da2:	680d      	ldr	r5, [r1, #0]
 8001da4:	fa35 f406 	lsrs.w	r4, r5, r6
 8001da8:	d102      	bne.n	8001db0 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8001daa:	b003      	add	sp, #12
 8001dac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001db0:	2701      	movs	r7, #1
 8001db2:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001db4:	ea05 0407 	and.w	r4, r5, r7
    if (iocurrent == ioposition)
 8001db8:	ea37 0505 	bics.w	r5, r7, r5
 8001dbc:	d175      	bne.n	8001eaa <HAL_GPIO_Init+0x11e>
      switch (GPIO_Init->Mode)
 8001dbe:	684d      	ldr	r5, [r1, #4]
 8001dc0:	2d03      	cmp	r5, #3
 8001dc2:	d806      	bhi.n	8001dd2 <HAL_GPIO_Init+0x46>
 8001dc4:	3d01      	subs	r5, #1
 8001dc6:	2d02      	cmp	r5, #2
 8001dc8:	d87e      	bhi.n	8001ec8 <HAL_GPIO_Init+0x13c>
 8001dca:	e8df f005 	tbb	[pc, r5]
 8001dce:	948f      	.short	0x948f
 8001dd0:	9a          	.byte	0x9a
 8001dd1:	00          	.byte	0x00
 8001dd2:	2d12      	cmp	r5, #18
 8001dd4:	f000 8092 	beq.w	8001efc <HAL_GPIO_Init+0x170>
 8001dd8:	d869      	bhi.n	8001eae <HAL_GPIO_Init+0x122>
 8001dda:	2d11      	cmp	r5, #17
 8001ddc:	f000 8088 	beq.w	8001ef0 <HAL_GPIO_Init+0x164>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001de0:	2cff      	cmp	r4, #255	@ 0xff
 8001de2:	bf98      	it	ls
 8001de4:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001de6:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dea:	bf88      	it	hi
 8001dec:	f100 0904 	addhi.w	r9, r0, #4
 8001df0:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001df4:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001df8:	bf88      	it	hi
 8001dfa:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dfc:	fa0b fa05 	lsl.w	sl, fp, r5
 8001e00:	ea27 070a 	bic.w	r7, r7, sl
 8001e04:	fa02 f505 	lsl.w	r5, r2, r5
 8001e08:	432f      	orrs	r7, r5
 8001e0a:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e0e:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8001e12:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 8001e16:	d048      	beq.n	8001eaa <HAL_GPIO_Init+0x11e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e18:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8001e1c:	f026 0703 	bic.w	r7, r6, #3
 8001e20:	f045 0501 	orr.w	r5, r5, #1
 8001e24:	f8cc 5018 	str.w	r5, [ip, #24]
 8001e28:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8001e2c:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8001e30:	f005 0501 	and.w	r5, r5, #1
 8001e34:	9501      	str	r5, [sp, #4]
 8001e36:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e3a:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e3e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e40:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001e44:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e46:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001e4a:	ea25 0b0b 	bic.w	fp, r5, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e4e:	4d35      	ldr	r5, [pc, #212]	@ (8001f24 <HAL_GPIO_Init+0x198>)
 8001e50:	42a8      	cmp	r0, r5
 8001e52:	d05a      	beq.n	8001f0a <HAL_GPIO_Init+0x17e>
 8001e54:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001e58:	42a8      	cmp	r0, r5
 8001e5a:	d058      	beq.n	8001f0e <HAL_GPIO_Init+0x182>
 8001e5c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001e60:	42a8      	cmp	r0, r5
 8001e62:	bf14      	ite	ne
 8001e64:	2503      	movne	r5, #3
 8001e66:	2502      	moveq	r5, #2
 8001e68:	fa05 f50a 	lsl.w	r5, r5, sl
 8001e6c:	ea45 050b 	orr.w	r5, r5, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8001e70:	60bd      	str	r5, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e72:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e74:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e78:	bf14      	ite	ne
 8001e7a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001e7c:	43a5      	biceq	r5, r4
 8001e7e:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e80:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e82:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001e86:	bf14      	ite	ne
 8001e88:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001e8a:	43a5      	biceq	r5, r4
 8001e8c:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8001e8e:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e90:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001e94:	bf14      	ite	ne
 8001e96:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e98:	43a5      	biceq	r5, r4
 8001e9a:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8001e9c:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e9e:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8001ea2:	bf14      	ite	ne
 8001ea4:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001ea6:	43a5      	biceq	r5, r4
 8001ea8:	601d      	str	r5, [r3, #0]
	position++;
 8001eaa:	3601      	adds	r6, #1
 8001eac:	e779      	b.n	8001da2 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8001eae:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 8001f28 <HAL_GPIO_Init+0x19c>
 8001eb2:	454d      	cmp	r5, r9
 8001eb4:	d008      	beq.n	8001ec8 <HAL_GPIO_Init+0x13c>
 8001eb6:	d811      	bhi.n	8001edc <HAL_GPIO_Init+0x150>
 8001eb8:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8001ebc:	454d      	cmp	r5, r9
 8001ebe:	d003      	beq.n	8001ec8 <HAL_GPIO_Init+0x13c>
 8001ec0:	4575      	cmp	r5, lr
 8001ec2:	d001      	beq.n	8001ec8 <HAL_GPIO_Init+0x13c>
 8001ec4:	4545      	cmp	r5, r8
 8001ec6:	d18b      	bne.n	8001de0 <HAL_GPIO_Init+0x54>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001ec8:	688a      	ldr	r2, [r1, #8]
 8001eca:	b1e2      	cbz	r2, 8001f06 <HAL_GPIO_Init+0x17a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ecc:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001ece:	bf08      	it	eq
 8001ed0:	6107      	streq	r7, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ed2:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8001ed6:	bf18      	it	ne
 8001ed8:	6147      	strne	r7, [r0, #20]
 8001eda:	e781      	b.n	8001de0 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 8001edc:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 8001f2c <HAL_GPIO_Init+0x1a0>
 8001ee0:	454d      	cmp	r5, r9
 8001ee2:	d0f1      	beq.n	8001ec8 <HAL_GPIO_Init+0x13c>
 8001ee4:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8001ee8:	454d      	cmp	r5, r9
 8001eea:	e7ec      	b.n	8001ec6 <HAL_GPIO_Init+0x13a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001eec:	68ca      	ldr	r2, [r1, #12]
          break;
 8001eee:	e777      	b.n	8001de0 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ef0:	68ca      	ldr	r2, [r1, #12]
 8001ef2:	3204      	adds	r2, #4
          break;
 8001ef4:	e774      	b.n	8001de0 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001ef6:	68ca      	ldr	r2, [r1, #12]
 8001ef8:	3208      	adds	r2, #8
          break;
 8001efa:	e771      	b.n	8001de0 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001efc:	68ca      	ldr	r2, [r1, #12]
 8001efe:	320c      	adds	r2, #12
          break;
 8001f00:	e76e      	b.n	8001de0 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 8001f02:	2200      	movs	r2, #0
 8001f04:	e76c      	b.n	8001de0 <HAL_GPIO_Init+0x54>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f06:	2204      	movs	r2, #4
 8001f08:	e76a      	b.n	8001de0 <HAL_GPIO_Init+0x54>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f0a:	2500      	movs	r5, #0
 8001f0c:	e7ac      	b.n	8001e68 <HAL_GPIO_Init+0xdc>
 8001f0e:	2501      	movs	r5, #1
 8001f10:	e7aa      	b.n	8001e68 <HAL_GPIO_Init+0xdc>
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40010400 	.word	0x40010400
 8001f1c:	10210000 	.word	0x10210000
 8001f20:	10110000 	.word	0x10110000
 8001f24:	40010800 	.word	0x40010800
 8001f28:	10220000 	.word	0x10220000
 8001f2c:	10310000 	.word	0x10310000

08001f30 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f30:	6883      	ldr	r3, [r0, #8]
 8001f32:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001f34:	bf14      	ite	ne
 8001f36:	2001      	movne	r0, #1
 8001f38:	2000      	moveq	r0, #0
 8001f3a:	4770      	bx	lr

08001f3c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f3c:	b10a      	cbz	r2, 8001f42 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f3e:	6101      	str	r1, [r0, #16]
  }
}
 8001f40:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001f42:	0409      	lsls	r1, r1, #16
 8001f44:	e7fb      	b.n	8001f3e <HAL_GPIO_WritePin+0x2>

08001f46 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f46:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f48:	ea01 0203 	and.w	r2, r1, r3
 8001f4c:	ea21 0103 	bic.w	r1, r1, r3
 8001f50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001f54:	6101      	str	r1, [r0, #16]
}
 8001f56:	4770      	bx	lr

08001f58 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f58:	6801      	ldr	r1, [r0, #0]
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	694b      	ldr	r3, [r1, #20]
 8001f5e:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8001f62:	d010      	beq.n	8001f86 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f64:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8001f68:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f6a:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f6c:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f6e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f72:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f76:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f78:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f7c:	f043 0304 	orr.w	r3, r3, #4
 8001f80:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8001f82:	2001      	movs	r0, #1
 8001f84:	4770      	bx	lr
  }
  return HAL_OK;
 8001f86:	4618      	mov	r0, r3
}
 8001f88:	4770      	bx	lr

08001f8a <I2C_WaitOnFlagUntilTimeout>:
{
 8001f8a:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8001f8e:	4606      	mov	r6, r0
 8001f90:	460f      	mov	r7, r1
 8001f92:	4691      	mov	r9, r2
 8001f94:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f96:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8001f9a:	6833      	ldr	r3, [r6, #0]
 8001f9c:	f1ba 0f01 	cmp.w	sl, #1
 8001fa0:	bf0c      	ite	eq
 8001fa2:	695c      	ldreq	r4, [r3, #20]
 8001fa4:	699c      	ldrne	r4, [r3, #24]
 8001fa6:	ea27 0404 	bic.w	r4, r7, r4
 8001faa:	b2a4      	uxth	r4, r4
 8001fac:	fab4 f484 	clz	r4, r4
 8001fb0:	0964      	lsrs	r4, r4, #5
 8001fb2:	45a1      	cmp	r9, r4
 8001fb4:	d001      	beq.n	8001fba <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8001fb6:	2000      	movs	r0, #0
 8001fb8:	e025      	b.n	8002006 <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8001fba:	1c6a      	adds	r2, r5, #1
 8001fbc:	d0ee      	beq.n	8001f9c <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fbe:	f7ff fb85 	bl	80016cc <HAL_GetTick>
 8001fc2:	9b08      	ldr	r3, [sp, #32]
 8001fc4:	1ac0      	subs	r0, r0, r3
 8001fc6:	42a8      	cmp	r0, r5
 8001fc8:	d801      	bhi.n	8001fce <I2C_WaitOnFlagUntilTimeout+0x44>
 8001fca:	2d00      	cmp	r5, #0
 8001fcc:	d1e5      	bne.n	8001f9a <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fce:	6833      	ldr	r3, [r6, #0]
 8001fd0:	f1ba 0f01 	cmp.w	sl, #1
 8001fd4:	bf0c      	ite	eq
 8001fd6:	695b      	ldreq	r3, [r3, #20]
 8001fd8:	699b      	ldrne	r3, [r3, #24]
 8001fda:	ea27 0303 	bic.w	r3, r7, r3
 8001fde:	b29b      	uxth	r3, r3
 8001fe0:	fab3 f383 	clz	r3, r3
 8001fe4:	095b      	lsrs	r3, r3, #5
 8001fe6:	4599      	cmp	r9, r3
 8001fe8:	d1d7      	bne.n	8001f9a <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001fea:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8001fec:	2220      	movs	r2, #32
          return HAL_ERROR;
 8001fee:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001ff0:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001ff2:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001ff6:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ffa:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001ffc:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002000:	f042 0220 	orr.w	r2, r2, #32
 8002004:	6432      	str	r2, [r6, #64]	@ 0x40
}
 8002006:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

0800200a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 800200a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800200e:	4604      	mov	r4, r0
 8002010:	460f      	mov	r7, r1
 8002012:	4616      	mov	r6, r2
 8002014:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002016:	6825      	ldr	r5, [r4, #0]
 8002018:	6968      	ldr	r0, [r5, #20]
 800201a:	ea27 0000 	bic.w	r0, r7, r0
 800201e:	b280      	uxth	r0, r0
 8002020:	b1c0      	cbz	r0, 8002054 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002022:	696b      	ldr	r3, [r5, #20]
 8002024:	055a      	lsls	r2, r3, #21
 8002026:	d517      	bpl.n	8002058 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002028:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 800202a:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800202c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002030:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002032:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8002036:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002038:	2300      	movs	r3, #0
 800203a:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800203c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002040:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002044:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002046:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800204a:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800204c:	2300      	movs	r3, #0
      return HAL_ERROR;
 800204e:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8002050:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8002054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8002058:	1c73      	adds	r3, r6, #1
 800205a:	d0dd      	beq.n	8002018 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205c:	f7ff fb36 	bl	80016cc <HAL_GetTick>
 8002060:	eba0 0008 	sub.w	r0, r0, r8
 8002064:	42b0      	cmp	r0, r6
 8002066:	d801      	bhi.n	800206c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 8002068:	2e00      	cmp	r6, #0
 800206a:	d1d4      	bne.n	8002016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800206c:	6823      	ldr	r3, [r4, #0]
 800206e:	695a      	ldr	r2, [r3, #20]
 8002070:	ea27 0202 	bic.w	r2, r7, r2
 8002074:	b292      	uxth	r2, r2
 8002076:	2a00      	cmp	r2, #0
 8002078:	d0cd      	beq.n	8002016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800207a:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 800207c:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 800207e:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002080:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002084:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002088:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800208a:	4313      	orrs	r3, r2
 800208c:	e7dd      	b.n	800204a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

0800208e <I2C_WaitOnTXEFlagUntilTimeout>:
{
 800208e:	b570      	push	{r4, r5, r6, lr}
 8002090:	4604      	mov	r4, r0
 8002092:	460d      	mov	r5, r1
 8002094:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002096:	6823      	ldr	r3, [r4, #0]
 8002098:	695b      	ldr	r3, [r3, #20]
 800209a:	061b      	lsls	r3, r3, #24
 800209c:	d501      	bpl.n	80020a2 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 800209e:	2000      	movs	r0, #0
 80020a0:	e01e      	b.n	80020e0 <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020a2:	4620      	mov	r0, r4
 80020a4:	f7ff ff58 	bl	8001f58 <I2C_IsAcknowledgeFailed>
 80020a8:	b9c8      	cbnz	r0, 80020de <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80020aa:	1c6a      	adds	r2, r5, #1
 80020ac:	d0f3      	beq.n	8002096 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020ae:	f7ff fb0d 	bl	80016cc <HAL_GetTick>
 80020b2:	1b80      	subs	r0, r0, r6
 80020b4:	42a8      	cmp	r0, r5
 80020b6:	d801      	bhi.n	80020bc <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80020b8:	2d00      	cmp	r5, #0
 80020ba:	d1ec      	bne.n	8002096 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80020bc:	6823      	ldr	r3, [r4, #0]
 80020be:	695b      	ldr	r3, [r3, #20]
 80020c0:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 80020c4:	d1e7      	bne.n	8002096 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 80020c6:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80020c8:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80020ca:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ce:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020d2:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80020d4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020d8:	f042 0220 	orr.w	r2, r2, #32
 80020dc:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80020de:	2001      	movs	r0, #1
}
 80020e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080020e4 <I2C_RequestMemoryWrite>:
{
 80020e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80020e8:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020ea:	6802      	ldr	r2, [r0, #0]
{
 80020ec:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020ee:	6813      	ldr	r3, [r2, #0]
{
 80020f0:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020f2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020f6:	6013      	str	r3, [r2, #0]
{
 80020f8:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 80020fc:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80020fe:	463b      	mov	r3, r7
 8002100:	2200      	movs	r2, #0
 8002102:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002106:	f8cd 8000 	str.w	r8, [sp]
{
 800210a:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800210c:	f7ff ff3d 	bl	8001f8a <I2C_WaitOnFlagUntilTimeout>
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	b138      	cbz	r0, 8002124 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	05db      	lsls	r3, r3, #23
 8002118:	d502      	bpl.n	8002120 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800211a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800211e:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8002120:	2603      	movs	r6, #3
 8002122:	e020      	b.n	8002166 <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002124:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8002128:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800212a:	463a      	mov	r2, r7
 800212c:	4643      	mov	r3, r8
 800212e:	4620      	mov	r0, r4
 8002130:	4918      	ldr	r1, [pc, #96]	@ (8002194 <I2C_RequestMemoryWrite+0xb0>)
 8002132:	f7ff ff6a 	bl	800200a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002136:	b9a8      	cbnz	r0, 8002164 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	9003      	str	r0, [sp, #12]
 800213c:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800213e:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002140:	9203      	str	r2, [sp, #12]
 8002142:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002144:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002146:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002148:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800214a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800214c:	f7ff ff9f 	bl	800208e <I2C_WaitOnTXEFlagUntilTimeout>
 8002150:	4606      	mov	r6, r0
 8002152:	b160      	cbz	r0, 800216e <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002154:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002156:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002158:	bf01      	itttt	eq
 800215a:	6822      	ldreq	r2, [r4, #0]
 800215c:	6813      	ldreq	r3, [r2, #0]
 800215e:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8002162:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8002164:	2601      	movs	r6, #1
}
 8002166:	4630      	mov	r0, r6
 8002168:	b005      	add	sp, #20
 800216a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800216e:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002172:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002174:	d102      	bne.n	800217c <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002176:	b2ed      	uxtb	r5, r5
 8002178:	611d      	str	r5, [r3, #16]
 800217a:	e7f4      	b.n	8002166 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800217c:	0a2a      	lsrs	r2, r5, #8
 800217e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002180:	4639      	mov	r1, r7
 8002182:	4642      	mov	r2, r8
 8002184:	4620      	mov	r0, r4
 8002186:	f7ff ff82 	bl	800208e <I2C_WaitOnTXEFlagUntilTimeout>
 800218a:	2800      	cmp	r0, #0
 800218c:	d1e2      	bne.n	8002154 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800218e:	6823      	ldr	r3, [r4, #0]
 8002190:	e7f1      	b.n	8002176 <I2C_RequestMemoryWrite+0x92>
 8002192:	bf00      	nop
 8002194:	00010002 	.word	0x00010002

08002198 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002198:	b570      	push	{r4, r5, r6, lr}
 800219a:	4604      	mov	r4, r0
 800219c:	460d      	mov	r5, r1
 800219e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021a0:	6823      	ldr	r3, [r4, #0]
 80021a2:	695b      	ldr	r3, [r3, #20]
 80021a4:	075b      	lsls	r3, r3, #29
 80021a6:	d501      	bpl.n	80021ac <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80021a8:	2000      	movs	r0, #0
 80021aa:	e01e      	b.n	80021ea <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021ac:	4620      	mov	r0, r4
 80021ae:	f7ff fed3 	bl	8001f58 <I2C_IsAcknowledgeFailed>
 80021b2:	b9c8      	cbnz	r0, 80021e8 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80021b4:	1c6a      	adds	r2, r5, #1
 80021b6:	d0f3      	beq.n	80021a0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b8:	f7ff fa88 	bl	80016cc <HAL_GetTick>
 80021bc:	1b80      	subs	r0, r0, r6
 80021be:	42a8      	cmp	r0, r5
 80021c0:	d801      	bhi.n	80021c6 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80021c2:	2d00      	cmp	r5, #0
 80021c4:	d1ec      	bne.n	80021a0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	695b      	ldr	r3, [r3, #20]
 80021ca:	f013 0304 	ands.w	r3, r3, #4
 80021ce:	d1e7      	bne.n	80021a0 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 80021d0:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80021d2:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80021d4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021dc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80021de:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021e2:	f042 0220 	orr.w	r2, r2, #32
 80021e6:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80021e8:	2001      	movs	r0, #1
}
 80021ea:	bd70      	pop	{r4, r5, r6, pc}

080021ec <HAL_I2C_Init>:
{
 80021ec:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80021ee:	4604      	mov	r4, r0
 80021f0:	b908      	cbnz	r0, 80021f6 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80021f2:	2001      	movs	r0, #1
}
 80021f4:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021f6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80021fa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80021fe:	b91b      	cbnz	r3, 8002208 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002200:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8002204:	f7ff f970 	bl	80014e8 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8002208:	2324      	movs	r3, #36	@ 0x24
 800220a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800220e:	6823      	ldr	r3, [r4, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	f022 0201 	bic.w	r2, r2, #1
 8002216:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800221e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002226:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002228:	f000 fb76 	bl	8002918 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800222c:	4b3f      	ldr	r3, [pc, #252]	@ (800232c <HAL_I2C_Init+0x140>)
 800222e:	6865      	ldr	r5, [r4, #4]
 8002230:	429d      	cmp	r5, r3
 8002232:	bf94      	ite	ls
 8002234:	4b3e      	ldrls	r3, [pc, #248]	@ (8002330 <HAL_I2C_Init+0x144>)
 8002236:	4b3f      	ldrhi	r3, [pc, #252]	@ (8002334 <HAL_I2C_Init+0x148>)
 8002238:	4298      	cmp	r0, r3
 800223a:	bf8c      	ite	hi
 800223c:	2300      	movhi	r3, #0
 800223e:	2301      	movls	r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1d6      	bne.n	80021f2 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002244:	4e39      	ldr	r6, [pc, #228]	@ (800232c <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8002246:	4b3c      	ldr	r3, [pc, #240]	@ (8002338 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002248:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 800224a:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800224e:	bf88      	it	hi
 8002250:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002254:	6822      	ldr	r2, [r4, #0]
 8002256:	6851      	ldr	r1, [r2, #4]
 8002258:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800225c:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002260:	bf82      	ittt	hi
 8002262:	4373      	mulhi	r3, r6
 8002264:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8002268:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800226c:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800226e:	6a11      	ldr	r1, [r2, #32]
 8002270:	3301      	adds	r3, #1
 8002272:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8002276:	430b      	orrs	r3, r1
 8002278:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800227a:	69d1      	ldr	r1, [r2, #28]
 800227c:	1e43      	subs	r3, r0, #1
 800227e:	482b      	ldr	r0, [pc, #172]	@ (800232c <HAL_I2C_Init+0x140>)
 8002280:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8002284:	4285      	cmp	r5, r0
 8002286:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800228a:	d832      	bhi.n	80022f2 <HAL_I2C_Init+0x106>
 800228c:	006d      	lsls	r5, r5, #1
 800228e:	fbb3 f3f5 	udiv	r3, r3, r5
 8002292:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8002296:	3301      	adds	r3, #1
 8002298:	4203      	tst	r3, r0
 800229a:	d042      	beq.n	8002322 <HAL_I2C_Init+0x136>
 800229c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022a0:	4319      	orrs	r1, r3
 80022a2:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80022a4:	6811      	ldr	r1, [r2, #0]
 80022a6:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80022aa:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 80022ae:	4303      	orrs	r3, r0
 80022b0:	430b      	orrs	r3, r1
 80022b2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80022b4:	6891      	ldr	r1, [r2, #8]
 80022b6:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80022ba:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 80022be:	4303      	orrs	r3, r0
 80022c0:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80022c4:	430b      	orrs	r3, r1
 80022c6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80022c8:	68d1      	ldr	r1, [r2, #12]
 80022ca:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80022ce:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80022d2:	4303      	orrs	r3, r0
 80022d4:	430b      	orrs	r3, r1
 80022d6:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80022d8:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022da:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80022e2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022e4:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80022e6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80022ea:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ec:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 80022f0:	e780      	b.n	80021f4 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022f2:	68a0      	ldr	r0, [r4, #8]
 80022f4:	b950      	cbnz	r0, 800230c <HAL_I2C_Init+0x120>
 80022f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80022fa:	fbb3 f3f5 	udiv	r3, r3, r5
 80022fe:	3301      	adds	r3, #1
 8002300:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002304:	b17b      	cbz	r3, 8002326 <HAL_I2C_Init+0x13a>
 8002306:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800230a:	e7c9      	b.n	80022a0 <HAL_I2C_Init+0xb4>
 800230c:	2019      	movs	r0, #25
 800230e:	4368      	muls	r0, r5
 8002310:	fbb3 f3f0 	udiv	r3, r3, r0
 8002314:	3301      	adds	r3, #1
 8002316:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800231a:	b123      	cbz	r3, 8002326 <HAL_I2C_Init+0x13a>
 800231c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002320:	e7be      	b.n	80022a0 <HAL_I2C_Init+0xb4>
 8002322:	2304      	movs	r3, #4
 8002324:	e7bc      	b.n	80022a0 <HAL_I2C_Init+0xb4>
 8002326:	2301      	movs	r3, #1
 8002328:	e7ba      	b.n	80022a0 <HAL_I2C_Init+0xb4>
 800232a:	bf00      	nop
 800232c:	000186a0 	.word	0x000186a0
 8002330:	001e847f 	.word	0x001e847f
 8002334:	003d08ff 	.word	0x003d08ff
 8002338:	000f4240 	.word	0x000f4240

0800233c <HAL_I2C_Mem_Write>:
{
 800233c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002340:	4604      	mov	r4, r0
 8002342:	4699      	mov	r9, r3
 8002344:	460f      	mov	r7, r1
 8002346:	4690      	mov	r8, r2
 8002348:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 800234a:	f7ff f9bf 	bl	80016cc <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800234e:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 8002352:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002354:	2b20      	cmp	r3, #32
 8002356:	d003      	beq.n	8002360 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 8002358:	2002      	movs	r0, #2
}
 800235a:	b003      	add	sp, #12
 800235c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002360:	9000      	str	r0, [sp, #0]
 8002362:	2319      	movs	r3, #25
 8002364:	2201      	movs	r2, #1
 8002366:	4620      	mov	r0, r4
 8002368:	493a      	ldr	r1, [pc, #232]	@ (8002454 <HAL_I2C_Mem_Write+0x118>)
 800236a:	f7ff fe0e 	bl	8001f8a <I2C_WaitOnFlagUntilTimeout>
 800236e:	2800      	cmp	r0, #0
 8002370:	d1f2      	bne.n	8002358 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8002372:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8002376:	2b01      	cmp	r3, #1
 8002378:	d0ee      	beq.n	8002358 <HAL_I2C_Mem_Write+0x1c>
 800237a:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800237c:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 800237e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002382:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002384:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002386:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8002388:	bf58      	it	pl
 800238a:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800238c:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 800238e:	bf5c      	itt	pl
 8002390:	f043 0301 	orrpl.w	r3, r3, #1
 8002394:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002396:	6803      	ldr	r3, [r0, #0]
 8002398:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800239c:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800239e:	2321      	movs	r3, #33	@ 0x21
 80023a0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023a4:	2340      	movs	r3, #64	@ 0x40
 80023a6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 80023ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023b0:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 80023b2:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80023b4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80023b8:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023ba:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80023bc:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023be:	4b26      	ldr	r3, [pc, #152]	@ (8002458 <HAL_I2C_Mem_Write+0x11c>)
 80023c0:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023c2:	464b      	mov	r3, r9
 80023c4:	e9cd 6500 	strd	r6, r5, [sp]
 80023c8:	f7ff fe8c 	bl	80020e4 <I2C_RequestMemoryWrite>
 80023cc:	2800      	cmp	r0, #0
 80023ce:	d02a      	beq.n	8002426 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 80023d0:	2001      	movs	r0, #1
 80023d2:	e7c2      	b.n	800235a <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023d4:	f7ff fe5b 	bl	800208e <I2C_WaitOnTXEFlagUntilTimeout>
 80023d8:	b140      	cbz	r0, 80023ec <HAL_I2C_Mem_Write+0xb0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023da:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80023dc:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023de:	bf01      	itttt	eq
 80023e0:	6822      	ldreq	r2, [r4, #0]
 80023e2:	6813      	ldreq	r3, [r2, #0]
 80023e4:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 80023e8:	6013      	streq	r3, [r2, #0]
 80023ea:	e7f1      	b.n	80023d0 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023ec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80023ee:	6827      	ldr	r7, [r4, #0]
 80023f0:	461a      	mov	r2, r3
 80023f2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80023f6:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 80023f8:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80023fa:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80023fc:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80023fe:	3a01      	subs	r2, #1
 8002400:	b292      	uxth	r2, r2
 8002402:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002404:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8002406:	1e48      	subs	r0, r1, #1
 8002408:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800240a:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 800240c:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800240e:	d50a      	bpl.n	8002426 <HAL_I2C_Mem_Write+0xea>
 8002410:	b148      	cbz	r0, 8002426 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002412:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8002414:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002416:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8002418:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 800241a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 800241c:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800241e:	3b01      	subs	r3, #1
 8002420:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8002422:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8002424:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002426:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002428:	462a      	mov	r2, r5
 800242a:	4631      	mov	r1, r6
 800242c:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 800242e:	2b00      	cmp	r3, #0
 8002430:	d1d0      	bne.n	80023d4 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002432:	f7ff feb1 	bl	8002198 <I2C_WaitOnBTFFlagUntilTimeout>
 8002436:	2800      	cmp	r0, #0
 8002438:	d1cf      	bne.n	80023da <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800243a:	6822      	ldr	r2, [r4, #0]
 800243c:	6813      	ldr	r3, [r2, #0]
 800243e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002442:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002444:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8002446:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800244a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800244e:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 8002452:	e782      	b.n	800235a <HAL_I2C_Mem_Write+0x1e>
 8002454:	00100002 	.word	0x00100002
 8002458:	ffff0000 	.word	0xffff0000

0800245c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800245c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002460:	4605      	mov	r5, r0
 8002462:	b338      	cbz	r0, 80024b4 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002464:	6803      	ldr	r3, [r0, #0]
 8002466:	07db      	lsls	r3, r3, #31
 8002468:	d410      	bmi.n	800248c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800246a:	682b      	ldr	r3, [r5, #0]
 800246c:	079f      	lsls	r7, r3, #30
 800246e:	d45e      	bmi.n	800252e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002470:	682b      	ldr	r3, [r5, #0]
 8002472:	0719      	lsls	r1, r3, #28
 8002474:	f100 8095 	bmi.w	80025a2 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002478:	682b      	ldr	r3, [r5, #0]
 800247a:	075a      	lsls	r2, r3, #29
 800247c:	f100 80c1 	bmi.w	8002602 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002480:	69eb      	ldr	r3, [r5, #28]
 8002482:	2b00      	cmp	r3, #0
 8002484:	f040 812c 	bne.w	80026e0 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8002488:	2000      	movs	r0, #0
 800248a:	e029      	b.n	80024e0 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800248c:	4c90      	ldr	r4, [pc, #576]	@ (80026d0 <HAL_RCC_OscConfig+0x274>)
 800248e:	6863      	ldr	r3, [r4, #4]
 8002490:	f003 030c 	and.w	r3, r3, #12
 8002494:	2b04      	cmp	r3, #4
 8002496:	d007      	beq.n	80024a8 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002498:	6863      	ldr	r3, [r4, #4]
 800249a:	f003 030c 	and.w	r3, r3, #12
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d10a      	bne.n	80024b8 <HAL_RCC_OscConfig+0x5c>
 80024a2:	6863      	ldr	r3, [r4, #4]
 80024a4:	03de      	lsls	r6, r3, #15
 80024a6:	d507      	bpl.n	80024b8 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a8:	6823      	ldr	r3, [r4, #0]
 80024aa:	039c      	lsls	r4, r3, #14
 80024ac:	d5dd      	bpl.n	800246a <HAL_RCC_OscConfig+0xe>
 80024ae:	686b      	ldr	r3, [r5, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d1da      	bne.n	800246a <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80024b4:	2001      	movs	r0, #1
 80024b6:	e013      	b.n	80024e0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024b8:	686b      	ldr	r3, [r5, #4]
 80024ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024be:	d112      	bne.n	80024e6 <HAL_RCC_OscConfig+0x8a>
 80024c0:	6823      	ldr	r3, [r4, #0]
 80024c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024c6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80024c8:	f7ff f900 	bl	80016cc <HAL_GetTick>
 80024cc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	6823      	ldr	r3, [r4, #0]
 80024d0:	0398      	lsls	r0, r3, #14
 80024d2:	d4ca      	bmi.n	800246a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024d4:	f7ff f8fa 	bl	80016cc <HAL_GetTick>
 80024d8:	1b80      	subs	r0, r0, r6
 80024da:	2864      	cmp	r0, #100	@ 0x64
 80024dc:	d9f7      	bls.n	80024ce <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80024de:	2003      	movs	r0, #3
}
 80024e0:	b002      	add	sp, #8
 80024e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024e6:	b99b      	cbnz	r3, 8002510 <HAL_RCC_OscConfig+0xb4>
 80024e8:	6823      	ldr	r3, [r4, #0]
 80024ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024ee:	6023      	str	r3, [r4, #0]
 80024f0:	6823      	ldr	r3, [r4, #0]
 80024f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024f6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80024f8:	f7ff f8e8 	bl	80016cc <HAL_GetTick>
 80024fc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024fe:	6823      	ldr	r3, [r4, #0]
 8002500:	0399      	lsls	r1, r3, #14
 8002502:	d5b2      	bpl.n	800246a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002504:	f7ff f8e2 	bl	80016cc <HAL_GetTick>
 8002508:	1b80      	subs	r0, r0, r6
 800250a:	2864      	cmp	r0, #100	@ 0x64
 800250c:	d9f7      	bls.n	80024fe <HAL_RCC_OscConfig+0xa2>
 800250e:	e7e6      	b.n	80024de <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002510:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002514:	6823      	ldr	r3, [r4, #0]
 8002516:	d103      	bne.n	8002520 <HAL_RCC_OscConfig+0xc4>
 8002518:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800251c:	6023      	str	r3, [r4, #0]
 800251e:	e7cf      	b.n	80024c0 <HAL_RCC_OscConfig+0x64>
 8002520:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002524:	6023      	str	r3, [r4, #0]
 8002526:	6823      	ldr	r3, [r4, #0]
 8002528:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800252c:	e7cb      	b.n	80024c6 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800252e:	4c68      	ldr	r4, [pc, #416]	@ (80026d0 <HAL_RCC_OscConfig+0x274>)
 8002530:	6863      	ldr	r3, [r4, #4]
 8002532:	f013 0f0c 	tst.w	r3, #12
 8002536:	d007      	beq.n	8002548 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002538:	6863      	ldr	r3, [r4, #4]
 800253a:	f003 030c 	and.w	r3, r3, #12
 800253e:	2b08      	cmp	r3, #8
 8002540:	d110      	bne.n	8002564 <HAL_RCC_OscConfig+0x108>
 8002542:	6863      	ldr	r3, [r4, #4]
 8002544:	03da      	lsls	r2, r3, #15
 8002546:	d40d      	bmi.n	8002564 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	079b      	lsls	r3, r3, #30
 800254c:	d502      	bpl.n	8002554 <HAL_RCC_OscConfig+0xf8>
 800254e:	692b      	ldr	r3, [r5, #16]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d1af      	bne.n	80024b4 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002554:	6823      	ldr	r3, [r4, #0]
 8002556:	696a      	ldr	r2, [r5, #20]
 8002558:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800255c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002560:	6023      	str	r3, [r4, #0]
 8002562:	e785      	b.n	8002470 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002564:	692a      	ldr	r2, [r5, #16]
 8002566:	4b5b      	ldr	r3, [pc, #364]	@ (80026d4 <HAL_RCC_OscConfig+0x278>)
 8002568:	b16a      	cbz	r2, 8002586 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800256e:	f7ff f8ad 	bl	80016cc <HAL_GetTick>
 8002572:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	6823      	ldr	r3, [r4, #0]
 8002576:	079f      	lsls	r7, r3, #30
 8002578:	d4ec      	bmi.n	8002554 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257a:	f7ff f8a7 	bl	80016cc <HAL_GetTick>
 800257e:	1b80      	subs	r0, r0, r6
 8002580:	2802      	cmp	r0, #2
 8002582:	d9f7      	bls.n	8002574 <HAL_RCC_OscConfig+0x118>
 8002584:	e7ab      	b.n	80024de <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8002586:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002588:	f7ff f8a0 	bl	80016cc <HAL_GetTick>
 800258c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258e:	6823      	ldr	r3, [r4, #0]
 8002590:	0798      	lsls	r0, r3, #30
 8002592:	f57f af6d 	bpl.w	8002470 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002596:	f7ff f899 	bl	80016cc <HAL_GetTick>
 800259a:	1b80      	subs	r0, r0, r6
 800259c:	2802      	cmp	r0, #2
 800259e:	d9f6      	bls.n	800258e <HAL_RCC_OscConfig+0x132>
 80025a0:	e79d      	b.n	80024de <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025a2:	69aa      	ldr	r2, [r5, #24]
 80025a4:	4e4a      	ldr	r6, [pc, #296]	@ (80026d0 <HAL_RCC_OscConfig+0x274>)
 80025a6:	4b4b      	ldr	r3, [pc, #300]	@ (80026d4 <HAL_RCC_OscConfig+0x278>)
 80025a8:	b1e2      	cbz	r2, 80025e4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 80025aa:	2201      	movs	r2, #1
 80025ac:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80025b0:	f7ff f88c 	bl	80016cc <HAL_GetTick>
 80025b4:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b6:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80025b8:	079b      	lsls	r3, r3, #30
 80025ba:	d50d      	bpl.n	80025d8 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025bc:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80025c0:	4b45      	ldr	r3, [pc, #276]	@ (80026d8 <HAL_RCC_OscConfig+0x27c>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80025c8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80025ca:	bf00      	nop
  }
  while (Delay --);
 80025cc:	9b01      	ldr	r3, [sp, #4]
 80025ce:	1e5a      	subs	r2, r3, #1
 80025d0:	9201      	str	r2, [sp, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f9      	bne.n	80025ca <HAL_RCC_OscConfig+0x16e>
 80025d6:	e74f      	b.n	8002478 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d8:	f7ff f878 	bl	80016cc <HAL_GetTick>
 80025dc:	1b00      	subs	r0, r0, r4
 80025de:	2802      	cmp	r0, #2
 80025e0:	d9e9      	bls.n	80025b6 <HAL_RCC_OscConfig+0x15a>
 80025e2:	e77c      	b.n	80024de <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80025e4:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80025e8:	f7ff f870 	bl	80016cc <HAL_GetTick>
 80025ec:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025ee:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80025f0:	079f      	lsls	r7, r3, #30
 80025f2:	f57f af41 	bpl.w	8002478 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f6:	f7ff f869 	bl	80016cc <HAL_GetTick>
 80025fa:	1b00      	subs	r0, r0, r4
 80025fc:	2802      	cmp	r0, #2
 80025fe:	d9f6      	bls.n	80025ee <HAL_RCC_OscConfig+0x192>
 8002600:	e76d      	b.n	80024de <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002602:	4c33      	ldr	r4, [pc, #204]	@ (80026d0 <HAL_RCC_OscConfig+0x274>)
 8002604:	69e3      	ldr	r3, [r4, #28]
 8002606:	00d8      	lsls	r0, r3, #3
 8002608:	d424      	bmi.n	8002654 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 800260a:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800260c:	69e3      	ldr	r3, [r4, #28]
 800260e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002612:	61e3      	str	r3, [r4, #28]
 8002614:	69e3      	ldr	r3, [r4, #28]
 8002616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261a:	9300      	str	r3, [sp, #0]
 800261c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800261e:	4e2f      	ldr	r6, [pc, #188]	@ (80026dc <HAL_RCC_OscConfig+0x280>)
 8002620:	6833      	ldr	r3, [r6, #0]
 8002622:	05d9      	lsls	r1, r3, #23
 8002624:	d518      	bpl.n	8002658 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002626:	68eb      	ldr	r3, [r5, #12]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d126      	bne.n	800267a <HAL_RCC_OscConfig+0x21e>
 800262c:	6a23      	ldr	r3, [r4, #32]
 800262e:	f043 0301 	orr.w	r3, r3, #1
 8002632:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002634:	f7ff f84a 	bl	80016cc <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002638:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800263c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800263e:	6a23      	ldr	r3, [r4, #32]
 8002640:	079b      	lsls	r3, r3, #30
 8002642:	d53f      	bpl.n	80026c4 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8002644:	2f00      	cmp	r7, #0
 8002646:	f43f af1b 	beq.w	8002480 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800264a:	69e3      	ldr	r3, [r4, #28]
 800264c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002650:	61e3      	str	r3, [r4, #28]
 8002652:	e715      	b.n	8002480 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002654:	2700      	movs	r7, #0
 8002656:	e7e2      	b.n	800261e <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002658:	6833      	ldr	r3, [r6, #0]
 800265a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800265e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002660:	f7ff f834 	bl	80016cc <HAL_GetTick>
 8002664:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002666:	6833      	ldr	r3, [r6, #0]
 8002668:	05da      	lsls	r2, r3, #23
 800266a:	d4dc      	bmi.n	8002626 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266c:	f7ff f82e 	bl	80016cc <HAL_GetTick>
 8002670:	eba0 0008 	sub.w	r0, r0, r8
 8002674:	2864      	cmp	r0, #100	@ 0x64
 8002676:	d9f6      	bls.n	8002666 <HAL_RCC_OscConfig+0x20a>
 8002678:	e731      	b.n	80024de <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267a:	b9ab      	cbnz	r3, 80026a8 <HAL_RCC_OscConfig+0x24c>
 800267c:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800267e:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002682:	f023 0301 	bic.w	r3, r3, #1
 8002686:	6223      	str	r3, [r4, #32]
 8002688:	6a23      	ldr	r3, [r4, #32]
 800268a:	f023 0304 	bic.w	r3, r3, #4
 800268e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002690:	f7ff f81c 	bl	80016cc <HAL_GetTick>
 8002694:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002696:	6a23      	ldr	r3, [r4, #32]
 8002698:	0798      	lsls	r0, r3, #30
 800269a:	d5d3      	bpl.n	8002644 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269c:	f7ff f816 	bl	80016cc <HAL_GetTick>
 80026a0:	1b80      	subs	r0, r0, r6
 80026a2:	4540      	cmp	r0, r8
 80026a4:	d9f7      	bls.n	8002696 <HAL_RCC_OscConfig+0x23a>
 80026a6:	e71a      	b.n	80024de <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026a8:	2b05      	cmp	r3, #5
 80026aa:	6a23      	ldr	r3, [r4, #32]
 80026ac:	d103      	bne.n	80026b6 <HAL_RCC_OscConfig+0x25a>
 80026ae:	f043 0304 	orr.w	r3, r3, #4
 80026b2:	6223      	str	r3, [r4, #32]
 80026b4:	e7ba      	b.n	800262c <HAL_RCC_OscConfig+0x1d0>
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	6223      	str	r3, [r4, #32]
 80026bc:	6a23      	ldr	r3, [r4, #32]
 80026be:	f023 0304 	bic.w	r3, r3, #4
 80026c2:	e7b6      	b.n	8002632 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c4:	f7ff f802 	bl	80016cc <HAL_GetTick>
 80026c8:	1b80      	subs	r0, r0, r6
 80026ca:	4540      	cmp	r0, r8
 80026cc:	d9b7      	bls.n	800263e <HAL_RCC_OscConfig+0x1e2>
 80026ce:	e706      	b.n	80024de <HAL_RCC_OscConfig+0x82>
 80026d0:	40021000 	.word	0x40021000
 80026d4:	42420000 	.word	0x42420000
 80026d8:	2000000c 	.word	0x2000000c
 80026dc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026e0:	4c2a      	ldr	r4, [pc, #168]	@ (800278c <HAL_RCC_OscConfig+0x330>)
 80026e2:	6862      	ldr	r2, [r4, #4]
 80026e4:	f002 020c 	and.w	r2, r2, #12
 80026e8:	2a08      	cmp	r2, #8
 80026ea:	d03e      	beq.n	800276a <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026ec:	2200      	movs	r2, #0
 80026ee:	2b02      	cmp	r3, #2
 80026f0:	4b27      	ldr	r3, [pc, #156]	@ (8002790 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 80026f2:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f4:	d12c      	bne.n	8002750 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80026f6:	f7fe ffe9 	bl	80016cc <HAL_GetTick>
 80026fa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fc:	6823      	ldr	r3, [r4, #0]
 80026fe:	0199      	lsls	r1, r3, #6
 8002700:	d420      	bmi.n	8002744 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002702:	6a2b      	ldr	r3, [r5, #32]
 8002704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002708:	d105      	bne.n	8002716 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800270a:	6862      	ldr	r2, [r4, #4]
 800270c:	68a9      	ldr	r1, [r5, #8]
 800270e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8002712:	430a      	orrs	r2, r1
 8002714:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002716:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8002718:	6862      	ldr	r2, [r4, #4]
 800271a:	430b      	orrs	r3, r1
 800271c:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8002720:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8002722:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002724:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8002726:	4b1a      	ldr	r3, [pc, #104]	@ (8002790 <HAL_RCC_OscConfig+0x334>)
 8002728:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800272a:	f7fe ffcf 	bl	80016cc <HAL_GetTick>
 800272e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002730:	6823      	ldr	r3, [r4, #0]
 8002732:	019a      	lsls	r2, r3, #6
 8002734:	f53f aea8 	bmi.w	8002488 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe ffc8 	bl	80016cc <HAL_GetTick>
 800273c:	1b40      	subs	r0, r0, r5
 800273e:	2802      	cmp	r0, #2
 8002740:	d9f6      	bls.n	8002730 <HAL_RCC_OscConfig+0x2d4>
 8002742:	e6cc      	b.n	80024de <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002744:	f7fe ffc2 	bl	80016cc <HAL_GetTick>
 8002748:	1b80      	subs	r0, r0, r6
 800274a:	2802      	cmp	r0, #2
 800274c:	d9d6      	bls.n	80026fc <HAL_RCC_OscConfig+0x2a0>
 800274e:	e6c6      	b.n	80024de <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002750:	f7fe ffbc 	bl	80016cc <HAL_GetTick>
 8002754:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002756:	6823      	ldr	r3, [r4, #0]
 8002758:	019b      	lsls	r3, r3, #6
 800275a:	f57f ae95 	bpl.w	8002488 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275e:	f7fe ffb5 	bl	80016cc <HAL_GetTick>
 8002762:	1b40      	subs	r0, r0, r5
 8002764:	2802      	cmp	r0, #2
 8002766:	d9f6      	bls.n	8002756 <HAL_RCC_OscConfig+0x2fa>
 8002768:	e6b9      	b.n	80024de <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800276a:	2b01      	cmp	r3, #1
 800276c:	f43f aea2 	beq.w	80024b4 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8002770:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002772:	6a2b      	ldr	r3, [r5, #32]
 8002774:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8002778:	429a      	cmp	r2, r3
 800277a:	f47f ae9b 	bne.w	80024b4 <HAL_RCC_OscConfig+0x58>
 800277e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002780:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002784:	1ac0      	subs	r0, r0, r3
 8002786:	bf18      	it	ne
 8002788:	2001      	movne	r0, #1
 800278a:	e6a9      	b.n	80024e0 <HAL_RCC_OscConfig+0x84>
 800278c:	40021000 	.word	0x40021000
 8002790:	42420000 	.word	0x42420000

08002794 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002794:	4a0d      	ldr	r2, [pc, #52]	@ (80027cc <HAL_RCC_GetSysClockFreq+0x38>)
 8002796:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8002798:	f003 010c 	and.w	r1, r3, #12
 800279c:	2908      	cmp	r1, #8
 800279e:	d112      	bne.n	80027c6 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027a0:	480b      	ldr	r0, [pc, #44]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80027a2:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027a6:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027a8:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027aa:	d509      	bpl.n	80027c0 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027ac:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027ae:	4a09      	ldr	r2, [pc, #36]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027b0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027b4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027b6:	4a08      	ldr	r2, [pc, #32]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x44>)
 80027b8:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027ba:	fbb0 f0f3 	udiv	r0, r0, r3
 80027be:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027c0:	4b06      	ldr	r3, [pc, #24]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x48>)
 80027c2:	4358      	muls	r0, r3
 80027c4:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80027c6:	4803      	ldr	r0, [pc, #12]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	080075e0 	.word	0x080075e0
 80027d4:	007a1200 	.word	0x007a1200
 80027d8:	080075de 	.word	0x080075de
 80027dc:	003d0900 	.word	0x003d0900

080027e0 <HAL_RCC_ClockConfig>:
{
 80027e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027e4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80027e6:	4604      	mov	r4, r0
 80027e8:	b910      	cbnz	r0, 80027f0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80027ea:	2001      	movs	r0, #1
}
 80027ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027f0:	4a44      	ldr	r2, [pc, #272]	@ (8002904 <HAL_RCC_ClockConfig+0x124>)
 80027f2:	6813      	ldr	r3, [r2, #0]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	428b      	cmp	r3, r1
 80027fa:	d328      	bcc.n	800284e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027fc:	6821      	ldr	r1, [r4, #0]
 80027fe:	078e      	lsls	r6, r1, #30
 8002800:	d430      	bmi.n	8002864 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002802:	07ca      	lsls	r2, r1, #31
 8002804:	d443      	bmi.n	800288e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002806:	4a3f      	ldr	r2, [pc, #252]	@ (8002904 <HAL_RCC_ClockConfig+0x124>)
 8002808:	6813      	ldr	r3, [r2, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	42ab      	cmp	r3, r5
 8002810:	d865      	bhi.n	80028de <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002812:	6822      	ldr	r2, [r4, #0]
 8002814:	4d3c      	ldr	r5, [pc, #240]	@ (8002908 <HAL_RCC_ClockConfig+0x128>)
 8002816:	f012 0f04 	tst.w	r2, #4
 800281a:	d16c      	bne.n	80028f6 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800281c:	0713      	lsls	r3, r2, #28
 800281e:	d506      	bpl.n	800282e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002820:	686b      	ldr	r3, [r5, #4]
 8002822:	6922      	ldr	r2, [r4, #16]
 8002824:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002828:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800282c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800282e:	f7ff ffb1 	bl	8002794 <HAL_RCC_GetSysClockFreq>
 8002832:	686b      	ldr	r3, [r5, #4]
 8002834:	4a35      	ldr	r2, [pc, #212]	@ (800290c <HAL_RCC_ClockConfig+0x12c>)
 8002836:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800283a:	5cd3      	ldrb	r3, [r2, r3]
 800283c:	40d8      	lsrs	r0, r3
 800283e:	4b34      	ldr	r3, [pc, #208]	@ (8002910 <HAL_RCC_ClockConfig+0x130>)
 8002840:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002842:	4b34      	ldr	r3, [pc, #208]	@ (8002914 <HAL_RCC_ClockConfig+0x134>)
 8002844:	6818      	ldr	r0, [r3, #0]
 8002846:	f7fe feff 	bl	8001648 <HAL_InitTick>
  return HAL_OK;
 800284a:	2000      	movs	r0, #0
 800284c:	e7ce      	b.n	80027ec <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	6813      	ldr	r3, [r2, #0]
 8002850:	f023 0307 	bic.w	r3, r3, #7
 8002854:	430b      	orrs	r3, r1
 8002856:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002858:	6813      	ldr	r3, [r2, #0]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	428b      	cmp	r3, r1
 8002860:	d1c3      	bne.n	80027ea <HAL_RCC_ClockConfig+0xa>
 8002862:	e7cb      	b.n	80027fc <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002864:	4b28      	ldr	r3, [pc, #160]	@ (8002908 <HAL_RCC_ClockConfig+0x128>)
 8002866:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800286a:	bf1e      	ittt	ne
 800286c:	685a      	ldrne	r2, [r3, #4]
 800286e:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8002872:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002874:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002876:	bf42      	ittt	mi
 8002878:	685a      	ldrmi	r2, [r3, #4]
 800287a:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 800287e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002880:	685a      	ldr	r2, [r3, #4]
 8002882:	68a0      	ldr	r0, [r4, #8]
 8002884:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8002888:	4302      	orrs	r2, r0
 800288a:	605a      	str	r2, [r3, #4]
 800288c:	e7b9      	b.n	8002802 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800288e:	6862      	ldr	r2, [r4, #4]
 8002890:	4e1d      	ldr	r6, [pc, #116]	@ (8002908 <HAL_RCC_ClockConfig+0x128>)
 8002892:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002894:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002896:	d11a      	bne.n	80028ce <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002898:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800289c:	d0a5      	beq.n	80027ea <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800289e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a0:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a4:	f023 0303 	bic.w	r3, r3, #3
 80028a8:	4313      	orrs	r3, r2
 80028aa:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80028ac:	f7fe ff0e 	bl	80016cc <HAL_GetTick>
 80028b0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028b2:	6873      	ldr	r3, [r6, #4]
 80028b4:	6862      	ldr	r2, [r4, #4]
 80028b6:	f003 030c 	and.w	r3, r3, #12
 80028ba:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80028be:	d0a2      	beq.n	8002806 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c0:	f7fe ff04 	bl	80016cc <HAL_GetTick>
 80028c4:	1bc0      	subs	r0, r0, r7
 80028c6:	4540      	cmp	r0, r8
 80028c8:	d9f3      	bls.n	80028b2 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 80028ca:	2003      	movs	r0, #3
 80028cc:	e78e      	b.n	80027ec <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ce:	2a02      	cmp	r2, #2
 80028d0:	d102      	bne.n	80028d8 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028d2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80028d6:	e7e1      	b.n	800289c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d8:	f013 0f02 	tst.w	r3, #2
 80028dc:	e7de      	b.n	800289c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028de:	6813      	ldr	r3, [r2, #0]
 80028e0:	f023 0307 	bic.w	r3, r3, #7
 80028e4:	432b      	orrs	r3, r5
 80028e6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028e8:	6813      	ldr	r3, [r2, #0]
 80028ea:	f003 0307 	and.w	r3, r3, #7
 80028ee:	42ab      	cmp	r3, r5
 80028f0:	f47f af7b 	bne.w	80027ea <HAL_RCC_ClockConfig+0xa>
 80028f4:	e78d      	b.n	8002812 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f6:	686b      	ldr	r3, [r5, #4]
 80028f8:	68e1      	ldr	r1, [r4, #12]
 80028fa:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80028fe:	430b      	orrs	r3, r1
 8002900:	606b      	str	r3, [r5, #4]
 8002902:	e78b      	b.n	800281c <HAL_RCC_ClockConfig+0x3c>
 8002904:	40022000 	.word	0x40022000
 8002908:	40021000 	.word	0x40021000
 800290c:	080075ce 	.word	0x080075ce
 8002910:	2000000c 	.word	0x2000000c
 8002914:	20000014 	.word	0x20000014

08002918 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002918:	4b04      	ldr	r3, [pc, #16]	@ (800292c <HAL_RCC_GetPCLK1Freq+0x14>)
 800291a:	4a05      	ldr	r2, [pc, #20]	@ (8002930 <HAL_RCC_GetPCLK1Freq+0x18>)
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002922:	5cd3      	ldrb	r3, [r2, r3]
 8002924:	4a03      	ldr	r2, [pc, #12]	@ (8002934 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002926:	6810      	ldr	r0, [r2, #0]
}
 8002928:	40d8      	lsrs	r0, r3
 800292a:	4770      	bx	lr
 800292c:	40021000 	.word	0x40021000
 8002930:	080075c6 	.word	0x080075c6
 8002934:	2000000c 	.word	0x2000000c

08002938 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002938:	4b04      	ldr	r3, [pc, #16]	@ (800294c <HAL_RCC_GetPCLK2Freq+0x14>)
 800293a:	4a05      	ldr	r2, [pc, #20]	@ (8002950 <HAL_RCC_GetPCLK2Freq+0x18>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002942:	5cd3      	ldrb	r3, [r2, r3]
 8002944:	4a03      	ldr	r2, [pc, #12]	@ (8002954 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002946:	6810      	ldr	r0, [r2, #0]
}
 8002948:	40d8      	lsrs	r0, r3
 800294a:	4770      	bx	lr
 800294c:	40021000 	.word	0x40021000
 8002950:	080075c6 	.word	0x080075c6
 8002954:	2000000c 	.word	0x2000000c

08002958 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002958:	6803      	ldr	r3, [r0, #0]
{
 800295a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800295e:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002960:	07d8      	lsls	r0, r3, #31
 8002962:	d521      	bpl.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002964:	4c36      	ldr	r4, [pc, #216]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002966:	69e3      	ldr	r3, [r4, #28]
 8002968:	00d9      	lsls	r1, r3, #3
 800296a:	d42b      	bmi.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800296c:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800296e:	69e3      	ldr	r3, [r4, #28]
 8002970:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002974:	61e3      	str	r3, [r4, #28]
 8002976:	69e3      	ldr	r3, [r4, #28]
 8002978:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800297c:	9301      	str	r3, [sp, #4]
 800297e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002980:	4f30      	ldr	r7, [pc, #192]	@ (8002a44 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	05da      	lsls	r2, r3, #23
 8002986:	d51f      	bpl.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002988:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800298a:	686a      	ldr	r2, [r5, #4]
 800298c:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002990:	d12e      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002992:	6a23      	ldr	r3, [r4, #32]
 8002994:	686a      	ldr	r2, [r5, #4]
 8002996:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800299a:	4313      	orrs	r3, r2
 800299c:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800299e:	b11e      	cbz	r6, 80029a8 <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a0:	69e3      	ldr	r3, [r4, #28]
 80029a2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029a6:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029a8:	682a      	ldr	r2, [r5, #0]
 80029aa:	0791      	lsls	r1, r2, #30
 80029ac:	d506      	bpl.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029ae:	4924      	ldr	r1, [pc, #144]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80029b0:	68a8      	ldr	r0, [r5, #8]
 80029b2:	684b      	ldr	r3, [r1, #4]
 80029b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80029b8:	4303      	orrs	r3, r0
 80029ba:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80029bc:	06d3      	lsls	r3, r2, #27
 80029be:	d436      	bmi.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80029c0:	2000      	movs	r0, #0
 80029c2:	e012      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 80029c4:	2600      	movs	r6, #0
 80029c6:	e7db      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029ce:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80029d0:	f7fe fe7c 	bl	80016cc <HAL_GetTick>
 80029d4:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	05db      	lsls	r3, r3, #23
 80029da:	d4d5      	bmi.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029dc:	f7fe fe76 	bl	80016cc <HAL_GetTick>
 80029e0:	eba0 0008 	sub.w	r0, r0, r8
 80029e4:	2864      	cmp	r0, #100	@ 0x64
 80029e6:	d9f6      	bls.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 80029e8:	2003      	movs	r0, #3
}
 80029ea:	b002      	add	sp, #8
 80029ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029f0:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d0cc      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80029f8:	2001      	movs	r0, #1
 80029fa:	4a13      	ldr	r2, [pc, #76]	@ (8002a48 <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029fc:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80029fe:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a02:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a04:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a08:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a0a:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 8002a0e:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a10:	d5bf      	bpl.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 8002a12:	f7fe fe5b 	bl	80016cc <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a16:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 8002a1a:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1c:	6a23      	ldr	r3, [r4, #32]
 8002a1e:	0798      	lsls	r0, r3, #30
 8002a20:	d4b7      	bmi.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a22:	f7fe fe53 	bl	80016cc <HAL_GetTick>
 8002a26:	1bc0      	subs	r0, r0, r7
 8002a28:	4540      	cmp	r0, r8
 8002a2a:	d9f7      	bls.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0xc4>
 8002a2c:	e7dc      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a2e:	4a04      	ldr	r2, [pc, #16]	@ (8002a40 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002a30:	68e9      	ldr	r1, [r5, #12]
 8002a32:	6853      	ldr	r3, [r2, #4]
 8002a34:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002a38:	430b      	orrs	r3, r1
 8002a3a:	6053      	str	r3, [r2, #4]
 8002a3c:	e7c0      	b.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x68>
 8002a3e:	bf00      	nop
 8002a40:	40021000 	.word	0x40021000
 8002a44:	40007000 	.word	0x40007000
 8002a48:	42420000 	.word	0x42420000

08002a4c <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002a4c:	2802      	cmp	r0, #2
{
 8002a4e:	b508      	push	{r3, lr}
  switch (PeriphClk)
 8002a50:	d044      	beq.n	8002adc <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8002a52:	2810      	cmp	r0, #16
 8002a54:	d003      	beq.n	8002a5e <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 8002a56:	2801      	cmp	r0, #1
 8002a58:	d022      	beq.n	8002aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 8002a5a:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8002a5c:	e034      	b.n	8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 8002a5e:	4b25      	ldr	r3, [pc, #148]	@ (8002af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002a60:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002a62:	6818      	ldr	r0, [r3, #0]
 8002a64:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 8002a68:	d02e      	beq.n	8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a6a:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8002a6e:	4822      	ldr	r0, [pc, #136]	@ (8002af8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a70:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a72:	bf48      	it	mi
 8002a74:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a76:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002a78:	bf41      	itttt	mi
 8002a7a:	4920      	ldrmi	r1, [pc, #128]	@ (8002afc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002a7c:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8002a80:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002a82:	4a1f      	ldrmi	r2, [pc, #124]	@ (8002b00 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002a84:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002a86:	bf4c      	ite	mi
 8002a88:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a8c:	4a1d      	ldrpl	r2, [pc, #116]	@ (8002b04 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002a8e:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a90:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002a94:	d418      	bmi.n	8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 8002a96:	2303      	movs	r3, #3
 8002a98:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002a9a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002a9e:	e013      	b.n	8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002aa0:	f240 3102 	movw	r1, #770	@ 0x302
      temp_reg = RCC->BDCR;
 8002aa4:	4a13      	ldr	r2, [pc, #76]	@ (8002af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002aa6:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002aa8:	4019      	ands	r1, r3
 8002aaa:	f5b1 7f81 	cmp.w	r1, #258	@ 0x102
 8002aae:	d01e      	beq.n	8002aee <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002ab0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ab4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ab8:	d107      	bne.n	8002aca <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 8002aba:	f649 4340 	movw	r3, #40000	@ 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002abe:	6a50      	ldr	r0, [r2, #36]	@ 0x24
        frequency = LSI_VALUE;
 8002ac0:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8002ac4:	bf18      	it	ne
 8002ac6:	4618      	movne	r0, r3
}
 8002ac8:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002aca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002ace:	d1c4      	bne.n	8002a5a <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 8002ad0:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8002ad2:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002ad6:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 8002ada:	e7f3      	b.n	8002ac4 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002adc:	f7ff ff2c 	bl	8002938 <HAL_RCC_GetPCLK2Freq>
 8002ae0:	4b04      	ldr	r3, [pc, #16]	@ (8002af4 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f3c3 3381 	ubfx	r3, r3, #14, #2
 8002ae8:	3301      	adds	r3, #1
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	e7d5      	b.n	8002a9a <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 8002aee:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002af2:	e7e9      	b.n	8002ac8 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8002af4:	40021000 	.word	0x40021000
 8002af8:	080075f2 	.word	0x080075f2
 8002afc:	080075f0 	.word	0x080075f0
 8002b00:	007a1200 	.word	0x007a1200
 8002b04:	003d0900 	.word	0x003d0900

08002b08 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002b08:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8002b0a:	f000 ff87 	bl	8003a1c <vTaskStartScheduler>
  
  return osOK;
}
 8002b0e:	2000      	movs	r0, #0
 8002b10:	bd08      	pop	{r3, pc}

08002b12 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002b12:	b570      	push	{r4, r5, r6, lr}
 8002b14:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b16:	6946      	ldr	r6, [r0, #20]
{
 8002b18:	460b      	mov	r3, r1
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b1a:	e9d0 1000 	ldrd	r1, r0, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002b1e:	692a      	ldr	r2, [r5, #16]
 8002b20:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8002b24:	b086      	sub	sp, #24
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8002b26:	b176      	cbz	r6, 8002b46 <osThreadCreate+0x34>
 8002b28:	69ad      	ldr	r5, [r5, #24]
 8002b2a:	b165      	cbz	r5, 8002b46 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8002b2c:	2c84      	cmp	r4, #132	@ 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b2e:	bf0c      	ite	eq
 8002b30:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8002b32:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b34:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8002b38:	9400      	str	r4, [sp, #0]
 8002b3a:	f000 fe3c 	bl	80037b6 <xTaskCreateStatic>
 8002b3e:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8002b40:	9805      	ldr	r0, [sp, #20]
}
 8002b42:	b006      	add	sp, #24
 8002b44:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8002b46:	2c84      	cmp	r4, #132	@ 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8002b48:	bf0c      	ite	eq
 8002b4a:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8002b4c:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002b4e:	ad05      	add	r5, sp, #20
 8002b50:	e9cd 4500 	strd	r4, r5, [sp]
 8002b54:	b292      	uxth	r2, r2
 8002b56:	f000 fe65 	bl	8003824 <xTaskCreate>
 8002b5a:	2801      	cmp	r0, #1
 8002b5c:	d0f0      	beq.n	8002b40 <osThreadCreate+0x2e>
      return NULL;
 8002b5e:	2000      	movs	r0, #0
 8002b60:	e7ef      	b.n	8002b42 <osThreadCreate+0x30>

08002b62 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002b62:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002b64:	2801      	cmp	r0, #1
 8002b66:	bf38      	it	cc
 8002b68:	2001      	movcc	r0, #1
 8002b6a:	f001 f8bb 	bl	8003ce4 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002b6e:	2000      	movs	r0, #0
 8002b70:	bd08      	pop	{r3, pc}
	...

08002b74 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8002b74:	b513      	push	{r0, r1, r4, lr}
  if(timer_def->controlblock != NULL) {
    return xTimerCreateStatic((const char *)"",
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8002b76:	c811      	ldmia	r0, {r0, r4}
    return xTimerCreateStatic((const char *)"",
 8002b78:	3901      	subs	r1, #1
{
 8002b7a:	4613      	mov	r3, r2
    return xTimerCreateStatic((const char *)"",
 8002b7c:	424a      	negs	r2, r1
 8002b7e:	414a      	adcs	r2, r1
  if(timer_def->controlblock != NULL) {
 8002b80:	b13c      	cbz	r4, 8002b92 <osTimerCreate+0x1e>
    return xTimerCreateStatic((const char *)"",
 8002b82:	e9cd 0400 	strd	r0, r4, [sp]
 8002b86:	2101      	movs	r1, #1
 8002b88:	4805      	ldr	r0, [pc, #20]	@ (8002ba0 <osTimerCreate+0x2c>)
 8002b8a:	f001 fba0 	bl	80042ce <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8002b8e:	b002      	add	sp, #8
 8002b90:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 8002b92:	9000      	str	r0, [sp, #0]
 8002b94:	2101      	movs	r1, #1
 8002b96:	4802      	ldr	r0, [pc, #8]	@ (8002ba0 <osTimerCreate+0x2c>)
 8002b98:	f001 fb72 	bl	8004280 <xTimerCreate>
 8002b9c:	e7f7      	b.n	8002b8e <osTimerCreate+0x1a>
 8002b9e:	bf00      	nop
 8002ba0:	08005d43 	.word	0x08005d43

08002ba4 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8002ba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8002ba6:	2400      	movs	r4, #0
 8002ba8:	2901      	cmp	r1, #1
 8002baa:	460a      	mov	r2, r1
 8002bac:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 8002bae:	bf38      	it	cc
 8002bb0:	2201      	movcc	r2, #1
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002bb2:	f3ef 8305 	mrs	r3, IPSR
    ticks = 1;
    
  if (inHandlerMode()) 
 8002bb6:	b1bb      	cbz	r3, 8002be8 <osTimerStart+0x44>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8002bb8:	2109      	movs	r1, #9
 8002bba:	9400      	str	r4, [sp, #0]
 8002bbc:	ab03      	add	r3, sp, #12
 8002bbe:	f001 fbc3 	bl	8004348 <xTimerGenericCommand>
 8002bc2:	2801      	cmp	r0, #1
 8002bc4:	d002      	beq.n	8002bcc <osTimerStart+0x28>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
      result = osErrorOS;
 8002bc6:	20ff      	movs	r0, #255	@ 0xff

#else 
  result = osErrorOS;
#endif
  return result;
}
 8002bc8:	b004      	add	sp, #16
 8002bca:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 8002bcc:	9b03      	ldr	r3, [sp, #12]
 8002bce:	b14b      	cbz	r3, 8002be4 <osTimerStart+0x40>
 8002bd0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002bd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bd8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002bdc:	f3bf 8f4f 	dsb	sy
 8002be0:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8002be4:	2000      	movs	r0, #0
  return result;
 8002be6:	e7ef      	b.n	8002bc8 <osTimerStart+0x24>
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8002be8:	2104      	movs	r1, #4
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	f001 fbac 	bl	8004348 <xTimerGenericCommand>
 8002bf0:	2801      	cmp	r0, #1
 8002bf2:	d1e8      	bne.n	8002bc6 <osTimerStart+0x22>
 8002bf4:	e7f6      	b.n	8002be4 <osTimerStart+0x40>

08002bf6 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8002bf6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	9203      	str	r2, [sp, #12]
 8002bfc:	f3ef 8305 	mrs	r3, IPSR

  if (inHandlerMode()) {
 8002c00:	b1c3      	cbz	r3, 8002c34 <osTimerStop+0x3e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8002c02:	2108      	movs	r1, #8
 8002c04:	9200      	str	r2, [sp, #0]
 8002c06:	ab03      	add	r3, sp, #12
 8002c08:	f001 fb9e 	bl	8004348 <xTimerGenericCommand>
 8002c0c:	2801      	cmp	r0, #1
 8002c0e:	d003      	beq.n	8002c18 <osTimerStop+0x22>
      return osErrorOS;
 8002c10:	20ff      	movs	r0, #255	@ 0xff
  }
#else 
  result = osErrorOS;
#endif 
  return result;
}
 8002c12:	b005      	add	sp, #20
 8002c14:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 8002c18:	9b03      	ldr	r3, [sp, #12]
 8002c1a:	b14b      	cbz	r3, 8002c30 <osTimerStop+0x3a>
 8002c1c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002c20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c24:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002c28:	f3bf 8f4f 	dsb	sy
 8002c2c:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8002c30:	2000      	movs	r0, #0
 8002c32:	e7ee      	b.n	8002c12 <osTimerStop+0x1c>
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8002c34:	461a      	mov	r2, r3
 8002c36:	2103      	movs	r1, #3
 8002c38:	9300      	str	r3, [sp, #0]
 8002c3a:	f001 fb85 	bl	8004348 <xTimerGenericCommand>
 8002c3e:	2801      	cmp	r0, #1
 8002c40:	d1e6      	bne.n	8002c10 <osTimerStop+0x1a>
 8002c42:	e7f5      	b.n	8002c30 <osTimerStop+0x3a>

08002c44 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8002c44:	4603      	mov	r3, r0
 8002c46:	b513      	push	{r0, r1, r4, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002c48:	c807      	ldmia	r0, {r0, r1, r2}
  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8002c4a:	b10a      	cbz	r2, 8002c50 <osMessageCreate+0xc>
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	b92b      	cbnz	r3, 8002c5c <osMessageCreate+0x18>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002c50:	2200      	movs	r2, #0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002c52:	b002      	add	sp, #8
 8002c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002c58:	f000 b9d7 	b.w	800300a <xQueueGenericCreate>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002c5c:	2400      	movs	r4, #0
 8002c5e:	9400      	str	r4, [sp, #0]
 8002c60:	f000 f98a 	bl	8002f78 <xQueueGenericCreateStatic>
}
 8002c64:	b002      	add	sp, #8
 8002c66:	bd10      	pop	{r4, pc}

08002c68 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002c6a:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002c6c:	2100      	movs	r1, #0
 8002c6e:	9103      	str	r1, [sp, #12]
 8002c70:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8002c74:	b1c3      	cbz	r3, 8002ca8 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002c76:	460b      	mov	r3, r1
 8002c78:	aa03      	add	r2, sp, #12
 8002c7a:	a901      	add	r1, sp, #4
 8002c7c:	f000 fa9b 	bl	80031b6 <xQueueGenericSendFromISR>
 8002c80:	2801      	cmp	r0, #1
 8002c82:	d003      	beq.n	8002c8c <osMessagePut+0x24>
      return osErrorOS;
 8002c84:	20ff      	movs	r0, #255	@ 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8002c86:	b005      	add	sp, #20
 8002c88:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 8002c8c:	9b03      	ldr	r3, [sp, #12]
 8002c8e:	b14b      	cbz	r3, 8002ca4 <osMessagePut+0x3c>
 8002c90:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002c94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c98:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002c9c:	f3bf 8f4f 	dsb	sy
 8002ca0:	f3bf 8f6f 	isb	sy
  return osOK;
 8002ca4:	2000      	movs	r0, #0
 8002ca6:	e7ee      	b.n	8002c86 <osMessagePut+0x1e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002ca8:	2a01      	cmp	r2, #1
 8002caa:	bf38      	it	cc
 8002cac:	2201      	movcc	r2, #1
 8002cae:	a901      	add	r1, sp, #4
 8002cb0:	f000 f9cf 	bl	8003052 <xQueueGenericSend>
 8002cb4:	2801      	cmp	r0, #1
 8002cb6:	d0f5      	beq.n	8002ca4 <osMessagePut+0x3c>
 8002cb8:	e7e4      	b.n	8002c84 <osMessagePut+0x1c>

08002cba <osMessageGet>:
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8002cba:	2300      	movs	r3, #0
{
 8002cbc:	b530      	push	{r4, r5, lr}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	4605      	mov	r5, r0
 8002cc2:	4614      	mov	r4, r2
 8002cc4:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8002cc6:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8002cc8:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 8002cca:	b911      	cbnz	r1, 8002cd2 <osMessageGet+0x18>
    event.status = osErrorParameter;
 8002ccc:	2380      	movs	r3, #128	@ 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 8002cce:	9301      	str	r3, [sp, #4]
 8002cd0:	e018      	b.n	8002d04 <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8002cd2:	9300      	str	r3, [sp, #0]
 8002cd4:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8002cd8:	b1e3      	cbz	r3, 8002d14 <osMessageGet+0x5a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002cda:	466a      	mov	r2, sp
 8002cdc:	a902      	add	r1, sp, #8
 8002cde:	f000 fb64 	bl	80033aa <xQueueReceiveFromISR>
 8002ce2:	1e43      	subs	r3, r0, #1
 8002ce4:	4258      	negs	r0, r3
 8002ce6:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 8002ce8:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8002cea:	0100      	lsls	r0, r0, #4
 8002cec:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8002cee:	b14b      	cbz	r3, 8002d04 <osMessageGet+0x4a>
 8002cf0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002cf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cf8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002cfc:	f3bf 8f4f 	dsb	sy
 8002d00:	f3bf 8f6f 	isb	sy
    return event;
 8002d04:	ab04      	add	r3, sp, #16
 8002d06:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8002d0a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
 8002d0e:	4628      	mov	r0, r5
 8002d10:	b005      	add	sp, #20
 8002d12:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002d14:	a902      	add	r1, sp, #8
 8002d16:	f000 faaa 	bl	800326e <xQueueReceive>
 8002d1a:	2801      	cmp	r0, #1
 8002d1c:	d101      	bne.n	8002d22 <osMessageGet+0x68>
      event.status = osEventMessage;
 8002d1e:	2310      	movs	r3, #16
 8002d20:	e7d5      	b.n	8002cce <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002d22:	3c00      	subs	r4, #0
 8002d24:	bf18      	it	ne
 8002d26:	2401      	movne	r4, #1
 8002d28:	01a4      	lsls	r4, r4, #6
 8002d2a:	9401      	str	r4, [sp, #4]
  return event;
 8002d2c:	e7ea      	b.n	8002d04 <osMessageGet+0x4a>

08002d2e <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8002d2e:	b508      	push	{r3, lr}
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 8002d30:	f001 f880 	bl	8003e34 <vTaskSuspend>
  
  return osOK;
#else
  return osErrorResource;
#endif
}
 8002d34:	2000      	movs	r0, #0
 8002d36:	bd08      	pop	{r3, pc}

08002d38 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8002d38:	b508      	push	{r3, lr}
 8002d3a:	f3ef 8305 	mrs	r3, IPSR
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8002d3e:	b17b      	cbz	r3, 8002d60 <osThreadResume+0x28>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8002d40:	f000 fe1e 	bl	8003980 <xTaskResumeFromISR>
 8002d44:	2801      	cmp	r0, #1
 8002d46:	d109      	bne.n	8002d5c <osThreadResume+0x24>
    {
      portYIELD_FROM_ISR(pdTRUE);
 8002d48:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002d4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d50:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	f3bf 8f6f 	isb	sy
  }
  return osOK;
#else
  return osErrorResource;
#endif
}
 8002d5c:	2000      	movs	r0, #0
 8002d5e:	bd08      	pop	{r3, pc}
    vTaskResume(thread_id);
 8002d60:	f000 fdcc 	bl	80038fc <vTaskResume>
 8002d64:	e7fa      	b.n	8002d5c <osThreadResume+0x24>

08002d66 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002d66:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d6a:	f100 0308 	add.w	r3, r0, #8

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d6e:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d72:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d74:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002d76:	2300      	movs	r3, #0
 8002d78:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002d7a:	4770      	bx	lr

08002d7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002d80:	4770      	bx	lr

08002d82 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d82:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d84:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8002d86:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d88:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d8a:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d8c:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002d8e:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d90:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002d92:	3301      	adds	r3, #1
 8002d94:	6003      	str	r3, [r0, #0]
}
 8002d96:	4770      	bx	lr

08002d98 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d98:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d9a:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d9c:	1c63      	adds	r3, r4, #1
 8002d9e:	d10a      	bne.n	8002db6 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002da0:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002da2:	685a      	ldr	r2, [r3, #4]
 8002da4:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002da6:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002da8:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002daa:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002dac:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002dae:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8002db0:	3301      	adds	r3, #1
 8002db2:	6003      	str	r3, [r0, #0]
}
 8002db4:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002db6:	f100 0208 	add.w	r2, r0, #8
 8002dba:	4613      	mov	r3, r2
 8002dbc:	6852      	ldr	r2, [r2, #4]
 8002dbe:	6815      	ldr	r5, [r2, #0]
 8002dc0:	42a5      	cmp	r5, r4
 8002dc2:	d9fa      	bls.n	8002dba <vListInsert+0x22>
 8002dc4:	e7ed      	b.n	8002da2 <vListInsert+0xa>

08002dc6 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002dc6:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002dc8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8002dcc:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002dce:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002dd0:	6859      	ldr	r1, [r3, #4]
 8002dd2:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002dd4:	bf08      	it	eq
 8002dd6:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002dd8:	2200      	movs	r2, #0
 8002dda:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	3a01      	subs	r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002de2:	6818      	ldr	r0, [r3, #0]
}
 8002de4:	4770      	bx	lr

08002de6 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002de6:	b510      	push	{r4, lr}
 8002de8:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002dea:	f001 fc63 	bl	80046b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002dee:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002df0:	f001 fc80 	bl	80046f4 <vPortExitCritical>

	return xReturn;
}
 8002df4:	fab4 f084 	clz	r0, r4
 8002df8:	0940      	lsrs	r0, r0, #5
 8002dfa:	bd10      	pop	{r4, pc}

08002dfc <prvCopyDataToQueue>:
{
 8002dfc:	b570      	push	{r4, r5, r6, lr}
 8002dfe:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e00:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8002e02:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e04:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002e06:	b942      	cbnz	r2, 8002e1a <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e08:	6806      	ldr	r6, [r0, #0]
 8002e0a:	b99e      	cbnz	r6, 8002e34 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002e0c:	6840      	ldr	r0, [r0, #4]
 8002e0e:	f001 f963 	bl	80040d8 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8002e12:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002e14:	3501      	adds	r5, #1
 8002e16:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8002e18:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002e1a:	b96e      	cbnz	r6, 8002e38 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002e1c:	6880      	ldr	r0, [r0, #8]
 8002e1e:	f001 fff2 	bl	8004e06 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e22:	68a3      	ldr	r3, [r4, #8]
 8002e24:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002e26:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e28:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002e2a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e2c:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e2e:	bf24      	itt	cs
 8002e30:	6823      	ldrcs	r3, [r4, #0]
 8002e32:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8002e34:	2000      	movs	r0, #0
 8002e36:	e7ed      	b.n	8002e14 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e38:	68c0      	ldr	r0, [r0, #12]
 8002e3a:	f001 ffe4 	bl	8004e06 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e3e:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8002e40:	68e3      	ldr	r3, [r4, #12]
 8002e42:	4251      	negs	r1, r2
 8002e44:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e46:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8002e48:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002e4a:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8002e4c:	bf3e      	ittt	cc
 8002e4e:	6863      	ldrcc	r3, [r4, #4]
 8002e50:	185b      	addcc	r3, r3, r1
 8002e52:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8002e54:	2e02      	cmp	r6, #2
 8002e56:	d1ed      	bne.n	8002e34 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e58:	b10d      	cbz	r5, 8002e5e <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8002e5a:	3d01      	subs	r5, #1
 8002e5c:	e7ea      	b.n	8002e34 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8002e5e:	4628      	mov	r0, r5
 8002e60:	e7d8      	b.n	8002e14 <prvCopyDataToQueue+0x18>

08002e62 <prvCopyDataFromQueue>:
{
 8002e62:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e64:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8002e66:	4608      	mov	r0, r1
 8002e68:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002e6a:	b162      	cbz	r2, 8002e86 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002e6c:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e6e:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002e70:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002e72:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002e74:	bf28      	it	cs
 8002e76:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8002e78:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8002e7a:	bf28      	it	cs
 8002e7c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002e7e:	68d9      	ldr	r1, [r3, #12]
}
 8002e80:	bc10      	pop	{r4}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8002e82:	f001 bfc0 	b.w	8004e06 <memcpy>
}
 8002e86:	bc10      	pop	{r4}
 8002e88:	4770      	bx	lr

08002e8a <prvUnlockQueue>:
{
 8002e8a:	b570      	push	{r4, r5, r6, lr}
 8002e8c:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8002e8e:	f001 fc11 	bl	80046b4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8002e92:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e96:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002e9a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002e9c:	2d00      	cmp	r5, #0
 8002e9e:	dc14      	bgt.n	8002eca <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8002ea0:	23ff      	movs	r3, #255	@ 0xff
 8002ea2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8002ea6:	f001 fc25 	bl	80046f4 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002eaa:	f001 fc03 	bl	80046b4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8002eae:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002eb2:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8002eb6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002eb8:	2d00      	cmp	r5, #0
 8002eba:	dc12      	bgt.n	8002ee2 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8002ebc:	23ff      	movs	r3, #255	@ 0xff
 8002ebe:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8002ec2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002ec6:	f001 bc15 	b.w	80046f4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002eca:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d0e7      	beq.n	8002ea0 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002ed0:	4630      	mov	r0, r6
 8002ed2:	f001 f855 	bl	8003f80 <xTaskRemoveFromEventList>
 8002ed6:	b108      	cbz	r0, 8002edc <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002ed8:	f001 f8e8 	bl	80040ac <vTaskMissedYield>
			--cTxLock;
 8002edc:	3d01      	subs	r5, #1
 8002ede:	b26d      	sxtb	r5, r5
 8002ee0:	e7dc      	b.n	8002e9c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ee2:	6923      	ldr	r3, [r4, #16]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d0e9      	beq.n	8002ebc <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ee8:	4630      	mov	r0, r6
 8002eea:	f001 f849 	bl	8003f80 <xTaskRemoveFromEventList>
 8002eee:	b108      	cbz	r0, 8002ef4 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8002ef0:	f001 f8dc 	bl	80040ac <vTaskMissedYield>
				--cRxLock;
 8002ef4:	3d01      	subs	r5, #1
 8002ef6:	b26d      	sxtb	r5, r5
 8002ef8:	e7de      	b.n	8002eb8 <prvUnlockQueue+0x2e>

08002efa <xQueueGenericReset>:
{
 8002efa:	b538      	push	{r3, r4, r5, lr}
 8002efc:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8002efe:	4604      	mov	r4, r0
 8002f00:	b940      	cbnz	r0, 8002f14 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f06:	f383 8811 	msr	BASEPRI, r3
 8002f0a:	f3bf 8f6f 	isb	sy
 8002f0e:	f3bf 8f4f 	dsb	sy
 8002f12:	e7fe      	b.n	8002f12 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002f14:	f001 fbce 	bl	80046b4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002f18:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8002f1c:	434b      	muls	r3, r1
 8002f1e:	6822      	ldr	r2, [r4, #0]
 8002f20:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002f22:	1a5b      	subs	r3, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002f24:	6060      	str	r0, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f26:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f28:	2000      	movs	r0, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002f2a:	441a      	add	r2, r3
		pxQueue->cRxLock = queueUNLOCKED;
 8002f2c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002f2e:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002f30:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002f32:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002f36:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8002f3a:	b9a5      	cbnz	r5, 8002f66 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f3c:	6923      	ldr	r3, [r4, #16]
 8002f3e:	b173      	cbz	r3, 8002f5e <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f40:	f104 0010 	add.w	r0, r4, #16
 8002f44:	f001 f81c 	bl	8003f80 <xTaskRemoveFromEventList>
 8002f48:	b148      	cbz	r0, 8002f5e <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8002f4a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f52:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8002f5e:	f001 fbc9 	bl	80046f4 <vPortExitCritical>
}
 8002f62:	2001      	movs	r0, #1
 8002f64:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002f66:	f104 0010 	add.w	r0, r4, #16
 8002f6a:	f7ff fefc 	bl	8002d66 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002f6e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002f72:	f7ff fef8 	bl	8002d66 <vListInitialise>
 8002f76:	e7f2      	b.n	8002f5e <xQueueGenericReset+0x64>

08002f78 <xQueueGenericCreateStatic>:
	{
 8002f78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f7a:	460d      	mov	r5, r1
 8002f7c:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002f7e:	b940      	cbnz	r0, 8002f92 <xQueueGenericCreateStatic+0x1a>
 8002f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	e7fe      	b.n	8002f90 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8002f92:	b943      	cbnz	r3, 8002fa6 <xQueueGenericCreateStatic+0x2e>
 8002f94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f98:	f383 8811 	msr	BASEPRI, r3
 8002f9c:	f3bf 8f6f 	isb	sy
 8002fa0:	f3bf 8f4f 	dsb	sy
 8002fa4:	e7fe      	b.n	8002fa4 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002fa6:	b14a      	cbz	r2, 8002fbc <xQueueGenericCreateStatic+0x44>
 8002fa8:	b991      	cbnz	r1, 8002fd0 <xQueueGenericCreateStatic+0x58>
 8002faa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fae:	f383 8811 	msr	BASEPRI, r3
 8002fb2:	f3bf 8f6f 	isb	sy
 8002fb6:	f3bf 8f4f 	dsb	sy
 8002fba:	e7fe      	b.n	8002fba <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002fbc:	b141      	cbz	r1, 8002fd0 <xQueueGenericCreateStatic+0x58>
 8002fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	e7fe      	b.n	8002fce <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002fd0:	2348      	movs	r3, #72	@ 0x48
 8002fd2:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002fd4:	9b01      	ldr	r3, [sp, #4]
 8002fd6:	2b48      	cmp	r3, #72	@ 0x48
 8002fd8:	d008      	beq.n	8002fec <xQueueGenericCreateStatic+0x74>
 8002fda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fde:	f383 8811 	msr	BASEPRI, r3
 8002fe2:	f3bf 8f6f 	isb	sy
 8002fe6:	f3bf 8f4f 	dsb	sy
 8002fea:	e7fe      	b.n	8002fea <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002fec:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002fee:	2d00      	cmp	r5, #0
 8002ff0:	bf08      	it	eq
 8002ff2:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8002ff4:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002ff8:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	6022      	str	r2, [r4, #0]
 8003000:	f7ff ff7b 	bl	8002efa <xQueueGenericReset>
	}
 8003004:	4620      	mov	r0, r4
 8003006:	b003      	add	sp, #12
 8003008:	bd30      	pop	{r4, r5, pc}

0800300a <xQueueGenericCreate>:
	{
 800300a:	b570      	push	{r4, r5, r6, lr}
 800300c:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800300e:	4606      	mov	r6, r0
 8003010:	b940      	cbnz	r0, 8003024 <xQueueGenericCreate+0x1a>
 8003012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003016:	f383 8811 	msr	BASEPRI, r3
 800301a:	f3bf 8f6f 	isb	sy
 800301e:	f3bf 8f4f 	dsb	sy
 8003022:	e7fe      	b.n	8003022 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003024:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003026:	3048      	adds	r0, #72	@ 0x48
 8003028:	f001 fc70 	bl	800490c <pvPortMalloc>
		if( pxNewQueue != NULL )
 800302c:	4604      	mov	r4, r0
 800302e:	b160      	cbz	r0, 800304a <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003030:	2300      	movs	r3, #0
 8003032:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8003036:	b155      	cbz	r5, 800304e <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003038:	f100 0348 	add.w	r3, r0, #72	@ 0x48
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800303c:	2101      	movs	r1, #1
 800303e:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8003040:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8003044:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003046:	f7ff ff58 	bl	8002efa <xQueueGenericReset>
	}
 800304a:	4620      	mov	r0, r4
 800304c:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800304e:	4603      	mov	r3, r0
 8003050:	e7f4      	b.n	800303c <xQueueGenericCreate+0x32>

08003052 <xQueueGenericSend>:
{
 8003052:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003056:	460f      	mov	r7, r1
 8003058:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800305a:	4604      	mov	r4, r0
{
 800305c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800305e:	b940      	cbnz	r0, 8003072 <xQueueGenericSend+0x20>
 8003060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003064:	f383 8811 	msr	BASEPRI, r3
 8003068:	f3bf 8f6f 	isb	sy
 800306c:	f3bf 8f4f 	dsb	sy
 8003070:	e7fe      	b.n	8003070 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003072:	b951      	cbnz	r1, 800308a <xQueueGenericSend+0x38>
 8003074:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003076:	b143      	cbz	r3, 800308a <xQueueGenericSend+0x38>
 8003078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800307c:	f383 8811 	msr	BASEPRI, r3
 8003080:	f3bf 8f6f 	isb	sy
 8003084:	f3bf 8f4f 	dsb	sy
 8003088:	e7fe      	b.n	8003088 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800308a:	2e02      	cmp	r6, #2
 800308c:	d10b      	bne.n	80030a6 <xQueueGenericSend+0x54>
 800308e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003090:	2b01      	cmp	r3, #1
 8003092:	d008      	beq.n	80030a6 <xQueueGenericSend+0x54>
 8003094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003098:	f383 8811 	msr	BASEPRI, r3
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f3bf 8f4f 	dsb	sy
 80030a4:	e7fe      	b.n	80030a4 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030a6:	f001 f807 	bl	80040b8 <xTaskGetSchedulerState>
 80030aa:	4605      	mov	r5, r0
 80030ac:	b330      	cbz	r0, 80030fc <xQueueGenericSend+0xaa>
 80030ae:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80030b0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80030b4:	f001 fafe 	bl	80046b4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80030b8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80030ba:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80030bc:	429a      	cmp	r2, r3
 80030be:	d301      	bcc.n	80030c4 <xQueueGenericSend+0x72>
 80030c0:	2e02      	cmp	r6, #2
 80030c2:	d127      	bne.n	8003114 <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80030c4:	4632      	mov	r2, r6
 80030c6:	4639      	mov	r1, r7
 80030c8:	4620      	mov	r0, r4
 80030ca:	f7ff fe97 	bl	8002dfc <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030ce:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80030d0:	b11b      	cbz	r3, 80030da <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80030d2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80030d6:	f000 ff53 	bl	8003f80 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80030da:	b148      	cbz	r0, 80030f0 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80030dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80030e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80030e8:	f3bf 8f4f 	dsb	sy
 80030ec:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80030f0:	f001 fb00 	bl	80046f4 <vPortExitCritical>
				return pdPASS;
 80030f4:	2001      	movs	r0, #1
}
 80030f6:	b004      	add	sp, #16
 80030f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80030fc:	9b01      	ldr	r3, [sp, #4]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0d6      	beq.n	80030b0 <xQueueGenericSend+0x5e>
 8003102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003106:	f383 8811 	msr	BASEPRI, r3
 800310a:	f3bf 8f6f 	isb	sy
 800310e:	f3bf 8f4f 	dsb	sy
 8003112:	e7fe      	b.n	8003112 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8003114:	9b01      	ldr	r3, [sp, #4]
 8003116:	b91b      	cbnz	r3, 8003120 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8003118:	f001 faec 	bl	80046f4 <vPortExitCritical>
					return errQUEUE_FULL;
 800311c:	2000      	movs	r0, #0
 800311e:	e7ea      	b.n	80030f6 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8003120:	b915      	cbnz	r5, 8003128 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003122:	a802      	add	r0, sp, #8
 8003124:	f000 ff6e 	bl	8004004 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003128:	f001 fae4 	bl	80046f4 <vPortExitCritical>
		vTaskSuspendAll();
 800312c:	f000 fcbc 	bl	8003aa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003130:	f001 fac0 	bl	80046b4 <vPortEnterCritical>
 8003134:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003138:	2bff      	cmp	r3, #255	@ 0xff
 800313a:	bf08      	it	eq
 800313c:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8003140:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003144:	2bff      	cmp	r3, #255	@ 0xff
 8003146:	bf08      	it	eq
 8003148:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 800314c:	f001 fad2 	bl	80046f4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003150:	a901      	add	r1, sp, #4
 8003152:	a802      	add	r0, sp, #8
 8003154:	f000 ff62 	bl	800401c <xTaskCheckForTimeOut>
 8003158:	bb38      	cbnz	r0, 80031aa <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800315a:	f001 faab 	bl	80046b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800315e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003160:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003162:	429a      	cmp	r2, r3
 8003164:	d10e      	bne.n	8003184 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8003166:	f001 fac5 	bl	80046f4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800316a:	9901      	ldr	r1, [sp, #4]
 800316c:	f104 0010 	add.w	r0, r4, #16
 8003170:	f000 fecc 	bl	8003f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003174:	4620      	mov	r0, r4
 8003176:	f7ff fe88 	bl	8002e8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800317a:	f000 fd3d 	bl	8003bf8 <xTaskResumeAll>
 800317e:	b148      	cbz	r0, 8003194 <xQueueGenericSend+0x142>
 8003180:	2501      	movs	r5, #1
 8003182:	e797      	b.n	80030b4 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8003184:	f001 fab6 	bl	80046f4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8003188:	4620      	mov	r0, r4
 800318a:	f7ff fe7e 	bl	8002e8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800318e:	f000 fd33 	bl	8003bf8 <xTaskResumeAll>
 8003192:	e7f5      	b.n	8003180 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8003194:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003198:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800319c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80031a0:	f3bf 8f4f 	dsb	sy
 80031a4:	f3bf 8f6f 	isb	sy
 80031a8:	e7ea      	b.n	8003180 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 80031aa:	4620      	mov	r0, r4
 80031ac:	f7ff fe6d 	bl	8002e8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80031b0:	f000 fd22 	bl	8003bf8 <xTaskResumeAll>
			return errQUEUE_FULL;
 80031b4:	e7b2      	b.n	800311c <xQueueGenericSend+0xca>

080031b6 <xQueueGenericSendFromISR>:
{
 80031b6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031ba:	4689      	mov	r9, r1
 80031bc:	4617      	mov	r7, r2
 80031be:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80031c0:	4604      	mov	r4, r0
 80031c2:	b940      	cbnz	r0, 80031d6 <xQueueGenericSendFromISR+0x20>
 80031c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031c8:	f383 8811 	msr	BASEPRI, r3
 80031cc:	f3bf 8f6f 	isb	sy
 80031d0:	f3bf 8f4f 	dsb	sy
 80031d4:	e7fe      	b.n	80031d4 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80031d6:	b951      	cbnz	r1, 80031ee <xQueueGenericSendFromISR+0x38>
 80031d8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80031da:	b143      	cbz	r3, 80031ee <xQueueGenericSendFromISR+0x38>
 80031dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031e0:	f383 8811 	msr	BASEPRI, r3
 80031e4:	f3bf 8f6f 	isb	sy
 80031e8:	f3bf 8f4f 	dsb	sy
 80031ec:	e7fe      	b.n	80031ec <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80031ee:	2e02      	cmp	r6, #2
 80031f0:	d10b      	bne.n	800320a <xQueueGenericSendFromISR+0x54>
 80031f2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d008      	beq.n	800320a <xQueueGenericSendFromISR+0x54>
 80031f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	e7fe      	b.n	8003208 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800320a:	f001 fb2b 	bl	8004864 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800320e:	f3ef 8811 	mrs	r8, BASEPRI
 8003212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003216:	f383 8811 	msr	BASEPRI, r3
 800321a:	f3bf 8f6f 	isb	sy
 800321e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003222:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8003224:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8003226:	429a      	cmp	r2, r3
 8003228:	d301      	bcc.n	800322e <xQueueGenericSendFromISR+0x78>
 800322a:	2e02      	cmp	r6, #2
 800322c:	d11d      	bne.n	800326a <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800322e:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003232:	4632      	mov	r2, r6
 8003234:	4649      	mov	r1, r9
 8003236:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8003238:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800323a:	f7ff fddf 	bl	8002dfc <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800323e:	1c6b      	adds	r3, r5, #1
 8003240:	d10e      	bne.n	8003260 <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003242:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003244:	b13b      	cbz	r3, 8003256 <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003246:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800324a:	f000 fe99 	bl	8003f80 <xTaskRemoveFromEventList>
 800324e:	b110      	cbz	r0, 8003256 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8003250:	b10f      	cbz	r7, 8003256 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003252:	2301      	movs	r3, #1
 8003254:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8003256:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003258:	f388 8811 	msr	BASEPRI, r8
}
 800325c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003260:	3501      	adds	r5, #1
 8003262:	b26d      	sxtb	r5, r5
 8003264:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8003268:	e7f5      	b.n	8003256 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 800326a:	2000      	movs	r0, #0
 800326c:	e7f4      	b.n	8003258 <xQueueGenericSendFromISR+0xa2>

0800326e <xQueueReceive>:
{
 800326e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003272:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 8003274:	4604      	mov	r4, r0
{
 8003276:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8003278:	b940      	cbnz	r0, 800328c <xQueueReceive+0x1e>
	__asm volatile
 800327a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327e:	f383 8811 	msr	BASEPRI, r3
 8003282:	f3bf 8f6f 	isb	sy
 8003286:	f3bf 8f4f 	dsb	sy
 800328a:	e7fe      	b.n	800328a <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800328c:	b951      	cbnz	r1, 80032a4 <xQueueReceive+0x36>
 800328e:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8003290:	b143      	cbz	r3, 80032a4 <xQueueReceive+0x36>
 8003292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003296:	f383 8811 	msr	BASEPRI, r3
 800329a:	f3bf 8f6f 	isb	sy
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	e7fe      	b.n	80032a2 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032a4:	f000 ff08 	bl	80040b8 <xTaskGetSchedulerState>
 80032a8:	4605      	mov	r5, r0
 80032aa:	b318      	cbz	r0, 80032f4 <xQueueReceive+0x86>
 80032ac:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 80032ae:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 80032b2:	f001 f9ff 	bl	80046b4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032b6:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80032b8:	b347      	cbz	r7, 800330c <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032ba:	4631      	mov	r1, r6
 80032bc:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032be:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80032c0:	f7ff fdcf 	bl	8002e62 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80032c4:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80032c6:	6923      	ldr	r3, [r4, #16]
 80032c8:	b173      	cbz	r3, 80032e8 <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80032ca:	f104 0010 	add.w	r0, r4, #16
 80032ce:	f000 fe57 	bl	8003f80 <xTaskRemoveFromEventList>
 80032d2:	b148      	cbz	r0, 80032e8 <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 80032d4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80032d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032dc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80032e8:	f001 fa04 	bl	80046f4 <vPortExitCritical>
				return pdPASS;
 80032ec:	2001      	movs	r0, #1
}
 80032ee:	b004      	add	sp, #16
 80032f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80032f4:	9b01      	ldr	r3, [sp, #4]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d0d9      	beq.n	80032ae <xQueueReceive+0x40>
 80032fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032fe:	f383 8811 	msr	BASEPRI, r3
 8003302:	f3bf 8f6f 	isb	sy
 8003306:	f3bf 8f4f 	dsb	sy
 800330a:	e7fe      	b.n	800330a <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800330c:	9b01      	ldr	r3, [sp, #4]
 800330e:	b91b      	cbnz	r3, 8003318 <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8003310:	f001 f9f0 	bl	80046f4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8003314:	2000      	movs	r0, #0
 8003316:	e7ea      	b.n	80032ee <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8003318:	b915      	cbnz	r5, 8003320 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800331a:	a802      	add	r0, sp, #8
 800331c:	f000 fe72 	bl	8004004 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8003320:	f001 f9e8 	bl	80046f4 <vPortExitCritical>
		vTaskSuspendAll();
 8003324:	f000 fbc0 	bl	8003aa8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003328:	f001 f9c4 	bl	80046b4 <vPortEnterCritical>
 800332c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003330:	2bff      	cmp	r3, #255	@ 0xff
 8003332:	bf08      	it	eq
 8003334:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8003338:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800333c:	2bff      	cmp	r3, #255	@ 0xff
 800333e:	bf08      	it	eq
 8003340:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8003344:	f001 f9d6 	bl	80046f4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003348:	a901      	add	r1, sp, #4
 800334a:	a802      	add	r0, sp, #8
 800334c:	f000 fe66 	bl	800401c <xTaskCheckForTimeOut>
 8003350:	bb00      	cbnz	r0, 8003394 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003352:	4620      	mov	r0, r4
 8003354:	f7ff fd47 	bl	8002de6 <prvIsQueueEmpty>
 8003358:	b1b0      	cbz	r0, 8003388 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800335a:	9901      	ldr	r1, [sp, #4]
 800335c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8003360:	f000 fdd4 	bl	8003f0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003364:	4620      	mov	r0, r4
 8003366:	f7ff fd90 	bl	8002e8a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800336a:	f000 fc45 	bl	8003bf8 <xTaskResumeAll>
 800336e:	b948      	cbnz	r0, 8003384 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8003370:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003374:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003378:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	f3bf 8f6f 	isb	sy
 8003384:	2501      	movs	r5, #1
 8003386:	e794      	b.n	80032b2 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8003388:	4620      	mov	r0, r4
 800338a:	f7ff fd7e 	bl	8002e8a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800338e:	f000 fc33 	bl	8003bf8 <xTaskResumeAll>
 8003392:	e7f7      	b.n	8003384 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8003394:	4620      	mov	r0, r4
 8003396:	f7ff fd78 	bl	8002e8a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800339a:	f000 fc2d 	bl	8003bf8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800339e:	4620      	mov	r0, r4
 80033a0:	f7ff fd21 	bl	8002de6 <prvIsQueueEmpty>
 80033a4:	2800      	cmp	r0, #0
 80033a6:	d0ed      	beq.n	8003384 <xQueueReceive+0x116>
 80033a8:	e7b4      	b.n	8003314 <xQueueReceive+0xa6>

080033aa <xQueueReceiveFromISR>:
{
 80033aa:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033ae:	4689      	mov	r9, r1
 80033b0:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 80033b2:	4604      	mov	r4, r0
 80033b4:	b940      	cbnz	r0, 80033c8 <xQueueReceiveFromISR+0x1e>
 80033b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ba:	f383 8811 	msr	BASEPRI, r3
 80033be:	f3bf 8f6f 	isb	sy
 80033c2:	f3bf 8f4f 	dsb	sy
 80033c6:	e7fe      	b.n	80033c6 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80033c8:	b951      	cbnz	r1, 80033e0 <xQueueReceiveFromISR+0x36>
 80033ca:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80033cc:	b143      	cbz	r3, 80033e0 <xQueueReceiveFromISR+0x36>
 80033ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033d2:	f383 8811 	msr	BASEPRI, r3
 80033d6:	f3bf 8f6f 	isb	sy
 80033da:	f3bf 8f4f 	dsb	sy
 80033de:	e7fe      	b.n	80033de <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80033e0:	f001 fa40 	bl	8004864 <vPortValidateInterruptPriority>
	__asm volatile
 80033e4:	f3ef 8711 	mrs	r7, BASEPRI
 80033e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033ec:	f383 8811 	msr	BASEPRI, r3
 80033f0:	f3bf 8f6f 	isb	sy
 80033f4:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033f8:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80033fa:	b30d      	cbz	r5, 8003440 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 80033fc:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003400:	4649      	mov	r1, r9
 8003402:	4620      	mov	r0, r4
			const int8_t cRxLock = pxQueue->cRxLock;
 8003404:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003406:	f7ff fd2c 	bl	8002e62 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800340a:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 800340c:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800340e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8003410:	d111      	bne.n	8003436 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003412:	6923      	ldr	r3, [r4, #16]
 8003414:	b153      	cbz	r3, 800342c <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003416:	f104 0010 	add.w	r0, r4, #16
 800341a:	f000 fdb1 	bl	8003f80 <xTaskRemoveFromEventList>
 800341e:	b128      	cbz	r0, 800342c <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8003420:	f1b8 0f00 	cmp.w	r8, #0
 8003424:	d002      	beq.n	800342c <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003426:	2301      	movs	r3, #1
 8003428:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800342c:	2001      	movs	r0, #1
	__asm volatile
 800342e:	f387 8811 	msr	BASEPRI, r7
}
 8003432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003436:	3601      	adds	r6, #1
 8003438:	b276      	sxtb	r6, r6
 800343a:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800343e:	e7f5      	b.n	800342c <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8003440:	4628      	mov	r0, r5
 8003442:	e7f4      	b.n	800342e <xQueueReceiveFromISR+0x84>

08003444 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003444:	2300      	movs	r3, #0
	{
 8003446:	b530      	push	{r4, r5, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003448:	4a06      	ldr	r2, [pc, #24]	@ (8003464 <vQueueAddToRegistry+0x20>)
 800344a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800344e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8003452:	b91d      	cbnz	r5, 800345c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003454:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003458:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800345a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800345c:	3301      	adds	r3, #1
 800345e:	2b08      	cmp	r3, #8
 8003460:	d1f3      	bne.n	800344a <vQueueAddToRegistry+0x6>
 8003462:	e7fa      	b.n	800345a <vQueueAddToRegistry+0x16>
 8003464:	20000bec 	.word	0x20000bec

08003468 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003468:	b570      	push	{r4, r5, r6, lr}
 800346a:	4604      	mov	r4, r0
 800346c:	460d      	mov	r5, r1
 800346e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003470:	f001 f920 	bl	80046b4 <vPortEnterCritical>
 8003474:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8003478:	2bff      	cmp	r3, #255	@ 0xff
 800347a:	bf04      	itt	eq
 800347c:	2300      	moveq	r3, #0
 800347e:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8003482:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8003486:	2bff      	cmp	r3, #255	@ 0xff
 8003488:	bf04      	itt	eq
 800348a:	2300      	moveq	r3, #0
 800348c:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8003490:	f001 f930 	bl	80046f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003494:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8003496:	b92b      	cbnz	r3, 80034a4 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003498:	4632      	mov	r2, r6
 800349a:	4629      	mov	r1, r5
 800349c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80034a0:	f000 fd4e 	bl	8003f40 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034a4:	4620      	mov	r0, r4
	}
 80034a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 80034aa:	f7ff bcee 	b.w	8002e8a <prvUnlockQueue>
	...

080034b0 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80034b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80034b4:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80034b6:	f001 f8fd 	bl	80046b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80034ba:	4b2f      	ldr	r3, [pc, #188]	@ (8003578 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 80034bc:	4e2f      	ldr	r6, [pc, #188]	@ (800357c <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4f2f      	ldr	r7, [pc, #188]	@ (8003580 <prvAddNewTaskToReadyList+0xd0>)
 80034c2:	3201      	adds	r2, #1
 80034c4:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80034c6:	6835      	ldr	r5, [r6, #0]
 80034c8:	2d00      	cmp	r5, #0
 80034ca:	d14a      	bne.n	8003562 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034cc:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d11f      	bne.n	8003514 <prvAddNewTaskToReadyList+0x64>
 80034d4:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034d6:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034d8:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80034da:	f7ff fc44 	bl	8002d66 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034de:	2d07      	cmp	r5, #7
 80034e0:	f108 0814 	add.w	r8, r8, #20
 80034e4:	d1f7      	bne.n	80034d6 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80034e6:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 8003584 <prvAddNewTaskToReadyList+0xd4>
	vListInitialise( &xDelayedTaskList2 );
 80034ea:	4d27      	ldr	r5, [pc, #156]	@ (8003588 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 80034ec:	4640      	mov	r0, r8
 80034ee:	f7ff fc3a 	bl	8002d66 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80034f2:	4628      	mov	r0, r5
 80034f4:	f7ff fc37 	bl	8002d66 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80034f8:	4824      	ldr	r0, [pc, #144]	@ (800358c <prvAddNewTaskToReadyList+0xdc>)
 80034fa:	f7ff fc34 	bl	8002d66 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80034fe:	4824      	ldr	r0, [pc, #144]	@ (8003590 <prvAddNewTaskToReadyList+0xe0>)
 8003500:	f7ff fc31 	bl	8002d66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003504:	4823      	ldr	r0, [pc, #140]	@ (8003594 <prvAddNewTaskToReadyList+0xe4>)
 8003506:	f7ff fc2e 	bl	8002d66 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800350a:	4b23      	ldr	r3, [pc, #140]	@ (8003598 <prvAddNewTaskToReadyList+0xe8>)
 800350c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003510:	4b22      	ldr	r3, [pc, #136]	@ (800359c <prvAddNewTaskToReadyList+0xec>)
 8003512:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8003514:	4a22      	ldr	r2, [pc, #136]	@ (80035a0 <prvAddNewTaskToReadyList+0xf0>)
		prvAddTaskToReadyList( pxNewTCB );
 8003516:	4923      	ldr	r1, [pc, #140]	@ (80035a4 <prvAddNewTaskToReadyList+0xf4>)
		uxTaskNumber++;
 8003518:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800351a:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800351c:	3301      	adds	r3, #1
 800351e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8003520:	2301      	movs	r3, #1
 8003522:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003524:	4093      	lsls	r3, r2
 8003526:	4303      	orrs	r3, r0
 8003528:	2014      	movs	r0, #20
 800352a:	600b      	str	r3, [r1, #0]
 800352c:	fb00 7002 	mla	r0, r0, r2, r7
 8003530:	1d21      	adds	r1, r4, #4
 8003532:	f7ff fc26 	bl	8002d82 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8003536:	f001 f8dd 	bl	80046f4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800353a:	4b1b      	ldr	r3, [pc, #108]	@ (80035a8 <prvAddNewTaskToReadyList+0xf8>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	b173      	cbz	r3, 800355e <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003540:	6833      	ldr	r3, [r6, #0]
 8003542:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003544:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8003546:	429a      	cmp	r2, r3
 8003548:	d209      	bcs.n	800355e <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800354a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800354e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003552:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003556:	f3bf 8f4f 	dsb	sy
 800355a:	f3bf 8f6f 	isb	sy
}
 800355e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8003562:	4b11      	ldr	r3, [pc, #68]	@ (80035a8 <prvAddNewTaskToReadyList+0xf8>)
 8003564:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003566:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8003568:	2a00      	cmp	r2, #0
 800356a:	d1d3      	bne.n	8003514 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800356c:	6832      	ldr	r2, [r6, #0]
 800356e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003570:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8003572:	bf98      	it	ls
 8003574:	6034      	strls	r4, [r6, #0]
 8003576:	e7cd      	b.n	8003514 <prvAddNewTaskToReadyList+0x64>
 8003578:	20000c50 	.word	0x20000c50
 800357c:	20000d50 	.word	0x20000d50
 8003580:	20000cc4 	.word	0x20000cc4
 8003584:	20000cb0 	.word	0x20000cb0
 8003588:	20000c9c 	.word	0x20000c9c
 800358c:	20000c80 	.word	0x20000c80
 8003590:	20000c6c 	.word	0x20000c6c
 8003594:	20000c54 	.word	0x20000c54
 8003598:	20000c98 	.word	0x20000c98
 800359c:	20000c94 	.word	0x20000c94
 80035a0:	20000c34 	.word	0x20000c34
 80035a4:	20000c48 	.word	0x20000c48
 80035a8:	20000c44 	.word	0x20000c44

080035ac <prvAddCurrentTaskToDelayedList>:
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80035ac:	2200      	movs	r2, #0
{
 80035ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
const TickType_t xConstTickCount = xTickCount;
 80035b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003620 <prvAddCurrentTaskToDelayedList+0x74>)
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80035b2:	4d1c      	ldr	r5, [pc, #112]	@ (8003624 <prvAddCurrentTaskToDelayedList+0x78>)
const TickType_t xConstTickCount = xTickCount;
 80035b4:	681c      	ldr	r4, [r3, #0]
{
 80035b6:	4606      	mov	r6, r0
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80035b8:	682b      	ldr	r3, [r5, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035ba:	6828      	ldr	r0, [r5, #0]
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 80035bc:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035c0:	3004      	adds	r0, #4
{
 80035c2:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035c4:	f7ff fbff 	bl	8002dc6 <uxListRemove>
 80035c8:	b940      	cbnz	r0, 80035dc <prvAddCurrentTaskToDelayedList+0x30>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80035ca:	682a      	ldr	r2, [r5, #0]
 80035cc:	4916      	ldr	r1, [pc, #88]	@ (8003628 <prvAddCurrentTaskToDelayedList+0x7c>)
 80035ce:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 80035d0:	2201      	movs	r2, #1
 80035d2:	680b      	ldr	r3, [r1, #0]
 80035d4:	4082      	lsls	r2, r0
 80035d6:	ea23 0302 	bic.w	r3, r3, r2
 80035da:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80035dc:	1c73      	adds	r3, r6, #1
 80035de:	d107      	bne.n	80035f0 <prvAddCurrentTaskToDelayedList+0x44>
 80035e0:	b137      	cbz	r7, 80035f0 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035e2:	6829      	ldr	r1, [r5, #0]
 80035e4:	4811      	ldr	r0, [pc, #68]	@ (800362c <prvAddCurrentTaskToDelayedList+0x80>)
 80035e6:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80035e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035ec:	f7ff bbc9 	b.w	8002d82 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80035f0:	682b      	ldr	r3, [r5, #0]
 80035f2:	19a4      	adds	r4, r4, r6
 80035f4:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80035f6:	d307      	bcc.n	8003608 <prvAddCurrentTaskToDelayedList+0x5c>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80035f8:	4b0d      	ldr	r3, [pc, #52]	@ (8003630 <prvAddCurrentTaskToDelayedList+0x84>)
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	6829      	ldr	r1, [r5, #0]
}
 80035fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003602:	3104      	adds	r1, #4
 8003604:	f7ff bbc8 	b.w	8002d98 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003608:	4b0a      	ldr	r3, [pc, #40]	@ (8003634 <prvAddCurrentTaskToDelayedList+0x88>)
 800360a:	6818      	ldr	r0, [r3, #0]
 800360c:	6829      	ldr	r1, [r5, #0]
 800360e:	3104      	adds	r1, #4
 8003610:	f7ff fbc2 	bl	8002d98 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003614:	4b08      	ldr	r3, [pc, #32]	@ (8003638 <prvAddCurrentTaskToDelayedList+0x8c>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 800361a:	bf88      	it	hi
 800361c:	601c      	strhi	r4, [r3, #0]
}
 800361e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003620:	20000c4c 	.word	0x20000c4c
 8003624:	20000d50 	.word	0x20000d50
 8003628:	20000c48 	.word	0x20000c48
 800362c:	20000c54 	.word	0x20000c54
 8003630:	20000c94 	.word	0x20000c94
 8003634:	20000c98 	.word	0x20000c98
 8003638:	20000c30 	.word	0x20000c30

0800363c <prvTaskIsTaskSuspended>:
		configASSERT( xTask );
 800363c:	b940      	cbnz	r0, 8003650 <prvTaskIsTaskSuspended+0x14>
	__asm volatile
 800363e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003642:	f383 8811 	msr	BASEPRI, r3
 8003646:	f3bf 8f6f 	isb	sy
 800364a:	f3bf 8f4f 	dsb	sy
 800364e:	e7fe      	b.n	800364e <prvTaskIsTaskSuspended+0x12>
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003650:	6942      	ldr	r2, [r0, #20]
 8003652:	4b06      	ldr	r3, [pc, #24]	@ (800366c <prvTaskIsTaskSuspended+0x30>)
 8003654:	429a      	cmp	r2, r3
 8003656:	d107      	bne.n	8003668 <prvTaskIsTaskSuspended+0x2c>
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8003658:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800365a:	4b05      	ldr	r3, [pc, #20]	@ (8003670 <prvTaskIsTaskSuspended+0x34>)
 800365c:	4298      	cmp	r0, r3
 800365e:	d003      	beq.n	8003668 <prvTaskIsTaskSuspended+0x2c>
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003660:	fab0 f080 	clz	r0, r0
 8003664:	0940      	lsrs	r0, r0, #5
 8003666:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
 8003668:	2000      	movs	r0, #0
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800366a:	4770      	bx	lr
 800366c:	20000c54 	.word	0x20000c54
 8003670:	20000c80 	.word	0x20000c80

08003674 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003674:	4a06      	ldr	r2, [pc, #24]	@ (8003690 <prvResetNextTaskUnblockTime+0x1c>)
 8003676:	6813      	ldr	r3, [r2, #0]
 8003678:	6819      	ldr	r1, [r3, #0]
 800367a:	4b06      	ldr	r3, [pc, #24]	@ (8003694 <prvResetNextTaskUnblockTime+0x20>)
 800367c:	b919      	cbnz	r1, 8003686 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800367e:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003682:	601a      	str	r2, [r3, #0]
}
 8003684:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003686:	6812      	ldr	r2, [r2, #0]
 8003688:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800368a:	68d2      	ldr	r2, [r2, #12]
 800368c:	6852      	ldr	r2, [r2, #4]
 800368e:	e7f8      	b.n	8003682 <prvResetNextTaskUnblockTime+0xe>
 8003690:	20000c98 	.word	0x20000c98
 8003694:	20000c30 	.word	0x20000c30

08003698 <prvDeleteTCB>:
	{
 8003698:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800369a:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
	{
 800369e:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80036a0:	b93b      	cbnz	r3, 80036b2 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80036a2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80036a4:	f001 f9c4 	bl	8004a30 <vPortFree>
				vPortFree( pxTCB );
 80036a8:	4620      	mov	r0, r4
	}
 80036aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80036ae:	f001 b9bf 	b.w	8004a30 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d0f9      	beq.n	80036aa <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d008      	beq.n	80036cc <prvDeleteTCB+0x34>
 80036ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036be:	f383 8811 	msr	BASEPRI, r3
 80036c2:	f3bf 8f6f 	isb	sy
 80036c6:	f3bf 8f4f 	dsb	sy
 80036ca:	e7fe      	b.n	80036ca <prvDeleteTCB+0x32>
	}
 80036cc:	bd10      	pop	{r4, pc}
	...

080036d0 <prvIdleTask>:
{
 80036d0:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036d2:	4c13      	ldr	r4, [pc, #76]	@ (8003720 <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80036d4:	4f13      	ldr	r7, [pc, #76]	@ (8003724 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 80036d6:	4d14      	ldr	r5, [pc, #80]	@ (8003728 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	b973      	cbnz	r3, 80036fa <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80036dc:	4b13      	ldr	r3, [pc, #76]	@ (800372c <prvIdleTask+0x5c>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d9f8      	bls.n	80036d6 <prvIdleTask+0x6>
				taskYIELD();
 80036e4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80036e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80036ec:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	f3bf 8f6f 	isb	sy
 80036f8:	e7ed      	b.n	80036d6 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 80036fa:	f000 ffdb 	bl	80046b4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003702:	1d30      	adds	r0, r6, #4
 8003704:	f7ff fb5f 	bl	8002dc6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003708:	682b      	ldr	r3, [r5, #0]
 800370a:	3b01      	subs	r3, #1
 800370c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800370e:	6823      	ldr	r3, [r4, #0]
 8003710:	3b01      	subs	r3, #1
 8003712:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8003714:	f000 ffee 	bl	80046f4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003718:	4630      	mov	r0, r6
 800371a:	f7ff ffbd 	bl	8003698 <prvDeleteTCB>
 800371e:	e7db      	b.n	80036d8 <prvIdleTask+0x8>
 8003720:	20000c68 	.word	0x20000c68
 8003724:	20000c6c 	.word	0x20000c6c
 8003728:	20000c50 	.word	0x20000c50
 800372c:	20000cc4 	.word	0x20000cc4

08003730 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003734:	4607      	mov	r7, r0
 8003736:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	@ 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800373a:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800373e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8003740:	3a01      	subs	r2, #1
 8003742:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003746:	4699      	mov	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003748:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800374c:	1e4b      	subs	r3, r1, #1
 800374e:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8003752:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003754:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003758:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 800375c:	b108      	cbz	r0, 8003762 <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800375e:	428b      	cmp	r3, r1
 8003760:	d1f8      	bne.n	8003754 <prvInitialiseNewTask.constprop.0+0x24>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003762:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003764:	f04f 0a00 	mov.w	sl, #0
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003768:	2d06      	cmp	r5, #6
 800376a:	bf28      	it	cs
 800376c:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800376e:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8003770:	e9c4 5a11 	strd	r5, sl, [r4, #68]	@ 0x44
	pxNewTCB->uxPriority = uxPriority;
 8003774:	62e5      	str	r5, [r4, #44]	@ 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003776:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800377a:	f7ff faff 	bl	8002d7c <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800377e:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003782:	f104 0018 	add.w	r0, r4, #24
 8003786:	f7ff faf9 	bl	8002d7c <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 800378a:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800378e:	464a      	mov	r2, r9
 8003790:	4639      	mov	r1, r7
 8003792:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003794:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003796:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003798:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800379a:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
		pxNewTCB->ucDelayAborted = pdFALSE;
 800379e:	f884 a052 	strb.w	sl, [r4, #82]	@ 0x52
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80037a2:	f000 ff63 	bl	800466c <pxPortInitialiseStack>
 80037a6:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80037a8:	f1b8 0f00 	cmp.w	r8, #0
 80037ac:	d001      	beq.n	80037b2 <prvInitialiseNewTask.constprop.0+0x82>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037ae:	f8c8 4000 	str.w	r4, [r8]
}
 80037b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080037b6 <xTaskCreateStatic>:
	{
 80037b6:	b570      	push	{r4, r5, r6, lr}
 80037b8:	b086      	sub	sp, #24
 80037ba:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80037be:	b945      	cbnz	r5, 80037d2 <xTaskCreateStatic+0x1c>
 80037c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037c4:	f383 8811 	msr	BASEPRI, r3
 80037c8:	f3bf 8f6f 	isb	sy
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	e7fe      	b.n	80037d0 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80037d2:	b944      	cbnz	r4, 80037e6 <xTaskCreateStatic+0x30>
 80037d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d8:	f383 8811 	msr	BASEPRI, r3
 80037dc:	f3bf 8f6f 	isb	sy
 80037e0:	f3bf 8f4f 	dsb	sy
 80037e4:	e7fe      	b.n	80037e4 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80037e6:	2654      	movs	r6, #84	@ 0x54
 80037e8:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 80037ea:	9e05      	ldr	r6, [sp, #20]
 80037ec:	2e54      	cmp	r6, #84	@ 0x54
 80037ee:	d008      	beq.n	8003802 <xTaskCreateStatic+0x4c>
 80037f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f4:	f383 8811 	msr	BASEPRI, r3
 80037f8:	f3bf 8f6f 	isb	sy
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	e7fe      	b.n	8003800 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003802:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003804:	2502      	movs	r5, #2
 8003806:	f884 5051 	strb.w	r5, [r4, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800380a:	ad04      	add	r5, sp, #16
 800380c:	9501      	str	r5, [sp, #4]
 800380e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8003810:	9402      	str	r4, [sp, #8]
 8003812:	9500      	str	r5, [sp, #0]
 8003814:	f7ff ff8c 	bl	8003730 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003818:	4620      	mov	r0, r4
 800381a:	f7ff fe49 	bl	80034b0 <prvAddNewTaskToReadyList>
	}
 800381e:	9804      	ldr	r0, [sp, #16]
 8003820:	b006      	add	sp, #24
 8003822:	bd70      	pop	{r4, r5, r6, pc}

08003824 <xTaskCreate>:
	{
 8003824:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003828:	4607      	mov	r7, r0
 800382a:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800382c:	0090      	lsls	r0, r2, #2
	{
 800382e:	4688      	mov	r8, r1
 8003830:	4616      	mov	r6, r2
 8003832:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003834:	f001 f86a 	bl	800490c <pvPortMalloc>
			if( pxStack != NULL )
 8003838:	4605      	mov	r5, r0
 800383a:	b920      	cbnz	r0, 8003846 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800383c:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8003840:	b005      	add	sp, #20
 8003842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003846:	2054      	movs	r0, #84	@ 0x54
 8003848:	f001 f860 	bl	800490c <pvPortMalloc>
				if( pxNewTCB != NULL )
 800384c:	4604      	mov	r4, r0
 800384e:	b198      	cbz	r0, 8003878 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003850:	2300      	movs	r3, #0
 8003852:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003856:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8003858:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800385a:	9301      	str	r3, [sp, #4]
 800385c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800385e:	4632      	mov	r2, r6
 8003860:	4641      	mov	r1, r8
 8003862:	9002      	str	r0, [sp, #8]
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	4638      	mov	r0, r7
 8003868:	464b      	mov	r3, r9
 800386a:	f7ff ff61 	bl	8003730 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800386e:	4620      	mov	r0, r4
 8003870:	f7ff fe1e 	bl	80034b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003874:	2001      	movs	r0, #1
 8003876:	e7e3      	b.n	8003840 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 8003878:	4628      	mov	r0, r5
 800387a:	f001 f8d9 	bl	8004a30 <vPortFree>
		if( pxNewTCB != NULL )
 800387e:	e7dd      	b.n	800383c <xTaskCreate+0x18>

08003880 <eTaskGetState>:
	{
 8003880:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxTCB );
 8003882:	4604      	mov	r4, r0
 8003884:	b940      	cbnz	r0, 8003898 <eTaskGetState+0x18>
 8003886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800388a:	f383 8811 	msr	BASEPRI, r3
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	e7fe      	b.n	8003896 <eTaskGetState+0x16>
		if( pxTCB == pxCurrentTCB )
 8003898:	4b13      	ldr	r3, [pc, #76]	@ (80038e8 <eTaskGetState+0x68>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4283      	cmp	r3, r0
 800389e:	d01d      	beq.n	80038dc <eTaskGetState+0x5c>
			taskENTER_CRITICAL();
 80038a0:	f000 ff08 	bl	80046b4 <vPortEnterCritical>
				pxStateList = ( List_t * ) listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80038a4:	6965      	ldr	r5, [r4, #20]
			taskEXIT_CRITICAL();
 80038a6:	f000 ff25 	bl	80046f4 <vPortExitCritical>
			if( ( pxStateList == pxDelayedTaskList ) || ( pxStateList == pxOverflowDelayedTaskList ) )
 80038aa:	4b10      	ldr	r3, [pc, #64]	@ (80038ec <eTaskGetState+0x6c>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	429d      	cmp	r5, r3
 80038b0:	d016      	beq.n	80038e0 <eTaskGetState+0x60>
 80038b2:	4b0f      	ldr	r3, [pc, #60]	@ (80038f0 <eTaskGetState+0x70>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	429d      	cmp	r5, r3
 80038b8:	d012      	beq.n	80038e0 <eTaskGetState+0x60>
				else if( pxStateList == &xSuspendedTaskList )
 80038ba:	4b0e      	ldr	r3, [pc, #56]	@ (80038f4 <eTaskGetState+0x74>)
 80038bc:	429d      	cmp	r5, r3
 80038be:	d105      	bne.n	80038cc <eTaskGetState+0x4c>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80038c0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
						eReturn = eSuspended;
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	bf14      	ite	ne
 80038c6:	2002      	movne	r0, #2
 80038c8:	2003      	moveq	r0, #3
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80038ca:	bd38      	pop	{r3, r4, r5, pc}
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 80038cc:	4b0a      	ldr	r3, [pc, #40]	@ (80038f8 <eTaskGetState+0x78>)
 80038ce:	429d      	cmp	r5, r3
 80038d0:	d008      	beq.n	80038e4 <eTaskGetState+0x64>
					eReturn = eDeleted;
 80038d2:	2d00      	cmp	r5, #0
 80038d4:	bf14      	ite	ne
 80038d6:	2001      	movne	r0, #1
 80038d8:	2004      	moveq	r0, #4
 80038da:	e7f6      	b.n	80038ca <eTaskGetState+0x4a>
			eReturn = eRunning;
 80038dc:	2000      	movs	r0, #0
 80038de:	e7f4      	b.n	80038ca <eTaskGetState+0x4a>
				eReturn = eBlocked;
 80038e0:	2002      	movs	r0, #2
 80038e2:	e7f2      	b.n	80038ca <eTaskGetState+0x4a>
					eReturn = eDeleted;
 80038e4:	2004      	movs	r0, #4
 80038e6:	e7f0      	b.n	80038ca <eTaskGetState+0x4a>
 80038e8:	20000d50 	.word	0x20000d50
 80038ec:	20000c98 	.word	0x20000c98
 80038f0:	20000c94 	.word	0x20000c94
 80038f4:	20000c54 	.word	0x20000c54
 80038f8:	20000c6c 	.word	0x20000c6c

080038fc <vTaskResume>:
	{
 80038fc:	b570      	push	{r4, r5, r6, lr}
		configASSERT( xTaskToResume );
 80038fe:	4604      	mov	r4, r0
 8003900:	b940      	cbnz	r0, 8003914 <vTaskResume+0x18>
 8003902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003906:	f383 8811 	msr	BASEPRI, r3
 800390a:	f3bf 8f6f 	isb	sy
 800390e:	f3bf 8f4f 	dsb	sy
 8003912:	e7fe      	b.n	8003912 <vTaskResume+0x16>
		if( ( pxTCB != NULL ) && ( pxTCB != pxCurrentTCB ) )
 8003914:	4d17      	ldr	r5, [pc, #92]	@ (8003974 <vTaskResume+0x78>)
 8003916:	682b      	ldr	r3, [r5, #0]
 8003918:	4283      	cmp	r3, r0
 800391a:	d02a      	beq.n	8003972 <vTaskResume+0x76>
			taskENTER_CRITICAL();
 800391c:	f000 feca 	bl	80046b4 <vPortEnterCritical>
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003920:	4620      	mov	r0, r4
 8003922:	f7ff fe8b 	bl	800363c <prvTaskIsTaskSuspended>
 8003926:	b300      	cbz	r0, 800396a <vTaskResume+0x6e>
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8003928:	1d26      	adds	r6, r4, #4
 800392a:	4630      	mov	r0, r6
 800392c:	f7ff fa4b 	bl	8002dc6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003930:	2301      	movs	r3, #1
 8003932:	4911      	ldr	r1, [pc, #68]	@ (8003978 <vTaskResume+0x7c>)
 8003934:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003936:	6808      	ldr	r0, [r1, #0]
 8003938:	4093      	lsls	r3, r2
 800393a:	4303      	orrs	r3, r0
 800393c:	2014      	movs	r0, #20
 800393e:	600b      	str	r3, [r1, #0]
 8003940:	4b0e      	ldr	r3, [pc, #56]	@ (800397c <vTaskResume+0x80>)
 8003942:	4631      	mov	r1, r6
 8003944:	fb00 3002 	mla	r0, r0, r2, r3
 8003948:	f7ff fa1b 	bl	8002d82 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800394c:	682b      	ldr	r3, [r5, #0]
 800394e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003952:	429a      	cmp	r2, r3
 8003954:	d309      	bcc.n	800396a <vTaskResume+0x6e>
						taskYIELD_IF_USING_PREEMPTION();
 8003956:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800395a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800395e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003962:	f3bf 8f4f 	dsb	sy
 8003966:	f3bf 8f6f 	isb	sy
	}
 800396a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			taskEXIT_CRITICAL();
 800396e:	f000 bec1 	b.w	80046f4 <vPortExitCritical>
	}
 8003972:	bd70      	pop	{r4, r5, r6, pc}
 8003974:	20000d50 	.word	0x20000d50
 8003978:	20000c48 	.word	0x20000c48
 800397c:	20000cc4 	.word	0x20000cc4

08003980 <xTaskResumeFromISR>:
	{
 8003980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		configASSERT( xTaskToResume );
 8003982:	4604      	mov	r4, r0
 8003984:	b940      	cbnz	r0, 8003998 <xTaskResumeFromISR+0x18>
 8003986:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800398a:	f383 8811 	msr	BASEPRI, r3
 800398e:	f3bf 8f6f 	isb	sy
 8003992:	f3bf 8f4f 	dsb	sy
 8003996:	e7fe      	b.n	8003996 <xTaskResumeFromISR+0x16>
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003998:	f000 ff64 	bl	8004864 <vPortValidateInterruptPriority>
	__asm volatile
 800399c:	f3ef 8711 	mrs	r7, BASEPRI
 80039a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039a4:	f383 8811 	msr	BASEPRI, r3
 80039a8:	f3bf 8f6f 	isb	sy
 80039ac:	f3bf 8f4f 	dsb	sy
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 80039b0:	4620      	mov	r0, r4
 80039b2:	f7ff fe43 	bl	800363c <prvTaskIsTaskSuspended>
 80039b6:	b328      	cbz	r0, 8003a04 <xTaskResumeFromISR+0x84>
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039b8:	4b13      	ldr	r3, [pc, #76]	@ (8003a08 <xTaskResumeFromISR+0x88>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	b9eb      	cbnz	r3, 80039fa <xTaskResumeFromISR+0x7a>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039be:	4b13      	ldr	r3, [pc, #76]	@ (8003a0c <xTaskResumeFromISR+0x8c>)
 80039c0:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 80039c2:	681b      	ldr	r3, [r3, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039c4:	1d26      	adds	r6, r4, #4
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039c8:	4630      	mov	r0, r6
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80039ca:	429d      	cmp	r5, r3
 80039cc:	bf34      	ite	cc
 80039ce:	2500      	movcc	r5, #0
 80039d0:	2501      	movcs	r5, #1
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80039d2:	f7ff f9f8 	bl	8002dc6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80039d6:	2301      	movs	r3, #1
 80039d8:	490d      	ldr	r1, [pc, #52]	@ (8003a10 <xTaskResumeFromISR+0x90>)
 80039da:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80039dc:	6808      	ldr	r0, [r1, #0]
 80039de:	4093      	lsls	r3, r2
 80039e0:	4303      	orrs	r3, r0
 80039e2:	2014      	movs	r0, #20
 80039e4:	600b      	str	r3, [r1, #0]
 80039e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003a14 <xTaskResumeFromISR+0x94>)
 80039e8:	4631      	mov	r1, r6
 80039ea:	fb00 3002 	mla	r0, r0, r2, r3
 80039ee:	f7ff f9c8 	bl	8002d82 <vListInsertEnd>
	__asm volatile
 80039f2:	f387 8811 	msr	BASEPRI, r7
	}
 80039f6:	4628      	mov	r0, r5
 80039f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80039fa:	4807      	ldr	r0, [pc, #28]	@ (8003a18 <xTaskResumeFromISR+0x98>)
 80039fc:	f104 0118 	add.w	r1, r4, #24
 8003a00:	f7ff f9bf 	bl	8002d82 <vListInsertEnd>
	BaseType_t xYieldRequired = pdFALSE;
 8003a04:	2500      	movs	r5, #0
 8003a06:	e7f4      	b.n	80039f2 <xTaskResumeFromISR+0x72>
 8003a08:	20000c2c 	.word	0x20000c2c
 8003a0c:	20000d50 	.word	0x20000d50
 8003a10:	20000c48 	.word	0x20000c48
 8003a14:	20000cc4 	.word	0x20000cc4
 8003a18:	20000c80 	.word	0x20000c80

08003a1c <vTaskStartScheduler>:
{
 8003a1c:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a1e:	2400      	movs	r4, #0
{
 8003a20:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a22:	aa07      	add	r2, sp, #28
 8003a24:	a906      	add	r1, sp, #24
 8003a26:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a28:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a2c:	f7fc fd6c 	bl	8000508 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a30:	9b05      	ldr	r3, [sp, #20]
 8003a32:	9a07      	ldr	r2, [sp, #28]
 8003a34:	9302      	str	r3, [sp, #8]
 8003a36:	9b06      	ldr	r3, [sp, #24]
 8003a38:	4916      	ldr	r1, [pc, #88]	@ (8003a94 <vTaskStartScheduler+0x78>)
 8003a3a:	e9cd 4300 	strd	r4, r3, [sp]
 8003a3e:	4816      	ldr	r0, [pc, #88]	@ (8003a98 <vTaskStartScheduler+0x7c>)
 8003a40:	4623      	mov	r3, r4
 8003a42:	f7ff feb8 	bl	80037b6 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 8003a46:	b318      	cbz	r0, 8003a90 <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 8003a48:	f000 fbe8 	bl	800421c <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8003a4c:	2801      	cmp	r0, #1
 8003a4e:	d114      	bne.n	8003a7a <vTaskStartScheduler+0x5e>
	__asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8003a60:	f04f 32ff 	mov.w	r2, #4294967295
 8003a64:	4b0d      	ldr	r3, [pc, #52]	@ (8003a9c <vTaskStartScheduler+0x80>)
 8003a66:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003a68:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa0 <vTaskStartScheduler+0x84>)
 8003a6a:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003aa4 <vTaskStartScheduler+0x88>)
 8003a6e:	601c      	str	r4, [r3, #0]
}
 8003a70:	b008      	add	sp, #32
 8003a72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8003a76:	f000 be9d 	b.w	80047b4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a7a:	3001      	adds	r0, #1
 8003a7c:	d108      	bne.n	8003a90 <vTaskStartScheduler+0x74>
 8003a7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a82:	f383 8811 	msr	BASEPRI, r3
 8003a86:	f3bf 8f6f 	isb	sy
 8003a8a:	f3bf 8f4f 	dsb	sy
 8003a8e:	e7fe      	b.n	8003a8e <vTaskStartScheduler+0x72>
}
 8003a90:	b008      	add	sp, #32
 8003a92:	bd10      	pop	{r4, pc}
 8003a94:	08007602 	.word	0x08007602
 8003a98:	080036d1 	.word	0x080036d1
 8003a9c:	20000c30 	.word	0x20000c30
 8003aa0:	20000c44 	.word	0x20000c44
 8003aa4:	20000c4c 	.word	0x20000c4c

08003aa8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003aa8:	4a02      	ldr	r2, [pc, #8]	@ (8003ab4 <vTaskSuspendAll+0xc>)
 8003aaa:	6813      	ldr	r3, [r2, #0]
 8003aac:	3301      	adds	r3, #1
 8003aae:	6013      	str	r3, [r2, #0]
}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	20000c2c 	.word	0x20000c2c

08003ab8 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003ab8:	4b01      	ldr	r3, [pc, #4]	@ (8003ac0 <xTaskGetTickCount+0x8>)
 8003aba:	6818      	ldr	r0, [r3, #0]
}
 8003abc:	4770      	bx	lr
 8003abe:	bf00      	nop
 8003ac0:	20000c4c 	.word	0x20000c4c

08003ac4 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003ac4:	4b41      	ldr	r3, [pc, #260]	@ (8003bcc <xTaskIncrementTick+0x108>)
{
 8003ac6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d175      	bne.n	8003bbc <xTaskIncrementTick+0xf8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ad0:	4b3f      	ldr	r3, [pc, #252]	@ (8003bd0 <xTaskIncrementTick+0x10c>)
 8003ad2:	681c      	ldr	r4, [r3, #0]
 8003ad4:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003ad6:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003ad8:	b9bc      	cbnz	r4, 8003b0a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003ada:	4b3e      	ldr	r3, [pc, #248]	@ (8003bd4 <xTaskIncrementTick+0x110>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	6812      	ldr	r2, [r2, #0]
 8003ae0:	b142      	cbz	r2, 8003af4 <xTaskIncrementTick+0x30>
 8003ae2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ae6:	f383 8811 	msr	BASEPRI, r3
 8003aea:	f3bf 8f6f 	isb	sy
 8003aee:	f3bf 8f4f 	dsb	sy
 8003af2:	e7fe      	b.n	8003af2 <xTaskIncrementTick+0x2e>
 8003af4:	4a38      	ldr	r2, [pc, #224]	@ (8003bd8 <xTaskIncrementTick+0x114>)
 8003af6:	6819      	ldr	r1, [r3, #0]
 8003af8:	6810      	ldr	r0, [r2, #0]
 8003afa:	6018      	str	r0, [r3, #0]
 8003afc:	6011      	str	r1, [r2, #0]
 8003afe:	4a37      	ldr	r2, [pc, #220]	@ (8003bdc <xTaskIncrementTick+0x118>)
 8003b00:	6813      	ldr	r3, [r2, #0]
 8003b02:	3301      	adds	r3, #1
 8003b04:	6013      	str	r3, [r2, #0]
 8003b06:	f7ff fdb5 	bl	8003674 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b0a:	4d35      	ldr	r5, [pc, #212]	@ (8003be0 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 8003b0c:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b10:	682b      	ldr	r3, [r5, #0]
 8003b12:	4e34      	ldr	r6, [pc, #208]	@ (8003be4 <xTaskIncrementTick+0x120>)
 8003b14:	42a3      	cmp	r3, r4
 8003b16:	4f34      	ldr	r7, [pc, #208]	@ (8003be8 <xTaskIncrementTick+0x124>)
 8003b18:	d911      	bls.n	8003b3e <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b1a:	2114      	movs	r1, #20
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b20:	434a      	muls	r2, r1
 8003b22:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 8003b24:	2a02      	cmp	r2, #2
 8003b26:	bf28      	it	cs
 8003b28:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8003b2c:	4a2f      	ldr	r2, [pc, #188]	@ (8003bec <xTaskIncrementTick+0x128>)
 8003b2e:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8003b30:	2a00      	cmp	r2, #0
}
 8003b32:	bf0c      	ite	eq
 8003b34:	4658      	moveq	r0, fp
 8003b36:	2001      	movne	r0, #1
 8003b38:	b003      	add	sp, #12
 8003b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b3e:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8003bd4 <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 8003b42:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8003bf0 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b46:	f8da 2000 	ldr.w	r2, [sl]
 8003b4a:	6812      	ldr	r2, [r2, #0]
 8003b4c:	b91a      	cbnz	r2, 8003b56 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003b52:	602a      	str	r2, [r5, #0]
					break;
 8003b54:	e7e1      	b.n	8003b1a <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003b56:	f8da 2000 	ldr.w	r2, [sl]
 8003b5a:	68d2      	ldr	r2, [r2, #12]
 8003b5c:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003b60:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8003b64:	428c      	cmp	r4, r1
 8003b66:	d201      	bcs.n	8003b6c <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8003b68:	6029      	str	r1, [r5, #0]
						break;
 8003b6a:	e7d6      	b.n	8003b1a <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b6c:	f108 0304 	add.w	r3, r8, #4
 8003b70:	4618      	mov	r0, r3
 8003b72:	9301      	str	r3, [sp, #4]
 8003b74:	f7ff f927 	bl	8002dc6 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b78:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8003b7c:	b119      	cbz	r1, 8003b86 <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b7e:	f108 0018 	add.w	r0, r8, #24
 8003b82:	f7ff f920 	bl	8002dc6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b86:	2201      	movs	r2, #1
 8003b88:	f04f 0c14 	mov.w	ip, #20
 8003b8c:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8003b90:	f8d9 3000 	ldr.w	r3, [r9]
 8003b94:	fa02 f100 	lsl.w	r1, r2, r0
 8003b98:	4319      	orrs	r1, r3
 8003b9a:	fb0c 6000 	mla	r0, ip, r0, r6
 8003b9e:	f8c9 1000 	str.w	r1, [r9]
 8003ba2:	f108 0104 	add.w	r1, r8, #4
 8003ba6:	f7ff f8ec 	bl	8002d82 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003baa:	6838      	ldr	r0, [r7, #0]
 8003bac:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8003bb0:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8003bb2:	4291      	cmp	r1, r2
 8003bb4:	bf28      	it	cs
 8003bb6:	f04f 0b01 	movcs.w	fp, #1
 8003bba:	e7c4      	b.n	8003b46 <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 8003bbc:	4a0d      	ldr	r2, [pc, #52]	@ (8003bf4 <xTaskIncrementTick+0x130>)
BaseType_t xSwitchRequired = pdFALSE;
 8003bbe:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8003bc2:	6813      	ldr	r3, [r2, #0]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	6013      	str	r3, [r2, #0]
 8003bc8:	e7b0      	b.n	8003b2c <xTaskIncrementTick+0x68>
 8003bca:	bf00      	nop
 8003bcc:	20000c2c 	.word	0x20000c2c
 8003bd0:	20000c4c 	.word	0x20000c4c
 8003bd4:	20000c98 	.word	0x20000c98
 8003bd8:	20000c94 	.word	0x20000c94
 8003bdc:	20000c38 	.word	0x20000c38
 8003be0:	20000c30 	.word	0x20000c30
 8003be4:	20000cc4 	.word	0x20000cc4
 8003be8:	20000d50 	.word	0x20000d50
 8003bec:	20000c3c 	.word	0x20000c3c
 8003bf0:	20000c48 	.word	0x20000c48
 8003bf4:	20000c40 	.word	0x20000c40

08003bf8 <xTaskResumeAll>:
{
 8003bf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003bfc:	4c31      	ldr	r4, [pc, #196]	@ (8003cc4 <xTaskResumeAll+0xcc>)
 8003bfe:	6823      	ldr	r3, [r4, #0]
 8003c00:	b943      	cbnz	r3, 8003c14 <xTaskResumeAll+0x1c>
 8003c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	e7fe      	b.n	8003c12 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8003c14:	f000 fd4e 	bl	80046b4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8003c18:	6823      	ldr	r3, [r4, #0]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c1e:	6824      	ldr	r4, [r4, #0]
 8003c20:	b12c      	cbz	r4, 8003c2e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8003c22:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8003c24:	f000 fd66 	bl	80046f4 <vPortExitCritical>
}
 8003c28:	4620      	mov	r0, r4
 8003c2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003c2e:	4b26      	ldr	r3, [pc, #152]	@ (8003cc8 <xTaskResumeAll+0xd0>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d0f5      	beq.n	8003c22 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c36:	4d25      	ldr	r5, [pc, #148]	@ (8003ccc <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8003c38:	4e25      	ldr	r6, [pc, #148]	@ (8003cd0 <xTaskResumeAll+0xd8>)
 8003c3a:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8003cd4 <xTaskResumeAll+0xdc>
 8003c3e:	e01f      	b.n	8003c80 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c40:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 8003c42:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003c44:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c46:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003c4a:	f104 0018 	add.w	r0, r4, #24
 8003c4e:	f7ff f8ba 	bl	8002dc6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c52:	4648      	mov	r0, r9
 8003c54:	f7ff f8b7 	bl	8002dc6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003c58:	2014      	movs	r0, #20
 8003c5a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003c5c:	6831      	ldr	r1, [r6, #0]
 8003c5e:	fa07 f302 	lsl.w	r3, r7, r2
 8003c62:	430b      	orrs	r3, r1
 8003c64:	fb00 8002 	mla	r0, r0, r2, r8
 8003c68:	4649      	mov	r1, r9
 8003c6a:	6033      	str	r3, [r6, #0]
 8003c6c:	f7ff f889 	bl	8002d82 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c70:	4b19      	ldr	r3, [pc, #100]	@ (8003cd8 <xTaskResumeAll+0xe0>)
 8003c72:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d301      	bcc.n	8003c80 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8003c7c:	4b17      	ldr	r3, [pc, #92]	@ (8003cdc <xTaskResumeAll+0xe4>)
 8003c7e:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003c80:	682b      	ldr	r3, [r5, #0]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1dc      	bne.n	8003c40 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8003c86:	b10c      	cbz	r4, 8003c8c <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8003c88:	f7ff fcf4 	bl	8003674 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003c8c:	4d14      	ldr	r5, [pc, #80]	@ (8003ce0 <xTaskResumeAll+0xe8>)
 8003c8e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003c90:	b144      	cbz	r4, 8003ca4 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8003c92:	2701      	movs	r7, #1
 8003c94:	4e11      	ldr	r6, [pc, #68]	@ (8003cdc <xTaskResumeAll+0xe4>)
							if( xTaskIncrementTick() != pdFALSE )
 8003c96:	f7ff ff15 	bl	8003ac4 <xTaskIncrementTick>
 8003c9a:	b100      	cbz	r0, 8003c9e <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8003c9c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003c9e:	3c01      	subs	r4, #1
 8003ca0:	d1f9      	bne.n	8003c96 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8003ca2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003ca4:	4b0d      	ldr	r3, [pc, #52]	@ (8003cdc <xTaskResumeAll+0xe4>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d0ba      	beq.n	8003c22 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003cac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003cb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cb4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8003cc0:	2401      	movs	r4, #1
 8003cc2:	e7af      	b.n	8003c24 <xTaskResumeAll+0x2c>
 8003cc4:	20000c2c 	.word	0x20000c2c
 8003cc8:	20000c50 	.word	0x20000c50
 8003ccc:	20000c80 	.word	0x20000c80
 8003cd0:	20000c48 	.word	0x20000c48
 8003cd4:	20000cc4 	.word	0x20000cc4
 8003cd8:	20000d50 	.word	0x20000d50
 8003cdc:	20000c3c 	.word	0x20000c3c
 8003ce0:	20000c40 	.word	0x20000c40

08003ce4 <vTaskDelay>:
	{
 8003ce4:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003ce6:	b950      	cbnz	r0, 8003cfe <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8003ce8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003cec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003cf0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003cf4:	f3bf 8f4f 	dsb	sy
 8003cf8:	f3bf 8f6f 	isb	sy
	}
 8003cfc:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8003d28 <vTaskDelay+0x44>)
 8003d00:	6819      	ldr	r1, [r3, #0]
 8003d02:	b141      	cbz	r1, 8003d16 <vTaskDelay+0x32>
 8003d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d08:	f383 8811 	msr	BASEPRI, r3
 8003d0c:	f3bf 8f6f 	isb	sy
 8003d10:	f3bf 8f4f 	dsb	sy
 8003d14:	e7fe      	b.n	8003d14 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8003d16:	f7ff fec7 	bl	8003aa8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003d1a:	f7ff fc47 	bl	80035ac <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8003d1e:	f7ff ff6b 	bl	8003bf8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8003d22:	2800      	cmp	r0, #0
 8003d24:	d0e0      	beq.n	8003ce8 <vTaskDelay+0x4>
 8003d26:	e7e9      	b.n	8003cfc <vTaskDelay+0x18>
 8003d28:	20000c2c 	.word	0x20000c2c

08003d2c <xTaskAbortDelay>:
	{
 8003d2c:	b570      	push	{r4, r5, r6, lr}
		configASSERT( pxTCB );
 8003d2e:	4604      	mov	r4, r0
 8003d30:	b940      	cbnz	r0, 8003d44 <xTaskAbortDelay+0x18>
 8003d32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d36:	f383 8811 	msr	BASEPRI, r3
 8003d3a:	f3bf 8f6f 	isb	sy
 8003d3e:	f3bf 8f4f 	dsb	sy
 8003d42:	e7fe      	b.n	8003d42 <xTaskAbortDelay+0x16>
		vTaskSuspendAll();
 8003d44:	f7ff feb0 	bl	8003aa8 <vTaskSuspendAll>
			if( eTaskGetState( xTask ) == eBlocked )
 8003d48:	f7ff fd9a 	bl	8003880 <eTaskGetState>
 8003d4c:	2802      	cmp	r0, #2
 8003d4e:	d12d      	bne.n	8003dac <xTaskAbortDelay+0x80>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d50:	1d26      	adds	r6, r4, #4
 8003d52:	4630      	mov	r0, r6
 8003d54:	f7ff f837 	bl	8002dc6 <uxListRemove>
				taskENTER_CRITICAL();
 8003d58:	f000 fcac 	bl	80046b4 <vPortEnterCritical>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d5c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003d5e:	b133      	cbz	r3, 8003d6e <xTaskAbortDelay+0x42>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d60:	f104 0018 	add.w	r0, r4, #24
 8003d64:	f7ff f82f 	bl	8002dc6 <uxListRemove>
						pxTCB->ucDelayAborted = pdTRUE;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	f884 3052 	strb.w	r3, [r4, #82]	@ 0x52
				prvAddTaskToReadyList( pxTCB );
 8003d6e:	2501      	movs	r5, #1
				taskEXIT_CRITICAL();
 8003d70:	f000 fcc0 	bl	80046f4 <vPortExitCritical>
				prvAddTaskToReadyList( pxTCB );
 8003d74:	490e      	ldr	r1, [pc, #56]	@ (8003db0 <xTaskAbortDelay+0x84>)
 8003d76:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003d78:	6808      	ldr	r0, [r1, #0]
 8003d7a:	fa05 f302 	lsl.w	r3, r5, r2
 8003d7e:	4303      	orrs	r3, r0
 8003d80:	2014      	movs	r0, #20
 8003d82:	600b      	str	r3, [r1, #0]
 8003d84:	4b0b      	ldr	r3, [pc, #44]	@ (8003db4 <xTaskAbortDelay+0x88>)
 8003d86:	4631      	mov	r1, r6
 8003d88:	fb00 3002 	mla	r0, r0, r2, r3
 8003d8c:	f7fe fff9 	bl	8002d82 <vListInsertEnd>
					if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003d90:	4b09      	ldr	r3, [pc, #36]	@ (8003db8 <xTaskAbortDelay+0x8c>)
 8003d92:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d98:	429a      	cmp	r2, r3
 8003d9a:	d804      	bhi.n	8003da6 <xTaskAbortDelay+0x7a>
				xReturn = pdPASS;
 8003d9c:	2401      	movs	r4, #1
		( void ) xTaskResumeAll();
 8003d9e:	f7ff ff2b 	bl	8003bf8 <xTaskResumeAll>
	}
 8003da2:	4620      	mov	r0, r4
 8003da4:	bd70      	pop	{r4, r5, r6, pc}
						xYieldPending = pdTRUE;
 8003da6:	4b05      	ldr	r3, [pc, #20]	@ (8003dbc <xTaskAbortDelay+0x90>)
 8003da8:	601d      	str	r5, [r3, #0]
 8003daa:	e7f7      	b.n	8003d9c <xTaskAbortDelay+0x70>
				xReturn = pdFAIL;
 8003dac:	2400      	movs	r4, #0
 8003dae:	e7f6      	b.n	8003d9e <xTaskAbortDelay+0x72>
 8003db0:	20000c48 	.word	0x20000c48
 8003db4:	20000cc4 	.word	0x20000cc4
 8003db8:	20000d50 	.word	0x20000d50
 8003dbc:	20000c3c 	.word	0x20000c3c

08003dc0 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003dc0:	4b17      	ldr	r3, [pc, #92]	@ (8003e20 <vTaskSwitchContext+0x60>)
{
 8003dc2:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4b17      	ldr	r3, [pc, #92]	@ (8003e24 <vTaskSwitchContext+0x64>)
 8003dc8:	b112      	cbz	r2, 8003dd0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8003dca:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003dcc:	601a      	str	r2, [r3, #0]
}
 8003dce:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8003dd0:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003dd2:	4b15      	ldr	r3, [pc, #84]	@ (8003e28 <vTaskSwitchContext+0x68>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003dd6:	fab2 f282 	clz	r2, r2
 8003dda:	2314      	movs	r3, #20
 8003ddc:	b2d2      	uxtb	r2, r2
 8003dde:	f1c2 021f 	rsb	r2, r2, #31
 8003de2:	4353      	muls	r3, r2
 8003de4:	4911      	ldr	r1, [pc, #68]	@ (8003e2c <vTaskSwitchContext+0x6c>)
 8003de6:	58cc      	ldr	r4, [r1, r3]
 8003de8:	18c8      	adds	r0, r1, r3
 8003dea:	b944      	cbnz	r4, 8003dfe <vTaskSwitchContext+0x3e>
	__asm volatile
 8003dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df0:	f383 8811 	msr	BASEPRI, r3
 8003df4:	f3bf 8f6f 	isb	sy
 8003df8:	f3bf 8f4f 	dsb	sy
 8003dfc:	e7fe      	b.n	8003dfc <vTaskSwitchContext+0x3c>
 8003dfe:	6844      	ldr	r4, [r0, #4]
 8003e00:	3308      	adds	r3, #8
 8003e02:	6864      	ldr	r4, [r4, #4]
 8003e04:	440b      	add	r3, r1
 8003e06:	429c      	cmp	r4, r3
 8003e08:	bf08      	it	eq
 8003e0a:	6863      	ldreq	r3, [r4, #4]
 8003e0c:	6044      	str	r4, [r0, #4]
 8003e0e:	bf08      	it	eq
 8003e10:	6043      	streq	r3, [r0, #4]
 8003e12:	2314      	movs	r3, #20
 8003e14:	fb03 1102 	mla	r1, r3, r2, r1
 8003e18:	684b      	ldr	r3, [r1, #4]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	4b04      	ldr	r3, [pc, #16]	@ (8003e30 <vTaskSwitchContext+0x70>)
 8003e1e:	e7d5      	b.n	8003dcc <vTaskSwitchContext+0xc>
 8003e20:	20000c2c 	.word	0x20000c2c
 8003e24:	20000c3c 	.word	0x20000c3c
 8003e28:	20000c48 	.word	0x20000c48
 8003e2c:	20000cc4 	.word	0x20000cc4
 8003e30:	20000d50 	.word	0x20000d50

08003e34 <vTaskSuspend>:
	{
 8003e34:	b570      	push	{r4, r5, r6, lr}
 8003e36:	4604      	mov	r4, r0
 8003e38:	4d2d      	ldr	r5, [pc, #180]	@ (8003ef0 <vTaskSuspend+0xbc>)
		taskENTER_CRITICAL();
 8003e3a:	f000 fc3b 	bl	80046b4 <vPortEnterCritical>
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8003e3e:	b904      	cbnz	r4, 8003e42 <vTaskSuspend+0xe>
 8003e40:	682c      	ldr	r4, [r5, #0]
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e42:	1d26      	adds	r6, r4, #4
 8003e44:	4630      	mov	r0, r6
 8003e46:	f7fe ffbe 	bl	8002dc6 <uxListRemove>
 8003e4a:	b960      	cbnz	r0, 8003e66 <vTaskSuspend+0x32>
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003e4c:	2314      	movs	r3, #20
 8003e4e:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8003e50:	4a28      	ldr	r2, [pc, #160]	@ (8003ef4 <vTaskSuspend+0xc0>)
 8003e52:	4343      	muls	r3, r0
 8003e54:	58d3      	ldr	r3, [r2, r3]
 8003e56:	b933      	cbnz	r3, 8003e66 <vTaskSuspend+0x32>
 8003e58:	2201      	movs	r2, #1
 8003e5a:	4927      	ldr	r1, [pc, #156]	@ (8003ef8 <vTaskSuspend+0xc4>)
 8003e5c:	4082      	lsls	r2, r0
 8003e5e:	680b      	ldr	r3, [r1, #0]
 8003e60:	ea23 0302 	bic.w	r3, r3, r2
 8003e64:	600b      	str	r3, [r1, #0]
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003e66:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003e68:	b11b      	cbz	r3, 8003e72 <vTaskSuspend+0x3e>
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003e6a:	f104 0018 	add.w	r0, r4, #24
 8003e6e:	f7fe ffaa 	bl	8002dc6 <uxListRemove>
			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8003e72:	4631      	mov	r1, r6
 8003e74:	4821      	ldr	r0, [pc, #132]	@ (8003efc <vTaskSuspend+0xc8>)
 8003e76:	f7fe ff84 	bl	8002d82 <vListInsertEnd>
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003e7a:	f894 3050 	ldrb.w	r3, [r4, #80]	@ 0x50
		if( xSchedulerRunning != pdFALSE )
 8003e7e:	4e20      	ldr	r6, [pc, #128]	@ (8003f00 <vTaskSuspend+0xcc>)
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8003e80:	2b01      	cmp	r3, #1
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003e82:	bf04      	itt	eq
 8003e84:	2300      	moveq	r3, #0
 8003e86:	f884 3050 	strbeq.w	r3, [r4, #80]	@ 0x50
		taskEXIT_CRITICAL();
 8003e8a:	f000 fc33 	bl	80046f4 <vPortExitCritical>
		if( xSchedulerRunning != pdFALSE )
 8003e8e:	6833      	ldr	r3, [r6, #0]
 8003e90:	b12b      	cbz	r3, 8003e9e <vTaskSuspend+0x6a>
			taskENTER_CRITICAL();
 8003e92:	f000 fc0f 	bl	80046b4 <vPortEnterCritical>
				prvResetNextTaskUnblockTime();
 8003e96:	f7ff fbed 	bl	8003674 <prvResetNextTaskUnblockTime>
			taskEXIT_CRITICAL();
 8003e9a:	f000 fc2b 	bl	80046f4 <vPortExitCritical>
		if( pxTCB == pxCurrentTCB )
 8003e9e:	682b      	ldr	r3, [r5, #0]
 8003ea0:	42a3      	cmp	r3, r4
 8003ea2:	d117      	bne.n	8003ed4 <vTaskSuspend+0xa0>
			if( xSchedulerRunning != pdFALSE )
 8003ea4:	6833      	ldr	r3, [r6, #0]
 8003ea6:	b1b3      	cbz	r3, 8003ed6 <vTaskSuspend+0xa2>
				configASSERT( uxSchedulerSuspended == 0 );
 8003ea8:	4b16      	ldr	r3, [pc, #88]	@ (8003f04 <vTaskSuspend+0xd0>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	b143      	cbz	r3, 8003ec0 <vTaskSuspend+0x8c>
 8003eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eb2:	f383 8811 	msr	BASEPRI, r3
 8003eb6:	f3bf 8f6f 	isb	sy
 8003eba:	f3bf 8f4f 	dsb	sy
 8003ebe:	e7fe      	b.n	8003ebe <vTaskSuspend+0x8a>
				portYIELD_WITHIN_API();
 8003ec0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003ec4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ec8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003ecc:	f3bf 8f4f 	dsb	sy
 8003ed0:	f3bf 8f6f 	isb	sy
	}
 8003ed4:	bd70      	pop	{r4, r5, r6, pc}
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks )
 8003ed6:	4a09      	ldr	r2, [pc, #36]	@ (8003efc <vTaskSuspend+0xc8>)
 8003ed8:	6811      	ldr	r1, [r2, #0]
 8003eda:	4a0b      	ldr	r2, [pc, #44]	@ (8003f08 <vTaskSuspend+0xd4>)
 8003edc:	6812      	ldr	r2, [r2, #0]
 8003ede:	4291      	cmp	r1, r2
 8003ee0:	d101      	bne.n	8003ee6 <vTaskSuspend+0xb2>
					pxCurrentTCB = NULL;
 8003ee2:	602b      	str	r3, [r5, #0]
 8003ee4:	e7f6      	b.n	8003ed4 <vTaskSuspend+0xa0>
	}
 8003ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
					vTaskSwitchContext();
 8003eea:	f7ff bf69 	b.w	8003dc0 <vTaskSwitchContext>
 8003eee:	bf00      	nop
 8003ef0:	20000d50 	.word	0x20000d50
 8003ef4:	20000cc4 	.word	0x20000cc4
 8003ef8:	20000c48 	.word	0x20000c48
 8003efc:	20000c54 	.word	0x20000c54
 8003f00:	20000c44 	.word	0x20000c44
 8003f04:	20000c2c 	.word	0x20000c2c
 8003f08:	20000c50 	.word	0x20000c50

08003f0c <vTaskPlaceOnEventList>:
{
 8003f0c:	b510      	push	{r4, lr}
 8003f0e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003f10:	b940      	cbnz	r0, 8003f24 <vTaskPlaceOnEventList+0x18>
 8003f12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	e7fe      	b.n	8003f22 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f24:	4b05      	ldr	r3, [pc, #20]	@ (8003f3c <vTaskPlaceOnEventList+0x30>)
 8003f26:	6819      	ldr	r1, [r3, #0]
 8003f28:	3118      	adds	r1, #24
 8003f2a:	f7fe ff35 	bl	8002d98 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f2e:	4620      	mov	r0, r4
}
 8003f30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003f34:	2101      	movs	r1, #1
 8003f36:	f7ff bb39 	b.w	80035ac <prvAddCurrentTaskToDelayedList>
 8003f3a:	bf00      	nop
 8003f3c:	20000d50 	.word	0x20000d50

08003f40 <vTaskPlaceOnEventListRestricted>:
	{
 8003f40:	b538      	push	{r3, r4, r5, lr}
 8003f42:	460d      	mov	r5, r1
 8003f44:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8003f46:	b940      	cbnz	r0, 8003f5a <vTaskPlaceOnEventListRestricted+0x1a>
 8003f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f4c:	f383 8811 	msr	BASEPRI, r3
 8003f50:	f3bf 8f6f 	isb	sy
 8003f54:	f3bf 8f4f 	dsb	sy
 8003f58:	e7fe      	b.n	8003f58 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f5a:	4b08      	ldr	r3, [pc, #32]	@ (8003f7c <vTaskPlaceOnEventListRestricted+0x3c>)
 8003f5c:	6819      	ldr	r1, [r3, #0]
 8003f5e:	3118      	adds	r1, #24
 8003f60:	f7fe ff0f 	bl	8002d82 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8003f64:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f66:	4621      	mov	r1, r4
 8003f68:	bf08      	it	eq
 8003f6a:	4628      	moveq	r0, r5
	}
 8003f6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f70:	bf18      	it	ne
 8003f72:	f04f 30ff 	movne.w	r0, #4294967295
 8003f76:	f7ff bb19 	b.w	80035ac <prvAddCurrentTaskToDelayedList>
 8003f7a:	bf00      	nop
 8003f7c:	20000d50 	.word	0x20000d50

08003f80 <xTaskRemoveFromEventList>:
{
 8003f80:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003f82:	68c3      	ldr	r3, [r0, #12]
 8003f84:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8003f86:	b944      	cbnz	r4, 8003f9a <xTaskRemoveFromEventList+0x1a>
 8003f88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	e7fe      	b.n	8003f98 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f9a:	f104 0518 	add.w	r5, r4, #24
 8003f9e:	4628      	mov	r0, r5
 8003fa0:	f7fe ff11 	bl	8002dc6 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fa4:	4b11      	ldr	r3, [pc, #68]	@ (8003fec <xTaskRemoveFromEventList+0x6c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	b9e3      	cbnz	r3, 8003fe4 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003faa:	1d25      	adds	r5, r4, #4
 8003fac:	4628      	mov	r0, r5
 8003fae:	f7fe ff0a 	bl	8002dc6 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	490e      	ldr	r1, [pc, #56]	@ (8003ff0 <xTaskRemoveFromEventList+0x70>)
 8003fb6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003fb8:	6808      	ldr	r0, [r1, #0]
 8003fba:	4093      	lsls	r3, r2
 8003fbc:	4303      	orrs	r3, r0
 8003fbe:	2014      	movs	r0, #20
 8003fc0:	600b      	str	r3, [r1, #0]
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ff4 <xTaskRemoveFromEventList+0x74>)
 8003fc6:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003fca:	f7fe feda 	bl	8002d82 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fce:	4b0a      	ldr	r3, [pc, #40]	@ (8003ff8 <xTaskRemoveFromEventList+0x78>)
 8003fd0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd6:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003fd8:	bf85      	ittet	hi
 8003fda:	2001      	movhi	r0, #1
 8003fdc:	4b07      	ldrhi	r3, [pc, #28]	@ (8003ffc <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8003fde:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8003fe0:	6018      	strhi	r0, [r3, #0]
}
 8003fe2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	4806      	ldr	r0, [pc, #24]	@ (8004000 <xTaskRemoveFromEventList+0x80>)
 8003fe8:	e7ef      	b.n	8003fca <xTaskRemoveFromEventList+0x4a>
 8003fea:	bf00      	nop
 8003fec:	20000c2c 	.word	0x20000c2c
 8003ff0:	20000c48 	.word	0x20000c48
 8003ff4:	20000cc4 	.word	0x20000cc4
 8003ff8:	20000d50 	.word	0x20000d50
 8003ffc:	20000c3c 	.word	0x20000c3c
 8004000:	20000c80 	.word	0x20000c80

08004004 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004004:	4b03      	ldr	r3, [pc, #12]	@ (8004014 <vTaskInternalSetTimeOutState+0x10>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800400a:	4b03      	ldr	r3, [pc, #12]	@ (8004018 <vTaskInternalSetTimeOutState+0x14>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6043      	str	r3, [r0, #4]
}
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	20000c38 	.word	0x20000c38
 8004018:	20000c4c 	.word	0x20000c4c

0800401c <xTaskCheckForTimeOut>:
{
 800401c:	b570      	push	{r4, r5, r6, lr}
 800401e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8004020:	4605      	mov	r5, r0
 8004022:	b940      	cbnz	r0, 8004036 <xTaskCheckForTimeOut+0x1a>
 8004024:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004028:	f383 8811 	msr	BASEPRI, r3
 800402c:	f3bf 8f6f 	isb	sy
 8004030:	f3bf 8f4f 	dsb	sy
 8004034:	e7fe      	b.n	8004034 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8004036:	b941      	cbnz	r1, 800404a <xTaskCheckForTimeOut+0x2e>
 8004038:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800403c:	f383 8811 	msr	BASEPRI, r3
 8004040:	f3bf 8f6f 	isb	sy
 8004044:	f3bf 8f4f 	dsb	sy
 8004048:	e7fe      	b.n	8004048 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800404a:	f000 fb33 	bl	80046b4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800404e:	4b14      	ldr	r3, [pc, #80]	@ (80040a0 <xTaskCheckForTimeOut+0x84>)
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004050:	686a      	ldr	r2, [r5, #4]
		const TickType_t xConstTickCount = xTickCount;
 8004052:	6819      	ldr	r1, [r3, #0]
			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
 8004054:	4b13      	ldr	r3, [pc, #76]	@ (80040a4 <xTaskCheckForTimeOut+0x88>)
 8004056:	6818      	ldr	r0, [r3, #0]
 8004058:	f890 0052 	ldrb.w	r0, [r0, #82]	@ 0x52
 800405c:	b140      	cbz	r0, 8004070 <xTaskCheckForTimeOut+0x54>
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 800405e:	2200      	movs	r2, #0
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
				xReturn = pdTRUE;
 8004066:	2401      	movs	r4, #1
	taskEXIT_CRITICAL();
 8004068:	f000 fb44 	bl	80046f4 <vPortExitCritical>
}
 800406c:	4620      	mov	r0, r4
 800406e:	bd70      	pop	{r4, r5, r6, pc}
			if( *pxTicksToWait == portMAX_DELAY )
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	1c58      	adds	r0, r3, #1
 8004074:	d00f      	beq.n	8004096 <xTaskCheckForTimeOut+0x7a>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004076:	480c      	ldr	r0, [pc, #48]	@ (80040a8 <xTaskCheckForTimeOut+0x8c>)
 8004078:	682e      	ldr	r6, [r5, #0]
 800407a:	6800      	ldr	r0, [r0, #0]
 800407c:	4286      	cmp	r6, r0
 800407e:	d001      	beq.n	8004084 <xTaskCheckForTimeOut+0x68>
 8004080:	428a      	cmp	r2, r1
 8004082:	d9f0      	bls.n	8004066 <xTaskCheckForTimeOut+0x4a>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004084:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004086:	4283      	cmp	r3, r0
 8004088:	d907      	bls.n	800409a <xTaskCheckForTimeOut+0x7e>
			*pxTicksToWait -= xElapsedTime;
 800408a:	1a5b      	subs	r3, r3, r1
 800408c:	4413      	add	r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 800408e:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8004090:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004092:	f7ff ffb7 	bl	8004004 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8004096:	2400      	movs	r4, #0
 8004098:	e7e6      	b.n	8004068 <xTaskCheckForTimeOut+0x4c>
			*pxTicksToWait = 0;
 800409a:	2300      	movs	r3, #0
 800409c:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800409e:	e7e2      	b.n	8004066 <xTaskCheckForTimeOut+0x4a>
 80040a0:	20000c4c 	.word	0x20000c4c
 80040a4:	20000d50 	.word	0x20000d50
 80040a8:	20000c38 	.word	0x20000c38

080040ac <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80040ac:	2201      	movs	r2, #1
 80040ae:	4b01      	ldr	r3, [pc, #4]	@ (80040b4 <vTaskMissedYield+0x8>)
 80040b0:	601a      	str	r2, [r3, #0]
}
 80040b2:	4770      	bx	lr
 80040b4:	20000c3c 	.word	0x20000c3c

080040b8 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80040b8:	4b05      	ldr	r3, [pc, #20]	@ (80040d0 <xTaskGetSchedulerState+0x18>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	b133      	cbz	r3, 80040cc <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040be:	4b05      	ldr	r3, [pc, #20]	@ (80040d4 <xTaskGetSchedulerState+0x1c>)
 80040c0:	6818      	ldr	r0, [r3, #0]
 80040c2:	fab0 f080 	clz	r0, r0
 80040c6:	0940      	lsrs	r0, r0, #5
 80040c8:	0040      	lsls	r0, r0, #1
 80040ca:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040cc:	2001      	movs	r0, #1
	}
 80040ce:	4770      	bx	lr
 80040d0:	20000c44 	.word	0x20000c44
 80040d4:	20000c2c 	.word	0x20000c2c

080040d8 <xTaskPriorityDisinherit>:
	{
 80040d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80040da:	4604      	mov	r4, r0
 80040dc:	b908      	cbnz	r0, 80040e2 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80040de:	2000      	movs	r0, #0
	}
 80040e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80040e2:	4b22      	ldr	r3, [pc, #136]	@ (800416c <xTaskPriorityDisinherit+0x94>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4283      	cmp	r3, r0
 80040e8:	d008      	beq.n	80040fc <xTaskPriorityDisinherit+0x24>
 80040ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040ee:	f383 8811 	msr	BASEPRI, r3
 80040f2:	f3bf 8f6f 	isb	sy
 80040f6:	f3bf 8f4f 	dsb	sy
 80040fa:	e7fe      	b.n	80040fa <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 80040fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040fe:	b943      	cbnz	r3, 8004112 <xTaskPriorityDisinherit+0x3a>
 8004100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	e7fe      	b.n	8004110 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004112:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8004114:	6c42      	ldr	r2, [r0, #68]	@ 0x44
			( pxTCB->uxMutexesHeld )--;
 8004116:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004118:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800411a:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800411c:	d0df      	beq.n	80040de <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800411e:	2b00      	cmp	r3, #0
 8004120:	d1dd      	bne.n	80040de <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004122:	1d06      	adds	r6, r0, #4
 8004124:	4630      	mov	r0, r6
 8004126:	f7fe fe4e 	bl	8002dc6 <uxListRemove>
 800412a:	4f11      	ldr	r7, [pc, #68]	@ (8004170 <xTaskPriorityDisinherit+0x98>)
 800412c:	4a11      	ldr	r2, [pc, #68]	@ (8004174 <xTaskPriorityDisinherit+0x9c>)
 800412e:	b950      	cbnz	r0, 8004146 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004130:	2314      	movs	r3, #20
 8004132:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8004134:	434b      	muls	r3, r1
 8004136:	58fb      	ldr	r3, [r7, r3]
 8004138:	b92b      	cbnz	r3, 8004146 <xTaskPriorityDisinherit+0x6e>
 800413a:	2501      	movs	r5, #1
 800413c:	6813      	ldr	r3, [r2, #0]
 800413e:	408d      	lsls	r5, r1
 8004140:	ea23 0305 	bic.w	r3, r3, r5
 8004144:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004146:	6c63      	ldr	r3, [r4, #68]	@ 0x44
					prvAddTaskToReadyList( pxTCB );
 8004148:	2014      	movs	r0, #20
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800414a:	f1c3 0107 	rsb	r1, r3, #7
 800414e:	61a1      	str	r1, [r4, #24]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004150:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxTCB );
 8004152:	2401      	movs	r4, #1
 8004154:	6811      	ldr	r1, [r2, #0]
 8004156:	fa04 f503 	lsl.w	r5, r4, r3
 800415a:	fb00 7003 	mla	r0, r0, r3, r7
 800415e:	430d      	orrs	r5, r1
 8004160:	4631      	mov	r1, r6
 8004162:	6015      	str	r5, [r2, #0]
 8004164:	f7fe fe0d 	bl	8002d82 <vListInsertEnd>
					xReturn = pdTRUE;
 8004168:	4620      	mov	r0, r4
		return xReturn;
 800416a:	e7b9      	b.n	80040e0 <xTaskPriorityDisinherit+0x8>
 800416c:	20000d50 	.word	0x20000d50
 8004170:	20000cc4 	.word	0x20000cc4
 8004174:	20000c48 	.word	0x20000c48

08004178 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8004178:	4291      	cmp	r1, r2
{
 800417a:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800417c:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800417e:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8004180:	d80a      	bhi.n	8004198 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004182:	1ad2      	subs	r2, r2, r3
 8004184:	6983      	ldr	r3, [r0, #24]
 8004186:	429a      	cmp	r2, r3
 8004188:	d20d      	bcs.n	80041a6 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800418a:	4b08      	ldr	r3, [pc, #32]	@ (80041ac <prvInsertTimerInActiveList+0x34>)
 800418c:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800418e:	6818      	ldr	r0, [r3, #0]
 8004190:	f7fe fe02 	bl	8002d98 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8004194:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8004196:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004198:	429a      	cmp	r2, r3
 800419a:	d201      	bcs.n	80041a0 <prvInsertTimerInActiveList+0x28>
 800419c:	4299      	cmp	r1, r3
 800419e:	d202      	bcs.n	80041a6 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041a0:	4b03      	ldr	r3, [pc, #12]	@ (80041b0 <prvInsertTimerInActiveList+0x38>)
 80041a2:	1d01      	adds	r1, r0, #4
 80041a4:	e7f3      	b.n	800418e <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80041a6:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80041a8:	e7f5      	b.n	8004196 <prvInsertTimerInActiveList+0x1e>
 80041aa:	bf00      	nop
 80041ac:	20000e20 	.word	0x20000e20
 80041b0:	20000e24 	.word	0x20000e24

080041b4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80041b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80041b6:	4c11      	ldr	r4, [pc, #68]	@ (80041fc <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80041b8:	f000 fa7c 	bl	80046b4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80041bc:	6825      	ldr	r5, [r4, #0]
 80041be:	b9bd      	cbnz	r5, 80041f0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80041c0:	4f0f      	ldr	r7, [pc, #60]	@ (8004200 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80041c2:	4e10      	ldr	r6, [pc, #64]	@ (8004204 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80041c4:	4638      	mov	r0, r7
 80041c6:	f7fe fdce 	bl	8002d66 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80041ca:	4630      	mov	r0, r6
 80041cc:	f7fe fdcb 	bl	8002d66 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80041d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004208 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80041d2:	210c      	movs	r1, #12
			pxCurrentTimerList = &xActiveTimerList1;
 80041d4:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80041d6:	4b0d      	ldr	r3, [pc, #52]	@ (800420c <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80041d8:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80041da:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80041dc:	4a0c      	ldr	r2, [pc, #48]	@ (8004210 <prvCheckForValidListAndQueue+0x5c>)
 80041de:	4b0d      	ldr	r3, [pc, #52]	@ (8004214 <prvCheckForValidListAndQueue+0x60>)
 80041e0:	9500      	str	r5, [sp, #0]
 80041e2:	f7fe fec9 	bl	8002f78 <xQueueGenericCreateStatic>
 80041e6:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80041e8:	b110      	cbz	r0, 80041f0 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80041ea:	490b      	ldr	r1, [pc, #44]	@ (8004218 <prvCheckForValidListAndQueue+0x64>)
 80041ec:	f7ff f92a 	bl	8003444 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80041f0:	b003      	add	sp, #12
 80041f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80041f6:	f000 ba7d 	b.w	80046f4 <vPortExitCritical>
 80041fa:	bf00      	nop
 80041fc:	20000e1c 	.word	0x20000e1c
 8004200:	20000e3c 	.word	0x20000e3c
 8004204:	20000e28 	.word	0x20000e28
 8004208:	20000e24 	.word	0x20000e24
 800420c:	20000e20 	.word	0x20000e20
 8004210:	20000d9c 	.word	0x20000d9c
 8004214:	20000d54 	.word	0x20000d54
 8004218:	08007607 	.word	0x08007607

0800421c <xTimerCreateTimerTask>:
{
 800421c:	b510      	push	{r4, lr}
 800421e:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8004220:	f7ff ffc8 	bl	80041b4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8004224:	4b12      	ldr	r3, [pc, #72]	@ (8004270 <xTimerCreateTimerTask+0x54>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	b1b3      	cbz	r3, 8004258 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800422a:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800422c:	aa07      	add	r2, sp, #28
 800422e:	a906      	add	r1, sp, #24
 8004230:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004232:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004236:	f7fc f973 	bl	8000520 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800423a:	9b05      	ldr	r3, [sp, #20]
 800423c:	9a07      	ldr	r2, [sp, #28]
 800423e:	9302      	str	r3, [sp, #8]
 8004240:	9b06      	ldr	r3, [sp, #24]
 8004242:	490c      	ldr	r1, [pc, #48]	@ (8004274 <xTimerCreateTimerTask+0x58>)
 8004244:	9301      	str	r3, [sp, #4]
 8004246:	2302      	movs	r3, #2
 8004248:	480b      	ldr	r0, [pc, #44]	@ (8004278 <xTimerCreateTimerTask+0x5c>)
 800424a:	9300      	str	r3, [sp, #0]
 800424c:	4623      	mov	r3, r4
 800424e:	f7ff fab2 	bl	80037b6 <xTaskCreateStatic>
 8004252:	4b0a      	ldr	r3, [pc, #40]	@ (800427c <xTimerCreateTimerTask+0x60>)
 8004254:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8004256:	b940      	cbnz	r0, 800426a <xTimerCreateTimerTask+0x4e>
 8004258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8004268:	e7fe      	b.n	8004268 <xTimerCreateTimerTask+0x4c>
}
 800426a:	2001      	movs	r0, #1
 800426c:	b008      	add	sp, #32
 800426e:	bd10      	pop	{r4, pc}
 8004270:	20000e1c 	.word	0x20000e1c
 8004274:	0800760c 	.word	0x0800760c
 8004278:	0800443d 	.word	0x0800443d
 800427c:	20000e18 	.word	0x20000e18

08004280 <xTimerCreate>:
	{
 8004280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004284:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8004286:	202c      	movs	r0, #44	@ 0x2c
	{
 8004288:	460d      	mov	r5, r1
 800428a:	4617      	mov	r7, r2
 800428c:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800428e:	f000 fb3d 	bl	800490c <pvPortMalloc>
		if( pxNewTimer != NULL )
 8004292:	4604      	mov	r4, r0
 8004294:	b1c0      	cbz	r0, 80042c8 <xTimerCreate+0x48>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8004296:	b945      	cbnz	r5, 80042aa <xTimerCreate+0x2a>
 8004298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800429c:	f383 8811 	msr	BASEPRI, r3
 80042a0:	f3bf 8f6f 	isb	sy
 80042a4:	f3bf 8f4f 	dsb	sy
 80042a8:	e7fe      	b.n	80042a8 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
 80042aa:	f7ff ff83 	bl	80041b4 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80042ae:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80042b0:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80042b4:	6263      	str	r3, [r4, #36]	@ 0x24
		pxNewTimer->pcTimerName = pcTimerName;
 80042b6:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 80042ba:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80042bc:	1d20      	adds	r0, r4, #4
 80042be:	f7fe fd5d 	bl	8002d7c <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80042c2:	2300      	movs	r3, #0
 80042c4:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
	}
 80042c8:	4620      	mov	r0, r4
 80042ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080042ce <xTimerCreateStatic>:
	{
 80042ce:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80042d2:	461e      	mov	r6, r3
			volatile size_t xSize = sizeof( StaticTimer_t );
 80042d4:	232c      	movs	r3, #44	@ 0x2c
 80042d6:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Timer_t ) );
 80042d8:	9b01      	ldr	r3, [sp, #4]
	{
 80042da:	4680      	mov	r8, r0
			configASSERT( xSize == sizeof( Timer_t ) );
 80042dc:	2b2c      	cmp	r3, #44	@ 0x2c
	{
 80042de:	460d      	mov	r5, r1
 80042e0:	4617      	mov	r7, r2
 80042e2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
			configASSERT( xSize == sizeof( Timer_t ) );
 80042e4:	d008      	beq.n	80042f8 <xTimerCreateStatic+0x2a>
 80042e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ea:	f383 8811 	msr	BASEPRI, r3
 80042ee:	f3bf 8f6f 	isb	sy
 80042f2:	f3bf 8f4f 	dsb	sy
 80042f6:	e7fe      	b.n	80042f6 <xTimerCreateStatic+0x28>
		configASSERT( pxTimerBuffer );
 80042f8:	b944      	cbnz	r4, 800430c <xTimerCreateStatic+0x3e>
 80042fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042fe:	f383 8811 	msr	BASEPRI, r3
 8004302:	f3bf 8f6f 	isb	sy
 8004306:	f3bf 8f4f 	dsb	sy
 800430a:	e7fe      	b.n	800430a <xTimerCreateStatic+0x3c>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800430c:	b941      	cbnz	r1, 8004320 <xTimerCreateStatic+0x52>
 800430e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004312:	f383 8811 	msr	BASEPRI, r3
 8004316:	f3bf 8f6f 	isb	sy
 800431a:	f3bf 8f4f 	dsb	sy
 800431e:	e7fe      	b.n	800431e <xTimerCreateStatic+0x50>
		prvCheckForValidListAndQueue();
 8004320:	f7ff ff48 	bl	80041b4 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004324:	9b08      	ldr	r3, [sp, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004326:	1d20      	adds	r0, r4, #4
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8004328:	6263      	str	r3, [r4, #36]	@ 0x24
		pxNewTimer->uxAutoReload = uxAutoReload;
 800432a:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 800432e:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 8004332:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004334:	f7fe fd22 	bl	8002d7c <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8004338:	2301      	movs	r3, #1
	}
 800433a:	4620      	mov	r0, r4
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 800433c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
	}
 8004340:	b002      	add	sp, #8
 8004342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004348 <xTimerGenericCommand>:
{
 8004348:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800434a:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800434c:	4604      	mov	r4, r0
{
 800434e:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8004350:	b940      	cbnz	r0, 8004364 <xTimerGenericCommand+0x1c>
 8004352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004356:	f383 8811 	msr	BASEPRI, r3
 800435a:	f3bf 8f6f 	isb	sy
 800435e:	f3bf 8f4f 	dsb	sy
 8004362:	e7fe      	b.n	8004362 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8004364:	4d0c      	ldr	r5, [pc, #48]	@ (8004398 <xTimerGenericCommand+0x50>)
 8004366:	6828      	ldr	r0, [r5, #0]
 8004368:	b178      	cbz	r0, 800438a <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800436a:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800436c:	e9cd 1601 	strd	r1, r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004370:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004372:	dc0c      	bgt.n	800438e <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004374:	f7ff fea0 	bl	80040b8 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004378:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800437a:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800437c:	bf14      	ite	ne
 800437e:	461a      	movne	r2, r3
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004380:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004382:	6828      	ldr	r0, [r5, #0]
 8004384:	a901      	add	r1, sp, #4
 8004386:	f7fe fe64 	bl	8003052 <xQueueGenericSend>
}
 800438a:	b004      	add	sp, #16
 800438c:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800438e:	2300      	movs	r3, #0
 8004390:	a901      	add	r1, sp, #4
 8004392:	f7fe ff10 	bl	80031b6 <xQueueGenericSendFromISR>
 8004396:	e7f8      	b.n	800438a <xTimerGenericCommand+0x42>
 8004398:	20000e1c 	.word	0x20000e1c

0800439c <prvSampleTimeNow>:
{
 800439c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80043a0:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 80043a2:	f7ff fb89 	bl	8003ab8 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80043a6:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8004430 <prvSampleTimeNow+0x94>
	xTimeNow = xTaskGetTickCount();
 80043aa:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 80043ac:	f8d8 3000 	ldr.w	r3, [r8]
 80043b0:	4283      	cmp	r3, r0
 80043b2:	d909      	bls.n	80043c8 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80043b4:	4f1f      	ldr	r7, [pc, #124]	@ (8004434 <prvSampleTimeNow+0x98>)
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	b96a      	cbnz	r2, 80043d8 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 80043bc:	4a1e      	ldr	r2, [pc, #120]	@ (8004438 <prvSampleTimeNow+0x9c>)
 80043be:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80043c0:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80043c2:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80043c4:	2301      	movs	r3, #1
 80043c6:	e000      	b.n	80043ca <prvSampleTimeNow+0x2e>
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 80043cc:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 80043ce:	f8c8 5000 	str.w	r5, [r8]
}
 80043d2:	b002      	add	sp, #8
 80043d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043d8:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043da:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80043dc:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80043e0:	f104 0a04 	add.w	sl, r4, #4
 80043e4:	4650      	mov	r0, sl
 80043e6:	f7fe fcee 	bl	8002dc6 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80043ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80043ec:	4620      	mov	r0, r4
 80043ee:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80043f0:	69e3      	ldr	r3, [r4, #28]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d1df      	bne.n	80043b6 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80043f6:	69a3      	ldr	r3, [r4, #24]
 80043f8:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 80043fa:	4599      	cmp	r9, r3
 80043fc:	d206      	bcs.n	800440c <prvSampleTimeNow+0x70>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80043fe:	4651      	mov	r1, sl
 8004400:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004402:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004404:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004406:	f7fe fcc7 	bl	8002d98 <vListInsert>
 800440a:	e7d4      	b.n	80043b6 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800440c:	2300      	movs	r3, #0
 800440e:	464a      	mov	r2, r9
 8004410:	4619      	mov	r1, r3
 8004412:	4620      	mov	r0, r4
 8004414:	9300      	str	r3, [sp, #0]
 8004416:	f7ff ff97 	bl	8004348 <xTimerGenericCommand>
				configASSERT( xResult );
 800441a:	2800      	cmp	r0, #0
 800441c:	d1cb      	bne.n	80043b6 <prvSampleTimeNow+0x1a>
 800441e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004422:	f383 8811 	msr	BASEPRI, r3
 8004426:	f3bf 8f6f 	isb	sy
 800442a:	f3bf 8f4f 	dsb	sy
 800442e:	e7fe      	b.n	800442e <prvSampleTimeNow+0x92>
 8004430:	20000e14 	.word	0x20000e14
 8004434:	20000e24 	.word	0x20000e24
 8004438:	20000e20 	.word	0x20000e20

0800443c <prvTimerTask>:
{
 800443c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004440:	4e64      	ldr	r6, [pc, #400]	@ (80045d4 <prvTimerTask+0x198>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004442:	4f65      	ldr	r7, [pc, #404]	@ (80045d8 <prvTimerTask+0x19c>)
{
 8004444:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004446:	6833      	ldr	r3, [r6, #0]
 8004448:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800444a:	2d00      	cmp	r5, #0
 800444c:	d033      	beq.n	80044b6 <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800444e:	68db      	ldr	r3, [r3, #12]
 8004450:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8004454:	f7ff fb28 	bl	8003aa8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004458:	a803      	add	r0, sp, #12
 800445a:	f7ff ff9f 	bl	800439c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800445e:	9c03      	ldr	r4, [sp, #12]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004460:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8004462:	2c00      	cmp	r4, #0
 8004464:	d175      	bne.n	8004552 <prvTimerTask+0x116>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004466:	2d00      	cmp	r5, #0
 8004468:	d058      	beq.n	800451c <prvTimerTask+0xe0>
 800446a:	4540      	cmp	r0, r8
 800446c:	d35c      	bcc.n	8004528 <prvTimerTask+0xec>
				( void ) xTaskResumeAll();
 800446e:	f7ff fbc3 	bl	8003bf8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004472:	6833      	ldr	r3, [r6, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004478:	1d28      	adds	r0, r5, #4
 800447a:	f7fe fca4 	bl	8002dc6 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800447e:	69eb      	ldr	r3, [r5, #28]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d11a      	bne.n	80044ba <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004484:	69a9      	ldr	r1, [r5, #24]
 8004486:	4643      	mov	r3, r8
 8004488:	464a      	mov	r2, r9
 800448a:	4628      	mov	r0, r5
 800448c:	4441      	add	r1, r8
 800448e:	f7ff fe73 	bl	8004178 <prvInsertTimerInActiveList>
 8004492:	b190      	cbz	r0, 80044ba <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004494:	4623      	mov	r3, r4
 8004496:	4642      	mov	r2, r8
 8004498:	4621      	mov	r1, r4
 800449a:	4628      	mov	r0, r5
 800449c:	9400      	str	r4, [sp, #0]
 800449e:	f7ff ff53 	bl	8004348 <xTimerGenericCommand>
			configASSERT( xResult );
 80044a2:	b950      	cbnz	r0, 80044ba <prvTimerTask+0x7e>
 80044a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044a8:	f383 8811 	msr	BASEPRI, r3
 80044ac:	f3bf 8f6f 	isb	sy
 80044b0:	f3bf 8f4f 	dsb	sy
 80044b4:	e7fe      	b.n	80044b4 <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 80044b6:	46a8      	mov	r8, r5
 80044b8:	e7cc      	b.n	8004454 <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044ba:	4628      	mov	r0, r5
 80044bc:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80044be:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80044c0:	2200      	movs	r2, #0
 80044c2:	6838      	ldr	r0, [r7, #0]
 80044c4:	a903      	add	r1, sp, #12
 80044c6:	f7fe fed2 	bl	800326e <xQueueReceive>
 80044ca:	2800      	cmp	r0, #0
 80044cc:	d0bb      	beq.n	8004446 <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80044ce:	9b03      	ldr	r3, [sp, #12]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	dbf5      	blt.n	80044c0 <prvTimerTask+0x84>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80044d4:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80044d6:	6963      	ldr	r3, [r4, #20]
 80044d8:	b113      	cbz	r3, 80044e0 <prvTimerTask+0xa4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80044da:	1d20      	adds	r0, r4, #4
 80044dc:	f7fe fc73 	bl	8002dc6 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044e0:	a802      	add	r0, sp, #8
 80044e2:	f7ff ff5b 	bl	800439c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80044e6:	9b03      	ldr	r3, [sp, #12]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80044e8:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 80044ea:	2b09      	cmp	r3, #9
 80044ec:	d8e8      	bhi.n	80044c0 <prvTimerTask+0x84>
 80044ee:	a101      	add	r1, pc, #4	@ (adr r1, 80044f4 <prvTimerTask+0xb8>)
 80044f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044f4:	08004559 	.word	0x08004559
 80044f8:	08004559 	.word	0x08004559
 80044fc:	08004559 	.word	0x08004559
 8004500:	080044c1 	.word	0x080044c1
 8004504:	0800459d 	.word	0x0800459d
 8004508:	080045c1 	.word	0x080045c1
 800450c:	08004559 	.word	0x08004559
 8004510:	08004559 	.word	0x08004559
 8004514:	080044c1 	.word	0x080044c1
 8004518:	0800459d 	.word	0x0800459d
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800451c:	4b2f      	ldr	r3, [pc, #188]	@ (80045dc <prvTimerTask+0x1a0>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681c      	ldr	r4, [r3, #0]
 8004522:	fab4 f484 	clz	r4, r4
 8004526:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004528:	4622      	mov	r2, r4
 800452a:	6838      	ldr	r0, [r7, #0]
 800452c:	eba8 0109 	sub.w	r1, r8, r9
 8004530:	f7fe ff9a 	bl	8003468 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004534:	f7ff fb60 	bl	8003bf8 <xTaskResumeAll>
 8004538:	2800      	cmp	r0, #0
 800453a:	d1c1      	bne.n	80044c0 <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 800453c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004540:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004544:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8004548:	f3bf 8f4f 	dsb	sy
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	e7b6      	b.n	80044c0 <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 8004552:	f7ff fb51 	bl	8003bf8 <xTaskResumeAll>
}
 8004556:	e7b3      	b.n	80044c0 <prvTimerTask+0x84>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004558:	69a1      	ldr	r1, [r4, #24]
 800455a:	9b04      	ldr	r3, [sp, #16]
 800455c:	4620      	mov	r0, r4
 800455e:	4419      	add	r1, r3
 8004560:	f7ff fe0a 	bl	8004178 <prvInsertTimerInActiveList>
 8004564:	2800      	cmp	r0, #0
 8004566:	d0ab      	beq.n	80044c0 <prvTimerTask+0x84>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004568:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800456a:	4620      	mov	r0, r4
 800456c:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800456e:	69e3      	ldr	r3, [r4, #28]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d1a5      	bne.n	80044c0 <prvTimerTask+0x84>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004574:	2300      	movs	r3, #0
 8004576:	69a2      	ldr	r2, [r4, #24]
 8004578:	9904      	ldr	r1, [sp, #16]
 800457a:	4620      	mov	r0, r4
 800457c:	440a      	add	r2, r1
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	4619      	mov	r1, r3
 8004582:	f7ff fee1 	bl	8004348 <xTimerGenericCommand>
							configASSERT( xResult );
 8004586:	2800      	cmp	r0, #0
 8004588:	d19a      	bne.n	80044c0 <prvTimerTask+0x84>
 800458a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800458e:	f383 8811 	msr	BASEPRI, r3
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	f3bf 8f4f 	dsb	sy
 800459a:	e7fe      	b.n	800459a <prvTimerTask+0x15e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800459c:	9904      	ldr	r1, [sp, #16]
 800459e:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80045a0:	b941      	cbnz	r1, 80045b4 <prvTimerTask+0x178>
 80045a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045a6:	f383 8811 	msr	BASEPRI, r3
 80045aa:	f3bf 8f6f 	isb	sy
 80045ae:	f3bf 8f4f 	dsb	sy
 80045b2:	e7fe      	b.n	80045b2 <prvTimerTask+0x176>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80045b4:	4603      	mov	r3, r0
 80045b6:	4401      	add	r1, r0
 80045b8:	4620      	mov	r0, r4
 80045ba:	f7ff fddd 	bl	8004178 <prvInsertTimerInActiveList>
					break;
 80045be:	e77f      	b.n	80044c0 <prvTimerTask+0x84>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80045c0:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	f47f af7b 	bne.w	80044c0 <prvTimerTask+0x84>
							vPortFree( pxTimer );
 80045ca:	4620      	mov	r0, r4
 80045cc:	f000 fa30 	bl	8004a30 <vPortFree>
 80045d0:	e776      	b.n	80044c0 <prvTimerTask+0x84>
 80045d2:	bf00      	nop
 80045d4:	20000e24 	.word	0x20000e24
 80045d8:	20000e1c 	.word	0x20000e1c
 80045dc:	20000e20 	.word	0x20000e20

080045e0 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80045e0:	b510      	push	{r4, lr}
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );
 80045e2:	4604      	mov	r4, r0
 80045e4:	b940      	cbnz	r0, 80045f8 <xTimerIsTimerActive+0x18>
 80045e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045ea:	f383 8811 	msr	BASEPRI, r3
 80045ee:	f3bf 8f6f 	isb	sy
 80045f2:	f3bf 8f4f 	dsb	sy
 80045f6:	e7fe      	b.n	80045f6 <xTimerIsTimerActive+0x16>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80045f8:	f000 f85c 	bl	80046b4 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 80045fc:	6964      	ldr	r4, [r4, #20]
 80045fe:	3c00      	subs	r4, #0
 8004600:	bf18      	it	ne
 8004602:	2401      	movne	r4, #1
	}
	taskEXIT_CRITICAL();
 8004604:	f000 f876 	bl	80046f4 <vPortExitCritical>

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8004608:	4620      	mov	r0, r4
 800460a:	bd10      	pop	{r4, pc}

0800460c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800460c:	4806      	ldr	r0, [pc, #24]	@ (8004628 <prvPortStartFirstTask+0x1c>)
 800460e:	6800      	ldr	r0, [r0, #0]
 8004610:	6800      	ldr	r0, [r0, #0]
 8004612:	f380 8808 	msr	MSP, r0
 8004616:	b662      	cpsie	i
 8004618:	b661      	cpsie	f
 800461a:	f3bf 8f4f 	dsb	sy
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	df00      	svc	0
 8004624:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004626:	0000      	.short	0x0000
 8004628:	e000ed08 	.word	0xe000ed08

0800462c <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 800462c:	2300      	movs	r3, #0
{
 800462e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8004630:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8004632:	4b0d      	ldr	r3, [pc, #52]	@ (8004668 <prvTaskExitError+0x3c>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3301      	adds	r3, #1
 8004638:	d008      	beq.n	800464c <prvTaskExitError+0x20>
 800463a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	e7fe      	b.n	800464a <prvTaskExitError+0x1e>
 800464c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004650:	f383 8811 	msr	BASEPRI, r3
 8004654:	f3bf 8f6f 	isb	sy
 8004658:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800465c:	9b01      	ldr	r3, [sp, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d0fc      	beq.n	800465c <prvTaskExitError+0x30>
}
 8004662:	b002      	add	sp, #8
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	20000018 	.word	0x20000018

0800466c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800466c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004670:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004674:	4b05      	ldr	r3, [pc, #20]	@ (800468c <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004676:	f021 0101 	bic.w	r1, r1, #1
 800467a:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800467e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004682:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8004686:	3840      	subs	r0, #64	@ 0x40
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	0800462d 	.word	0x0800462d

08004690 <SVC_Handler>:
	__asm volatile (
 8004690:	4b07      	ldr	r3, [pc, #28]	@ (80046b0 <pxCurrentTCBConst2>)
 8004692:	6819      	ldr	r1, [r3, #0]
 8004694:	6808      	ldr	r0, [r1, #0]
 8004696:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800469a:	f380 8809 	msr	PSP, r0
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f04f 0000 	mov.w	r0, #0
 80046a6:	f380 8811 	msr	BASEPRI, r0
 80046aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80046ae:	4770      	bx	lr

080046b0 <pxCurrentTCBConst2>:
 80046b0:	20000d50 	.word	0x20000d50

080046b4 <vPortEnterCritical>:
 80046b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b8:	f383 8811 	msr	BASEPRI, r3
 80046bc:	f3bf 8f6f 	isb	sy
 80046c0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80046c4:	4a0a      	ldr	r2, [pc, #40]	@ (80046f0 <vPortEnterCritical+0x3c>)
 80046c6:	6813      	ldr	r3, [r2, #0]
 80046c8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80046ca:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80046cc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80046ce:	d10e      	bne.n	80046ee <vPortEnterCritical+0x3a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80046d0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80046d4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	b143      	cbz	r3, 80046ee <vPortEnterCritical+0x3a>
 80046dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e0:	f383 8811 	msr	BASEPRI, r3
 80046e4:	f3bf 8f6f 	isb	sy
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	e7fe      	b.n	80046ec <vPortEnterCritical+0x38>
	}
}
 80046ee:	4770      	bx	lr
 80046f0:	20000018 	.word	0x20000018

080046f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 80046f4:	4a08      	ldr	r2, [pc, #32]	@ (8004718 <vPortExitCritical+0x24>)
 80046f6:	6813      	ldr	r3, [r2, #0]
 80046f8:	b943      	cbnz	r3, 800470c <vPortExitCritical+0x18>
 80046fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046fe:	f383 8811 	msr	BASEPRI, r3
 8004702:	f3bf 8f6f 	isb	sy
 8004706:	f3bf 8f4f 	dsb	sy
 800470a:	e7fe      	b.n	800470a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800470c:	3b01      	subs	r3, #1
 800470e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004710:	b90b      	cbnz	r3, 8004716 <vPortExitCritical+0x22>
	__asm volatile
 8004712:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004716:	4770      	bx	lr
 8004718:	20000018 	.word	0x20000018
 800471c:	00000000 	.word	0x00000000

08004720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004720:	f3ef 8009 	mrs	r0, PSP
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	4b0d      	ldr	r3, [pc, #52]	@ (8004760 <pxCurrentTCBConst>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004730:	6010      	str	r0, [r2, #0]
 8004732:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004736:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800473a:	f380 8811 	msr	BASEPRI, r0
 800473e:	f7ff fb3f 	bl	8003dc0 <vTaskSwitchContext>
 8004742:	f04f 0000 	mov.w	r0, #0
 8004746:	f380 8811 	msr	BASEPRI, r0
 800474a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800474e:	6819      	ldr	r1, [r3, #0]
 8004750:	6808      	ldr	r0, [r1, #0]
 8004752:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004756:	f380 8809 	msr	PSP, r0
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	4770      	bx	lr

08004760 <pxCurrentTCBConst>:
 8004760:	20000d50 	.word	0x20000d50

08004764 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004764:	b508      	push	{r3, lr}
	__asm volatile
 8004766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800476a:	f383 8811 	msr	BASEPRI, r3
 800476e:	f3bf 8f6f 	isb	sy
 8004772:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004776:	f7ff f9a5 	bl	8003ac4 <xTaskIncrementTick>
 800477a:	b128      	cbz	r0, 8004788 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800477c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8004780:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004784:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8004788:	2300      	movs	r3, #0
 800478a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800478e:	bd08      	pop	{r3, pc}

08004790 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004790:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8004794:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004796:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800479a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800479c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800479e:	4b04      	ldr	r3, [pc, #16]	@ (80047b0 <vPortSetupTimerInterrupt+0x20>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80047a6:	3b01      	subs	r3, #1
 80047a8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047aa:	2307      	movs	r3, #7
 80047ac:	6113      	str	r3, [r2, #16]
}
 80047ae:	4770      	bx	lr
 80047b0:	2000000c 	.word	0x2000000c

080047b4 <xPortStartScheduler>:
{
 80047b4:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047b6:	4b27      	ldr	r3, [pc, #156]	@ (8004854 <xPortStartScheduler+0xa0>)
 80047b8:	781a      	ldrb	r2, [r3, #0]
 80047ba:	b2d2      	uxtb	r2, r2
 80047bc:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047be:	22ff      	movs	r2, #255	@ 0xff
 80047c0:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047c2:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047c4:	4a24      	ldr	r2, [pc, #144]	@ (8004858 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047cc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80047d0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80047d4:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80047d6:	2307      	movs	r3, #7
 80047d8:	4a20      	ldr	r2, [pc, #128]	@ (800485c <xPortStartScheduler+0xa8>)
 80047da:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047dc:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 80047e0:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80047e2:	0609      	lsls	r1, r1, #24
 80047e4:	d40a      	bmi.n	80047fc <xPortStartScheduler+0x48>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80047e6:	2b03      	cmp	r3, #3
 80047e8:	d011      	beq.n	800480e <xPortStartScheduler+0x5a>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	e7fe      	b.n	80047fa <xPortStartScheduler+0x46>
			ulMaxPRIGROUPValue--;
 80047fc:	3b01      	subs	r3, #1
 80047fe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004800:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8004804:	005b      	lsls	r3, r3, #1
 8004806:	b2db      	uxtb	r3, r3
 8004808:	f88d 3003 	strb.w	r3, [sp, #3]
 800480c:	e7e6      	b.n	80047dc <xPortStartScheduler+0x28>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800480e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004812:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004814:	9b01      	ldr	r3, [sp, #4]
 8004816:	4a0f      	ldr	r2, [pc, #60]	@ (8004854 <xPortStartScheduler+0xa0>)
 8004818:	b2db      	uxtb	r3, r3
 800481a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800481c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 8004820:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004822:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8004826:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800482a:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800482e:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8004832:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 8004836:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800483a:	f7ff ffa9 	bl	8004790 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800483e:	4b08      	ldr	r3, [pc, #32]	@ (8004860 <xPortStartScheduler+0xac>)
 8004840:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8004842:	f7ff fee3 	bl	800460c <prvPortStartFirstTask>
	vTaskSwitchContext();
 8004846:	f7ff fabb 	bl	8003dc0 <vTaskSwitchContext>
}
 800484a:	4620      	mov	r0, r4
	prvTaskExitError();
 800484c:	f7ff feee 	bl	800462c <prvTaskExitError>
}
 8004850:	b002      	add	sp, #8
 8004852:	bd10      	pop	{r4, pc}
 8004854:	e000e400 	.word	0xe000e400
 8004858:	20000e54 	.word	0x20000e54
 800485c:	20000e50 	.word	0x20000e50
 8004860:	20000018 	.word	0x20000018

08004864 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004864:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004868:	2b0f      	cmp	r3, #15
 800486a:	d90e      	bls.n	800488a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800486c:	4a11      	ldr	r2, [pc, #68]	@ (80048b4 <vPortValidateInterruptPriority+0x50>)
 800486e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004870:	4a11      	ldr	r2, [pc, #68]	@ (80048b8 <vPortValidateInterruptPriority+0x54>)
 8004872:	7812      	ldrb	r2, [r2, #0]
 8004874:	429a      	cmp	r2, r3
 8004876:	d908      	bls.n	800488a <vPortValidateInterruptPriority+0x26>
 8004878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800487c:	f383 8811 	msr	BASEPRI, r3
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	f3bf 8f4f 	dsb	sy
 8004888:	e7fe      	b.n	8004888 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800488a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800488e:	4a0b      	ldr	r2, [pc, #44]	@ (80048bc <vPortValidateInterruptPriority+0x58>)
 8004890:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8004894:	6812      	ldr	r2, [r2, #0]
 8004896:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800489a:	4293      	cmp	r3, r2
 800489c:	d908      	bls.n	80048b0 <vPortValidateInterruptPriority+0x4c>
 800489e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048a2:	f383 8811 	msr	BASEPRI, r3
 80048a6:	f3bf 8f6f 	isb	sy
 80048aa:	f3bf 8f4f 	dsb	sy
 80048ae:	e7fe      	b.n	80048ae <vPortValidateInterruptPriority+0x4a>
	}
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	e000e3f0 	.word	0xe000e3f0
 80048b8:	20000e54 	.word	0x20000e54
 80048bc:	20000e50 	.word	0x20000e50

080048c0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80048c0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048c2:	4b10      	ldr	r3, [pc, #64]	@ (8004904 <prvInsertBlockIntoFreeList+0x44>)
 80048c4:	461a      	mov	r2, r3
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4283      	cmp	r3, r0
 80048ca:	d3fb      	bcc.n	80048c4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80048cc:	6854      	ldr	r4, [r2, #4]
 80048ce:	1911      	adds	r1, r2, r4
 80048d0:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80048d2:	bf01      	itttt	eq
 80048d4:	6841      	ldreq	r1, [r0, #4]
 80048d6:	4610      	moveq	r0, r2
 80048d8:	1909      	addeq	r1, r1, r4
 80048da:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80048dc:	6844      	ldr	r4, [r0, #4]
 80048de:	1901      	adds	r1, r0, r4
 80048e0:	428b      	cmp	r3, r1
 80048e2:	d10c      	bne.n	80048fe <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80048e4:	4908      	ldr	r1, [pc, #32]	@ (8004908 <prvInsertBlockIntoFreeList+0x48>)
 80048e6:	6809      	ldr	r1, [r1, #0]
 80048e8:	428b      	cmp	r3, r1
 80048ea:	d003      	beq.n	80048f4 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80048ec:	6859      	ldr	r1, [r3, #4]
 80048ee:	4421      	add	r1, r4
 80048f0:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80048f2:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80048f4:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80048f6:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80048f8:	bf18      	it	ne
 80048fa:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80048fc:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80048fe:	4619      	mov	r1, r3
 8004900:	e7f8      	b.n	80048f4 <prvInsertBlockIntoFreeList+0x34>
 8004902:	bf00      	nop
 8004904:	20000e68 	.word	0x20000e68
 8004908:	20000e64 	.word	0x20000e64

0800490c <pvPortMalloc>:
{
 800490c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004910:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8004912:	f7ff f8c9 	bl	8003aa8 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004916:	4940      	ldr	r1, [pc, #256]	@ (8004a18 <pvPortMalloc+0x10c>)
 8004918:	4d40      	ldr	r5, [pc, #256]	@ (8004a1c <pvPortMalloc+0x110>)
 800491a:	680b      	ldr	r3, [r1, #0]
 800491c:	bb0b      	cbnz	r3, 8004962 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800491e:	4a40      	ldr	r2, [pc, #256]	@ (8004a20 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004920:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004922:	bf1f      	itttt	ne
 8004924:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004926:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800492a:	f502 6240 	addne.w	r2, r2, #3072	@ 0xc00
 800492e:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004930:	bf0c      	ite	eq
 8004932:	f44f 6340 	moveq.w	r3, #3072	@ 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004936:	4602      	movne	r2, r0
	xStart.xBlockSize = ( size_t ) 0;
 8004938:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800493a:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800493c:	4e39      	ldr	r6, [pc, #228]	@ (8004a24 <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 800493e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004940:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8004944:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004946:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8004948:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800494c:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800494e:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8004952:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004954:	4b34      	ldr	r3, [pc, #208]	@ (8004a28 <pvPortMalloc+0x11c>)
 8004956:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004958:	4b34      	ldr	r3, [pc, #208]	@ (8004a2c <pvPortMalloc+0x120>)
 800495a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800495c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004960:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004962:	682e      	ldr	r6, [r5, #0]
 8004964:	4226      	tst	r6, r4
 8004966:	d151      	bne.n	8004a0c <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 8004968:	2c00      	cmp	r4, #0
 800496a:	d042      	beq.n	80049f2 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 800496c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004970:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004972:	bf1c      	itt	ne
 8004974:	f023 0307 	bicne.w	r3, r3, #7
 8004978:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800497a:	2b00      	cmp	r3, #0
 800497c:	d046      	beq.n	8004a0c <pvPortMalloc+0x100>
 800497e:	4f2b      	ldr	r7, [pc, #172]	@ (8004a2c <pvPortMalloc+0x120>)
 8004980:	683c      	ldr	r4, [r7, #0]
 8004982:	429c      	cmp	r4, r3
 8004984:	d342      	bcc.n	8004a0c <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 8004986:	4a27      	ldr	r2, [pc, #156]	@ (8004a24 <pvPortMalloc+0x118>)
 8004988:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800498a:	6868      	ldr	r0, [r5, #4]
 800498c:	4298      	cmp	r0, r3
 800498e:	d204      	bcs.n	800499a <pvPortMalloc+0x8e>
 8004990:	f8d5 c000 	ldr.w	ip, [r5]
 8004994:	f1bc 0f00 	cmp.w	ip, #0
 8004998:	d115      	bne.n	80049c6 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800499a:	6809      	ldr	r1, [r1, #0]
 800499c:	42a9      	cmp	r1, r5
 800499e:	d035      	beq.n	8004a0c <pvPortMalloc+0x100>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049a0:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049a2:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049a6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049a8:	1ac2      	subs	r2, r0, r3
 80049aa:	2a10      	cmp	r2, #16
 80049ac:	d912      	bls.n	80049d4 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80049ae:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049b0:	0741      	lsls	r1, r0, #29
 80049b2:	d00b      	beq.n	80049cc <pvPortMalloc+0xc0>
 80049b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b8:	f383 8811 	msr	BASEPRI, r3
 80049bc:	f3bf 8f6f 	isb	sy
 80049c0:	f3bf 8f4f 	dsb	sy
 80049c4:	e7fe      	b.n	80049c4 <pvPortMalloc+0xb8>
 80049c6:	462a      	mov	r2, r5
 80049c8:	4665      	mov	r5, ip
 80049ca:	e7de      	b.n	800498a <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80049cc:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80049ce:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049d0:	f7ff ff76 	bl	80048c0 <prvInsertBlockIntoFreeList>
					pxBlock->pxNextFreeBlock = NULL;
 80049d4:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049d6:	4914      	ldr	r1, [pc, #80]	@ (8004a28 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049d8:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049da:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049dc:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049de:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049e0:	ea46 0602 	orr.w	r6, r6, r2
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049e4:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049e6:	bf38      	it	cc
 80049e8:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80049ea:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049ec:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 80049f0:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 80049f2:	f7ff f901 	bl	8003bf8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049f6:	0763      	lsls	r3, r4, #29
 80049f8:	d00a      	beq.n	8004a10 <pvPortMalloc+0x104>
 80049fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fe:	f383 8811 	msr	BASEPRI, r3
 8004a02:	f3bf 8f6f 	isb	sy
 8004a06:	f3bf 8f4f 	dsb	sy
 8004a0a:	e7fe      	b.n	8004a0a <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 8004a0c:	2400      	movs	r4, #0
 8004a0e:	e7f0      	b.n	80049f2 <pvPortMalloc+0xe6>
}
 8004a10:	4620      	mov	r0, r4
 8004a12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a16:	bf00      	nop
 8004a18:	20000e64 	.word	0x20000e64
 8004a1c:	20000e58 	.word	0x20000e58
 8004a20:	20000e70 	.word	0x20000e70
 8004a24:	20000e68 	.word	0x20000e68
 8004a28:	20000e5c 	.word	0x20000e5c
 8004a2c:	20000e60 	.word	0x20000e60

08004a30 <vPortFree>:
{
 8004a30:	b510      	push	{r4, lr}
	if( pv != NULL )
 8004a32:	4604      	mov	r4, r0
 8004a34:	b370      	cbz	r0, 8004a94 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004a36:	4a18      	ldr	r2, [pc, #96]	@ (8004a98 <vPortFree+0x68>)
 8004a38:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004a3c:	6812      	ldr	r2, [r2, #0]
 8004a3e:	4213      	tst	r3, r2
 8004a40:	d108      	bne.n	8004a54 <vPortFree+0x24>
 8004a42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	e7fe      	b.n	8004a52 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a54:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004a58:	b141      	cbz	r1, 8004a6c <vPortFree+0x3c>
 8004a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	e7fe      	b.n	8004a6a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004a6c:	ea23 0302 	bic.w	r3, r3, r2
 8004a70:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8004a74:	f7ff f818 	bl	8003aa8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a78:	4a08      	ldr	r2, [pc, #32]	@ (8004a9c <vPortFree+0x6c>)
 8004a7a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004a7e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a80:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004a84:	440b      	add	r3, r1
 8004a86:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004a88:	f7ff ff1a 	bl	80048c0 <prvInsertBlockIntoFreeList>
}
 8004a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8004a90:	f7ff b8b2 	b.w	8003bf8 <xTaskResumeAll>
}
 8004a94:	bd10      	pop	{r4, pc}
 8004a96:	bf00      	nop
 8004a98:	20000e58 	.word	0x20000e58
 8004a9c:	20000e60 	.word	0x20000e60

08004aa0 <std>:
 8004aa0:	2300      	movs	r3, #0
 8004aa2:	b510      	push	{r4, lr}
 8004aa4:	4604      	mov	r4, r0
 8004aa6:	e9c0 3300 	strd	r3, r3, [r0]
 8004aaa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004aae:	6083      	str	r3, [r0, #8]
 8004ab0:	8181      	strh	r1, [r0, #12]
 8004ab2:	6643      	str	r3, [r0, #100]	@ 0x64
 8004ab4:	81c2      	strh	r2, [r0, #14]
 8004ab6:	6183      	str	r3, [r0, #24]
 8004ab8:	4619      	mov	r1, r3
 8004aba:	2208      	movs	r2, #8
 8004abc:	305c      	adds	r0, #92	@ 0x5c
 8004abe:	f000 f926 	bl	8004d0e <memset>
 8004ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8004af8 <std+0x58>)
 8004ac4:	6224      	str	r4, [r4, #32]
 8004ac6:	6263      	str	r3, [r4, #36]	@ 0x24
 8004ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8004afc <std+0x5c>)
 8004aca:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004acc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b00 <std+0x60>)
 8004ace:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8004b04 <std+0x64>)
 8004ad2:	6323      	str	r3, [r4, #48]	@ 0x30
 8004ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8004b08 <std+0x68>)
 8004ad6:	429c      	cmp	r4, r3
 8004ad8:	d006      	beq.n	8004ae8 <std+0x48>
 8004ada:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004ade:	4294      	cmp	r4, r2
 8004ae0:	d002      	beq.n	8004ae8 <std+0x48>
 8004ae2:	33d0      	adds	r3, #208	@ 0xd0
 8004ae4:	429c      	cmp	r4, r3
 8004ae6:	d105      	bne.n	8004af4 <std+0x54>
 8004ae8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004aec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004af0:	f000 b986 	b.w	8004e00 <__retarget_lock_init_recursive>
 8004af4:	bd10      	pop	{r4, pc}
 8004af6:	bf00      	nop
 8004af8:	08004c89 	.word	0x08004c89
 8004afc:	08004cab 	.word	0x08004cab
 8004b00:	08004ce3 	.word	0x08004ce3
 8004b04:	08004d07 	.word	0x08004d07
 8004b08:	20001a70 	.word	0x20001a70

08004b0c <stdio_exit_handler>:
 8004b0c:	4a02      	ldr	r2, [pc, #8]	@ (8004b18 <stdio_exit_handler+0xc>)
 8004b0e:	4903      	ldr	r1, [pc, #12]	@ (8004b1c <stdio_exit_handler+0x10>)
 8004b10:	4803      	ldr	r0, [pc, #12]	@ (8004b20 <stdio_exit_handler+0x14>)
 8004b12:	f000 b869 	b.w	8004be8 <_fwalk_sglue>
 8004b16:	bf00      	nop
 8004b18:	2000001c 	.word	0x2000001c
 8004b1c:	08005965 	.word	0x08005965
 8004b20:	2000002c 	.word	0x2000002c

08004b24 <cleanup_stdio>:
 8004b24:	6841      	ldr	r1, [r0, #4]
 8004b26:	4b0c      	ldr	r3, [pc, #48]	@ (8004b58 <cleanup_stdio+0x34>)
 8004b28:	b510      	push	{r4, lr}
 8004b2a:	4299      	cmp	r1, r3
 8004b2c:	4604      	mov	r4, r0
 8004b2e:	d001      	beq.n	8004b34 <cleanup_stdio+0x10>
 8004b30:	f000 ff18 	bl	8005964 <_fflush_r>
 8004b34:	68a1      	ldr	r1, [r4, #8]
 8004b36:	4b09      	ldr	r3, [pc, #36]	@ (8004b5c <cleanup_stdio+0x38>)
 8004b38:	4299      	cmp	r1, r3
 8004b3a:	d002      	beq.n	8004b42 <cleanup_stdio+0x1e>
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	f000 ff11 	bl	8005964 <_fflush_r>
 8004b42:	68e1      	ldr	r1, [r4, #12]
 8004b44:	4b06      	ldr	r3, [pc, #24]	@ (8004b60 <cleanup_stdio+0x3c>)
 8004b46:	4299      	cmp	r1, r3
 8004b48:	d004      	beq.n	8004b54 <cleanup_stdio+0x30>
 8004b4a:	4620      	mov	r0, r4
 8004b4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b50:	f000 bf08 	b.w	8005964 <_fflush_r>
 8004b54:	bd10      	pop	{r4, pc}
 8004b56:	bf00      	nop
 8004b58:	20001a70 	.word	0x20001a70
 8004b5c:	20001ad8 	.word	0x20001ad8
 8004b60:	20001b40 	.word	0x20001b40

08004b64 <global_stdio_init.part.0>:
 8004b64:	b510      	push	{r4, lr}
 8004b66:	4b0b      	ldr	r3, [pc, #44]	@ (8004b94 <global_stdio_init.part.0+0x30>)
 8004b68:	4c0b      	ldr	r4, [pc, #44]	@ (8004b98 <global_stdio_init.part.0+0x34>)
 8004b6a:	4a0c      	ldr	r2, [pc, #48]	@ (8004b9c <global_stdio_init.part.0+0x38>)
 8004b6c:	4620      	mov	r0, r4
 8004b6e:	601a      	str	r2, [r3, #0]
 8004b70:	2104      	movs	r1, #4
 8004b72:	2200      	movs	r2, #0
 8004b74:	f7ff ff94 	bl	8004aa0 <std>
 8004b78:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	2109      	movs	r1, #9
 8004b80:	f7ff ff8e 	bl	8004aa0 <std>
 8004b84:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004b88:	2202      	movs	r2, #2
 8004b8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004b8e:	2112      	movs	r1, #18
 8004b90:	f7ff bf86 	b.w	8004aa0 <std>
 8004b94:	20001ba8 	.word	0x20001ba8
 8004b98:	20001a70 	.word	0x20001a70
 8004b9c:	08004b0d 	.word	0x08004b0d

08004ba0 <__sfp_lock_acquire>:
 8004ba0:	4801      	ldr	r0, [pc, #4]	@ (8004ba8 <__sfp_lock_acquire+0x8>)
 8004ba2:	f000 b92e 	b.w	8004e02 <__retarget_lock_acquire_recursive>
 8004ba6:	bf00      	nop
 8004ba8:	20001bb1 	.word	0x20001bb1

08004bac <__sfp_lock_release>:
 8004bac:	4801      	ldr	r0, [pc, #4]	@ (8004bb4 <__sfp_lock_release+0x8>)
 8004bae:	f000 b929 	b.w	8004e04 <__retarget_lock_release_recursive>
 8004bb2:	bf00      	nop
 8004bb4:	20001bb1 	.word	0x20001bb1

08004bb8 <__sinit>:
 8004bb8:	b510      	push	{r4, lr}
 8004bba:	4604      	mov	r4, r0
 8004bbc:	f7ff fff0 	bl	8004ba0 <__sfp_lock_acquire>
 8004bc0:	6a23      	ldr	r3, [r4, #32]
 8004bc2:	b11b      	cbz	r3, 8004bcc <__sinit+0x14>
 8004bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004bc8:	f7ff bff0 	b.w	8004bac <__sfp_lock_release>
 8004bcc:	4b04      	ldr	r3, [pc, #16]	@ (8004be0 <__sinit+0x28>)
 8004bce:	6223      	str	r3, [r4, #32]
 8004bd0:	4b04      	ldr	r3, [pc, #16]	@ (8004be4 <__sinit+0x2c>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f5      	bne.n	8004bc4 <__sinit+0xc>
 8004bd8:	f7ff ffc4 	bl	8004b64 <global_stdio_init.part.0>
 8004bdc:	e7f2      	b.n	8004bc4 <__sinit+0xc>
 8004bde:	bf00      	nop
 8004be0:	08004b25 	.word	0x08004b25
 8004be4:	20001ba8 	.word	0x20001ba8

08004be8 <_fwalk_sglue>:
 8004be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004bec:	4607      	mov	r7, r0
 8004bee:	4688      	mov	r8, r1
 8004bf0:	4614      	mov	r4, r2
 8004bf2:	2600      	movs	r6, #0
 8004bf4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004bf8:	f1b9 0901 	subs.w	r9, r9, #1
 8004bfc:	d505      	bpl.n	8004c0a <_fwalk_sglue+0x22>
 8004bfe:	6824      	ldr	r4, [r4, #0]
 8004c00:	2c00      	cmp	r4, #0
 8004c02:	d1f7      	bne.n	8004bf4 <_fwalk_sglue+0xc>
 8004c04:	4630      	mov	r0, r6
 8004c06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c0a:	89ab      	ldrh	r3, [r5, #12]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d907      	bls.n	8004c20 <_fwalk_sglue+0x38>
 8004c10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004c14:	3301      	adds	r3, #1
 8004c16:	d003      	beq.n	8004c20 <_fwalk_sglue+0x38>
 8004c18:	4629      	mov	r1, r5
 8004c1a:	4638      	mov	r0, r7
 8004c1c:	47c0      	blx	r8
 8004c1e:	4306      	orrs	r6, r0
 8004c20:	3568      	adds	r5, #104	@ 0x68
 8004c22:	e7e9      	b.n	8004bf8 <_fwalk_sglue+0x10>

08004c24 <iprintf>:
 8004c24:	b40f      	push	{r0, r1, r2, r3}
 8004c26:	b507      	push	{r0, r1, r2, lr}
 8004c28:	4906      	ldr	r1, [pc, #24]	@ (8004c44 <iprintf+0x20>)
 8004c2a:	ab04      	add	r3, sp, #16
 8004c2c:	6808      	ldr	r0, [r1, #0]
 8004c2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c32:	6881      	ldr	r1, [r0, #8]
 8004c34:	9301      	str	r3, [sp, #4]
 8004c36:	f000 fb6b 	bl	8005310 <_vfiprintf_r>
 8004c3a:	b003      	add	sp, #12
 8004c3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c40:	b004      	add	sp, #16
 8004c42:	4770      	bx	lr
 8004c44:	20000028 	.word	0x20000028

08004c48 <siprintf>:
 8004c48:	b40e      	push	{r1, r2, r3}
 8004c4a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004c4e:	b500      	push	{lr}
 8004c50:	b09c      	sub	sp, #112	@ 0x70
 8004c52:	ab1d      	add	r3, sp, #116	@ 0x74
 8004c54:	9002      	str	r0, [sp, #8]
 8004c56:	9006      	str	r0, [sp, #24]
 8004c58:	9107      	str	r1, [sp, #28]
 8004c5a:	9104      	str	r1, [sp, #16]
 8004c5c:	4808      	ldr	r0, [pc, #32]	@ (8004c80 <siprintf+0x38>)
 8004c5e:	4909      	ldr	r1, [pc, #36]	@ (8004c84 <siprintf+0x3c>)
 8004c60:	f853 2b04 	ldr.w	r2, [r3], #4
 8004c64:	9105      	str	r1, [sp, #20]
 8004c66:	6800      	ldr	r0, [r0, #0]
 8004c68:	a902      	add	r1, sp, #8
 8004c6a:	9301      	str	r3, [sp, #4]
 8004c6c:	f000 fa2c 	bl	80050c8 <_svfiprintf_r>
 8004c70:	2200      	movs	r2, #0
 8004c72:	9b02      	ldr	r3, [sp, #8]
 8004c74:	701a      	strb	r2, [r3, #0]
 8004c76:	b01c      	add	sp, #112	@ 0x70
 8004c78:	f85d eb04 	ldr.w	lr, [sp], #4
 8004c7c:	b003      	add	sp, #12
 8004c7e:	4770      	bx	lr
 8004c80:	20000028 	.word	0x20000028
 8004c84:	ffff0208 	.word	0xffff0208

08004c88 <__sread>:
 8004c88:	b510      	push	{r4, lr}
 8004c8a:	460c      	mov	r4, r1
 8004c8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c90:	f000 f868 	bl	8004d64 <_read_r>
 8004c94:	2800      	cmp	r0, #0
 8004c96:	bfab      	itete	ge
 8004c98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004c9a:	89a3      	ldrhlt	r3, [r4, #12]
 8004c9c:	181b      	addge	r3, r3, r0
 8004c9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004ca2:	bfac      	ite	ge
 8004ca4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ca6:	81a3      	strhlt	r3, [r4, #12]
 8004ca8:	bd10      	pop	{r4, pc}

08004caa <__swrite>:
 8004caa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cae:	461f      	mov	r7, r3
 8004cb0:	898b      	ldrh	r3, [r1, #12]
 8004cb2:	4605      	mov	r5, r0
 8004cb4:	05db      	lsls	r3, r3, #23
 8004cb6:	460c      	mov	r4, r1
 8004cb8:	4616      	mov	r6, r2
 8004cba:	d505      	bpl.n	8004cc8 <__swrite+0x1e>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cc4:	f000 f83c 	bl	8004d40 <_lseek_r>
 8004cc8:	89a3      	ldrh	r3, [r4, #12]
 8004cca:	4632      	mov	r2, r6
 8004ccc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004cd0:	81a3      	strh	r3, [r4, #12]
 8004cd2:	4628      	mov	r0, r5
 8004cd4:	463b      	mov	r3, r7
 8004cd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004cde:	f000 b853 	b.w	8004d88 <_write_r>

08004ce2 <__sseek>:
 8004ce2:	b510      	push	{r4, lr}
 8004ce4:	460c      	mov	r4, r1
 8004ce6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004cea:	f000 f829 	bl	8004d40 <_lseek_r>
 8004cee:	1c43      	adds	r3, r0, #1
 8004cf0:	89a3      	ldrh	r3, [r4, #12]
 8004cf2:	bf15      	itete	ne
 8004cf4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004cf6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004cfa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004cfe:	81a3      	strheq	r3, [r4, #12]
 8004d00:	bf18      	it	ne
 8004d02:	81a3      	strhne	r3, [r4, #12]
 8004d04:	bd10      	pop	{r4, pc}

08004d06 <__sclose>:
 8004d06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d0a:	f000 b809 	b.w	8004d20 <_close_r>

08004d0e <memset>:
 8004d0e:	4603      	mov	r3, r0
 8004d10:	4402      	add	r2, r0
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d100      	bne.n	8004d18 <memset+0xa>
 8004d16:	4770      	bx	lr
 8004d18:	f803 1b01 	strb.w	r1, [r3], #1
 8004d1c:	e7f9      	b.n	8004d12 <memset+0x4>
	...

08004d20 <_close_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	2300      	movs	r3, #0
 8004d24:	4d05      	ldr	r5, [pc, #20]	@ (8004d3c <_close_r+0x1c>)
 8004d26:	4604      	mov	r4, r0
 8004d28:	4608      	mov	r0, r1
 8004d2a:	602b      	str	r3, [r5, #0]
 8004d2c:	f7fc fc38 	bl	80015a0 <_close>
 8004d30:	1c43      	adds	r3, r0, #1
 8004d32:	d102      	bne.n	8004d3a <_close_r+0x1a>
 8004d34:	682b      	ldr	r3, [r5, #0]
 8004d36:	b103      	cbz	r3, 8004d3a <_close_r+0x1a>
 8004d38:	6023      	str	r3, [r4, #0]
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}
 8004d3c:	20001bac 	.word	0x20001bac

08004d40 <_lseek_r>:
 8004d40:	b538      	push	{r3, r4, r5, lr}
 8004d42:	4604      	mov	r4, r0
 8004d44:	4608      	mov	r0, r1
 8004d46:	4611      	mov	r1, r2
 8004d48:	2200      	movs	r2, #0
 8004d4a:	4d05      	ldr	r5, [pc, #20]	@ (8004d60 <_lseek_r+0x20>)
 8004d4c:	602a      	str	r2, [r5, #0]
 8004d4e:	461a      	mov	r2, r3
 8004d50:	f7fc fc30 	bl	80015b4 <_lseek>
 8004d54:	1c43      	adds	r3, r0, #1
 8004d56:	d102      	bne.n	8004d5e <_lseek_r+0x1e>
 8004d58:	682b      	ldr	r3, [r5, #0]
 8004d5a:	b103      	cbz	r3, 8004d5e <_lseek_r+0x1e>
 8004d5c:	6023      	str	r3, [r4, #0]
 8004d5e:	bd38      	pop	{r3, r4, r5, pc}
 8004d60:	20001bac 	.word	0x20001bac

08004d64 <_read_r>:
 8004d64:	b538      	push	{r3, r4, r5, lr}
 8004d66:	4604      	mov	r4, r0
 8004d68:	4608      	mov	r0, r1
 8004d6a:	4611      	mov	r1, r2
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	4d05      	ldr	r5, [pc, #20]	@ (8004d84 <_read_r+0x20>)
 8004d70:	602a      	str	r2, [r5, #0]
 8004d72:	461a      	mov	r2, r3
 8004d74:	f7fc fc06 	bl	8001584 <_read>
 8004d78:	1c43      	adds	r3, r0, #1
 8004d7a:	d102      	bne.n	8004d82 <_read_r+0x1e>
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	b103      	cbz	r3, 8004d82 <_read_r+0x1e>
 8004d80:	6023      	str	r3, [r4, #0]
 8004d82:	bd38      	pop	{r3, r4, r5, pc}
 8004d84:	20001bac 	.word	0x20001bac

08004d88 <_write_r>:
 8004d88:	b538      	push	{r3, r4, r5, lr}
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	4608      	mov	r0, r1
 8004d8e:	4611      	mov	r1, r2
 8004d90:	2200      	movs	r2, #0
 8004d92:	4d05      	ldr	r5, [pc, #20]	@ (8004da8 <_write_r+0x20>)
 8004d94:	602a      	str	r2, [r5, #0]
 8004d96:	461a      	mov	r2, r3
 8004d98:	f7fb ffa4 	bl	8000ce4 <_write>
 8004d9c:	1c43      	adds	r3, r0, #1
 8004d9e:	d102      	bne.n	8004da6 <_write_r+0x1e>
 8004da0:	682b      	ldr	r3, [r5, #0]
 8004da2:	b103      	cbz	r3, 8004da6 <_write_r+0x1e>
 8004da4:	6023      	str	r3, [r4, #0]
 8004da6:	bd38      	pop	{r3, r4, r5, pc}
 8004da8:	20001bac 	.word	0x20001bac

08004dac <__errno>:
 8004dac:	4b01      	ldr	r3, [pc, #4]	@ (8004db4 <__errno+0x8>)
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop
 8004db4:	20000028 	.word	0x20000028

08004db8 <__libc_init_array>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	2600      	movs	r6, #0
 8004dbc:	4d0c      	ldr	r5, [pc, #48]	@ (8004df0 <__libc_init_array+0x38>)
 8004dbe:	4c0d      	ldr	r4, [pc, #52]	@ (8004df4 <__libc_init_array+0x3c>)
 8004dc0:	1b64      	subs	r4, r4, r5
 8004dc2:	10a4      	asrs	r4, r4, #2
 8004dc4:	42a6      	cmp	r6, r4
 8004dc6:	d109      	bne.n	8004ddc <__libc_init_array+0x24>
 8004dc8:	f000 ff7a 	bl	8005cc0 <_init>
 8004dcc:	2600      	movs	r6, #0
 8004dce:	4d0a      	ldr	r5, [pc, #40]	@ (8004df8 <__libc_init_array+0x40>)
 8004dd0:	4c0a      	ldr	r4, [pc, #40]	@ (8004dfc <__libc_init_array+0x44>)
 8004dd2:	1b64      	subs	r4, r4, r5
 8004dd4:	10a4      	asrs	r4, r4, #2
 8004dd6:	42a6      	cmp	r6, r4
 8004dd8:	d105      	bne.n	8004de6 <__libc_init_array+0x2e>
 8004dda:	bd70      	pop	{r4, r5, r6, pc}
 8004ddc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de0:	4798      	blx	r3
 8004de2:	3601      	adds	r6, #1
 8004de4:	e7ee      	b.n	8004dc4 <__libc_init_array+0xc>
 8004de6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004dea:	4798      	blx	r3
 8004dec:	3601      	adds	r6, #1
 8004dee:	e7f2      	b.n	8004dd6 <__libc_init_array+0x1e>
 8004df0:	08007648 	.word	0x08007648
 8004df4:	08007648 	.word	0x08007648
 8004df8:	08007648 	.word	0x08007648
 8004dfc:	0800764c 	.word	0x0800764c

08004e00 <__retarget_lock_init_recursive>:
 8004e00:	4770      	bx	lr

08004e02 <__retarget_lock_acquire_recursive>:
 8004e02:	4770      	bx	lr

08004e04 <__retarget_lock_release_recursive>:
 8004e04:	4770      	bx	lr

08004e06 <memcpy>:
 8004e06:	440a      	add	r2, r1
 8004e08:	4291      	cmp	r1, r2
 8004e0a:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e0e:	d100      	bne.n	8004e12 <memcpy+0xc>
 8004e10:	4770      	bx	lr
 8004e12:	b510      	push	{r4, lr}
 8004e14:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e18:	4291      	cmp	r1, r2
 8004e1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e1e:	d1f9      	bne.n	8004e14 <memcpy+0xe>
 8004e20:	bd10      	pop	{r4, pc}
	...

08004e24 <_free_r>:
 8004e24:	b538      	push	{r3, r4, r5, lr}
 8004e26:	4605      	mov	r5, r0
 8004e28:	2900      	cmp	r1, #0
 8004e2a:	d040      	beq.n	8004eae <_free_r+0x8a>
 8004e2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e30:	1f0c      	subs	r4, r1, #4
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	bfb8      	it	lt
 8004e36:	18e4      	addlt	r4, r4, r3
 8004e38:	f000 f8de 	bl	8004ff8 <__malloc_lock>
 8004e3c:	4a1c      	ldr	r2, [pc, #112]	@ (8004eb0 <_free_r+0x8c>)
 8004e3e:	6813      	ldr	r3, [r2, #0]
 8004e40:	b933      	cbnz	r3, 8004e50 <_free_r+0x2c>
 8004e42:	6063      	str	r3, [r4, #4]
 8004e44:	6014      	str	r4, [r2, #0]
 8004e46:	4628      	mov	r0, r5
 8004e48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e4c:	f000 b8da 	b.w	8005004 <__malloc_unlock>
 8004e50:	42a3      	cmp	r3, r4
 8004e52:	d908      	bls.n	8004e66 <_free_r+0x42>
 8004e54:	6820      	ldr	r0, [r4, #0]
 8004e56:	1821      	adds	r1, r4, r0
 8004e58:	428b      	cmp	r3, r1
 8004e5a:	bf01      	itttt	eq
 8004e5c:	6819      	ldreq	r1, [r3, #0]
 8004e5e:	685b      	ldreq	r3, [r3, #4]
 8004e60:	1809      	addeq	r1, r1, r0
 8004e62:	6021      	streq	r1, [r4, #0]
 8004e64:	e7ed      	b.n	8004e42 <_free_r+0x1e>
 8004e66:	461a      	mov	r2, r3
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	b10b      	cbz	r3, 8004e70 <_free_r+0x4c>
 8004e6c:	42a3      	cmp	r3, r4
 8004e6e:	d9fa      	bls.n	8004e66 <_free_r+0x42>
 8004e70:	6811      	ldr	r1, [r2, #0]
 8004e72:	1850      	adds	r0, r2, r1
 8004e74:	42a0      	cmp	r0, r4
 8004e76:	d10b      	bne.n	8004e90 <_free_r+0x6c>
 8004e78:	6820      	ldr	r0, [r4, #0]
 8004e7a:	4401      	add	r1, r0
 8004e7c:	1850      	adds	r0, r2, r1
 8004e7e:	4283      	cmp	r3, r0
 8004e80:	6011      	str	r1, [r2, #0]
 8004e82:	d1e0      	bne.n	8004e46 <_free_r+0x22>
 8004e84:	6818      	ldr	r0, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	4408      	add	r0, r1
 8004e8a:	6010      	str	r0, [r2, #0]
 8004e8c:	6053      	str	r3, [r2, #4]
 8004e8e:	e7da      	b.n	8004e46 <_free_r+0x22>
 8004e90:	d902      	bls.n	8004e98 <_free_r+0x74>
 8004e92:	230c      	movs	r3, #12
 8004e94:	602b      	str	r3, [r5, #0]
 8004e96:	e7d6      	b.n	8004e46 <_free_r+0x22>
 8004e98:	6820      	ldr	r0, [r4, #0]
 8004e9a:	1821      	adds	r1, r4, r0
 8004e9c:	428b      	cmp	r3, r1
 8004e9e:	bf01      	itttt	eq
 8004ea0:	6819      	ldreq	r1, [r3, #0]
 8004ea2:	685b      	ldreq	r3, [r3, #4]
 8004ea4:	1809      	addeq	r1, r1, r0
 8004ea6:	6021      	streq	r1, [r4, #0]
 8004ea8:	6063      	str	r3, [r4, #4]
 8004eaa:	6054      	str	r4, [r2, #4]
 8004eac:	e7cb      	b.n	8004e46 <_free_r+0x22>
 8004eae:	bd38      	pop	{r3, r4, r5, pc}
 8004eb0:	20001bb8 	.word	0x20001bb8

08004eb4 <sbrk_aligned>:
 8004eb4:	b570      	push	{r4, r5, r6, lr}
 8004eb6:	4e0f      	ldr	r6, [pc, #60]	@ (8004ef4 <sbrk_aligned+0x40>)
 8004eb8:	460c      	mov	r4, r1
 8004eba:	6831      	ldr	r1, [r6, #0]
 8004ebc:	4605      	mov	r5, r0
 8004ebe:	b911      	cbnz	r1, 8004ec6 <sbrk_aligned+0x12>
 8004ec0:	f000 fe26 	bl	8005b10 <_sbrk_r>
 8004ec4:	6030      	str	r0, [r6, #0]
 8004ec6:	4621      	mov	r1, r4
 8004ec8:	4628      	mov	r0, r5
 8004eca:	f000 fe21 	bl	8005b10 <_sbrk_r>
 8004ece:	1c43      	adds	r3, r0, #1
 8004ed0:	d103      	bne.n	8004eda <sbrk_aligned+0x26>
 8004ed2:	f04f 34ff 	mov.w	r4, #4294967295
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	bd70      	pop	{r4, r5, r6, pc}
 8004eda:	1cc4      	adds	r4, r0, #3
 8004edc:	f024 0403 	bic.w	r4, r4, #3
 8004ee0:	42a0      	cmp	r0, r4
 8004ee2:	d0f8      	beq.n	8004ed6 <sbrk_aligned+0x22>
 8004ee4:	1a21      	subs	r1, r4, r0
 8004ee6:	4628      	mov	r0, r5
 8004ee8:	f000 fe12 	bl	8005b10 <_sbrk_r>
 8004eec:	3001      	adds	r0, #1
 8004eee:	d1f2      	bne.n	8004ed6 <sbrk_aligned+0x22>
 8004ef0:	e7ef      	b.n	8004ed2 <sbrk_aligned+0x1e>
 8004ef2:	bf00      	nop
 8004ef4:	20001bb4 	.word	0x20001bb4

08004ef8 <_malloc_r>:
 8004ef8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004efc:	1ccd      	adds	r5, r1, #3
 8004efe:	f025 0503 	bic.w	r5, r5, #3
 8004f02:	3508      	adds	r5, #8
 8004f04:	2d0c      	cmp	r5, #12
 8004f06:	bf38      	it	cc
 8004f08:	250c      	movcc	r5, #12
 8004f0a:	2d00      	cmp	r5, #0
 8004f0c:	4606      	mov	r6, r0
 8004f0e:	db01      	blt.n	8004f14 <_malloc_r+0x1c>
 8004f10:	42a9      	cmp	r1, r5
 8004f12:	d904      	bls.n	8004f1e <_malloc_r+0x26>
 8004f14:	230c      	movs	r3, #12
 8004f16:	6033      	str	r3, [r6, #0]
 8004f18:	2000      	movs	r0, #0
 8004f1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f1e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ff4 <_malloc_r+0xfc>
 8004f22:	f000 f869 	bl	8004ff8 <__malloc_lock>
 8004f26:	f8d8 3000 	ldr.w	r3, [r8]
 8004f2a:	461c      	mov	r4, r3
 8004f2c:	bb44      	cbnz	r4, 8004f80 <_malloc_r+0x88>
 8004f2e:	4629      	mov	r1, r5
 8004f30:	4630      	mov	r0, r6
 8004f32:	f7ff ffbf 	bl	8004eb4 <sbrk_aligned>
 8004f36:	1c43      	adds	r3, r0, #1
 8004f38:	4604      	mov	r4, r0
 8004f3a:	d158      	bne.n	8004fee <_malloc_r+0xf6>
 8004f3c:	f8d8 4000 	ldr.w	r4, [r8]
 8004f40:	4627      	mov	r7, r4
 8004f42:	2f00      	cmp	r7, #0
 8004f44:	d143      	bne.n	8004fce <_malloc_r+0xd6>
 8004f46:	2c00      	cmp	r4, #0
 8004f48:	d04b      	beq.n	8004fe2 <_malloc_r+0xea>
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	4639      	mov	r1, r7
 8004f4e:	4630      	mov	r0, r6
 8004f50:	eb04 0903 	add.w	r9, r4, r3
 8004f54:	f000 fddc 	bl	8005b10 <_sbrk_r>
 8004f58:	4581      	cmp	r9, r0
 8004f5a:	d142      	bne.n	8004fe2 <_malloc_r+0xea>
 8004f5c:	6821      	ldr	r1, [r4, #0]
 8004f5e:	4630      	mov	r0, r6
 8004f60:	1a6d      	subs	r5, r5, r1
 8004f62:	4629      	mov	r1, r5
 8004f64:	f7ff ffa6 	bl	8004eb4 <sbrk_aligned>
 8004f68:	3001      	adds	r0, #1
 8004f6a:	d03a      	beq.n	8004fe2 <_malloc_r+0xea>
 8004f6c:	6823      	ldr	r3, [r4, #0]
 8004f6e:	442b      	add	r3, r5
 8004f70:	6023      	str	r3, [r4, #0]
 8004f72:	f8d8 3000 	ldr.w	r3, [r8]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	bb62      	cbnz	r2, 8004fd4 <_malloc_r+0xdc>
 8004f7a:	f8c8 7000 	str.w	r7, [r8]
 8004f7e:	e00f      	b.n	8004fa0 <_malloc_r+0xa8>
 8004f80:	6822      	ldr	r2, [r4, #0]
 8004f82:	1b52      	subs	r2, r2, r5
 8004f84:	d420      	bmi.n	8004fc8 <_malloc_r+0xd0>
 8004f86:	2a0b      	cmp	r2, #11
 8004f88:	d917      	bls.n	8004fba <_malloc_r+0xc2>
 8004f8a:	1961      	adds	r1, r4, r5
 8004f8c:	42a3      	cmp	r3, r4
 8004f8e:	6025      	str	r5, [r4, #0]
 8004f90:	bf18      	it	ne
 8004f92:	6059      	strne	r1, [r3, #4]
 8004f94:	6863      	ldr	r3, [r4, #4]
 8004f96:	bf08      	it	eq
 8004f98:	f8c8 1000 	streq.w	r1, [r8]
 8004f9c:	5162      	str	r2, [r4, r5]
 8004f9e:	604b      	str	r3, [r1, #4]
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	f000 f82f 	bl	8005004 <__malloc_unlock>
 8004fa6:	f104 000b 	add.w	r0, r4, #11
 8004faa:	1d23      	adds	r3, r4, #4
 8004fac:	f020 0007 	bic.w	r0, r0, #7
 8004fb0:	1ac2      	subs	r2, r0, r3
 8004fb2:	bf1c      	itt	ne
 8004fb4:	1a1b      	subne	r3, r3, r0
 8004fb6:	50a3      	strne	r3, [r4, r2]
 8004fb8:	e7af      	b.n	8004f1a <_malloc_r+0x22>
 8004fba:	6862      	ldr	r2, [r4, #4]
 8004fbc:	42a3      	cmp	r3, r4
 8004fbe:	bf0c      	ite	eq
 8004fc0:	f8c8 2000 	streq.w	r2, [r8]
 8004fc4:	605a      	strne	r2, [r3, #4]
 8004fc6:	e7eb      	b.n	8004fa0 <_malloc_r+0xa8>
 8004fc8:	4623      	mov	r3, r4
 8004fca:	6864      	ldr	r4, [r4, #4]
 8004fcc:	e7ae      	b.n	8004f2c <_malloc_r+0x34>
 8004fce:	463c      	mov	r4, r7
 8004fd0:	687f      	ldr	r7, [r7, #4]
 8004fd2:	e7b6      	b.n	8004f42 <_malloc_r+0x4a>
 8004fd4:	461a      	mov	r2, r3
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	42a3      	cmp	r3, r4
 8004fda:	d1fb      	bne.n	8004fd4 <_malloc_r+0xdc>
 8004fdc:	2300      	movs	r3, #0
 8004fde:	6053      	str	r3, [r2, #4]
 8004fe0:	e7de      	b.n	8004fa0 <_malloc_r+0xa8>
 8004fe2:	230c      	movs	r3, #12
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	6033      	str	r3, [r6, #0]
 8004fe8:	f000 f80c 	bl	8005004 <__malloc_unlock>
 8004fec:	e794      	b.n	8004f18 <_malloc_r+0x20>
 8004fee:	6005      	str	r5, [r0, #0]
 8004ff0:	e7d6      	b.n	8004fa0 <_malloc_r+0xa8>
 8004ff2:	bf00      	nop
 8004ff4:	20001bb8 	.word	0x20001bb8

08004ff8 <__malloc_lock>:
 8004ff8:	4801      	ldr	r0, [pc, #4]	@ (8005000 <__malloc_lock+0x8>)
 8004ffa:	f7ff bf02 	b.w	8004e02 <__retarget_lock_acquire_recursive>
 8004ffe:	bf00      	nop
 8005000:	20001bb0 	.word	0x20001bb0

08005004 <__malloc_unlock>:
 8005004:	4801      	ldr	r0, [pc, #4]	@ (800500c <__malloc_unlock+0x8>)
 8005006:	f7ff befd 	b.w	8004e04 <__retarget_lock_release_recursive>
 800500a:	bf00      	nop
 800500c:	20001bb0 	.word	0x20001bb0

08005010 <__ssputs_r>:
 8005010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005014:	461f      	mov	r7, r3
 8005016:	688e      	ldr	r6, [r1, #8]
 8005018:	4682      	mov	sl, r0
 800501a:	42be      	cmp	r6, r7
 800501c:	460c      	mov	r4, r1
 800501e:	4690      	mov	r8, r2
 8005020:	680b      	ldr	r3, [r1, #0]
 8005022:	d82d      	bhi.n	8005080 <__ssputs_r+0x70>
 8005024:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005028:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800502c:	d026      	beq.n	800507c <__ssputs_r+0x6c>
 800502e:	6965      	ldr	r5, [r4, #20]
 8005030:	6909      	ldr	r1, [r1, #16]
 8005032:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005036:	eba3 0901 	sub.w	r9, r3, r1
 800503a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800503e:	1c7b      	adds	r3, r7, #1
 8005040:	444b      	add	r3, r9
 8005042:	106d      	asrs	r5, r5, #1
 8005044:	429d      	cmp	r5, r3
 8005046:	bf38      	it	cc
 8005048:	461d      	movcc	r5, r3
 800504a:	0553      	lsls	r3, r2, #21
 800504c:	d527      	bpl.n	800509e <__ssputs_r+0x8e>
 800504e:	4629      	mov	r1, r5
 8005050:	f7ff ff52 	bl	8004ef8 <_malloc_r>
 8005054:	4606      	mov	r6, r0
 8005056:	b360      	cbz	r0, 80050b2 <__ssputs_r+0xa2>
 8005058:	464a      	mov	r2, r9
 800505a:	6921      	ldr	r1, [r4, #16]
 800505c:	f7ff fed3 	bl	8004e06 <memcpy>
 8005060:	89a3      	ldrh	r3, [r4, #12]
 8005062:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005066:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800506a:	81a3      	strh	r3, [r4, #12]
 800506c:	6126      	str	r6, [r4, #16]
 800506e:	444e      	add	r6, r9
 8005070:	6026      	str	r6, [r4, #0]
 8005072:	463e      	mov	r6, r7
 8005074:	6165      	str	r5, [r4, #20]
 8005076:	eba5 0509 	sub.w	r5, r5, r9
 800507a:	60a5      	str	r5, [r4, #8]
 800507c:	42be      	cmp	r6, r7
 800507e:	d900      	bls.n	8005082 <__ssputs_r+0x72>
 8005080:	463e      	mov	r6, r7
 8005082:	4632      	mov	r2, r6
 8005084:	4641      	mov	r1, r8
 8005086:	6820      	ldr	r0, [r4, #0]
 8005088:	f000 fd28 	bl	8005adc <memmove>
 800508c:	2000      	movs	r0, #0
 800508e:	68a3      	ldr	r3, [r4, #8]
 8005090:	1b9b      	subs	r3, r3, r6
 8005092:	60a3      	str	r3, [r4, #8]
 8005094:	6823      	ldr	r3, [r4, #0]
 8005096:	4433      	add	r3, r6
 8005098:	6023      	str	r3, [r4, #0]
 800509a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800509e:	462a      	mov	r2, r5
 80050a0:	f000 fd54 	bl	8005b4c <_realloc_r>
 80050a4:	4606      	mov	r6, r0
 80050a6:	2800      	cmp	r0, #0
 80050a8:	d1e0      	bne.n	800506c <__ssputs_r+0x5c>
 80050aa:	4650      	mov	r0, sl
 80050ac:	6921      	ldr	r1, [r4, #16]
 80050ae:	f7ff feb9 	bl	8004e24 <_free_r>
 80050b2:	230c      	movs	r3, #12
 80050b4:	f8ca 3000 	str.w	r3, [sl]
 80050b8:	89a3      	ldrh	r3, [r4, #12]
 80050ba:	f04f 30ff 	mov.w	r0, #4294967295
 80050be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80050c2:	81a3      	strh	r3, [r4, #12]
 80050c4:	e7e9      	b.n	800509a <__ssputs_r+0x8a>
	...

080050c8 <_svfiprintf_r>:
 80050c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050cc:	4698      	mov	r8, r3
 80050ce:	898b      	ldrh	r3, [r1, #12]
 80050d0:	4607      	mov	r7, r0
 80050d2:	061b      	lsls	r3, r3, #24
 80050d4:	460d      	mov	r5, r1
 80050d6:	4614      	mov	r4, r2
 80050d8:	b09d      	sub	sp, #116	@ 0x74
 80050da:	d510      	bpl.n	80050fe <_svfiprintf_r+0x36>
 80050dc:	690b      	ldr	r3, [r1, #16]
 80050de:	b973      	cbnz	r3, 80050fe <_svfiprintf_r+0x36>
 80050e0:	2140      	movs	r1, #64	@ 0x40
 80050e2:	f7ff ff09 	bl	8004ef8 <_malloc_r>
 80050e6:	6028      	str	r0, [r5, #0]
 80050e8:	6128      	str	r0, [r5, #16]
 80050ea:	b930      	cbnz	r0, 80050fa <_svfiprintf_r+0x32>
 80050ec:	230c      	movs	r3, #12
 80050ee:	603b      	str	r3, [r7, #0]
 80050f0:	f04f 30ff 	mov.w	r0, #4294967295
 80050f4:	b01d      	add	sp, #116	@ 0x74
 80050f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050fa:	2340      	movs	r3, #64	@ 0x40
 80050fc:	616b      	str	r3, [r5, #20]
 80050fe:	2300      	movs	r3, #0
 8005100:	9309      	str	r3, [sp, #36]	@ 0x24
 8005102:	2320      	movs	r3, #32
 8005104:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005108:	2330      	movs	r3, #48	@ 0x30
 800510a:	f04f 0901 	mov.w	r9, #1
 800510e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005112:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80052ac <_svfiprintf_r+0x1e4>
 8005116:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800511a:	4623      	mov	r3, r4
 800511c:	469a      	mov	sl, r3
 800511e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005122:	b10a      	cbz	r2, 8005128 <_svfiprintf_r+0x60>
 8005124:	2a25      	cmp	r2, #37	@ 0x25
 8005126:	d1f9      	bne.n	800511c <_svfiprintf_r+0x54>
 8005128:	ebba 0b04 	subs.w	fp, sl, r4
 800512c:	d00b      	beq.n	8005146 <_svfiprintf_r+0x7e>
 800512e:	465b      	mov	r3, fp
 8005130:	4622      	mov	r2, r4
 8005132:	4629      	mov	r1, r5
 8005134:	4638      	mov	r0, r7
 8005136:	f7ff ff6b 	bl	8005010 <__ssputs_r>
 800513a:	3001      	adds	r0, #1
 800513c:	f000 80a7 	beq.w	800528e <_svfiprintf_r+0x1c6>
 8005140:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005142:	445a      	add	r2, fp
 8005144:	9209      	str	r2, [sp, #36]	@ 0x24
 8005146:	f89a 3000 	ldrb.w	r3, [sl]
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 809f 	beq.w	800528e <_svfiprintf_r+0x1c6>
 8005150:	2300      	movs	r3, #0
 8005152:	f04f 32ff 	mov.w	r2, #4294967295
 8005156:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800515a:	f10a 0a01 	add.w	sl, sl, #1
 800515e:	9304      	str	r3, [sp, #16]
 8005160:	9307      	str	r3, [sp, #28]
 8005162:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005166:	931a      	str	r3, [sp, #104]	@ 0x68
 8005168:	4654      	mov	r4, sl
 800516a:	2205      	movs	r2, #5
 800516c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005170:	484e      	ldr	r0, [pc, #312]	@ (80052ac <_svfiprintf_r+0x1e4>)
 8005172:	f000 fcdd 	bl	8005b30 <memchr>
 8005176:	9a04      	ldr	r2, [sp, #16]
 8005178:	b9d8      	cbnz	r0, 80051b2 <_svfiprintf_r+0xea>
 800517a:	06d0      	lsls	r0, r2, #27
 800517c:	bf44      	itt	mi
 800517e:	2320      	movmi	r3, #32
 8005180:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005184:	0711      	lsls	r1, r2, #28
 8005186:	bf44      	itt	mi
 8005188:	232b      	movmi	r3, #43	@ 0x2b
 800518a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800518e:	f89a 3000 	ldrb.w	r3, [sl]
 8005192:	2b2a      	cmp	r3, #42	@ 0x2a
 8005194:	d015      	beq.n	80051c2 <_svfiprintf_r+0xfa>
 8005196:	4654      	mov	r4, sl
 8005198:	2000      	movs	r0, #0
 800519a:	f04f 0c0a 	mov.w	ip, #10
 800519e:	9a07      	ldr	r2, [sp, #28]
 80051a0:	4621      	mov	r1, r4
 80051a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051a6:	3b30      	subs	r3, #48	@ 0x30
 80051a8:	2b09      	cmp	r3, #9
 80051aa:	d94b      	bls.n	8005244 <_svfiprintf_r+0x17c>
 80051ac:	b1b0      	cbz	r0, 80051dc <_svfiprintf_r+0x114>
 80051ae:	9207      	str	r2, [sp, #28]
 80051b0:	e014      	b.n	80051dc <_svfiprintf_r+0x114>
 80051b2:	eba0 0308 	sub.w	r3, r0, r8
 80051b6:	fa09 f303 	lsl.w	r3, r9, r3
 80051ba:	4313      	orrs	r3, r2
 80051bc:	46a2      	mov	sl, r4
 80051be:	9304      	str	r3, [sp, #16]
 80051c0:	e7d2      	b.n	8005168 <_svfiprintf_r+0xa0>
 80051c2:	9b03      	ldr	r3, [sp, #12]
 80051c4:	1d19      	adds	r1, r3, #4
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	9103      	str	r1, [sp, #12]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	bfbb      	ittet	lt
 80051ce:	425b      	neglt	r3, r3
 80051d0:	f042 0202 	orrlt.w	r2, r2, #2
 80051d4:	9307      	strge	r3, [sp, #28]
 80051d6:	9307      	strlt	r3, [sp, #28]
 80051d8:	bfb8      	it	lt
 80051da:	9204      	strlt	r2, [sp, #16]
 80051dc:	7823      	ldrb	r3, [r4, #0]
 80051de:	2b2e      	cmp	r3, #46	@ 0x2e
 80051e0:	d10a      	bne.n	80051f8 <_svfiprintf_r+0x130>
 80051e2:	7863      	ldrb	r3, [r4, #1]
 80051e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80051e6:	d132      	bne.n	800524e <_svfiprintf_r+0x186>
 80051e8:	9b03      	ldr	r3, [sp, #12]
 80051ea:	3402      	adds	r4, #2
 80051ec:	1d1a      	adds	r2, r3, #4
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	9203      	str	r2, [sp, #12]
 80051f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80051f6:	9305      	str	r3, [sp, #20]
 80051f8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80052b0 <_svfiprintf_r+0x1e8>
 80051fc:	2203      	movs	r2, #3
 80051fe:	4650      	mov	r0, sl
 8005200:	7821      	ldrb	r1, [r4, #0]
 8005202:	f000 fc95 	bl	8005b30 <memchr>
 8005206:	b138      	cbz	r0, 8005218 <_svfiprintf_r+0x150>
 8005208:	2240      	movs	r2, #64	@ 0x40
 800520a:	9b04      	ldr	r3, [sp, #16]
 800520c:	eba0 000a 	sub.w	r0, r0, sl
 8005210:	4082      	lsls	r2, r0
 8005212:	4313      	orrs	r3, r2
 8005214:	3401      	adds	r4, #1
 8005216:	9304      	str	r3, [sp, #16]
 8005218:	f814 1b01 	ldrb.w	r1, [r4], #1
 800521c:	2206      	movs	r2, #6
 800521e:	4825      	ldr	r0, [pc, #148]	@ (80052b4 <_svfiprintf_r+0x1ec>)
 8005220:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005224:	f000 fc84 	bl	8005b30 <memchr>
 8005228:	2800      	cmp	r0, #0
 800522a:	d036      	beq.n	800529a <_svfiprintf_r+0x1d2>
 800522c:	4b22      	ldr	r3, [pc, #136]	@ (80052b8 <_svfiprintf_r+0x1f0>)
 800522e:	bb1b      	cbnz	r3, 8005278 <_svfiprintf_r+0x1b0>
 8005230:	9b03      	ldr	r3, [sp, #12]
 8005232:	3307      	adds	r3, #7
 8005234:	f023 0307 	bic.w	r3, r3, #7
 8005238:	3308      	adds	r3, #8
 800523a:	9303      	str	r3, [sp, #12]
 800523c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800523e:	4433      	add	r3, r6
 8005240:	9309      	str	r3, [sp, #36]	@ 0x24
 8005242:	e76a      	b.n	800511a <_svfiprintf_r+0x52>
 8005244:	460c      	mov	r4, r1
 8005246:	2001      	movs	r0, #1
 8005248:	fb0c 3202 	mla	r2, ip, r2, r3
 800524c:	e7a8      	b.n	80051a0 <_svfiprintf_r+0xd8>
 800524e:	2300      	movs	r3, #0
 8005250:	f04f 0c0a 	mov.w	ip, #10
 8005254:	4619      	mov	r1, r3
 8005256:	3401      	adds	r4, #1
 8005258:	9305      	str	r3, [sp, #20]
 800525a:	4620      	mov	r0, r4
 800525c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005260:	3a30      	subs	r2, #48	@ 0x30
 8005262:	2a09      	cmp	r2, #9
 8005264:	d903      	bls.n	800526e <_svfiprintf_r+0x1a6>
 8005266:	2b00      	cmp	r3, #0
 8005268:	d0c6      	beq.n	80051f8 <_svfiprintf_r+0x130>
 800526a:	9105      	str	r1, [sp, #20]
 800526c:	e7c4      	b.n	80051f8 <_svfiprintf_r+0x130>
 800526e:	4604      	mov	r4, r0
 8005270:	2301      	movs	r3, #1
 8005272:	fb0c 2101 	mla	r1, ip, r1, r2
 8005276:	e7f0      	b.n	800525a <_svfiprintf_r+0x192>
 8005278:	ab03      	add	r3, sp, #12
 800527a:	9300      	str	r3, [sp, #0]
 800527c:	462a      	mov	r2, r5
 800527e:	4638      	mov	r0, r7
 8005280:	4b0e      	ldr	r3, [pc, #56]	@ (80052bc <_svfiprintf_r+0x1f4>)
 8005282:	a904      	add	r1, sp, #16
 8005284:	f3af 8000 	nop.w
 8005288:	1c42      	adds	r2, r0, #1
 800528a:	4606      	mov	r6, r0
 800528c:	d1d6      	bne.n	800523c <_svfiprintf_r+0x174>
 800528e:	89ab      	ldrh	r3, [r5, #12]
 8005290:	065b      	lsls	r3, r3, #25
 8005292:	f53f af2d 	bmi.w	80050f0 <_svfiprintf_r+0x28>
 8005296:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005298:	e72c      	b.n	80050f4 <_svfiprintf_r+0x2c>
 800529a:	ab03      	add	r3, sp, #12
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	462a      	mov	r2, r5
 80052a0:	4638      	mov	r0, r7
 80052a2:	4b06      	ldr	r3, [pc, #24]	@ (80052bc <_svfiprintf_r+0x1f4>)
 80052a4:	a904      	add	r1, sp, #16
 80052a6:	f000 f9bd 	bl	8005624 <_printf_i>
 80052aa:	e7ed      	b.n	8005288 <_svfiprintf_r+0x1c0>
 80052ac:	08007614 	.word	0x08007614
 80052b0:	0800761a 	.word	0x0800761a
 80052b4:	0800761e 	.word	0x0800761e
 80052b8:	00000000 	.word	0x00000000
 80052bc:	08005011 	.word	0x08005011

080052c0 <__sfputc_r>:
 80052c0:	6893      	ldr	r3, [r2, #8]
 80052c2:	b410      	push	{r4}
 80052c4:	3b01      	subs	r3, #1
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	6093      	str	r3, [r2, #8]
 80052ca:	da07      	bge.n	80052dc <__sfputc_r+0x1c>
 80052cc:	6994      	ldr	r4, [r2, #24]
 80052ce:	42a3      	cmp	r3, r4
 80052d0:	db01      	blt.n	80052d6 <__sfputc_r+0x16>
 80052d2:	290a      	cmp	r1, #10
 80052d4:	d102      	bne.n	80052dc <__sfputc_r+0x1c>
 80052d6:	bc10      	pop	{r4}
 80052d8:	f000 bb6c 	b.w	80059b4 <__swbuf_r>
 80052dc:	6813      	ldr	r3, [r2, #0]
 80052de:	1c58      	adds	r0, r3, #1
 80052e0:	6010      	str	r0, [r2, #0]
 80052e2:	7019      	strb	r1, [r3, #0]
 80052e4:	4608      	mov	r0, r1
 80052e6:	bc10      	pop	{r4}
 80052e8:	4770      	bx	lr

080052ea <__sfputs_r>:
 80052ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052ec:	4606      	mov	r6, r0
 80052ee:	460f      	mov	r7, r1
 80052f0:	4614      	mov	r4, r2
 80052f2:	18d5      	adds	r5, r2, r3
 80052f4:	42ac      	cmp	r4, r5
 80052f6:	d101      	bne.n	80052fc <__sfputs_r+0x12>
 80052f8:	2000      	movs	r0, #0
 80052fa:	e007      	b.n	800530c <__sfputs_r+0x22>
 80052fc:	463a      	mov	r2, r7
 80052fe:	4630      	mov	r0, r6
 8005300:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005304:	f7ff ffdc 	bl	80052c0 <__sfputc_r>
 8005308:	1c43      	adds	r3, r0, #1
 800530a:	d1f3      	bne.n	80052f4 <__sfputs_r+0xa>
 800530c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005310 <_vfiprintf_r>:
 8005310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005314:	460d      	mov	r5, r1
 8005316:	4614      	mov	r4, r2
 8005318:	4698      	mov	r8, r3
 800531a:	4606      	mov	r6, r0
 800531c:	b09d      	sub	sp, #116	@ 0x74
 800531e:	b118      	cbz	r0, 8005328 <_vfiprintf_r+0x18>
 8005320:	6a03      	ldr	r3, [r0, #32]
 8005322:	b90b      	cbnz	r3, 8005328 <_vfiprintf_r+0x18>
 8005324:	f7ff fc48 	bl	8004bb8 <__sinit>
 8005328:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800532a:	07d9      	lsls	r1, r3, #31
 800532c:	d405      	bmi.n	800533a <_vfiprintf_r+0x2a>
 800532e:	89ab      	ldrh	r3, [r5, #12]
 8005330:	059a      	lsls	r2, r3, #22
 8005332:	d402      	bmi.n	800533a <_vfiprintf_r+0x2a>
 8005334:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005336:	f7ff fd64 	bl	8004e02 <__retarget_lock_acquire_recursive>
 800533a:	89ab      	ldrh	r3, [r5, #12]
 800533c:	071b      	lsls	r3, r3, #28
 800533e:	d501      	bpl.n	8005344 <_vfiprintf_r+0x34>
 8005340:	692b      	ldr	r3, [r5, #16]
 8005342:	b99b      	cbnz	r3, 800536c <_vfiprintf_r+0x5c>
 8005344:	4629      	mov	r1, r5
 8005346:	4630      	mov	r0, r6
 8005348:	f000 fb72 	bl	8005a30 <__swsetup_r>
 800534c:	b170      	cbz	r0, 800536c <_vfiprintf_r+0x5c>
 800534e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005350:	07dc      	lsls	r4, r3, #31
 8005352:	d504      	bpl.n	800535e <_vfiprintf_r+0x4e>
 8005354:	f04f 30ff 	mov.w	r0, #4294967295
 8005358:	b01d      	add	sp, #116	@ 0x74
 800535a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800535e:	89ab      	ldrh	r3, [r5, #12]
 8005360:	0598      	lsls	r0, r3, #22
 8005362:	d4f7      	bmi.n	8005354 <_vfiprintf_r+0x44>
 8005364:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005366:	f7ff fd4d 	bl	8004e04 <__retarget_lock_release_recursive>
 800536a:	e7f3      	b.n	8005354 <_vfiprintf_r+0x44>
 800536c:	2300      	movs	r3, #0
 800536e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005370:	2320      	movs	r3, #32
 8005372:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005376:	2330      	movs	r3, #48	@ 0x30
 8005378:	f04f 0901 	mov.w	r9, #1
 800537c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005380:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800552c <_vfiprintf_r+0x21c>
 8005384:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005388:	4623      	mov	r3, r4
 800538a:	469a      	mov	sl, r3
 800538c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005390:	b10a      	cbz	r2, 8005396 <_vfiprintf_r+0x86>
 8005392:	2a25      	cmp	r2, #37	@ 0x25
 8005394:	d1f9      	bne.n	800538a <_vfiprintf_r+0x7a>
 8005396:	ebba 0b04 	subs.w	fp, sl, r4
 800539a:	d00b      	beq.n	80053b4 <_vfiprintf_r+0xa4>
 800539c:	465b      	mov	r3, fp
 800539e:	4622      	mov	r2, r4
 80053a0:	4629      	mov	r1, r5
 80053a2:	4630      	mov	r0, r6
 80053a4:	f7ff ffa1 	bl	80052ea <__sfputs_r>
 80053a8:	3001      	adds	r0, #1
 80053aa:	f000 80a7 	beq.w	80054fc <_vfiprintf_r+0x1ec>
 80053ae:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80053b0:	445a      	add	r2, fp
 80053b2:	9209      	str	r2, [sp, #36]	@ 0x24
 80053b4:	f89a 3000 	ldrb.w	r3, [sl]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f000 809f 	beq.w	80054fc <_vfiprintf_r+0x1ec>
 80053be:	2300      	movs	r3, #0
 80053c0:	f04f 32ff 	mov.w	r2, #4294967295
 80053c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80053c8:	f10a 0a01 	add.w	sl, sl, #1
 80053cc:	9304      	str	r3, [sp, #16]
 80053ce:	9307      	str	r3, [sp, #28]
 80053d0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80053d4:	931a      	str	r3, [sp, #104]	@ 0x68
 80053d6:	4654      	mov	r4, sl
 80053d8:	2205      	movs	r2, #5
 80053da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80053de:	4853      	ldr	r0, [pc, #332]	@ (800552c <_vfiprintf_r+0x21c>)
 80053e0:	f000 fba6 	bl	8005b30 <memchr>
 80053e4:	9a04      	ldr	r2, [sp, #16]
 80053e6:	b9d8      	cbnz	r0, 8005420 <_vfiprintf_r+0x110>
 80053e8:	06d1      	lsls	r1, r2, #27
 80053ea:	bf44      	itt	mi
 80053ec:	2320      	movmi	r3, #32
 80053ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053f2:	0713      	lsls	r3, r2, #28
 80053f4:	bf44      	itt	mi
 80053f6:	232b      	movmi	r3, #43	@ 0x2b
 80053f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80053fc:	f89a 3000 	ldrb.w	r3, [sl]
 8005400:	2b2a      	cmp	r3, #42	@ 0x2a
 8005402:	d015      	beq.n	8005430 <_vfiprintf_r+0x120>
 8005404:	4654      	mov	r4, sl
 8005406:	2000      	movs	r0, #0
 8005408:	f04f 0c0a 	mov.w	ip, #10
 800540c:	9a07      	ldr	r2, [sp, #28]
 800540e:	4621      	mov	r1, r4
 8005410:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005414:	3b30      	subs	r3, #48	@ 0x30
 8005416:	2b09      	cmp	r3, #9
 8005418:	d94b      	bls.n	80054b2 <_vfiprintf_r+0x1a2>
 800541a:	b1b0      	cbz	r0, 800544a <_vfiprintf_r+0x13a>
 800541c:	9207      	str	r2, [sp, #28]
 800541e:	e014      	b.n	800544a <_vfiprintf_r+0x13a>
 8005420:	eba0 0308 	sub.w	r3, r0, r8
 8005424:	fa09 f303 	lsl.w	r3, r9, r3
 8005428:	4313      	orrs	r3, r2
 800542a:	46a2      	mov	sl, r4
 800542c:	9304      	str	r3, [sp, #16]
 800542e:	e7d2      	b.n	80053d6 <_vfiprintf_r+0xc6>
 8005430:	9b03      	ldr	r3, [sp, #12]
 8005432:	1d19      	adds	r1, r3, #4
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	9103      	str	r1, [sp, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	bfbb      	ittet	lt
 800543c:	425b      	neglt	r3, r3
 800543e:	f042 0202 	orrlt.w	r2, r2, #2
 8005442:	9307      	strge	r3, [sp, #28]
 8005444:	9307      	strlt	r3, [sp, #28]
 8005446:	bfb8      	it	lt
 8005448:	9204      	strlt	r2, [sp, #16]
 800544a:	7823      	ldrb	r3, [r4, #0]
 800544c:	2b2e      	cmp	r3, #46	@ 0x2e
 800544e:	d10a      	bne.n	8005466 <_vfiprintf_r+0x156>
 8005450:	7863      	ldrb	r3, [r4, #1]
 8005452:	2b2a      	cmp	r3, #42	@ 0x2a
 8005454:	d132      	bne.n	80054bc <_vfiprintf_r+0x1ac>
 8005456:	9b03      	ldr	r3, [sp, #12]
 8005458:	3402      	adds	r4, #2
 800545a:	1d1a      	adds	r2, r3, #4
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	9203      	str	r2, [sp, #12]
 8005460:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005464:	9305      	str	r3, [sp, #20]
 8005466:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005530 <_vfiprintf_r+0x220>
 800546a:	2203      	movs	r2, #3
 800546c:	4650      	mov	r0, sl
 800546e:	7821      	ldrb	r1, [r4, #0]
 8005470:	f000 fb5e 	bl	8005b30 <memchr>
 8005474:	b138      	cbz	r0, 8005486 <_vfiprintf_r+0x176>
 8005476:	2240      	movs	r2, #64	@ 0x40
 8005478:	9b04      	ldr	r3, [sp, #16]
 800547a:	eba0 000a 	sub.w	r0, r0, sl
 800547e:	4082      	lsls	r2, r0
 8005480:	4313      	orrs	r3, r2
 8005482:	3401      	adds	r4, #1
 8005484:	9304      	str	r3, [sp, #16]
 8005486:	f814 1b01 	ldrb.w	r1, [r4], #1
 800548a:	2206      	movs	r2, #6
 800548c:	4829      	ldr	r0, [pc, #164]	@ (8005534 <_vfiprintf_r+0x224>)
 800548e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005492:	f000 fb4d 	bl	8005b30 <memchr>
 8005496:	2800      	cmp	r0, #0
 8005498:	d03f      	beq.n	800551a <_vfiprintf_r+0x20a>
 800549a:	4b27      	ldr	r3, [pc, #156]	@ (8005538 <_vfiprintf_r+0x228>)
 800549c:	bb1b      	cbnz	r3, 80054e6 <_vfiprintf_r+0x1d6>
 800549e:	9b03      	ldr	r3, [sp, #12]
 80054a0:	3307      	adds	r3, #7
 80054a2:	f023 0307 	bic.w	r3, r3, #7
 80054a6:	3308      	adds	r3, #8
 80054a8:	9303      	str	r3, [sp, #12]
 80054aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80054ac:	443b      	add	r3, r7
 80054ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80054b0:	e76a      	b.n	8005388 <_vfiprintf_r+0x78>
 80054b2:	460c      	mov	r4, r1
 80054b4:	2001      	movs	r0, #1
 80054b6:	fb0c 3202 	mla	r2, ip, r2, r3
 80054ba:	e7a8      	b.n	800540e <_vfiprintf_r+0xfe>
 80054bc:	2300      	movs	r3, #0
 80054be:	f04f 0c0a 	mov.w	ip, #10
 80054c2:	4619      	mov	r1, r3
 80054c4:	3401      	adds	r4, #1
 80054c6:	9305      	str	r3, [sp, #20]
 80054c8:	4620      	mov	r0, r4
 80054ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 80054ce:	3a30      	subs	r2, #48	@ 0x30
 80054d0:	2a09      	cmp	r2, #9
 80054d2:	d903      	bls.n	80054dc <_vfiprintf_r+0x1cc>
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0c6      	beq.n	8005466 <_vfiprintf_r+0x156>
 80054d8:	9105      	str	r1, [sp, #20]
 80054da:	e7c4      	b.n	8005466 <_vfiprintf_r+0x156>
 80054dc:	4604      	mov	r4, r0
 80054de:	2301      	movs	r3, #1
 80054e0:	fb0c 2101 	mla	r1, ip, r1, r2
 80054e4:	e7f0      	b.n	80054c8 <_vfiprintf_r+0x1b8>
 80054e6:	ab03      	add	r3, sp, #12
 80054e8:	9300      	str	r3, [sp, #0]
 80054ea:	462a      	mov	r2, r5
 80054ec:	4630      	mov	r0, r6
 80054ee:	4b13      	ldr	r3, [pc, #76]	@ (800553c <_vfiprintf_r+0x22c>)
 80054f0:	a904      	add	r1, sp, #16
 80054f2:	f3af 8000 	nop.w
 80054f6:	4607      	mov	r7, r0
 80054f8:	1c78      	adds	r0, r7, #1
 80054fa:	d1d6      	bne.n	80054aa <_vfiprintf_r+0x19a>
 80054fc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80054fe:	07d9      	lsls	r1, r3, #31
 8005500:	d405      	bmi.n	800550e <_vfiprintf_r+0x1fe>
 8005502:	89ab      	ldrh	r3, [r5, #12]
 8005504:	059a      	lsls	r2, r3, #22
 8005506:	d402      	bmi.n	800550e <_vfiprintf_r+0x1fe>
 8005508:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800550a:	f7ff fc7b 	bl	8004e04 <__retarget_lock_release_recursive>
 800550e:	89ab      	ldrh	r3, [r5, #12]
 8005510:	065b      	lsls	r3, r3, #25
 8005512:	f53f af1f 	bmi.w	8005354 <_vfiprintf_r+0x44>
 8005516:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005518:	e71e      	b.n	8005358 <_vfiprintf_r+0x48>
 800551a:	ab03      	add	r3, sp, #12
 800551c:	9300      	str	r3, [sp, #0]
 800551e:	462a      	mov	r2, r5
 8005520:	4630      	mov	r0, r6
 8005522:	4b06      	ldr	r3, [pc, #24]	@ (800553c <_vfiprintf_r+0x22c>)
 8005524:	a904      	add	r1, sp, #16
 8005526:	f000 f87d 	bl	8005624 <_printf_i>
 800552a:	e7e4      	b.n	80054f6 <_vfiprintf_r+0x1e6>
 800552c:	08007614 	.word	0x08007614
 8005530:	0800761a 	.word	0x0800761a
 8005534:	0800761e 	.word	0x0800761e
 8005538:	00000000 	.word	0x00000000
 800553c:	080052eb 	.word	0x080052eb

08005540 <_printf_common>:
 8005540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005544:	4616      	mov	r6, r2
 8005546:	4698      	mov	r8, r3
 8005548:	688a      	ldr	r2, [r1, #8]
 800554a:	690b      	ldr	r3, [r1, #16]
 800554c:	4607      	mov	r7, r0
 800554e:	4293      	cmp	r3, r2
 8005550:	bfb8      	it	lt
 8005552:	4613      	movlt	r3, r2
 8005554:	6033      	str	r3, [r6, #0]
 8005556:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800555a:	460c      	mov	r4, r1
 800555c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005560:	b10a      	cbz	r2, 8005566 <_printf_common+0x26>
 8005562:	3301      	adds	r3, #1
 8005564:	6033      	str	r3, [r6, #0]
 8005566:	6823      	ldr	r3, [r4, #0]
 8005568:	0699      	lsls	r1, r3, #26
 800556a:	bf42      	ittt	mi
 800556c:	6833      	ldrmi	r3, [r6, #0]
 800556e:	3302      	addmi	r3, #2
 8005570:	6033      	strmi	r3, [r6, #0]
 8005572:	6825      	ldr	r5, [r4, #0]
 8005574:	f015 0506 	ands.w	r5, r5, #6
 8005578:	d106      	bne.n	8005588 <_printf_common+0x48>
 800557a:	f104 0a19 	add.w	sl, r4, #25
 800557e:	68e3      	ldr	r3, [r4, #12]
 8005580:	6832      	ldr	r2, [r6, #0]
 8005582:	1a9b      	subs	r3, r3, r2
 8005584:	42ab      	cmp	r3, r5
 8005586:	dc2b      	bgt.n	80055e0 <_printf_common+0xa0>
 8005588:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800558c:	6822      	ldr	r2, [r4, #0]
 800558e:	3b00      	subs	r3, #0
 8005590:	bf18      	it	ne
 8005592:	2301      	movne	r3, #1
 8005594:	0692      	lsls	r2, r2, #26
 8005596:	d430      	bmi.n	80055fa <_printf_common+0xba>
 8005598:	4641      	mov	r1, r8
 800559a:	4638      	mov	r0, r7
 800559c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80055a0:	47c8      	blx	r9
 80055a2:	3001      	adds	r0, #1
 80055a4:	d023      	beq.n	80055ee <_printf_common+0xae>
 80055a6:	6823      	ldr	r3, [r4, #0]
 80055a8:	6922      	ldr	r2, [r4, #16]
 80055aa:	f003 0306 	and.w	r3, r3, #6
 80055ae:	2b04      	cmp	r3, #4
 80055b0:	bf14      	ite	ne
 80055b2:	2500      	movne	r5, #0
 80055b4:	6833      	ldreq	r3, [r6, #0]
 80055b6:	f04f 0600 	mov.w	r6, #0
 80055ba:	bf08      	it	eq
 80055bc:	68e5      	ldreq	r5, [r4, #12]
 80055be:	f104 041a 	add.w	r4, r4, #26
 80055c2:	bf08      	it	eq
 80055c4:	1aed      	subeq	r5, r5, r3
 80055c6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80055ca:	bf08      	it	eq
 80055cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80055d0:	4293      	cmp	r3, r2
 80055d2:	bfc4      	itt	gt
 80055d4:	1a9b      	subgt	r3, r3, r2
 80055d6:	18ed      	addgt	r5, r5, r3
 80055d8:	42b5      	cmp	r5, r6
 80055da:	d11a      	bne.n	8005612 <_printf_common+0xd2>
 80055dc:	2000      	movs	r0, #0
 80055de:	e008      	b.n	80055f2 <_printf_common+0xb2>
 80055e0:	2301      	movs	r3, #1
 80055e2:	4652      	mov	r2, sl
 80055e4:	4641      	mov	r1, r8
 80055e6:	4638      	mov	r0, r7
 80055e8:	47c8      	blx	r9
 80055ea:	3001      	adds	r0, #1
 80055ec:	d103      	bne.n	80055f6 <_printf_common+0xb6>
 80055ee:	f04f 30ff 	mov.w	r0, #4294967295
 80055f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055f6:	3501      	adds	r5, #1
 80055f8:	e7c1      	b.n	800557e <_printf_common+0x3e>
 80055fa:	2030      	movs	r0, #48	@ 0x30
 80055fc:	18e1      	adds	r1, r4, r3
 80055fe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005608:	4422      	add	r2, r4
 800560a:	3302      	adds	r3, #2
 800560c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005610:	e7c2      	b.n	8005598 <_printf_common+0x58>
 8005612:	2301      	movs	r3, #1
 8005614:	4622      	mov	r2, r4
 8005616:	4641      	mov	r1, r8
 8005618:	4638      	mov	r0, r7
 800561a:	47c8      	blx	r9
 800561c:	3001      	adds	r0, #1
 800561e:	d0e6      	beq.n	80055ee <_printf_common+0xae>
 8005620:	3601      	adds	r6, #1
 8005622:	e7d9      	b.n	80055d8 <_printf_common+0x98>

08005624 <_printf_i>:
 8005624:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005628:	7e0f      	ldrb	r7, [r1, #24]
 800562a:	4691      	mov	r9, r2
 800562c:	2f78      	cmp	r7, #120	@ 0x78
 800562e:	4680      	mov	r8, r0
 8005630:	460c      	mov	r4, r1
 8005632:	469a      	mov	sl, r3
 8005634:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005636:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800563a:	d807      	bhi.n	800564c <_printf_i+0x28>
 800563c:	2f62      	cmp	r7, #98	@ 0x62
 800563e:	d80a      	bhi.n	8005656 <_printf_i+0x32>
 8005640:	2f00      	cmp	r7, #0
 8005642:	f000 80d3 	beq.w	80057ec <_printf_i+0x1c8>
 8005646:	2f58      	cmp	r7, #88	@ 0x58
 8005648:	f000 80ba 	beq.w	80057c0 <_printf_i+0x19c>
 800564c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005650:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005654:	e03a      	b.n	80056cc <_printf_i+0xa8>
 8005656:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800565a:	2b15      	cmp	r3, #21
 800565c:	d8f6      	bhi.n	800564c <_printf_i+0x28>
 800565e:	a101      	add	r1, pc, #4	@ (adr r1, 8005664 <_printf_i+0x40>)
 8005660:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005664:	080056bd 	.word	0x080056bd
 8005668:	080056d1 	.word	0x080056d1
 800566c:	0800564d 	.word	0x0800564d
 8005670:	0800564d 	.word	0x0800564d
 8005674:	0800564d 	.word	0x0800564d
 8005678:	0800564d 	.word	0x0800564d
 800567c:	080056d1 	.word	0x080056d1
 8005680:	0800564d 	.word	0x0800564d
 8005684:	0800564d 	.word	0x0800564d
 8005688:	0800564d 	.word	0x0800564d
 800568c:	0800564d 	.word	0x0800564d
 8005690:	080057d3 	.word	0x080057d3
 8005694:	080056fb 	.word	0x080056fb
 8005698:	0800578d 	.word	0x0800578d
 800569c:	0800564d 	.word	0x0800564d
 80056a0:	0800564d 	.word	0x0800564d
 80056a4:	080057f5 	.word	0x080057f5
 80056a8:	0800564d 	.word	0x0800564d
 80056ac:	080056fb 	.word	0x080056fb
 80056b0:	0800564d 	.word	0x0800564d
 80056b4:	0800564d 	.word	0x0800564d
 80056b8:	08005795 	.word	0x08005795
 80056bc:	6833      	ldr	r3, [r6, #0]
 80056be:	1d1a      	adds	r2, r3, #4
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6032      	str	r2, [r6, #0]
 80056c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80056c8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80056cc:	2301      	movs	r3, #1
 80056ce:	e09e      	b.n	800580e <_printf_i+0x1ea>
 80056d0:	6833      	ldr	r3, [r6, #0]
 80056d2:	6820      	ldr	r0, [r4, #0]
 80056d4:	1d19      	adds	r1, r3, #4
 80056d6:	6031      	str	r1, [r6, #0]
 80056d8:	0606      	lsls	r6, r0, #24
 80056da:	d501      	bpl.n	80056e0 <_printf_i+0xbc>
 80056dc:	681d      	ldr	r5, [r3, #0]
 80056de:	e003      	b.n	80056e8 <_printf_i+0xc4>
 80056e0:	0645      	lsls	r5, r0, #25
 80056e2:	d5fb      	bpl.n	80056dc <_printf_i+0xb8>
 80056e4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80056e8:	2d00      	cmp	r5, #0
 80056ea:	da03      	bge.n	80056f4 <_printf_i+0xd0>
 80056ec:	232d      	movs	r3, #45	@ 0x2d
 80056ee:	426d      	negs	r5, r5
 80056f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056f4:	230a      	movs	r3, #10
 80056f6:	4859      	ldr	r0, [pc, #356]	@ (800585c <_printf_i+0x238>)
 80056f8:	e011      	b.n	800571e <_printf_i+0xfa>
 80056fa:	6821      	ldr	r1, [r4, #0]
 80056fc:	6833      	ldr	r3, [r6, #0]
 80056fe:	0608      	lsls	r0, r1, #24
 8005700:	f853 5b04 	ldr.w	r5, [r3], #4
 8005704:	d402      	bmi.n	800570c <_printf_i+0xe8>
 8005706:	0649      	lsls	r1, r1, #25
 8005708:	bf48      	it	mi
 800570a:	b2ad      	uxthmi	r5, r5
 800570c:	2f6f      	cmp	r7, #111	@ 0x6f
 800570e:	6033      	str	r3, [r6, #0]
 8005710:	bf14      	ite	ne
 8005712:	230a      	movne	r3, #10
 8005714:	2308      	moveq	r3, #8
 8005716:	4851      	ldr	r0, [pc, #324]	@ (800585c <_printf_i+0x238>)
 8005718:	2100      	movs	r1, #0
 800571a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800571e:	6866      	ldr	r6, [r4, #4]
 8005720:	2e00      	cmp	r6, #0
 8005722:	bfa8      	it	ge
 8005724:	6821      	ldrge	r1, [r4, #0]
 8005726:	60a6      	str	r6, [r4, #8]
 8005728:	bfa4      	itt	ge
 800572a:	f021 0104 	bicge.w	r1, r1, #4
 800572e:	6021      	strge	r1, [r4, #0]
 8005730:	b90d      	cbnz	r5, 8005736 <_printf_i+0x112>
 8005732:	2e00      	cmp	r6, #0
 8005734:	d04b      	beq.n	80057ce <_printf_i+0x1aa>
 8005736:	4616      	mov	r6, r2
 8005738:	fbb5 f1f3 	udiv	r1, r5, r3
 800573c:	fb03 5711 	mls	r7, r3, r1, r5
 8005740:	5dc7      	ldrb	r7, [r0, r7]
 8005742:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005746:	462f      	mov	r7, r5
 8005748:	42bb      	cmp	r3, r7
 800574a:	460d      	mov	r5, r1
 800574c:	d9f4      	bls.n	8005738 <_printf_i+0x114>
 800574e:	2b08      	cmp	r3, #8
 8005750:	d10b      	bne.n	800576a <_printf_i+0x146>
 8005752:	6823      	ldr	r3, [r4, #0]
 8005754:	07df      	lsls	r7, r3, #31
 8005756:	d508      	bpl.n	800576a <_printf_i+0x146>
 8005758:	6923      	ldr	r3, [r4, #16]
 800575a:	6861      	ldr	r1, [r4, #4]
 800575c:	4299      	cmp	r1, r3
 800575e:	bfde      	ittt	le
 8005760:	2330      	movle	r3, #48	@ 0x30
 8005762:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005766:	f106 36ff 	addle.w	r6, r6, #4294967295
 800576a:	1b92      	subs	r2, r2, r6
 800576c:	6122      	str	r2, [r4, #16]
 800576e:	464b      	mov	r3, r9
 8005770:	4621      	mov	r1, r4
 8005772:	4640      	mov	r0, r8
 8005774:	f8cd a000 	str.w	sl, [sp]
 8005778:	aa03      	add	r2, sp, #12
 800577a:	f7ff fee1 	bl	8005540 <_printf_common>
 800577e:	3001      	adds	r0, #1
 8005780:	d14a      	bne.n	8005818 <_printf_i+0x1f4>
 8005782:	f04f 30ff 	mov.w	r0, #4294967295
 8005786:	b004      	add	sp, #16
 8005788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800578c:	6823      	ldr	r3, [r4, #0]
 800578e:	f043 0320 	orr.w	r3, r3, #32
 8005792:	6023      	str	r3, [r4, #0]
 8005794:	2778      	movs	r7, #120	@ 0x78
 8005796:	4832      	ldr	r0, [pc, #200]	@ (8005860 <_printf_i+0x23c>)
 8005798:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800579c:	6823      	ldr	r3, [r4, #0]
 800579e:	6831      	ldr	r1, [r6, #0]
 80057a0:	061f      	lsls	r7, r3, #24
 80057a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80057a6:	d402      	bmi.n	80057ae <_printf_i+0x18a>
 80057a8:	065f      	lsls	r7, r3, #25
 80057aa:	bf48      	it	mi
 80057ac:	b2ad      	uxthmi	r5, r5
 80057ae:	6031      	str	r1, [r6, #0]
 80057b0:	07d9      	lsls	r1, r3, #31
 80057b2:	bf44      	itt	mi
 80057b4:	f043 0320 	orrmi.w	r3, r3, #32
 80057b8:	6023      	strmi	r3, [r4, #0]
 80057ba:	b11d      	cbz	r5, 80057c4 <_printf_i+0x1a0>
 80057bc:	2310      	movs	r3, #16
 80057be:	e7ab      	b.n	8005718 <_printf_i+0xf4>
 80057c0:	4826      	ldr	r0, [pc, #152]	@ (800585c <_printf_i+0x238>)
 80057c2:	e7e9      	b.n	8005798 <_printf_i+0x174>
 80057c4:	6823      	ldr	r3, [r4, #0]
 80057c6:	f023 0320 	bic.w	r3, r3, #32
 80057ca:	6023      	str	r3, [r4, #0]
 80057cc:	e7f6      	b.n	80057bc <_printf_i+0x198>
 80057ce:	4616      	mov	r6, r2
 80057d0:	e7bd      	b.n	800574e <_printf_i+0x12a>
 80057d2:	6833      	ldr	r3, [r6, #0]
 80057d4:	6825      	ldr	r5, [r4, #0]
 80057d6:	1d18      	adds	r0, r3, #4
 80057d8:	6961      	ldr	r1, [r4, #20]
 80057da:	6030      	str	r0, [r6, #0]
 80057dc:	062e      	lsls	r6, r5, #24
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	d501      	bpl.n	80057e6 <_printf_i+0x1c2>
 80057e2:	6019      	str	r1, [r3, #0]
 80057e4:	e002      	b.n	80057ec <_printf_i+0x1c8>
 80057e6:	0668      	lsls	r0, r5, #25
 80057e8:	d5fb      	bpl.n	80057e2 <_printf_i+0x1be>
 80057ea:	8019      	strh	r1, [r3, #0]
 80057ec:	2300      	movs	r3, #0
 80057ee:	4616      	mov	r6, r2
 80057f0:	6123      	str	r3, [r4, #16]
 80057f2:	e7bc      	b.n	800576e <_printf_i+0x14a>
 80057f4:	6833      	ldr	r3, [r6, #0]
 80057f6:	2100      	movs	r1, #0
 80057f8:	1d1a      	adds	r2, r3, #4
 80057fa:	6032      	str	r2, [r6, #0]
 80057fc:	681e      	ldr	r6, [r3, #0]
 80057fe:	6862      	ldr	r2, [r4, #4]
 8005800:	4630      	mov	r0, r6
 8005802:	f000 f995 	bl	8005b30 <memchr>
 8005806:	b108      	cbz	r0, 800580c <_printf_i+0x1e8>
 8005808:	1b80      	subs	r0, r0, r6
 800580a:	6060      	str	r0, [r4, #4]
 800580c:	6863      	ldr	r3, [r4, #4]
 800580e:	6123      	str	r3, [r4, #16]
 8005810:	2300      	movs	r3, #0
 8005812:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005816:	e7aa      	b.n	800576e <_printf_i+0x14a>
 8005818:	4632      	mov	r2, r6
 800581a:	4649      	mov	r1, r9
 800581c:	4640      	mov	r0, r8
 800581e:	6923      	ldr	r3, [r4, #16]
 8005820:	47d0      	blx	sl
 8005822:	3001      	adds	r0, #1
 8005824:	d0ad      	beq.n	8005782 <_printf_i+0x15e>
 8005826:	6823      	ldr	r3, [r4, #0]
 8005828:	079b      	lsls	r3, r3, #30
 800582a:	d413      	bmi.n	8005854 <_printf_i+0x230>
 800582c:	68e0      	ldr	r0, [r4, #12]
 800582e:	9b03      	ldr	r3, [sp, #12]
 8005830:	4298      	cmp	r0, r3
 8005832:	bfb8      	it	lt
 8005834:	4618      	movlt	r0, r3
 8005836:	e7a6      	b.n	8005786 <_printf_i+0x162>
 8005838:	2301      	movs	r3, #1
 800583a:	4632      	mov	r2, r6
 800583c:	4649      	mov	r1, r9
 800583e:	4640      	mov	r0, r8
 8005840:	47d0      	blx	sl
 8005842:	3001      	adds	r0, #1
 8005844:	d09d      	beq.n	8005782 <_printf_i+0x15e>
 8005846:	3501      	adds	r5, #1
 8005848:	68e3      	ldr	r3, [r4, #12]
 800584a:	9903      	ldr	r1, [sp, #12]
 800584c:	1a5b      	subs	r3, r3, r1
 800584e:	42ab      	cmp	r3, r5
 8005850:	dcf2      	bgt.n	8005838 <_printf_i+0x214>
 8005852:	e7eb      	b.n	800582c <_printf_i+0x208>
 8005854:	2500      	movs	r5, #0
 8005856:	f104 0619 	add.w	r6, r4, #25
 800585a:	e7f5      	b.n	8005848 <_printf_i+0x224>
 800585c:	08007625 	.word	0x08007625
 8005860:	08007636 	.word	0x08007636

08005864 <__sflush_r>:
 8005864:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800586a:	0716      	lsls	r6, r2, #28
 800586c:	4605      	mov	r5, r0
 800586e:	460c      	mov	r4, r1
 8005870:	d454      	bmi.n	800591c <__sflush_r+0xb8>
 8005872:	684b      	ldr	r3, [r1, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	dc02      	bgt.n	800587e <__sflush_r+0x1a>
 8005878:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800587a:	2b00      	cmp	r3, #0
 800587c:	dd48      	ble.n	8005910 <__sflush_r+0xac>
 800587e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005880:	2e00      	cmp	r6, #0
 8005882:	d045      	beq.n	8005910 <__sflush_r+0xac>
 8005884:	2300      	movs	r3, #0
 8005886:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800588a:	682f      	ldr	r7, [r5, #0]
 800588c:	6a21      	ldr	r1, [r4, #32]
 800588e:	602b      	str	r3, [r5, #0]
 8005890:	d030      	beq.n	80058f4 <__sflush_r+0x90>
 8005892:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005894:	89a3      	ldrh	r3, [r4, #12]
 8005896:	0759      	lsls	r1, r3, #29
 8005898:	d505      	bpl.n	80058a6 <__sflush_r+0x42>
 800589a:	6863      	ldr	r3, [r4, #4]
 800589c:	1ad2      	subs	r2, r2, r3
 800589e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80058a0:	b10b      	cbz	r3, 80058a6 <__sflush_r+0x42>
 80058a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80058a4:	1ad2      	subs	r2, r2, r3
 80058a6:	2300      	movs	r3, #0
 80058a8:	4628      	mov	r0, r5
 80058aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80058ac:	6a21      	ldr	r1, [r4, #32]
 80058ae:	47b0      	blx	r6
 80058b0:	1c43      	adds	r3, r0, #1
 80058b2:	89a3      	ldrh	r3, [r4, #12]
 80058b4:	d106      	bne.n	80058c4 <__sflush_r+0x60>
 80058b6:	6829      	ldr	r1, [r5, #0]
 80058b8:	291d      	cmp	r1, #29
 80058ba:	d82b      	bhi.n	8005914 <__sflush_r+0xb0>
 80058bc:	4a28      	ldr	r2, [pc, #160]	@ (8005960 <__sflush_r+0xfc>)
 80058be:	410a      	asrs	r2, r1
 80058c0:	07d6      	lsls	r6, r2, #31
 80058c2:	d427      	bmi.n	8005914 <__sflush_r+0xb0>
 80058c4:	2200      	movs	r2, #0
 80058c6:	6062      	str	r2, [r4, #4]
 80058c8:	6922      	ldr	r2, [r4, #16]
 80058ca:	04d9      	lsls	r1, r3, #19
 80058cc:	6022      	str	r2, [r4, #0]
 80058ce:	d504      	bpl.n	80058da <__sflush_r+0x76>
 80058d0:	1c42      	adds	r2, r0, #1
 80058d2:	d101      	bne.n	80058d8 <__sflush_r+0x74>
 80058d4:	682b      	ldr	r3, [r5, #0]
 80058d6:	b903      	cbnz	r3, 80058da <__sflush_r+0x76>
 80058d8:	6560      	str	r0, [r4, #84]	@ 0x54
 80058da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80058dc:	602f      	str	r7, [r5, #0]
 80058de:	b1b9      	cbz	r1, 8005910 <__sflush_r+0xac>
 80058e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80058e4:	4299      	cmp	r1, r3
 80058e6:	d002      	beq.n	80058ee <__sflush_r+0x8a>
 80058e8:	4628      	mov	r0, r5
 80058ea:	f7ff fa9b 	bl	8004e24 <_free_r>
 80058ee:	2300      	movs	r3, #0
 80058f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80058f2:	e00d      	b.n	8005910 <__sflush_r+0xac>
 80058f4:	2301      	movs	r3, #1
 80058f6:	4628      	mov	r0, r5
 80058f8:	47b0      	blx	r6
 80058fa:	4602      	mov	r2, r0
 80058fc:	1c50      	adds	r0, r2, #1
 80058fe:	d1c9      	bne.n	8005894 <__sflush_r+0x30>
 8005900:	682b      	ldr	r3, [r5, #0]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d0c6      	beq.n	8005894 <__sflush_r+0x30>
 8005906:	2b1d      	cmp	r3, #29
 8005908:	d001      	beq.n	800590e <__sflush_r+0xaa>
 800590a:	2b16      	cmp	r3, #22
 800590c:	d11d      	bne.n	800594a <__sflush_r+0xe6>
 800590e:	602f      	str	r7, [r5, #0]
 8005910:	2000      	movs	r0, #0
 8005912:	e021      	b.n	8005958 <__sflush_r+0xf4>
 8005914:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005918:	b21b      	sxth	r3, r3
 800591a:	e01a      	b.n	8005952 <__sflush_r+0xee>
 800591c:	690f      	ldr	r7, [r1, #16]
 800591e:	2f00      	cmp	r7, #0
 8005920:	d0f6      	beq.n	8005910 <__sflush_r+0xac>
 8005922:	0793      	lsls	r3, r2, #30
 8005924:	bf18      	it	ne
 8005926:	2300      	movne	r3, #0
 8005928:	680e      	ldr	r6, [r1, #0]
 800592a:	bf08      	it	eq
 800592c:	694b      	ldreq	r3, [r1, #20]
 800592e:	1bf6      	subs	r6, r6, r7
 8005930:	600f      	str	r7, [r1, #0]
 8005932:	608b      	str	r3, [r1, #8]
 8005934:	2e00      	cmp	r6, #0
 8005936:	ddeb      	ble.n	8005910 <__sflush_r+0xac>
 8005938:	4633      	mov	r3, r6
 800593a:	463a      	mov	r2, r7
 800593c:	4628      	mov	r0, r5
 800593e:	6a21      	ldr	r1, [r4, #32]
 8005940:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005944:	47e0      	blx	ip
 8005946:	2800      	cmp	r0, #0
 8005948:	dc07      	bgt.n	800595a <__sflush_r+0xf6>
 800594a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800594e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005952:	f04f 30ff 	mov.w	r0, #4294967295
 8005956:	81a3      	strh	r3, [r4, #12]
 8005958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800595a:	4407      	add	r7, r0
 800595c:	1a36      	subs	r6, r6, r0
 800595e:	e7e9      	b.n	8005934 <__sflush_r+0xd0>
 8005960:	dfbffffe 	.word	0xdfbffffe

08005964 <_fflush_r>:
 8005964:	b538      	push	{r3, r4, r5, lr}
 8005966:	690b      	ldr	r3, [r1, #16]
 8005968:	4605      	mov	r5, r0
 800596a:	460c      	mov	r4, r1
 800596c:	b913      	cbnz	r3, 8005974 <_fflush_r+0x10>
 800596e:	2500      	movs	r5, #0
 8005970:	4628      	mov	r0, r5
 8005972:	bd38      	pop	{r3, r4, r5, pc}
 8005974:	b118      	cbz	r0, 800597e <_fflush_r+0x1a>
 8005976:	6a03      	ldr	r3, [r0, #32]
 8005978:	b90b      	cbnz	r3, 800597e <_fflush_r+0x1a>
 800597a:	f7ff f91d 	bl	8004bb8 <__sinit>
 800597e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d0f3      	beq.n	800596e <_fflush_r+0xa>
 8005986:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005988:	07d0      	lsls	r0, r2, #31
 800598a:	d404      	bmi.n	8005996 <_fflush_r+0x32>
 800598c:	0599      	lsls	r1, r3, #22
 800598e:	d402      	bmi.n	8005996 <_fflush_r+0x32>
 8005990:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005992:	f7ff fa36 	bl	8004e02 <__retarget_lock_acquire_recursive>
 8005996:	4628      	mov	r0, r5
 8005998:	4621      	mov	r1, r4
 800599a:	f7ff ff63 	bl	8005864 <__sflush_r>
 800599e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80059a0:	4605      	mov	r5, r0
 80059a2:	07da      	lsls	r2, r3, #31
 80059a4:	d4e4      	bmi.n	8005970 <_fflush_r+0xc>
 80059a6:	89a3      	ldrh	r3, [r4, #12]
 80059a8:	059b      	lsls	r3, r3, #22
 80059aa:	d4e1      	bmi.n	8005970 <_fflush_r+0xc>
 80059ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80059ae:	f7ff fa29 	bl	8004e04 <__retarget_lock_release_recursive>
 80059b2:	e7dd      	b.n	8005970 <_fflush_r+0xc>

080059b4 <__swbuf_r>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	460e      	mov	r6, r1
 80059b8:	4614      	mov	r4, r2
 80059ba:	4605      	mov	r5, r0
 80059bc:	b118      	cbz	r0, 80059c6 <__swbuf_r+0x12>
 80059be:	6a03      	ldr	r3, [r0, #32]
 80059c0:	b90b      	cbnz	r3, 80059c6 <__swbuf_r+0x12>
 80059c2:	f7ff f8f9 	bl	8004bb8 <__sinit>
 80059c6:	69a3      	ldr	r3, [r4, #24]
 80059c8:	60a3      	str	r3, [r4, #8]
 80059ca:	89a3      	ldrh	r3, [r4, #12]
 80059cc:	071a      	lsls	r2, r3, #28
 80059ce:	d501      	bpl.n	80059d4 <__swbuf_r+0x20>
 80059d0:	6923      	ldr	r3, [r4, #16]
 80059d2:	b943      	cbnz	r3, 80059e6 <__swbuf_r+0x32>
 80059d4:	4621      	mov	r1, r4
 80059d6:	4628      	mov	r0, r5
 80059d8:	f000 f82a 	bl	8005a30 <__swsetup_r>
 80059dc:	b118      	cbz	r0, 80059e6 <__swbuf_r+0x32>
 80059de:	f04f 37ff 	mov.w	r7, #4294967295
 80059e2:	4638      	mov	r0, r7
 80059e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	6922      	ldr	r2, [r4, #16]
 80059ea:	b2f6      	uxtb	r6, r6
 80059ec:	1a98      	subs	r0, r3, r2
 80059ee:	6963      	ldr	r3, [r4, #20]
 80059f0:	4637      	mov	r7, r6
 80059f2:	4283      	cmp	r3, r0
 80059f4:	dc05      	bgt.n	8005a02 <__swbuf_r+0x4e>
 80059f6:	4621      	mov	r1, r4
 80059f8:	4628      	mov	r0, r5
 80059fa:	f7ff ffb3 	bl	8005964 <_fflush_r>
 80059fe:	2800      	cmp	r0, #0
 8005a00:	d1ed      	bne.n	80059de <__swbuf_r+0x2a>
 8005a02:	68a3      	ldr	r3, [r4, #8]
 8005a04:	3b01      	subs	r3, #1
 8005a06:	60a3      	str	r3, [r4, #8]
 8005a08:	6823      	ldr	r3, [r4, #0]
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	6022      	str	r2, [r4, #0]
 8005a0e:	701e      	strb	r6, [r3, #0]
 8005a10:	6962      	ldr	r2, [r4, #20]
 8005a12:	1c43      	adds	r3, r0, #1
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d004      	beq.n	8005a22 <__swbuf_r+0x6e>
 8005a18:	89a3      	ldrh	r3, [r4, #12]
 8005a1a:	07db      	lsls	r3, r3, #31
 8005a1c:	d5e1      	bpl.n	80059e2 <__swbuf_r+0x2e>
 8005a1e:	2e0a      	cmp	r6, #10
 8005a20:	d1df      	bne.n	80059e2 <__swbuf_r+0x2e>
 8005a22:	4621      	mov	r1, r4
 8005a24:	4628      	mov	r0, r5
 8005a26:	f7ff ff9d 	bl	8005964 <_fflush_r>
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d0d9      	beq.n	80059e2 <__swbuf_r+0x2e>
 8005a2e:	e7d6      	b.n	80059de <__swbuf_r+0x2a>

08005a30 <__swsetup_r>:
 8005a30:	b538      	push	{r3, r4, r5, lr}
 8005a32:	4b29      	ldr	r3, [pc, #164]	@ (8005ad8 <__swsetup_r+0xa8>)
 8005a34:	4605      	mov	r5, r0
 8005a36:	6818      	ldr	r0, [r3, #0]
 8005a38:	460c      	mov	r4, r1
 8005a3a:	b118      	cbz	r0, 8005a44 <__swsetup_r+0x14>
 8005a3c:	6a03      	ldr	r3, [r0, #32]
 8005a3e:	b90b      	cbnz	r3, 8005a44 <__swsetup_r+0x14>
 8005a40:	f7ff f8ba 	bl	8004bb8 <__sinit>
 8005a44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a48:	0719      	lsls	r1, r3, #28
 8005a4a:	d422      	bmi.n	8005a92 <__swsetup_r+0x62>
 8005a4c:	06da      	lsls	r2, r3, #27
 8005a4e:	d407      	bmi.n	8005a60 <__swsetup_r+0x30>
 8005a50:	2209      	movs	r2, #9
 8005a52:	602a      	str	r2, [r5, #0]
 8005a54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a58:	f04f 30ff 	mov.w	r0, #4294967295
 8005a5c:	81a3      	strh	r3, [r4, #12]
 8005a5e:	e033      	b.n	8005ac8 <__swsetup_r+0x98>
 8005a60:	0758      	lsls	r0, r3, #29
 8005a62:	d512      	bpl.n	8005a8a <__swsetup_r+0x5a>
 8005a64:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a66:	b141      	cbz	r1, 8005a7a <__swsetup_r+0x4a>
 8005a68:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a6c:	4299      	cmp	r1, r3
 8005a6e:	d002      	beq.n	8005a76 <__swsetup_r+0x46>
 8005a70:	4628      	mov	r0, r5
 8005a72:	f7ff f9d7 	bl	8004e24 <_free_r>
 8005a76:	2300      	movs	r3, #0
 8005a78:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a7a:	89a3      	ldrh	r3, [r4, #12]
 8005a7c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005a80:	81a3      	strh	r3, [r4, #12]
 8005a82:	2300      	movs	r3, #0
 8005a84:	6063      	str	r3, [r4, #4]
 8005a86:	6923      	ldr	r3, [r4, #16]
 8005a88:	6023      	str	r3, [r4, #0]
 8005a8a:	89a3      	ldrh	r3, [r4, #12]
 8005a8c:	f043 0308 	orr.w	r3, r3, #8
 8005a90:	81a3      	strh	r3, [r4, #12]
 8005a92:	6923      	ldr	r3, [r4, #16]
 8005a94:	b94b      	cbnz	r3, 8005aaa <__swsetup_r+0x7a>
 8005a96:	89a3      	ldrh	r3, [r4, #12]
 8005a98:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005aa0:	d003      	beq.n	8005aaa <__swsetup_r+0x7a>
 8005aa2:	4621      	mov	r1, r4
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	f000 f8a4 	bl	8005bf2 <__smakebuf_r>
 8005aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aae:	f013 0201 	ands.w	r2, r3, #1
 8005ab2:	d00a      	beq.n	8005aca <__swsetup_r+0x9a>
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	60a2      	str	r2, [r4, #8]
 8005ab8:	6962      	ldr	r2, [r4, #20]
 8005aba:	4252      	negs	r2, r2
 8005abc:	61a2      	str	r2, [r4, #24]
 8005abe:	6922      	ldr	r2, [r4, #16]
 8005ac0:	b942      	cbnz	r2, 8005ad4 <__swsetup_r+0xa4>
 8005ac2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005ac6:	d1c5      	bne.n	8005a54 <__swsetup_r+0x24>
 8005ac8:	bd38      	pop	{r3, r4, r5, pc}
 8005aca:	0799      	lsls	r1, r3, #30
 8005acc:	bf58      	it	pl
 8005ace:	6962      	ldrpl	r2, [r4, #20]
 8005ad0:	60a2      	str	r2, [r4, #8]
 8005ad2:	e7f4      	b.n	8005abe <__swsetup_r+0x8e>
 8005ad4:	2000      	movs	r0, #0
 8005ad6:	e7f7      	b.n	8005ac8 <__swsetup_r+0x98>
 8005ad8:	20000028 	.word	0x20000028

08005adc <memmove>:
 8005adc:	4288      	cmp	r0, r1
 8005ade:	b510      	push	{r4, lr}
 8005ae0:	eb01 0402 	add.w	r4, r1, r2
 8005ae4:	d902      	bls.n	8005aec <memmove+0x10>
 8005ae6:	4284      	cmp	r4, r0
 8005ae8:	4623      	mov	r3, r4
 8005aea:	d807      	bhi.n	8005afc <memmove+0x20>
 8005aec:	1e43      	subs	r3, r0, #1
 8005aee:	42a1      	cmp	r1, r4
 8005af0:	d008      	beq.n	8005b04 <memmove+0x28>
 8005af2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005af6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005afa:	e7f8      	b.n	8005aee <memmove+0x12>
 8005afc:	4601      	mov	r1, r0
 8005afe:	4402      	add	r2, r0
 8005b00:	428a      	cmp	r2, r1
 8005b02:	d100      	bne.n	8005b06 <memmove+0x2a>
 8005b04:	bd10      	pop	{r4, pc}
 8005b06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005b0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005b0e:	e7f7      	b.n	8005b00 <memmove+0x24>

08005b10 <_sbrk_r>:
 8005b10:	b538      	push	{r3, r4, r5, lr}
 8005b12:	2300      	movs	r3, #0
 8005b14:	4d05      	ldr	r5, [pc, #20]	@ (8005b2c <_sbrk_r+0x1c>)
 8005b16:	4604      	mov	r4, r0
 8005b18:	4608      	mov	r0, r1
 8005b1a:	602b      	str	r3, [r5, #0]
 8005b1c:	f7fb fd4c 	bl	80015b8 <_sbrk>
 8005b20:	1c43      	adds	r3, r0, #1
 8005b22:	d102      	bne.n	8005b2a <_sbrk_r+0x1a>
 8005b24:	682b      	ldr	r3, [r5, #0]
 8005b26:	b103      	cbz	r3, 8005b2a <_sbrk_r+0x1a>
 8005b28:	6023      	str	r3, [r4, #0]
 8005b2a:	bd38      	pop	{r3, r4, r5, pc}
 8005b2c:	20001bac 	.word	0x20001bac

08005b30 <memchr>:
 8005b30:	4603      	mov	r3, r0
 8005b32:	b510      	push	{r4, lr}
 8005b34:	b2c9      	uxtb	r1, r1
 8005b36:	4402      	add	r2, r0
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	d101      	bne.n	8005b42 <memchr+0x12>
 8005b3e:	2000      	movs	r0, #0
 8005b40:	e003      	b.n	8005b4a <memchr+0x1a>
 8005b42:	7804      	ldrb	r4, [r0, #0]
 8005b44:	3301      	adds	r3, #1
 8005b46:	428c      	cmp	r4, r1
 8005b48:	d1f6      	bne.n	8005b38 <memchr+0x8>
 8005b4a:	bd10      	pop	{r4, pc}

08005b4c <_realloc_r>:
 8005b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b50:	4680      	mov	r8, r0
 8005b52:	4615      	mov	r5, r2
 8005b54:	460c      	mov	r4, r1
 8005b56:	b921      	cbnz	r1, 8005b62 <_realloc_r+0x16>
 8005b58:	4611      	mov	r1, r2
 8005b5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b5e:	f7ff b9cb 	b.w	8004ef8 <_malloc_r>
 8005b62:	b92a      	cbnz	r2, 8005b70 <_realloc_r+0x24>
 8005b64:	f7ff f95e 	bl	8004e24 <_free_r>
 8005b68:	2400      	movs	r4, #0
 8005b6a:	4620      	mov	r0, r4
 8005b6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005b70:	f000 f89e 	bl	8005cb0 <_malloc_usable_size_r>
 8005b74:	4285      	cmp	r5, r0
 8005b76:	4606      	mov	r6, r0
 8005b78:	d802      	bhi.n	8005b80 <_realloc_r+0x34>
 8005b7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005b7e:	d8f4      	bhi.n	8005b6a <_realloc_r+0x1e>
 8005b80:	4629      	mov	r1, r5
 8005b82:	4640      	mov	r0, r8
 8005b84:	f7ff f9b8 	bl	8004ef8 <_malloc_r>
 8005b88:	4607      	mov	r7, r0
 8005b8a:	2800      	cmp	r0, #0
 8005b8c:	d0ec      	beq.n	8005b68 <_realloc_r+0x1c>
 8005b8e:	42b5      	cmp	r5, r6
 8005b90:	462a      	mov	r2, r5
 8005b92:	4621      	mov	r1, r4
 8005b94:	bf28      	it	cs
 8005b96:	4632      	movcs	r2, r6
 8005b98:	f7ff f935 	bl	8004e06 <memcpy>
 8005b9c:	4621      	mov	r1, r4
 8005b9e:	4640      	mov	r0, r8
 8005ba0:	f7ff f940 	bl	8004e24 <_free_r>
 8005ba4:	463c      	mov	r4, r7
 8005ba6:	e7e0      	b.n	8005b6a <_realloc_r+0x1e>

08005ba8 <__swhatbuf_r>:
 8005ba8:	b570      	push	{r4, r5, r6, lr}
 8005baa:	460c      	mov	r4, r1
 8005bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005bb0:	4615      	mov	r5, r2
 8005bb2:	2900      	cmp	r1, #0
 8005bb4:	461e      	mov	r6, r3
 8005bb6:	b096      	sub	sp, #88	@ 0x58
 8005bb8:	da0c      	bge.n	8005bd4 <__swhatbuf_r+0x2c>
 8005bba:	89a3      	ldrh	r3, [r4, #12]
 8005bbc:	2100      	movs	r1, #0
 8005bbe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005bc2:	bf14      	ite	ne
 8005bc4:	2340      	movne	r3, #64	@ 0x40
 8005bc6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005bca:	2000      	movs	r0, #0
 8005bcc:	6031      	str	r1, [r6, #0]
 8005bce:	602b      	str	r3, [r5, #0]
 8005bd0:	b016      	add	sp, #88	@ 0x58
 8005bd2:	bd70      	pop	{r4, r5, r6, pc}
 8005bd4:	466a      	mov	r2, sp
 8005bd6:	f000 f849 	bl	8005c6c <_fstat_r>
 8005bda:	2800      	cmp	r0, #0
 8005bdc:	dbed      	blt.n	8005bba <__swhatbuf_r+0x12>
 8005bde:	9901      	ldr	r1, [sp, #4]
 8005be0:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005be4:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005be8:	4259      	negs	r1, r3
 8005bea:	4159      	adcs	r1, r3
 8005bec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005bf0:	e7eb      	b.n	8005bca <__swhatbuf_r+0x22>

08005bf2 <__smakebuf_r>:
 8005bf2:	898b      	ldrh	r3, [r1, #12]
 8005bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005bf6:	079d      	lsls	r5, r3, #30
 8005bf8:	4606      	mov	r6, r0
 8005bfa:	460c      	mov	r4, r1
 8005bfc:	d507      	bpl.n	8005c0e <__smakebuf_r+0x1c>
 8005bfe:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005c02:	6023      	str	r3, [r4, #0]
 8005c04:	6123      	str	r3, [r4, #16]
 8005c06:	2301      	movs	r3, #1
 8005c08:	6163      	str	r3, [r4, #20]
 8005c0a:	b003      	add	sp, #12
 8005c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005c0e:	466a      	mov	r2, sp
 8005c10:	ab01      	add	r3, sp, #4
 8005c12:	f7ff ffc9 	bl	8005ba8 <__swhatbuf_r>
 8005c16:	9f00      	ldr	r7, [sp, #0]
 8005c18:	4605      	mov	r5, r0
 8005c1a:	4639      	mov	r1, r7
 8005c1c:	4630      	mov	r0, r6
 8005c1e:	f7ff f96b 	bl	8004ef8 <_malloc_r>
 8005c22:	b948      	cbnz	r0, 8005c38 <__smakebuf_r+0x46>
 8005c24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005c28:	059a      	lsls	r2, r3, #22
 8005c2a:	d4ee      	bmi.n	8005c0a <__smakebuf_r+0x18>
 8005c2c:	f023 0303 	bic.w	r3, r3, #3
 8005c30:	f043 0302 	orr.w	r3, r3, #2
 8005c34:	81a3      	strh	r3, [r4, #12]
 8005c36:	e7e2      	b.n	8005bfe <__smakebuf_r+0xc>
 8005c38:	89a3      	ldrh	r3, [r4, #12]
 8005c3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c42:	81a3      	strh	r3, [r4, #12]
 8005c44:	9b01      	ldr	r3, [sp, #4]
 8005c46:	6020      	str	r0, [r4, #0]
 8005c48:	b15b      	cbz	r3, 8005c62 <__smakebuf_r+0x70>
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005c50:	f000 f81e 	bl	8005c90 <_isatty_r>
 8005c54:	b128      	cbz	r0, 8005c62 <__smakebuf_r+0x70>
 8005c56:	89a3      	ldrh	r3, [r4, #12]
 8005c58:	f023 0303 	bic.w	r3, r3, #3
 8005c5c:	f043 0301 	orr.w	r3, r3, #1
 8005c60:	81a3      	strh	r3, [r4, #12]
 8005c62:	89a3      	ldrh	r3, [r4, #12]
 8005c64:	431d      	orrs	r5, r3
 8005c66:	81a5      	strh	r5, [r4, #12]
 8005c68:	e7cf      	b.n	8005c0a <__smakebuf_r+0x18>
	...

08005c6c <_fstat_r>:
 8005c6c:	b538      	push	{r3, r4, r5, lr}
 8005c6e:	2300      	movs	r3, #0
 8005c70:	4d06      	ldr	r5, [pc, #24]	@ (8005c8c <_fstat_r+0x20>)
 8005c72:	4604      	mov	r4, r0
 8005c74:	4608      	mov	r0, r1
 8005c76:	4611      	mov	r1, r2
 8005c78:	602b      	str	r3, [r5, #0]
 8005c7a:	f7fb fc94 	bl	80015a6 <_fstat>
 8005c7e:	1c43      	adds	r3, r0, #1
 8005c80:	d102      	bne.n	8005c88 <_fstat_r+0x1c>
 8005c82:	682b      	ldr	r3, [r5, #0]
 8005c84:	b103      	cbz	r3, 8005c88 <_fstat_r+0x1c>
 8005c86:	6023      	str	r3, [r4, #0]
 8005c88:	bd38      	pop	{r3, r4, r5, pc}
 8005c8a:	bf00      	nop
 8005c8c:	20001bac 	.word	0x20001bac

08005c90 <_isatty_r>:
 8005c90:	b538      	push	{r3, r4, r5, lr}
 8005c92:	2300      	movs	r3, #0
 8005c94:	4d05      	ldr	r5, [pc, #20]	@ (8005cac <_isatty_r+0x1c>)
 8005c96:	4604      	mov	r4, r0
 8005c98:	4608      	mov	r0, r1
 8005c9a:	602b      	str	r3, [r5, #0]
 8005c9c:	f7fb fc88 	bl	80015b0 <_isatty>
 8005ca0:	1c43      	adds	r3, r0, #1
 8005ca2:	d102      	bne.n	8005caa <_isatty_r+0x1a>
 8005ca4:	682b      	ldr	r3, [r5, #0]
 8005ca6:	b103      	cbz	r3, 8005caa <_isatty_r+0x1a>
 8005ca8:	6023      	str	r3, [r4, #0]
 8005caa:	bd38      	pop	{r3, r4, r5, pc}
 8005cac:	20001bac 	.word	0x20001bac

08005cb0 <_malloc_usable_size_r>:
 8005cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cb4:	1f18      	subs	r0, r3, #4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	bfbc      	itt	lt
 8005cba:	580b      	ldrlt	r3, [r1, r0]
 8005cbc:	18c0      	addlt	r0, r0, r3
 8005cbe:	4770      	bx	lr

08005cc0 <_init>:
 8005cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc2:	bf00      	nop
 8005cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cc6:	bc08      	pop	{r3}
 8005cc8:	469e      	mov	lr, r3
 8005cca:	4770      	bx	lr

08005ccc <_fini>:
 8005ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cce:	bf00      	nop
 8005cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd2:	bc08      	pop	{r3}
 8005cd4:	469e      	mov	lr, r3
 8005cd6:	4770      	bx	lr
