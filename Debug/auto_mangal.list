
auto_mangal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052e8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000194c  080053f8  080053f8  000063f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006d44  08006d44  00008074  2**0
                  CONTENTS
  4 .ARM          00000000  08006d44  08006d44  00008074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006d44  08006d44  00008074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006d44  08006d44  00007d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006d48  08006d48  00007d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000074  20000000  08006d4c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b40  20000074  08006dc0  00008074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bb4  08006dc0  00008bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017f19  00000000  00000000  0000809d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004134  00000000  00000000  0001ffb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee8  00000000  00000000  000240f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000116a  00000000  00000000  00024fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a405  00000000  00000000  00026142  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a60b  00000000  00000000  00040547  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090c1b  00000000  00000000  0005ab52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000eb76d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000032f0  00000000  00000000  000eb7b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 000082f1  00000000  00000000  000eeaa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000f6d91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080053e0 	.word	0x080053e0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080053e0 	.word	0x080053e0

08000150 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000150:	4b03      	ldr	r3, [pc, #12]	@ (8000160 <vApplicationGetIdleTaskMemory+0x10>)
 8000152:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000154:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <vApplicationGetIdleTaskMemory+0x14>)
 8000156:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000158:	2380      	movs	r3, #128	@ 0x80
 800015a:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	200006e4 	.word	0x200006e4
 8000164:	200004e4 	.word	0x200004e4

08000168 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000168:	4b03      	ldr	r3, [pc, #12]	@ (8000178 <vApplicationGetTimerTaskMemory+0x10>)
 800016a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800016c:	4b03      	ldr	r3, [pc, #12]	@ (800017c <vApplicationGetTimerTaskMemory+0x14>)
 800016e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000170:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000174:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000176:	4770      	bx	lr
 8000178:	20000490 	.word	0x20000490
 800017c:	20000090 	.word	0x20000090

08000180 <StartReadKeyTask>:
/* USER CODE END Header_StartReadKeyTask */
void StartReadKeyTask(void const * argument)
{
  /* USER CODE BEGIN 5 */
  #define SCREEN_TIMEOUT 30000
  osTimerStart(screenTimeoutTimerHandle, SCREEN_TIMEOUT);
 8000180:	4c55      	ldr	r4, [pc, #340]	@ (80002d8 <StartReadKeyTask+0x158>)
{
 8000182:	b580      	push	{r7, lr}
  osTimerStart(screenTimeoutTimerHandle, SCREEN_TIMEOUT);
 8000184:	f247 5130 	movw	r1, #30000	@ 0x7530
 8000188:	6820      	ldr	r0, [r4, #0]
 800018a:	f002 fa65 	bl	8002658 <osTimerStart>
  /* Infinite loop */
  for(;;)
  {

	if (HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0) {
 800018e:	4f53      	ldr	r7, [pc, #332]	@ (80002dc <StartReadKeyTask+0x15c>)
		    osDelay(1);
	    }
	    osTimerStart(screenTimeoutTimerHandle, SCREEN_TIMEOUT);
	}
	else if (HAL_GPIO_ReadPin(btn_ok_GPIO_Port, btn_ok_Pin) == 0) {
	    osTimerStart(cancelButtonHandle, 1000);
 8000190:	4e53      	ldr	r6, [pc, #332]	@ (80002e0 <StartReadKeyTask+0x160>)
	if (HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0) {
 8000192:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000196:	4638      	mov	r0, r7
 8000198:	f001 fc2e 	bl	80019f8 <HAL_GPIO_ReadPin>
 800019c:	4605      	mov	r5, r0
 800019e:	b9e8      	cbnz	r0, 80001dc <StartReadKeyTask+0x5c>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 0, 100);
 80001a0:	f000 feaa 	bl	8000ef8 <ssd1306_GetDisplayOn>
 80001a4:	2264      	movs	r2, #100	@ 0x64
 80001a6:	4b4f      	ldr	r3, [pc, #316]	@ (80002e4 <StartReadKeyTask+0x164>)
 80001a8:	b990      	cbnz	r0, 80001d0 <StartReadKeyTask+0x50>
 80001aa:	2106      	movs	r1, #6
 80001ac:	6818      	ldr	r0, [r3, #0]
 80001ae:	f002 fab5 	bl	800271c <osMessagePut>
	    while(HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0)
 80001b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001b6:	4638      	mov	r0, r7
 80001b8:	f001 fc1e 	bl	80019f8 <HAL_GPIO_ReadPin>
 80001bc:	b150      	cbz	r0, 80001d4 <StartReadKeyTask+0x54>
	    osTimerStart(screenTimeoutTimerHandle, SCREEN_TIMEOUT);
 80001be:	f247 5130 	movw	r1, #30000	@ 0x7530
 80001c2:	6820      	ldr	r0, [r4, #0]
 80001c4:	f002 fa48 	bl	8002658 <osTimerStart>
		//short press
	    }
	    osTimerStop(cancelButtonHandle);
	}

    osDelay(10);
 80001c8:	200a      	movs	r0, #10
 80001ca:	f002 fa24 	bl	8002616 <osDelay>
	if (HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0) {
 80001ce:	e7e0      	b.n	8000192 <StartReadKeyTask+0x12>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 0, 100);
 80001d0:	4629      	mov	r1, r5
 80001d2:	e7eb      	b.n	80001ac <StartReadKeyTask+0x2c>
		    osDelay(1);
 80001d4:	2001      	movs	r0, #1
 80001d6:	f002 fa1e 	bl	8002616 <osDelay>
 80001da:	e7ea      	b.n	80001b2 <StartReadKeyTask+0x32>
	else if (HAL_GPIO_ReadPin(btn_top_GPIO_Port, btn_top_Pin) == 0) {
 80001dc:	2180      	movs	r1, #128	@ 0x80
 80001de:	4842      	ldr	r0, [pc, #264]	@ (80002e8 <StartReadKeyTask+0x168>)
 80001e0:	f001 fc0a 	bl	80019f8 <HAL_GPIO_ReadPin>
 80001e4:	b9a8      	cbnz	r0, 8000212 <StartReadKeyTask+0x92>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 1, 100);
 80001e6:	f000 fe87 	bl	8000ef8 <ssd1306_GetDisplayOn>
 80001ea:	2264      	movs	r2, #100	@ 0x64
 80001ec:	4b3d      	ldr	r3, [pc, #244]	@ (80002e4 <StartReadKeyTask+0x164>)
 80001ee:	b970      	cbnz	r0, 800020e <StartReadKeyTask+0x8e>
 80001f0:	2106      	movs	r1, #6
 80001f2:	6818      	ldr	r0, [r3, #0]
 80001f4:	f002 fa92 	bl	800271c <osMessagePut>
	    while(HAL_GPIO_ReadPin(btn_top_GPIO_Port, btn_top_Pin) == 0)
 80001f8:	4d3b      	ldr	r5, [pc, #236]	@ (80002e8 <StartReadKeyTask+0x168>)
 80001fa:	2180      	movs	r1, #128	@ 0x80
 80001fc:	4628      	mov	r0, r5
 80001fe:	f001 fbfb 	bl	80019f8 <HAL_GPIO_ReadPin>
 8000202:	2800      	cmp	r0, #0
 8000204:	d1db      	bne.n	80001be <StartReadKeyTask+0x3e>
		    osDelay(1);
 8000206:	2001      	movs	r0, #1
 8000208:	f002 fa05 	bl	8002616 <osDelay>
 800020c:	e7f5      	b.n	80001fa <StartReadKeyTask+0x7a>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 1, 100);
 800020e:	2101      	movs	r1, #1
 8000210:	e7ef      	b.n	80001f2 <StartReadKeyTask+0x72>
	else if (HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin) == 0) {
 8000212:	2110      	movs	r1, #16
 8000214:	4834      	ldr	r0, [pc, #208]	@ (80002e8 <StartReadKeyTask+0x168>)
 8000216:	f001 fbef 	bl	80019f8 <HAL_GPIO_ReadPin>
 800021a:	b9a8      	cbnz	r0, 8000248 <StartReadKeyTask+0xc8>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 2, 100);
 800021c:	f000 fe6c 	bl	8000ef8 <ssd1306_GetDisplayOn>
 8000220:	2264      	movs	r2, #100	@ 0x64
 8000222:	4b30      	ldr	r3, [pc, #192]	@ (80002e4 <StartReadKeyTask+0x164>)
 8000224:	b970      	cbnz	r0, 8000244 <StartReadKeyTask+0xc4>
 8000226:	2106      	movs	r1, #6
 8000228:	6818      	ldr	r0, [r3, #0]
 800022a:	f002 fa77 	bl	800271c <osMessagePut>
	    while(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin) == 0)
 800022e:	4d2e      	ldr	r5, [pc, #184]	@ (80002e8 <StartReadKeyTask+0x168>)
 8000230:	2110      	movs	r1, #16
 8000232:	4628      	mov	r0, r5
 8000234:	f001 fbe0 	bl	80019f8 <HAL_GPIO_ReadPin>
 8000238:	2800      	cmp	r0, #0
 800023a:	d1c0      	bne.n	80001be <StartReadKeyTask+0x3e>
		    osDelay(1);
 800023c:	2001      	movs	r0, #1
 800023e:	f002 f9ea 	bl	8002616 <osDelay>
 8000242:	e7f5      	b.n	8000230 <StartReadKeyTask+0xb0>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 2, 100);
 8000244:	2102      	movs	r1, #2
 8000246:	e7ef      	b.n	8000228 <StartReadKeyTask+0xa8>
	else if (HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin) == 0) {
 8000248:	2140      	movs	r1, #64	@ 0x40
 800024a:	4827      	ldr	r0, [pc, #156]	@ (80002e8 <StartReadKeyTask+0x168>)
 800024c:	f001 fbd4 	bl	80019f8 <HAL_GPIO_ReadPin>
 8000250:	b9a8      	cbnz	r0, 800027e <StartReadKeyTask+0xfe>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 3, 100);
 8000252:	f000 fe51 	bl	8000ef8 <ssd1306_GetDisplayOn>
 8000256:	2264      	movs	r2, #100	@ 0x64
 8000258:	4b22      	ldr	r3, [pc, #136]	@ (80002e4 <StartReadKeyTask+0x164>)
 800025a:	b970      	cbnz	r0, 800027a <StartReadKeyTask+0xfa>
 800025c:	2106      	movs	r1, #6
 800025e:	6818      	ldr	r0, [r3, #0]
 8000260:	f002 fa5c 	bl	800271c <osMessagePut>
	    while(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin) == 0)
 8000264:	4d20      	ldr	r5, [pc, #128]	@ (80002e8 <StartReadKeyTask+0x168>)
 8000266:	2140      	movs	r1, #64	@ 0x40
 8000268:	4628      	mov	r0, r5
 800026a:	f001 fbc5 	bl	80019f8 <HAL_GPIO_ReadPin>
 800026e:	2800      	cmp	r0, #0
 8000270:	d1a5      	bne.n	80001be <StartReadKeyTask+0x3e>
		    osDelay(1);
 8000272:	2001      	movs	r0, #1
 8000274:	f002 f9cf 	bl	8002616 <osDelay>
 8000278:	e7f5      	b.n	8000266 <StartReadKeyTask+0xe6>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 3, 100);
 800027a:	2103      	movs	r1, #3
 800027c:	e7ef      	b.n	800025e <StartReadKeyTask+0xde>
	else if (HAL_GPIO_ReadPin(btn_ok_GPIO_Port, btn_ok_Pin) == 0) {
 800027e:	2120      	movs	r1, #32
 8000280:	4819      	ldr	r0, [pc, #100]	@ (80002e8 <StartReadKeyTask+0x168>)
 8000282:	f001 fbb9 	bl	80019f8 <HAL_GPIO_ReadPin>
 8000286:	2800      	cmp	r0, #0
 8000288:	d19e      	bne.n	80001c8 <StartReadKeyTask+0x48>
	    osTimerStart(cancelButtonHandle, 1000);
 800028a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800028e:	6830      	ldr	r0, [r6, #0]
 8000290:	f002 f9e2 	bl	8002658 <osTimerStart>
	    while(HAL_GPIO_ReadPin(btn_ok_GPIO_Port, btn_ok_Pin) == 0)
 8000294:	4d14      	ldr	r5, [pc, #80]	@ (80002e8 <StartReadKeyTask+0x168>)
 8000296:	2120      	movs	r1, #32
 8000298:	4628      	mov	r0, r5
 800029a:	f001 fbad 	bl	80019f8 <HAL_GPIO_ReadPin>
 800029e:	b1a8      	cbz	r0, 80002cc <StartReadKeyTask+0x14c>
	    osTimerStart(screenTimeoutTimerHandle, SCREEN_TIMEOUT);
 80002a0:	f247 5130 	movw	r1, #30000	@ 0x7530
 80002a4:	6820      	ldr	r0, [r4, #0]
 80002a6:	f002 f9d7 	bl	8002658 <osTimerStart>
	    if (xTimerIsTimerActive(cancelButtonHandle) != pdFALSE) {
 80002aa:	6830      	ldr	r0, [r6, #0]
 80002ac:	f003 fd24 	bl	8003cf8 <xTimerIsTimerActive>
 80002b0:	b140      	cbz	r0, 80002c4 <StartReadKeyTask+0x144>
		if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 4, 100);
 80002b2:	f000 fe21 	bl	8000ef8 <ssd1306_GetDisplayOn>
 80002b6:	2264      	movs	r2, #100	@ 0x64
 80002b8:	4b0a      	ldr	r3, [pc, #40]	@ (80002e4 <StartReadKeyTask+0x164>)
 80002ba:	b958      	cbnz	r0, 80002d4 <StartReadKeyTask+0x154>
 80002bc:	2106      	movs	r1, #6
 80002be:	6818      	ldr	r0, [r3, #0]
 80002c0:	f002 fa2c 	bl	800271c <osMessagePut>
	    osTimerStop(cancelButtonHandle);
 80002c4:	6830      	ldr	r0, [r6, #0]
 80002c6:	f002 f9f0 	bl	80026aa <osTimerStop>
 80002ca:	e77d      	b.n	80001c8 <StartReadKeyTask+0x48>
		    osDelay(1);
 80002cc:	2001      	movs	r0, #1
 80002ce:	f002 f9a2 	bl	8002616 <osDelay>
 80002d2:	e7e0      	b.n	8000296 <StartReadKeyTask+0x116>
		if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 4, 100);
 80002d4:	2104      	movs	r1, #4
 80002d6:	e7f2      	b.n	80002be <StartReadKeyTask+0x13e>
 80002d8:	2000073c 	.word	0x2000073c
 80002dc:	40010800 	.word	0x40010800
 80002e0:	20000740 	.word	0x20000740
 80002e4:	20000744 	.word	0x20000744
 80002e8:	40010c00 	.word	0x40010c00

080002ec <StartGuiTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGuiTask */
void StartGuiTask(void const * argument)
{
 80002ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* USER CODE BEGIN StartGuiTask */
  osEvent btnEvent;
  uint8_t guiState = 0;
  uint8_t selectedMode = 0;
  uint8_t intermittentModeMenuPointer = 0;
 80002f0:	f04f 0b00 	mov.w	fp, #0
  uint8_t speed = 5;
  uint8_t sleep = 60;
  uint8_t corner = 45;
 80002f4:	f04f 082d 	mov.w	r8, #45	@ 0x2d
  uint8_t sleep = 60;
 80002f8:	253c      	movs	r5, #60	@ 0x3c
  uint8_t speed = 5;
 80002fa:	2605      	movs	r6, #5
  uint8_t guiState = 0;
 80002fc:	465f      	mov	r7, fp
{
 80002fe:	b091      	sub	sp, #68	@ 0x44
  uint8_t selectedMode = 0;
 8000300:	f8cd b010 	str.w	fp, [sp, #16]
  /* Infinite loop */

  for(;;)
  {
      HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 8000304:	4895      	ldr	r0, [pc, #596]	@ (800055c <StartGuiTask+0x270>)
 8000306:	f001 f8bf 	bl	8001488 <HAL_ADC_Start>
      HAL_ADC_PollForConversion(&hadc1, 100); // ожидаем окончания преобразования
 800030a:	2164      	movs	r1, #100	@ 0x64
 800030c:	4893      	ldr	r0, [pc, #588]	@ (800055c <StartGuiTask+0x270>)
 800030e:	f000 ff59 	bl	80011c4 <HAL_ADC_PollForConversion>
      adcBatteryVoltage = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 8000312:	4892      	ldr	r0, [pc, #584]	@ (800055c <StartGuiTask+0x270>)
 8000314:	f000 fffa 	bl	800130c <HAL_ADC_GetValue>
 8000318:	f8df 9244 	ldr.w	r9, [pc, #580]	@ 8000560 <StartGuiTask+0x274>
      HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
      printf("ADC %d\n", adcBatteryVoltage);

      ssd1306_Fill(Black);
      ssd1306_DrawRectangle(0, 0, 127, 63, White);
 800031c:	2401      	movs	r4, #1
      adcBatteryVoltage = HAL_ADC_GetValue(&hadc1); // читаем полученное значение в переменную adc
 800031e:	f8a9 0000 	strh.w	r0, [r9]
      HAL_ADC_Stop(&hadc1); // останавливаем АЦП (не обязательно)
 8000322:	488e      	ldr	r0, [pc, #568]	@ (800055c <StartGuiTask+0x270>)
 8000324:	f001 f9b6 	bl	8001694 <HAL_ADC_Stop>
      printf("ADC %d\n", adcBatteryVoltage);
 8000328:	f8b9 1000 	ldrh.w	r1, [r9]
 800032c:	488d      	ldr	r0, [pc, #564]	@ (8000564 <StartGuiTask+0x278>)
 800032e:	f004 f809 	bl	8004344 <iprintf>
      ssd1306_Fill(Black);
 8000332:	2000      	movs	r0, #0
 8000334:	f000 fbe6 	bl	8000b04 <ssd1306_Fill>
      ssd1306_DrawRectangle(0, 0, 127, 63, White);
 8000338:	2100      	movs	r1, #0
 800033a:	233f      	movs	r3, #63	@ 0x3f
 800033c:	227f      	movs	r2, #127	@ 0x7f
 800033e:	4608      	mov	r0, r1
 8000340:	9400      	str	r4, [sp, #0]
 8000342:	f000 fcd1 	bl	8000ce8 <ssd1306_DrawRectangle>

      if(adcBatteryVoltage > 3523)
 8000346:	f640 52c3 	movw	r2, #3523	@ 0xdc3
 800034a:	f8b9 3000 	ldrh.w	r3, [r9]
 800034e:	4293      	cmp	r3, r2
 8000350:	d96d      	bls.n	800042e <StartGuiTask+0x142>
	{
	  ssd1306_DrawRectangle(102, 3, 122, 12, White);
 8000352:	230c      	movs	r3, #12
 8000354:	227a      	movs	r2, #122	@ 0x7a
 8000356:	2103      	movs	r1, #3
 8000358:	2066      	movs	r0, #102	@ 0x66
 800035a:	9400      	str	r4, [sp, #0]
 800035c:	f000 fcc4 	bl	8000ce8 <ssd1306_DrawRectangle>
	  ssd1306_FillRectangle(104, 5, 108, 10, White);
 8000360:	230a      	movs	r3, #10
 8000362:	226c      	movs	r2, #108	@ 0x6c
 8000364:	2105      	movs	r1, #5
 8000366:	2068      	movs	r0, #104	@ 0x68
 8000368:	9400      	str	r4, [sp, #0]
 800036a:	f000 fce5 	bl	8000d38 <ssd1306_FillRectangle>
	  ssd1306_FillRectangle(110, 5, 114, 10, White);
 800036e:	230a      	movs	r3, #10
 8000370:	2272      	movs	r2, #114	@ 0x72
 8000372:	2105      	movs	r1, #5
 8000374:	206e      	movs	r0, #110	@ 0x6e
 8000376:	9400      	str	r4, [sp, #0]
 8000378:	f000 fcde 	bl	8000d38 <ssd1306_FillRectangle>
	  ssd1306_FillRectangle(116, 5, 120, 10, White);
 800037c:	230a      	movs	r3, #10
 800037e:	2278      	movs	r2, #120	@ 0x78
 8000380:	2105      	movs	r1, #5
 8000382:	2074      	movs	r0, #116	@ 0x74
 8000384:	9400      	str	r4, [sp, #0]
	  ssd1306_DrawRectangle(123, 6, 124, 9, White);
	}
      else if(adcBatteryVoltage > 3047 && adcBatteryVoltage < 3236)
	{
	  ssd1306_DrawRectangle(102, 3, 122, 12, White);
	  ssd1306_FillRectangle(104, 5, 108, 10, White);
 8000386:	f000 fcd7 	bl	8000d38 <ssd1306_FillRectangle>
	  ssd1306_DrawRectangle(123, 6, 124, 9, White);
	}
      else if(adcBatteryVoltage < 3046)
	{
	  ssd1306_DrawRectangle(102, 3, 122, 12, White);
	  ssd1306_DrawRectangle(123, 6, 124, 9, White);
 800038a:	2309      	movs	r3, #9
 800038c:	227c      	movs	r2, #124	@ 0x7c
 800038e:	2106      	movs	r1, #6
 8000390:	207b      	movs	r0, #123	@ 0x7b
 8000392:	9400      	str	r4, [sp, #0]
 8000394:	f000 fca8 	bl	8000ce8 <ssd1306_DrawRectangle>
	}

      btnEvent = osMessageGet(buttonPressedQueueHandle, 100);
 8000398:	4b73      	ldr	r3, [pc, #460]	@ (8000568 <StartGuiTask+0x27c>)
 800039a:	2264      	movs	r2, #100	@ 0x64
 800039c:	6819      	ldr	r1, [r3, #0]
 800039e:	a80d      	add	r0, sp, #52	@ 0x34
 80003a0:	f002 f9e5 	bl	800276e <osMessageGet>
 80003a4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34

      switch (guiState) {
 80003a6:	2f01      	cmp	r7, #1
      btnEvent = osMessageGet(buttonPressedQueueHandle, 100);
 80003a8:	f8dd 9038 	ldr.w	r9, [sp, #56]	@ 0x38
 80003ac:	9303      	str	r3, [sp, #12]
      switch (guiState) {
 80003ae:	f000 8098 	beq.w	80004e2 <StartGuiTask+0x1f6>
 80003b2:	2f02      	cmp	r7, #2
 80003b4:	f000 80ec 	beq.w	8000590 <StartGuiTask+0x2a4>
 80003b8:	2f00      	cmp	r7, #0
 80003ba:	f040 8083 	bne.w	80004c4 <StartGuiTask+0x1d8>
	case 0: // mode select
	  ssd1306_SetCursor(1,1);
 80003be:	2101      	movs	r1, #1
	  ssd1306_WriteString("Выбор режима", RuFont_7x13, Black);
 80003c0:	4c6a      	ldr	r4, [pc, #424]	@ (800056c <StartGuiTask+0x280>)
	  ssd1306_SetCursor(1,1);
 80003c2:	4608      	mov	r0, r1
 80003c4:	f000 fc44 	bl	8000c50 <ssd1306_SetCursor>
	  ssd1306_WriteString("Выбор режима", RuFont_7x13, Black);
 80003c8:	e894 0006 	ldmia.w	r4, {r1, r2}
 80003cc:	463b      	mov	r3, r7
 80003ce:	4868      	ldr	r0, [pc, #416]	@ (8000570 <StartGuiTask+0x284>)
 80003d0:	f000 fc2a 	bl	8000c28 <ssd1306_WriteString>
	  if (selectedMode == 0) {
 80003d4:	9b04      	ldr	r3, [sp, #16]
	    ssd1306_SetCursor(4,16);
 80003d6:	2110      	movs	r1, #16
 80003d8:	2004      	movs	r0, #4
	  if (selectedMode == 0) {
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d15d      	bne.n	800049a <StartGuiTask+0x1ae>
	    ssd1306_SetCursor(4,16);
 80003de:	f000 fc37 	bl	8000c50 <ssd1306_SetCursor>
	    ssd1306_WriteString("> Постоянный", RuFont_7x13, White);
 80003e2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80003e6:	2301      	movs	r3, #1
 80003e8:	4862      	ldr	r0, [pc, #392]	@ (8000574 <StartGuiTask+0x288>)
 80003ea:	f000 fc1d 	bl	8000c28 <ssd1306_WriteString>
	    ssd1306_SetCursor(4,30);
 80003ee:	211e      	movs	r1, #30
 80003f0:	2004      	movs	r0, #4
 80003f2:	f000 fc2d 	bl	8000c50 <ssd1306_SetCursor>
	    ssd1306_WriteString("  Прерывистый", RuFont_7x13, White);
 80003f6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80003fa:	2301      	movs	r3, #1
 80003fc:	485e      	ldr	r0, [pc, #376]	@ (8000578 <StartGuiTask+0x28c>)
	  } else if (selectedMode == 1) {
	    ssd1306_SetCursor(4,16);
	    ssd1306_WriteString("  Постоянный", RuFont_7x13, White);
	    ssd1306_SetCursor(4,30);
	    ssd1306_WriteString("> Прерывистый", RuFont_7x13, White);
 80003fe:	f000 fc13 	bl	8000c28 <ssd1306_WriteString>
	  }
	  if (btnEvent.status == osEventMessage)
 8000402:	9b03      	ldr	r3, [sp, #12]
 8000404:	2b10      	cmp	r3, #16
 8000406:	d15c      	bne.n	80004c2 <StartGuiTask+0x1d6>
	  {
	    if (btnEvent.value.v == 0 || btnEvent.value.v == 1)
 8000408:	f1b9 0f01 	cmp.w	r9, #1
 800040c:	d856      	bhi.n	80004bc <StartGuiTask+0x1d0>
	    { //bottom or top
	      selectedMode = !selectedMode;
 800040e:	9b04      	ldr	r3, [sp, #16]
 8000410:	f083 0301 	eor.w	r3, r3, #1
 8000414:	9304      	str	r3, [sp, #16]

	}

	if (btnEvent.status == osEventMessage)
	{
	  if (btnEvent.value.v == 0) { //bottom
 8000416:	f1b9 0f06 	cmp.w	r9, #6
 800041a:	d856      	bhi.n	80004ca <StartGuiTask+0x1de>
 800041c:	e8df f019 	tbh	[pc, r9, lsl #1]
 8000420:	01b701b7 	.word	0x01b701b7
 8000424:	01b701b7 	.word	0x01b701b7
 8000428:	01c501a7 	.word	0x01c501a7
 800042c:	01cc      	.short	0x01cc
      else if(adcBatteryVoltage > 3237 && adcBatteryVoltage < 3522)
 800042e:	f6a3 42a6 	subw	r2, r3, #3238	@ 0xca6
 8000432:	f5b2 7f8e 	cmp.w	r2, #284	@ 0x11c
 8000436:	d213      	bcs.n	8000460 <StartGuiTask+0x174>
	  ssd1306_DrawRectangle(102, 3, 122, 12, White);
 8000438:	230c      	movs	r3, #12
 800043a:	227a      	movs	r2, #122	@ 0x7a
 800043c:	2103      	movs	r1, #3
 800043e:	2066      	movs	r0, #102	@ 0x66
 8000440:	9400      	str	r4, [sp, #0]
 8000442:	f000 fc51 	bl	8000ce8 <ssd1306_DrawRectangle>
	  ssd1306_FillRectangle(104, 5, 108, 10, White);
 8000446:	230a      	movs	r3, #10
 8000448:	226c      	movs	r2, #108	@ 0x6c
 800044a:	2105      	movs	r1, #5
 800044c:	2068      	movs	r0, #104	@ 0x68
 800044e:	9400      	str	r4, [sp, #0]
 8000450:	f000 fc72 	bl	8000d38 <ssd1306_FillRectangle>
	  ssd1306_FillRectangle(110, 5, 114, 10, White);
 8000454:	230a      	movs	r3, #10
 8000456:	2272      	movs	r2, #114	@ 0x72
 8000458:	2105      	movs	r1, #5
 800045a:	206e      	movs	r0, #110	@ 0x6e
 800045c:	9400      	str	r4, [sp, #0]
 800045e:	e792      	b.n	8000386 <StartGuiTask+0x9a>
      else if(adcBatteryVoltage > 3047 && adcBatteryVoltage < 3236)
 8000460:	f6a3 32e8 	subw	r2, r3, #3048	@ 0xbe8
 8000464:	2abb      	cmp	r2, #187	@ 0xbb
 8000466:	d80c      	bhi.n	8000482 <StartGuiTask+0x196>
	  ssd1306_DrawRectangle(102, 3, 122, 12, White);
 8000468:	230c      	movs	r3, #12
 800046a:	227a      	movs	r2, #122	@ 0x7a
 800046c:	2103      	movs	r1, #3
 800046e:	2066      	movs	r0, #102	@ 0x66
 8000470:	9400      	str	r4, [sp, #0]
 8000472:	f000 fc39 	bl	8000ce8 <ssd1306_DrawRectangle>
	  ssd1306_FillRectangle(104, 5, 108, 10, White);
 8000476:	230a      	movs	r3, #10
 8000478:	226c      	movs	r2, #108	@ 0x6c
 800047a:	2105      	movs	r1, #5
 800047c:	2068      	movs	r0, #104	@ 0x68
 800047e:	9400      	str	r4, [sp, #0]
 8000480:	e781      	b.n	8000386 <StartGuiTask+0x9a>
      else if(adcBatteryVoltage < 3046)
 8000482:	f640 32e5 	movw	r2, #3045	@ 0xbe5
 8000486:	4293      	cmp	r3, r2
 8000488:	d886      	bhi.n	8000398 <StartGuiTask+0xac>
	  ssd1306_DrawRectangle(102, 3, 122, 12, White);
 800048a:	230c      	movs	r3, #12
 800048c:	227a      	movs	r2, #122	@ 0x7a
 800048e:	2103      	movs	r1, #3
 8000490:	2066      	movs	r0, #102	@ 0x66
 8000492:	9400      	str	r4, [sp, #0]
 8000494:	f000 fc28 	bl	8000ce8 <ssd1306_DrawRectangle>
 8000498:	e777      	b.n	800038a <StartGuiTask+0x9e>
	    ssd1306_SetCursor(4,16);
 800049a:	f000 fbd9 	bl	8000c50 <ssd1306_SetCursor>
	    ssd1306_WriteString("  Постоянный", RuFont_7x13, White);
 800049e:	e894 0006 	ldmia.w	r4, {r1, r2}
 80004a2:	2301      	movs	r3, #1
 80004a4:	4835      	ldr	r0, [pc, #212]	@ (800057c <StartGuiTask+0x290>)
 80004a6:	f000 fbbf 	bl	8000c28 <ssd1306_WriteString>
	    ssd1306_SetCursor(4,30);
 80004aa:	211e      	movs	r1, #30
 80004ac:	2004      	movs	r0, #4
 80004ae:	f000 fbcf 	bl	8000c50 <ssd1306_SetCursor>
	    ssd1306_WriteString("> Прерывистый", RuFont_7x13, White);
 80004b2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80004b6:	2301      	movs	r3, #1
 80004b8:	4831      	ldr	r0, [pc, #196]	@ (8000580 <StartGuiTask+0x294>)
 80004ba:	e7a0      	b.n	80003fe <StartGuiTask+0x112>
	    } else if (btnEvent.value.v == 4)
 80004bc:	f1b9 0f04 	cmp.w	r9, #4
 80004c0:	d009      	beq.n	80004d6 <StartGuiTask+0x1ea>
  uint8_t guiState = 0;
 80004c2:	2700      	movs	r7, #0
	if (btnEvent.status == osEventMessage)
 80004c4:	9b03      	ldr	r3, [sp, #12]
 80004c6:	2b10      	cmp	r3, #16
 80004c8:	d0a5      	beq.n	8000416 <StartGuiTask+0x12a>
		  ssd1306_SetDisplayOn(1);
	  }

	}

	ssd1306_UpdateScreen();
 80004ca:	f000 fb27 	bl	8000b1c <ssd1306_UpdateScreen>
	osDelay(10);//
 80004ce:	200a      	movs	r0, #10
 80004d0:	f002 f8a1 	bl	8002616 <osDelay>
      HAL_ADC_Start(&hadc1); // запускаем преобразование сигнала АЦП
 80004d4:	e716      	b.n	8000304 <StartGuiTask+0x18>
		  guiState = 1;
 80004d6:	9b04      	ldr	r3, [sp, #16]
 80004d8:	2b00      	cmp	r3, #0
 80004da:	bf14      	ite	ne
 80004dc:	2702      	movne	r7, #2
 80004de:	2701      	moveq	r7, #1
 80004e0:	e799      	b.n	8000416 <StartGuiTask+0x12a>
	  ssd1306_WriteString("Пост. реж.", RuFont_7x13, Black);
 80004e2:	4c22      	ldr	r4, [pc, #136]	@ (800056c <StartGuiTask+0x280>)
	  ssd1306_SetCursor(1,1);
 80004e4:	4639      	mov	r1, r7
 80004e6:	4638      	mov	r0, r7
 80004e8:	f000 fbb2 	bl	8000c50 <ssd1306_SetCursor>
	  ssd1306_WriteString("Пост. реж.", RuFont_7x13, Black);
 80004ec:	e894 0006 	ldmia.w	r4, {r1, r2}
 80004f0:	2300      	movs	r3, #0
 80004f2:	4824      	ldr	r0, [pc, #144]	@ (8000584 <StartGuiTask+0x298>)
 80004f4:	f000 fb98 	bl	8000c28 <ssd1306_WriteString>
	  ssd1306_SetCursor(4,16);
 80004f8:	2110      	movs	r1, #16
 80004fa:	2004      	movs	r0, #4
 80004fc:	f000 fba8 	bl	8000c50 <ssd1306_SetCursor>
	  ssd1306_WriteString("> Скорость: ", RuFont_7x13, White);
 8000500:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000504:	463b      	mov	r3, r7
 8000506:	4820      	ldr	r0, [pc, #128]	@ (8000588 <StartGuiTask+0x29c>)
 8000508:	f000 fb8e 	bl	8000c28 <ssd1306_WriteString>
	  ssd1306_SetCursor(88,16);
 800050c:	2110      	movs	r1, #16
 800050e:	2058      	movs	r0, #88	@ 0x58
 8000510:	f000 fb9e 	bl	8000c50 <ssd1306_SetCursor>
	  sprintf(speedStr, "%d", speed);
 8000514:	4632      	mov	r2, r6
 8000516:	491d      	ldr	r1, [pc, #116]	@ (800058c <StartGuiTask+0x2a0>)
 8000518:	a80b      	add	r0, sp, #44	@ 0x2c
 800051a:	f003 ff25 	bl	8004368 <siprintf>
	  ssd1306_WriteString(speedStr, RuFont_7x13, White);
 800051e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000522:	463b      	mov	r3, r7
 8000524:	a80b      	add	r0, sp, #44	@ 0x2c
 8000526:	f000 fb7f 	bl	8000c28 <ssd1306_WriteString>
	  if (btnEvent.status == osEventMessage)
 800052a:	9b03      	ldr	r3, [sp, #12]
 800052c:	2b10      	cmp	r3, #16
 800052e:	d1cc      	bne.n	80004ca <StartGuiTask+0x1de>
	    if (btnEvent.value.v == 2)
 8000530:	f1b9 0f02 	cmp.w	r9, #2
 8000534:	d105      	bne.n	8000542 <StartGuiTask+0x256>
		if(speed == 1)
 8000536:	2e01      	cmp	r6, #1
 8000538:	f000 810e 	beq.w	8000758 <StartGuiTask+0x46c>
		  speed--;
 800053c:	3e01      	subs	r6, #1
		  speed++;
 800053e:	b2f6      	uxtb	r6, r6
 8000540:	e769      	b.n	8000416 <StartGuiTask+0x12a>
	    } else if ( btnEvent.value.v == 3)
 8000542:	f1b9 0f03 	cmp.w	r9, #3
 8000546:	d104      	bne.n	8000552 <StartGuiTask+0x266>
		if(speed == 10)
 8000548:	2e0a      	cmp	r6, #10
 800054a:	f000 8107 	beq.w	800075c <StartGuiTask+0x470>
		  speed++;
 800054e:	3601      	adds	r6, #1
 8000550:	e7f5      	b.n	800053e <StartGuiTask+0x252>
	      else if (btnEvent.value.v == 5)
 8000552:	f1b9 0705 	subs.w	r7, r9, #5
 8000556:	bf18      	it	ne
 8000558:	2701      	movne	r7, #1
 800055a:	e75c      	b.n	8000416 <StartGuiTask+0x12a>
 800055c:	200007a4 	.word	0x200007a4
 8000560:	20000738 	.word	0x20000738
 8000564:	08005440 	.word	0x08005440
 8000568:	20000744 	.word	0x20000744
 800056c:	20000000 	.word	0x20000000
 8000570:	08005448 	.word	0x08005448
 8000574:	08005455 	.word	0x08005455
 8000578:	08005462 	.word	0x08005462
 800057c:	08005470 	.word	0x08005470
 8000580:	0800547d 	.word	0x0800547d
 8000584:	0800548b 	.word	0x0800548b
 8000588:	08005496 	.word	0x08005496
 800058c:	080054a3 	.word	0x080054a3
	  ssd1306_SetCursor(1,1);
 8000590:	2101      	movs	r1, #1
	  ssd1306_WriteString("Прерыв. реж.", RuFont_7x13, Black);
 8000592:	4c8b      	ldr	r4, [pc, #556]	@ (80007c0 <StartGuiTask+0x4d4>)
	  ssd1306_SetCursor(1,1);
 8000594:	4608      	mov	r0, r1
 8000596:	f000 fb5b 	bl	8000c50 <ssd1306_SetCursor>
	  ssd1306_WriteString("Прерыв. реж.", RuFont_7x13, Black);
 800059a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800059e:	2300      	movs	r3, #0
 80005a0:	4888      	ldr	r0, [pc, #544]	@ (80007c4 <StartGuiTask+0x4d8>)
 80005a2:	f000 fb41 	bl	8000c28 <ssd1306_WriteString>
	      uint8_t min = sleep / 60;
 80005a6:	233c      	movs	r3, #60	@ 0x3c
 80005a8:	fbb5 faf3 	udiv	sl, r5, r3
	      sprintf(minStr, "%d", min);
 80005ac:	fa5f f28a 	uxtb.w	r2, sl
	      uint8_t sec = sleep % 60;
 80005b0:	fb03 5a1a 	mls	sl, r3, sl, r5
	      ssd1306_SetCursor(4,16);
 80005b4:	2110      	movs	r1, #16
 80005b6:	2004      	movs	r0, #4
	      sprintf(minStr, "%d", min);
 80005b8:	9205      	str	r2, [sp, #20]
	      uint8_t sec = sleep % 60;
 80005ba:	fa5f fa8a 	uxtb.w	sl, sl
	  if(intermittentModeMenuPointer == 0)
 80005be:	f1bb 0f00 	cmp.w	fp, #0
 80005c2:	d163      	bne.n	800068c <StartGuiTask+0x3a0>
	      ssd1306_SetCursor(4,16);
 80005c4:	f000 fb44 	bl	8000c50 <ssd1306_SetCursor>
	      ssd1306_WriteString("> Задержка: ", RuFont_7x13, White);
 80005c8:	e894 0006 	ldmia.w	r4, {r1, r2}
 80005cc:	2301      	movs	r3, #1
 80005ce:	487e      	ldr	r0, [pc, #504]	@ (80007c8 <StartGuiTask+0x4dc>)
 80005d0:	f000 fb2a 	bl	8000c28 <ssd1306_WriteString>
	      ssd1306_SetCursor(88,16);
 80005d4:	2110      	movs	r1, #16
 80005d6:	2058      	movs	r0, #88	@ 0x58
 80005d8:	f000 fb3a 	bl	8000c50 <ssd1306_SetCursor>
	      sprintf(minStr, "%d", min);
 80005dc:	9a05      	ldr	r2, [sp, #20]
 80005de:	497b      	ldr	r1, [pc, #492]	@ (80007cc <StartGuiTask+0x4e0>)
 80005e0:	a807      	add	r0, sp, #28
 80005e2:	f003 fec1 	bl	8004368 <siprintf>
	      sprintf(secStr, "%d", sec);
 80005e6:	4652      	mov	r2, sl
 80005e8:	4978      	ldr	r1, [pc, #480]	@ (80007cc <StartGuiTask+0x4e0>)
 80005ea:	a808      	add	r0, sp, #32
 80005ec:	f003 febc 	bl	8004368 <siprintf>
		timeStr[1] = minStr[0];
 80005f0:	f89d 301c 	ldrb.w	r3, [sp, #28]
		timeStr[0] = '0';
 80005f4:	2230      	movs	r2, #48	@ 0x30
		timeStr[1] = minStr[0];
 80005f6:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
	      timeStr[2] = ':';
 80005fa:	233a      	movs	r3, #58	@ 0x3a
 80005fc:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
 8000600:	f89d 3020 	ldrb.w	r3, [sp, #32]
	      if(sec <= 9)
 8000604:	f1ba 0f09 	cmp.w	sl, #9
		timeStr[3] = secStr[0];
 8000608:	bf86      	itte	hi
 800060a:	f88d 3027 	strbhi.w	r3, [sp, #39]	@ 0x27
		timeStr[4] = secStr[1];
 800060e:	f89d 3021 	ldrbhi.w	r3, [sp, #33]	@ 0x21
		timeStr[3] = '0';
 8000612:	f88d 2027 	strbls.w	r2, [sp, #39]	@ 0x27
		timeStr[0] = '0';
 8000616:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
		timeStr[4] = secStr[0];
 800061a:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
	      ssd1306_WriteString(timeStr, RuFont_7x13, White);
 800061e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000622:	2301      	movs	r3, #1
 8000624:	a809      	add	r0, sp, #36	@ 0x24
 8000626:	f000 faff 	bl	8000c28 <ssd1306_WriteString>
	      ssd1306_SetCursor(4,30);
 800062a:	211e      	movs	r1, #30
 800062c:	2004      	movs	r0, #4
 800062e:	f000 fb0f 	bl	8000c50 <ssd1306_SetCursor>
	      ssd1306_WriteString("  Угол: ", RuFont_7x13, White);
 8000632:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000636:	2301      	movs	r3, #1
 8000638:	4865      	ldr	r0, [pc, #404]	@ (80007d0 <StartGuiTask+0x4e4>)
 800063a:	f000 faf5 	bl	8000c28 <ssd1306_WriteString>
	      ssd1306_SetCursor(56, 30);
 800063e:	211e      	movs	r1, #30
 8000640:	2038      	movs	r0, #56	@ 0x38
 8000642:	f000 fb05 	bl	8000c50 <ssd1306_SetCursor>
	      sprintf(cornerStr, "%d", corner);
 8000646:	4642      	mov	r2, r8
 8000648:	4960      	ldr	r1, [pc, #384]	@ (80007cc <StartGuiTask+0x4e0>)
 800064a:	a80b      	add	r0, sp, #44	@ 0x2c
 800064c:	f003 fe8c 	bl	8004368 <siprintf>
	      ssd1306_WriteString(cornerStr, RuFont_7x13, White);
 8000650:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000654:	2301      	movs	r3, #1
 8000656:	a80b      	add	r0, sp, #44	@ 0x2c
	      ssd1306_WriteString(cornerStr, RuFont_7x13, White);
 8000658:	f000 fae6 	bl	8000c28 <ssd1306_WriteString>
	  if (btnEvent.status == osEventMessage)
 800065c:	9b03      	ldr	r3, [sp, #12]
 800065e:	2b10      	cmp	r3, #16
 8000660:	f47f af33 	bne.w	80004ca <StartGuiTask+0x1de>
	    if (btnEvent.value.v == 0 || btnEvent.value.v == 1)
 8000664:	f1b9 0f05 	cmp.w	r9, #5
 8000668:	f63f aed5 	bhi.w	8000416 <StartGuiTask+0x12a>
 800066c:	a301      	add	r3, pc, #4	@ (adr r3, 8000674 <StartGuiTask+0x388>)
 800066e:	f853 f029 	ldr.w	pc, [r3, r9, lsl #2]
 8000672:	bf00      	nop
 8000674:	08000723 	.word	0x08000723
 8000678:	08000723 	.word	0x08000723
 800067c:	08000739 	.word	0x08000739
 8000680:	08000729 	.word	0x08000729
 8000684:	08000417 	.word	0x08000417
 8000688:	080004c3 	.word	0x080004c3
	      ssd1306_SetCursor(4,16);
 800068c:	f000 fae0 	bl	8000c50 <ssd1306_SetCursor>
	      ssd1306_WriteString("  Задержка: ", RuFont_7x13, White);
 8000690:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000694:	2301      	movs	r3, #1
 8000696:	484f      	ldr	r0, [pc, #316]	@ (80007d4 <StartGuiTask+0x4e8>)
 8000698:	f000 fac6 	bl	8000c28 <ssd1306_WriteString>
	      ssd1306_SetCursor(88,16);
 800069c:	2110      	movs	r1, #16
 800069e:	2058      	movs	r0, #88	@ 0x58
 80006a0:	f000 fad6 	bl	8000c50 <ssd1306_SetCursor>
	      sprintf(minStr, "%d", min);
 80006a4:	9a05      	ldr	r2, [sp, #20]
 80006a6:	4949      	ldr	r1, [pc, #292]	@ (80007cc <StartGuiTask+0x4e0>)
 80006a8:	a807      	add	r0, sp, #28
 80006aa:	f003 fe5d 	bl	8004368 <siprintf>
	      sprintf(secStr, "%d", sec);
 80006ae:	4652      	mov	r2, sl
 80006b0:	4946      	ldr	r1, [pc, #280]	@ (80007cc <StartGuiTask+0x4e0>)
 80006b2:	a808      	add	r0, sp, #32
 80006b4:	f003 fe58 	bl	8004368 <siprintf>
		timeStr[1] = minStr[0];
 80006b8:	f89d 301c 	ldrb.w	r3, [sp, #28]
		timeStr[0] = '0';
 80006bc:	2230      	movs	r2, #48	@ 0x30
		timeStr[1] = minStr[0];
 80006be:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
	      timeStr[2] = ':';
 80006c2:	233a      	movs	r3, #58	@ 0x3a
 80006c4:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80006c8:	f89d 3020 	ldrb.w	r3, [sp, #32]
	      if(sec <= 9)
 80006cc:	f1ba 0f09 	cmp.w	sl, #9
		timeStr[3] = secStr[0];
 80006d0:	bf86      	itte	hi
 80006d2:	f88d 302f 	strbhi.w	r3, [sp, #47]	@ 0x2f
		timeStr[4] = secStr[1];
 80006d6:	f89d 3021 	ldrbhi.w	r3, [sp, #33]	@ 0x21
		timeStr[3] = '0';
 80006da:	f88d 202f 	strbls.w	r2, [sp, #47]	@ 0x2f
		timeStr[0] = '0';
 80006de:	f88d 202c 	strb.w	r2, [sp, #44]	@ 0x2c
		timeStr[4] = secStr[0];
 80006e2:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
	      ssd1306_WriteString(timeStr, RuFont_7x13, White);
 80006e6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80006ea:	2301      	movs	r3, #1
 80006ec:	a80b      	add	r0, sp, #44	@ 0x2c
 80006ee:	f000 fa9b 	bl	8000c28 <ssd1306_WriteString>
	      ssd1306_SetCursor(4,30);
 80006f2:	211e      	movs	r1, #30
 80006f4:	2004      	movs	r0, #4
 80006f6:	f000 faab 	bl	8000c50 <ssd1306_SetCursor>
	      ssd1306_WriteString("> Угол: ", RuFont_7x13, White);
 80006fa:	e894 0006 	ldmia.w	r4, {r1, r2}
 80006fe:	2301      	movs	r3, #1
 8000700:	4835      	ldr	r0, [pc, #212]	@ (80007d8 <StartGuiTask+0x4ec>)
 8000702:	f000 fa91 	bl	8000c28 <ssd1306_WriteString>
	      ssd1306_SetCursor(56, 30);
 8000706:	211e      	movs	r1, #30
 8000708:	2038      	movs	r0, #56	@ 0x38
 800070a:	f000 faa1 	bl	8000c50 <ssd1306_SetCursor>
	      sprintf(cornerStr, "%d", corner);
 800070e:	4642      	mov	r2, r8
 8000710:	492e      	ldr	r1, [pc, #184]	@ (80007cc <StartGuiTask+0x4e0>)
 8000712:	a809      	add	r0, sp, #36	@ 0x24
 8000714:	f003 fe28 	bl	8004368 <siprintf>
	      ssd1306_WriteString(cornerStr, RuFont_7x13, White);
 8000718:	e894 0006 	ldmia.w	r4, {r1, r2}
 800071c:	2301      	movs	r3, #1
 800071e:	a809      	add	r0, sp, #36	@ 0x24
 8000720:	e79a      	b.n	8000658 <StartGuiTask+0x36c>
		intermittentModeMenuPointer = !intermittentModeMenuPointer;
 8000722:	f08b 0b01 	eor.w	fp, fp, #1
 8000726:	e676      	b.n	8000416 <StartGuiTask+0x12a>
		if(intermittentModeMenuPointer == 0)
 8000728:	f1bb 0f00 	cmp.w	fp, #0
 800072c:	d10b      	bne.n	8000746 <StartGuiTask+0x45a>
		    if(sleep == 250)
 800072e:	2dfa      	cmp	r5, #250	@ 0xfa
 8000730:	d016      	beq.n	8000760 <StartGuiTask+0x474>
		      sleep+=10;
 8000732:	350a      	adds	r5, #10
		      sleep-=10;
 8000734:	b2ed      	uxtb	r5, r5
 8000736:	e66e      	b.n	8000416 <StartGuiTask+0x12a>
		if(intermittentModeMenuPointer == 0)
 8000738:	f1bb 0f00 	cmp.w	fp, #0
 800073c:	d103      	bne.n	8000746 <StartGuiTask+0x45a>
		    if(sleep == 10)
 800073e:	2d0a      	cmp	r5, #10
 8000740:	d010      	beq.n	8000764 <StartGuiTask+0x478>
		      sleep-=10;
 8000742:	3d0a      	subs	r5, #10
 8000744:	e7f6      	b.n	8000734 <StartGuiTask+0x448>
		    if(corner == 45)
 8000746:	f1b8 0f2d 	cmp.w	r8, #45	@ 0x2d
 800074a:	d00d      	beq.n	8000768 <StartGuiTask+0x47c>
		      corner = 45;
 800074c:	f1b8 0f5a 	cmp.w	r8, #90	@ 0x5a
 8000750:	bf08      	it	eq
 8000752:	f04f 082d 	moveq.w	r8, #45	@ 0x2d
 8000756:	e65e      	b.n	8000416 <StartGuiTask+0x12a>
		  speed = 10;
 8000758:	260a      	movs	r6, #10
 800075a:	e65c      	b.n	8000416 <StartGuiTask+0x12a>
		  speed = 1;
 800075c:	463e      	mov	r6, r7
 800075e:	e65a      	b.n	8000416 <StartGuiTask+0x12a>
		      sleep = 10;
 8000760:	250a      	movs	r5, #10
 8000762:	e658      	b.n	8000416 <StartGuiTask+0x12a>
		      sleep = 250;
 8000764:	25fa      	movs	r5, #250	@ 0xfa
 8000766:	e656      	b.n	8000416 <StartGuiTask+0x12a>
			corner = 90;
 8000768:	f04f 085a 	mov.w	r8, #90	@ 0x5a
 800076c:	e653      	b.n	8000416 <StartGuiTask+0x12a>
		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 800076e:	2201      	movs	r2, #1
 8000770:	2110      	movs	r1, #16
 8000772:	481a      	ldr	r0, [pc, #104]	@ (80007dc <StartGuiTask+0x4f0>)
 8000774:	f001 f946 	bl	8001a04 <HAL_GPIO_WritePin>
		  osDelay(50);
 8000778:	2032      	movs	r0, #50	@ 0x32
 800077a:	f001 ff4c 	bl	8002616 <osDelay>
		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 800077e:	4817      	ldr	r0, [pc, #92]	@ (80007dc <StartGuiTask+0x4f0>)
 8000780:	2200      	movs	r2, #0
 8000782:	2110      	movs	r1, #16
 8000784:	f001 f93e 	bl	8001a04 <HAL_GPIO_WritePin>
		  osDelay(50);
 8000788:	2032      	movs	r0, #50	@ 0x32
 800078a:	f001 ff44 	bl	8002616 <osDelay>
		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 800078e:	4813      	ldr	r0, [pc, #76]	@ (80007dc <StartGuiTask+0x4f0>)
 8000790:	2201      	movs	r2, #1
 8000792:	2110      	movs	r1, #16
 8000794:	f001 f936 	bl	8001a04 <HAL_GPIO_WritePin>
		  osDelay(30);
 8000798:	201e      	movs	r0, #30
		  osDelay(250);
 800079a:	f001 ff3c 	bl	8002616 <osDelay>
		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2110      	movs	r1, #16
 80007a2:	480e      	ldr	r0, [pc, #56]	@ (80007dc <StartGuiTask+0x4f0>)
 80007a4:	f001 f92e 	bl	8001a04 <HAL_GPIO_WritePin>
 80007a8:	e68f      	b.n	80004ca <StartGuiTask+0x1de>
		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 80007aa:	480c      	ldr	r0, [pc, #48]	@ (80007dc <StartGuiTask+0x4f0>)
 80007ac:	2201      	movs	r2, #1
 80007ae:	2110      	movs	r1, #16
 80007b0:	f001 f928 	bl	8001a04 <HAL_GPIO_WritePin>
		  osDelay(250);
 80007b4:	20fa      	movs	r0, #250	@ 0xfa
 80007b6:	e7f0      	b.n	800079a <StartGuiTask+0x4ae>
		  ssd1306_SetDisplayOn(1);
 80007b8:	2001      	movs	r0, #1
 80007ba:	f000 fb2b 	bl	8000e14 <ssd1306_SetDisplayOn>
 80007be:	e684      	b.n	80004ca <StartGuiTask+0x1de>
 80007c0:	20000000 	.word	0x20000000
 80007c4:	080054a6 	.word	0x080054a6
 80007c8:	080054b3 	.word	0x080054b3
 80007cc:	080054a3 	.word	0x080054a3
 80007d0:	080054c0 	.word	0x080054c0
 80007d4:	080054c9 	.word	0x080054c9
 80007d8:	080054d6 	.word	0x080054d6
 80007dc:	40010800 	.word	0x40010800

080007e0 <screenTimeoutCallback>:

/* screenTimeoutCallback function */
void screenTimeoutCallback(void const * argument)
{
  /* USER CODE BEGIN screenTimeoutCallback */
  ssd1306_SetDisplayOn(0);
 80007e0:	2000      	movs	r0, #0
 80007e2:	f000 bb17 	b.w	8000e14 <ssd1306_SetDisplayOn>
	...

080007e8 <cancelButtonCallback>:
{
 80007e8:	b508      	push	{r3, lr}
  if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 5, 100);
 80007ea:	f000 fb85 	bl	8000ef8 <ssd1306_GetDisplayOn>
 80007ee:	2264      	movs	r2, #100	@ 0x64
 80007f0:	4b04      	ldr	r3, [pc, #16]	@ (8000804 <cancelButtonCallback+0x1c>)
 80007f2:	b928      	cbnz	r0, 8000800 <cancelButtonCallback+0x18>
 80007f4:	2106      	movs	r1, #6
 80007f6:	6818      	ldr	r0, [r3, #0]
}
 80007f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 5, 100);
 80007fc:	f001 bf8e 	b.w	800271c <osMessagePut>
 8000800:	2105      	movs	r1, #5
 8000802:	e7f8      	b.n	80007f6 <cancelButtonCallback+0xe>
 8000804:	20000744 	.word	0x20000744

08000808 <_write>:
{
 8000808:	4610      	mov	r0, r2
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800080a:	2300      	movs	r3, #0
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800080c:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
{
 8000810:	b530      	push	{r4, r5, lr}
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000812:	4283      	cmp	r3, r0
 8000814:	db00      	blt.n	8000818 <_write+0x10>
}
 8000816:	bd30      	pop	{r4, r5, pc}
 8000818:	f8d2 4e80 	ldr.w	r4, [r2, #3712]	@ 0xe80
 800081c:	07e5      	lsls	r5, r4, #31
 800081e:	d507      	bpl.n	8000830 <_write+0x28>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000820:	f8d2 4e00 	ldr.w	r4, [r2, #3584]	@ 0xe00
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000824:	07e4      	lsls	r4, r4, #31
 8000826:	d503      	bpl.n	8000830 <_write+0x28>
    ITM_SendChar(*ptr++);
 8000828:	5ccc      	ldrb	r4, [r1, r3]
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800082a:	6815      	ldr	r5, [r2, #0]
 800082c:	b115      	cbz	r5, 8000834 <_write+0x2c>
    {
      __NOP();
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800082e:	7014      	strb	r4, [r2, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000830:	3301      	adds	r3, #1
 8000832:	e7ee      	b.n	8000812 <_write+0xa>
      __NOP();
 8000834:	bf00      	nop
 8000836:	e7f8      	b.n	800082a <_write+0x22>

08000838 <SystemClock_Config>:
{
 8000838:	b510      	push	{r4, lr}
 800083a:	b094      	sub	sp, #80	@ 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800083c:	2214      	movs	r2, #20
 800083e:	2100      	movs	r1, #0
 8000840:	a80c      	add	r0, sp, #48	@ 0x30
 8000842:	f003 fdf4 	bl	800442e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000846:	2214      	movs	r2, #20
 8000848:	2100      	movs	r1, #0
 800084a:	eb0d 0002 	add.w	r0, sp, r2
 800084e:	f003 fdee 	bl	800442e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000852:	2210      	movs	r2, #16
 8000854:	2100      	movs	r1, #0
 8000856:	a801      	add	r0, sp, #4
 8000858:	f003 fde9 	bl	800442e <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800085e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000862:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000864:	e9cd 4311 	strd	r4, r3, [sp, #68]	@ 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000868:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800086c:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000870:	a80a      	add	r0, sp, #40	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000872:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000874:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000876:	f001 fb4b 	bl	8001f10 <HAL_RCC_OscConfig>
 800087a:	b108      	cbz	r0, 8000880 <SystemClock_Config+0x48>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800087e:	e7fe      	b.n	800087e <SystemClock_Config+0x46>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000880:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000882:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000886:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088a:	9007      	str	r0, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800088c:	e9cd 3008 	strd	r3, r0, [sp, #32]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000890:	4621      	mov	r1, r4
 8000892:	a805      	add	r0, sp, #20
 8000894:	f001 fcfe 	bl	8002294 <HAL_RCC_ClockConfig>
 8000898:	b108      	cbz	r0, 800089e <SystemClock_Config+0x66>
 800089a:	b672      	cpsid	i
  while (1)
 800089c:	e7fe      	b.n	800089c <SystemClock_Config+0x64>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800089e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a2:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80008a4:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80008a6:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008a8:	f001 fdb0 	bl	800240c <HAL_RCCEx_PeriphCLKConfig>
 80008ac:	b108      	cbz	r0, 80008b2 <SystemClock_Config+0x7a>
 80008ae:	b672      	cpsid	i
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <SystemClock_Config+0x78>
}
 80008b2:	b014      	add	sp, #80	@ 0x50
 80008b4:	bd10      	pop	{r4, pc}
	...

080008b8 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b8:	2410      	movs	r4, #16
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b09c      	sub	sp, #112	@ 0x70
  HAL_Init();
 80008be:	f000 fc4b 	bl	8001158 <HAL_Init>
  SystemClock_Config();
 80008c2:	f7ff ffb9 	bl	8000838 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c6:	4622      	mov	r2, r4
 80008c8:	2100      	movs	r1, #0
 80008ca:	a815      	add	r0, sp, #84	@ 0x54
 80008cc:	f003 fdaf 	bl	800442e <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d0:	4b65      	ldr	r3, [pc, #404]	@ (8000a68 <main+0x1b0>)
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 80008d2:	4621      	mov	r1, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 80008d6:	4865      	ldr	r0, [pc, #404]	@ (8000a6c <main+0x1b4>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008d8:	f042 0220 	orr.w	r2, r2, #32
 80008dc:	619a      	str	r2, [r3, #24]
 80008de:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008e2:	f002 0220 	and.w	r2, r2, #32
 80008e6:	9203      	str	r2, [sp, #12]
 80008e8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ec:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ee:	f042 0204 	orr.w	r2, r2, #4
 80008f2:	619a      	str	r2, [r3, #24]
 80008f4:	699a      	ldr	r2, [r3, #24]
 80008f6:	f002 0204 	and.w	r2, r2, #4
 80008fa:	9204      	str	r2, [sp, #16]
 80008fc:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	699a      	ldr	r2, [r3, #24]
 8000900:	f042 0208 	orr.w	r2, r2, #8
 8000904:	619a      	str	r2, [r3, #24]
 8000906:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000908:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800090a:	f003 0308 	and.w	r3, r3, #8
 800090e:	9305      	str	r3, [sp, #20]
 8000910:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000912:	f001 f877 	bl	8001a04 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = buzzer_Pin;
 8000916:	9415      	str	r4, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2400      	movs	r4, #0
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 800091a:	4854      	ldr	r0, [pc, #336]	@ (8000a6c <main+0x1b4>)
 800091c:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	e9cd 6416 	strd	r6, r4, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	9718      	str	r7, [sp, #96]	@ 0x60
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8000924:	f000 ff96 	bl	8001854 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = btn_bottom_Pin;
 8000928:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(btn_bottom_GPIO_Port, &GPIO_InitStruct);
 800092c:	484f      	ldr	r0, [pc, #316]	@ (8000a6c <main+0x1b4>)
 800092e:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000930:	e9cd 3415 	strd	r3, r4, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000934:	9617      	str	r6, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(btn_bottom_GPIO_Port, &GPIO_InitStruct);
 8000936:	f000 ff8d 	bl	8001854 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = btn_left_Pin|btn_ok_Pin|btn_right_Pin|btn_top_Pin;
 800093a:	23f0      	movs	r3, #240	@ 0xf0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093c:	484c      	ldr	r0, [pc, #304]	@ (8000a70 <main+0x1b8>)
 800093e:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	e9cd 3415 	strd	r3, r4, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000944:	9617      	str	r6, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000946:	f000 ff85 	bl	8001854 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 800094a:	484a      	ldr	r0, [pc, #296]	@ (8000a74 <main+0x1bc>)
  hi2c1.Init.ClockSpeed = 100000;
 800094c:	4b4a      	ldr	r3, [pc, #296]	@ (8000a78 <main+0x1c0>)
 800094e:	4a4b      	ldr	r2, [pc, #300]	@ (8000a7c <main+0x1c4>)
  hi2c1.Init.OwnAddress1 = 0;
 8000950:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 8000954:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000958:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800095c:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000960:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000964:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000966:	f001 f99b 	bl	8001ca0 <HAL_I2C_Init>
 800096a:	b108      	cbz	r0, 8000970 <main+0xb8>
 800096c:	b672      	cpsid	i
  while (1)
 800096e:	e7fe      	b.n	800096e <main+0xb6>
  hadc1.Instance = ADC1;
 8000970:	4c43      	ldr	r4, [pc, #268]	@ (8000a80 <main+0x1c8>)
 8000972:	4b44      	ldr	r3, [pc, #272]	@ (8000a84 <main+0x1cc>)
  ADC_ChannelConfTypeDef sConfig = {0};
 8000974:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  hadc1.Instance = ADC1;
 8000978:	6023      	str	r3, [r4, #0]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800097a:	f44f 2360 	mov.w	r3, #917504	@ 0xe0000
  ADC_ChannelConfTypeDef sConfig = {0};
 800097e:	9017      	str	r0, [sp, #92]	@ 0x5c
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000980:	60a0      	str	r0, [r4, #8]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000982:	7520      	strb	r0, [r4, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000984:	6060      	str	r0, [r4, #4]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000986:	4620      	mov	r0, r4
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000988:	7326      	strb	r6, [r4, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800098a:	61e3      	str	r3, [r4, #28]
  hadc1.Init.NbrOfConversion = 1;
 800098c:	6126      	str	r6, [r4, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800098e:	f000 fe03 	bl	8001598 <HAL_ADC_Init>
 8000992:	b108      	cbz	r0, 8000998 <main+0xe0>
 8000994:	b672      	cpsid	i
  while (1)
 8000996:	e7fe      	b.n	8000996 <main+0xde>
  sConfig.Channel = ADC_CHANNEL_5;
 8000998:	2305      	movs	r3, #5
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800099a:	9017      	str	r0, [sp, #92]	@ 0x5c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800099c:	a915      	add	r1, sp, #84	@ 0x54
 800099e:	4620      	mov	r0, r4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80009a0:	e9cd 3615 	strd	r3, r6, [sp, #84]	@ 0x54
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80009a4:	f000 fcb6 	bl	8001314 <HAL_ADC_ConfigChannel>
 80009a8:	4605      	mov	r5, r0
 80009aa:	b108      	cbz	r0, 80009b0 <main+0xf8>
 80009ac:	b672      	cpsid	i
  while (1)
 80009ae:	e7fe      	b.n	80009ae <main+0xf6>
  ssd1306_Init();
 80009b0:	f000 fa3e 	bl	8000e30 <ssd1306_Init>
  ssd1306_Fill(Black);
 80009b4:	4628      	mov	r0, r5
 80009b6:	f000 f8a5 	bl	8000b04 <ssd1306_Fill>
  ssd1306_DrawBitmap(43, 2, logo, 42, 42, White);
 80009ba:	232a      	movs	r3, #42	@ 0x2a
 80009bc:	4639      	mov	r1, r7
 80009be:	4a32      	ldr	r2, [pc, #200]	@ (8000a88 <main+0x1d0>)
 80009c0:	9300      	str	r3, [sp, #0]
 80009c2:	202b      	movs	r0, #43	@ 0x2b
 80009c4:	9601      	str	r6, [sp, #4]
 80009c6:	f000 f9e1 	bl	8000d8c <ssd1306_DrawBitmap>
  ssd1306_SetCursor(11, 46);
 80009ca:	212e      	movs	r1, #46	@ 0x2e
 80009cc:	200b      	movs	r0, #11
 80009ce:	f000 f93f 	bl	8000c50 <ssd1306_SetCursor>
  ssd1306_WriteString("АвтоШашлык V0.1", RuFont_7x13, White);
 80009d2:	4a2e      	ldr	r2, [pc, #184]	@ (8000a8c <main+0x1d4>)
 80009d4:	4633      	mov	r3, r6
 80009d6:	ca06      	ldmia	r2, {r1, r2}
 80009d8:	482d      	ldr	r0, [pc, #180]	@ (8000a90 <main+0x1d8>)
 80009da:	f000 f925 	bl	8000c28 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80009de:	f000 f89d 	bl	8000b1c <ssd1306_UpdateScreen>
  HAL_ADCEx_Calibration_Start(&hadc1);
 80009e2:	4620      	mov	r0, r4
 80009e4:	f000 fe70 	bl	80016c8 <HAL_ADCEx_Calibration_Start>
  osTimerDef(cancelButton, cancelButtonCallback);
 80009e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000a94 <main+0x1dc>)
  cancelButtonHandle = osTimerCreate(osTimer(cancelButton), osTimerOnce, NULL);
 80009ea:	462a      	mov	r2, r5
 80009ec:	4629      	mov	r1, r5
 80009ee:	a806      	add	r0, sp, #24
  osTimerDef(cancelButton, cancelButtonCallback);
 80009f0:	e9cd 3506 	strd	r3, r5, [sp, #24]
  cancelButtonHandle = osTimerCreate(osTimer(cancelButton), osTimerOnce, NULL);
 80009f4:	f001 fe18 	bl	8002628 <osTimerCreate>
 80009f8:	4b27      	ldr	r3, [pc, #156]	@ (8000a98 <main+0x1e0>)
  screenTimeoutTimerHandle = osTimerCreate(osTimer(screenTimeoutTimer), osTimerOnce, NULL);
 80009fa:	462a      	mov	r2, r5
  cancelButtonHandle = osTimerCreate(osTimer(cancelButton), osTimerOnce, NULL);
 80009fc:	6018      	str	r0, [r3, #0]
  osTimerDef(screenTimeoutTimer, screenTimeoutCallback);
 80009fe:	4b27      	ldr	r3, [pc, #156]	@ (8000a9c <main+0x1e4>)
  screenTimeoutTimerHandle = osTimerCreate(osTimer(screenTimeoutTimer), osTimerOnce, NULL);
 8000a00:	4629      	mov	r1, r5
 8000a02:	a808      	add	r0, sp, #32
  osTimerDef(screenTimeoutTimer, screenTimeoutCallback);
 8000a04:	e9cd 3508 	strd	r3, r5, [sp, #32]
  screenTimeoutTimerHandle = osTimerCreate(osTimer(screenTimeoutTimer), osTimerOnce, NULL);
 8000a08:	f001 fe0e 	bl	8002628 <osTimerCreate>
  osMessageQDef(buttonPressedQueue, 8, uint8_t);
 8000a0c:	4c24      	ldr	r4, [pc, #144]	@ (8000aa0 <main+0x1e8>)
  screenTimeoutTimerHandle = osTimerCreate(osTimer(screenTimeoutTimer), osTimerOnce, NULL);
 8000a0e:	4b25      	ldr	r3, [pc, #148]	@ (8000aa4 <main+0x1ec>)
  osMessageQDef(buttonPressedQueue, 8, uint8_t);
 8000a10:	ae0a      	add	r6, sp, #40	@ 0x28
  screenTimeoutTimerHandle = osTimerCreate(osTimer(screenTimeoutTimer), osTimerOnce, NULL);
 8000a12:	6018      	str	r0, [r3, #0]
  osMessageQDef(buttonPressedQueue, 8, uint8_t);
 8000a14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a18:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  buttonPressedQueueHandle = osMessageCreate(osMessageQ(buttonPressedQueue), NULL);
 8000a1c:	4629      	mov	r1, r5
 8000a1e:	4630      	mov	r0, r6
 8000a20:	f001 fe6a 	bl	80026f8 <osMessageCreate>
 8000a24:	4b20      	ldr	r3, [pc, #128]	@ (8000aa8 <main+0x1f0>)
  osThreadDef(readKeyTask, StartReadKeyTask, osPriorityAboveNormal, 0, 128);
 8000a26:	f104 0710 	add.w	r7, r4, #16
 8000a2a:	ae0e      	add	r6, sp, #56	@ 0x38
  buttonPressedQueueHandle = osMessageCreate(osMessageQ(buttonPressedQueue), NULL);
 8000a2c:	6018      	str	r0, [r3, #0]
  osThreadDef(readKeyTask, StartReadKeyTask, osPriorityAboveNormal, 0, 128);
 8000a2e:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 8000a30:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a32:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8000a36:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  readKeyTaskHandle = osThreadCreate(osThread(readKeyTask), NULL);
 8000a3a:	4629      	mov	r1, r5
 8000a3c:	a80e      	add	r0, sp, #56	@ 0x38
 8000a3e:	f001 fdc2 	bl	80025c6 <osThreadCreate>
 8000a42:	4b1a      	ldr	r3, [pc, #104]	@ (8000aac <main+0x1f4>)
  osThreadDef(guiTask, StartGuiTask, osPriorityNormal, 0, 128);
 8000a44:	ae15      	add	r6, sp, #84	@ 0x54
 8000a46:	342c      	adds	r4, #44	@ 0x2c
  readKeyTaskHandle = osThreadCreate(osThread(readKeyTask), NULL);
 8000a48:	6018      	str	r0, [r3, #0]
  osThreadDef(guiTask, StartGuiTask, osPriorityNormal, 0, 128);
 8000a4a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a4c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a4e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000a52:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  guiTaskHandle = osThreadCreate(osThread(guiTask), NULL);
 8000a56:	4629      	mov	r1, r5
 8000a58:	a815      	add	r0, sp, #84	@ 0x54
 8000a5a:	f001 fdb4 	bl	80025c6 <osThreadCreate>
 8000a5e:	4b14      	ldr	r3, [pc, #80]	@ (8000ab0 <main+0x1f8>)
 8000a60:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000a62:	f001 fdab 	bl	80025bc <osKernelStart>
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <main+0x1ae>
 8000a68:	40021000 	.word	0x40021000
 8000a6c:	40010800 	.word	0x40010800
 8000a70:	40010c00 	.word	0x40010c00
 8000a74:	20000750 	.word	0x20000750
 8000a78:	000186a0 	.word	0x000186a0
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	200007a4 	.word	0x200007a4
 8000a84:	40012400 	.word	0x40012400
 8000a88:	08005503 	.word	0x08005503
 8000a8c:	20000000 	.word	0x20000000
 8000a90:	080054df 	.word	0x080054df
 8000a94:	080007e9 	.word	0x080007e9
 8000a98:	20000740 	.word	0x20000740
 8000a9c:	080007e1 	.word	0x080007e1
 8000aa0:	080053f8 	.word	0x080053f8
 8000aa4:	2000073c 	.word	0x2000073c
 8000aa8:	20000744 	.word	0x20000744
 8000aac:	2000074c 	.word	0x2000074c
 8000ab0:	20000748 	.word	0x20000748

08000ab4 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000ab4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000ab6:	2301      	movs	r3, #1
 8000ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8000abc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8000ac0:	f10d 0217 	add.w	r2, sp, #23
void ssd1306_WriteCommand(uint8_t byte) {
 8000ac4:	f88d 0017 	strb.w	r0, [sp, #23]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000ac8:	9200      	str	r2, [sp, #0]
 8000aca:	2178      	movs	r1, #120	@ 0x78
 8000acc:	2200      	movs	r2, #0
 8000ace:	4803      	ldr	r0, [pc, #12]	@ (8000adc <ssd1306_WriteCommand+0x28>)
 8000ad0:	f001 f98e 	bl	8001df0 <HAL_I2C_Mem_Write>
}
 8000ad4:	b007      	add	sp, #28
 8000ad6:	f85d fb04 	ldr.w	pc, [sp], #4
 8000ada:	bf00      	nop
 8000adc:	20000750 	.word	0x20000750

08000ae0 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000ae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	b289      	uxth	r1, r1
 8000ae8:	e9cd 0100 	strd	r0, r1, [sp]
 8000aec:	9302      	str	r3, [sp, #8]
 8000aee:	2240      	movs	r2, #64	@ 0x40
 8000af0:	2301      	movs	r3, #1
 8000af2:	2178      	movs	r1, #120	@ 0x78
 8000af4:	4802      	ldr	r0, [pc, #8]	@ (8000b00 <ssd1306_WriteData+0x20>)
 8000af6:	f001 f97b 	bl	8001df0 <HAL_I2C_Mem_Write>
}
 8000afa:	b005      	add	sp, #20
 8000afc:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b00:	20000750 	.word	0x20000750

08000b04 <ssd1306_Fill>:
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000b04:	2800      	cmp	r0, #0
 8000b06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b0a:	bf14      	ite	ne
 8000b0c:	21ff      	movne	r1, #255	@ 0xff
 8000b0e:	2100      	moveq	r1, #0
 8000b10:	4801      	ldr	r0, [pc, #4]	@ (8000b18 <ssd1306_Fill+0x14>)
 8000b12:	f003 bc8c 	b.w	800442e <memset>
 8000b16:	bf00      	nop
 8000b18:	200007da 	.word	0x200007da

08000b1c <ssd1306_UpdateScreen>:
}

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000b1c:	b538      	push	{r3, r4, r5, lr}
 8000b1e:	24b0      	movs	r4, #176	@ 0xb0
 8000b20:	4d0a      	ldr	r5, [pc, #40]	@ (8000b4c <ssd1306_UpdateScreen+0x30>)
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000b22:	4620      	mov	r0, r4
 8000b24:	f7ff ffc6 	bl	8000ab4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000b28:	2000      	movs	r0, #0
 8000b2a:	f7ff ffc3 	bl	8000ab4 <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000b2e:	3401      	adds	r4, #1
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000b30:	2010      	movs	r0, #16
 8000b32:	f7ff ffbf 	bl	8000ab4 <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000b36:	b2e4      	uxtb	r4, r4
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000b38:	4628      	mov	r0, r5
 8000b3a:	2180      	movs	r1, #128	@ 0x80
 8000b3c:	f7ff ffd0 	bl	8000ae0 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000b40:	2cb8      	cmp	r4, #184	@ 0xb8
 8000b42:	f105 0580 	add.w	r5, r5, #128	@ 0x80
 8000b46:	d1ec      	bne.n	8000b22 <ssd1306_UpdateScreen+0x6>
    }
}
 8000b48:	bd38      	pop	{r3, r4, r5, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200007da 	.word	0x200007da

08000b50 <ssd1306_DrawPixel>:
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000b50:	0603      	lsls	r3, r0, #24
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000b52:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000b54:	d410      	bmi.n	8000b78 <ssd1306_DrawPixel+0x28>
 8000b56:	293f      	cmp	r1, #63	@ 0x3f
 8000b58:	d80e      	bhi.n	8000b78 <ssd1306_DrawPixel+0x28>
        return;
    }
   
    // Draw in the right color
    if(color == White) {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b5a:	2401      	movs	r4, #1
 8000b5c:	08cb      	lsrs	r3, r1, #3
 8000b5e:	4d07      	ldr	r5, [pc, #28]	@ (8000b7c <ssd1306_DrawPixel+0x2c>)
 8000b60:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8000b64:	5c2b      	ldrb	r3, [r5, r0]
 8000b66:	f001 0107 	and.w	r1, r1, #7
 8000b6a:	fa04 f101 	lsl.w	r1, r4, r1
    if(color == White) {
 8000b6e:	42a2      	cmp	r2, r4
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000b70:	bf0c      	ite	eq
 8000b72:	430b      	orreq	r3, r1
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000b74:	438b      	bicne	r3, r1
 8000b76:	542b      	strb	r3, [r5, r0]
    }
}
 8000b78:	bd30      	pop	{r4, r5, pc}
 8000b7a:	bf00      	nop
 8000b7c:	200007da 	.word	0x200007da

08000b80 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b84:	4604      	mov	r4, r0
 8000b86:	b087      	sub	sp, #28
 8000b88:	a806      	add	r0, sp, #24
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 255)
 8000b8a:	2c1f      	cmp	r4, #31
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000b8c:	e900 0006 	stmdb	r0, {r1, r2}
 8000b90:	9301      	str	r3, [sp, #4]
    if (ch < 32 || ch > 255)
 8000b92:	d944      	bls.n	8000c1e <ssd1306_WriteChar+0x9e>
        return 0;

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000b94:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8000c24 <ssd1306_WriteChar+0xa4>
 8000b98:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8000b9c:	f8b9 a000 	ldrh.w	sl, [r9]
 8000ba0:	eb0a 0306 	add.w	r3, sl, r6
 8000ba4:	2b80      	cmp	r3, #128	@ 0x80
 8000ba6:	dc3a      	bgt.n	8000c1e <ssd1306_WriteChar+0x9e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000ba8:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8000bac:	f89d b011 	ldrb.w	fp, [sp, #17]
 8000bb0:	9300      	str	r3, [sp, #0]
 8000bb2:	eb03 020b 	add.w	r2, r3, fp
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000bb6:	2a40      	cmp	r2, #64	@ 0x40
 8000bb8:	dc31      	bgt.n	8000c1e <ssd1306_WriteChar+0x9e>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000bba:	f04f 0800 	mov.w	r8, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000bbe:	f1a4 0520 	sub.w	r5, r4, #32
 8000bc2:	fb0b f505 	mul.w	r5, fp, r5
 8000bc6:	006d      	lsls	r5, r5, #1
    for(i = 0; i < Font.FontHeight; i++) {
 8000bc8:	45c3      	cmp	fp, r8
 8000bca:	d806      	bhi.n	8000bda <ssd1306_WriteChar+0x5a>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000bcc:	4456      	add	r6, sl
 8000bce:	f8a9 6000 	strh.w	r6, [r9]
    
    // Return written char for validation
    return ch;
}
 8000bd2:	4620      	mov	r0, r4
 8000bd4:	b007      	add	sp, #28
 8000bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(j = 0; j < Font.FontWidth; j++) {
 8000bda:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000bdc:	9a05      	ldr	r2, [sp, #20]
 8000bde:	5b53      	ldrh	r3, [r2, r5]
 8000be0:	9303      	str	r3, [sp, #12]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000be2:	9b00      	ldr	r3, [sp, #0]
 8000be4:	eb08 0203 	add.w	r2, r8, r3
 8000be8:	b2d3      	uxtb	r3, r2
 8000bea:	9302      	str	r3, [sp, #8]
        for(j = 0; j < Font.FontWidth; j++) {
 8000bec:	42be      	cmp	r6, r7
 8000bee:	d803      	bhi.n	8000bf8 <ssd1306_WriteChar+0x78>
    for(i = 0; i < Font.FontHeight; i++) {
 8000bf0:	f108 0801 	add.w	r8, r8, #1
 8000bf4:	3502      	adds	r5, #2
 8000bf6:	e7e7      	b.n	8000bc8 <ssd1306_WriteChar+0x48>
            if((b << j) & 0x8000)  {
 8000bf8:	9b03      	ldr	r3, [sp, #12]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000bfa:	eb07 000a 	add.w	r0, r7, sl
            if((b << j) & 0x8000)  {
 8000bfe:	fa03 f207 	lsl.w	r2, r3, r7
 8000c02:	0413      	lsls	r3, r2, #16
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000c04:	bf56      	itet	pl
 8000c06:	9b01      	ldrpl	r3, [sp, #4]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000c08:	9a01      	ldrmi	r2, [sp, #4]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000c0a:	fab3 f283 	clzpl	r2, r3
 8000c0e:	9902      	ldr	r1, [sp, #8]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000c10:	b2c0      	uxtb	r0, r0
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000c12:	bf58      	it	pl
 8000c14:	0952      	lsrpl	r2, r2, #5
 8000c16:	f7ff ff9b 	bl	8000b50 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000c1a:	3701      	adds	r7, #1
 8000c1c:	e7e6      	b.n	8000bec <ssd1306_WriteChar+0x6c>
        return 0;
 8000c1e:	2400      	movs	r4, #0
 8000c20:	e7d7      	b.n	8000bd2 <ssd1306_WriteChar+0x52>
 8000c22:	bf00      	nop
 8000c24:	200007d4 	.word	0x200007d4

08000c28 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000c28:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000c2a:	466d      	mov	r5, sp
 8000c2c:	461e      	mov	r6, r3
 8000c2e:	e885 0006 	stmia.w	r5, {r1, r2}
 8000c32:	1e44      	subs	r4, r0, #1
    while (*str) {
 8000c34:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000c38:	b140      	cbz	r0, 8000c4c <ssd1306_WriteString+0x24>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000c3a:	e895 0006 	ldmia.w	r5, {r1, r2}
 8000c3e:	4633      	mov	r3, r6
 8000c40:	f7ff ff9e 	bl	8000b80 <ssd1306_WriteChar>
 8000c44:	4603      	mov	r3, r0
 8000c46:	7820      	ldrb	r0, [r4, #0]
 8000c48:	4283      	cmp	r3, r0
 8000c4a:	d0f3      	beq.n	8000c34 <ssd1306_WriteString+0xc>
        str++;
    }
    
    // Everything ok
    return *str;
}
 8000c4c:	b002      	add	sp, #8
 8000c4e:	bd70      	pop	{r4, r5, r6, pc}

08000c50 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 8000c50:	4b01      	ldr	r3, [pc, #4]	@ (8000c58 <ssd1306_SetCursor+0x8>)
 8000c52:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8000c54:	8059      	strh	r1, [r3, #2]
}
 8000c56:	4770      	bx	lr
 8000c58:	200007d4 	.word	0x200007d4

08000c5c <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000c5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c60:	4690      	mov	r8, r2
    int32_t deltaX = abs(x2 - x1);
 8000c62:	eba8 0900 	sub.w	r9, r8, r0
    int32_t deltaY = abs(y2 - y1);
 8000c66:	eba3 0a01 	sub.w	sl, r3, r1
    int32_t deltaX = abs(x2 - x1);
 8000c6a:	f1b9 0f00 	cmp.w	r9, #0
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000c6e:	461e      	mov	r6, r3
    int32_t deltaX = abs(x2 - x1);
 8000c70:	bfb8      	it	lt
 8000c72:	f1c9 0900 	rsblt	r9, r9, #0
    int32_t deltaY = abs(y2 - y1);
 8000c76:	f1ba 0f00 	cmp.w	sl, #0
 8000c7a:	bfb8      	it	lt
 8000c7c:	f1ca 0a00 	rsblt	sl, sl, #0
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8000c80:	4580      	cmp	r8, r0
 8000c82:	bf8c      	ite	hi
 8000c84:	2301      	movhi	r3, #1
 8000c86:	f04f 33ff 	movls.w	r3, #4294967295
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000c8a:	4605      	mov	r5, r0
 8000c8c:	460c      	mov	r4, r1
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8000c8e:	428e      	cmp	r6, r1
 8000c90:	bf8c      	ite	hi
 8000c92:	f04f 0b01 	movhi.w	fp, #1
 8000c96:	f04f 3bff 	movls.w	fp, #4294967295
    int32_t error = deltaX - deltaY;
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8000c9a:	4640      	mov	r0, r8
 8000c9c:	4631      	mov	r1, r6
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000c9e:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8000ca2:	9300      	str	r3, [sp, #0]
    int32_t error = deltaX - deltaY;
 8000ca4:	eba9 070a 	sub.w	r7, r9, sl
    ssd1306_DrawPixel(x2, y2, color);
 8000ca8:	f7ff ff52 	bl	8000b50 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
        ssd1306_DrawPixel(x1, y1, color);
        error2 = error * 2;
        if(error2 > -deltaY) {
 8000cac:	f1ca 0300 	rsb	r3, sl, #0
    while((x1 != x2) || (y1 != y2)) {
 8000cb0:	4545      	cmp	r5, r8
 8000cb2:	d104      	bne.n	8000cbe <ssd1306_Line+0x62>
 8000cb4:	42b4      	cmp	r4, r6
 8000cb6:	d102      	bne.n	8000cbe <ssd1306_Line+0x62>
            error += deltaX;
            y1 += signY;
        }
    }
    return;
}
 8000cb8:	b003      	add	sp, #12
 8000cba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ssd1306_DrawPixel(x1, y1, color);
 8000cbe:	4621      	mov	r1, r4
 8000cc0:	4628      	mov	r0, r5
 8000cc2:	9301      	str	r3, [sp, #4]
 8000cc4:	f7ff ff44 	bl	8000b50 <ssd1306_DrawPixel>
        if(error2 > -deltaY) {
 8000cc8:	9b01      	ldr	r3, [sp, #4]
        error2 = error * 2;
 8000cca:	0079      	lsls	r1, r7, #1
        if(error2 > -deltaY) {
 8000ccc:	ebb3 0f47 	cmp.w	r3, r7, lsl #1
            x1 += signX;
 8000cd0:	bfbf      	itttt	lt
 8000cd2:	9800      	ldrlt	r0, [sp, #0]
            error -= deltaY;
 8000cd4:	eba7 070a 	sublt.w	r7, r7, sl
            x1 += signX;
 8000cd8:	182d      	addlt	r5, r5, r0
 8000cda:	b2ed      	uxtblt	r5, r5
        if(error2 < deltaX) {
 8000cdc:	4589      	cmp	r9, r1
            y1 += signY;
 8000cde:	bfc2      	ittt	gt
 8000ce0:	445c      	addgt	r4, fp
            error += deltaX;
 8000ce2:	444f      	addgt	r7, r9
            y1 += signY;
 8000ce4:	b2e4      	uxtbgt	r4, r4
 8000ce6:	e7e3      	b.n	8000cb0 <ssd1306_Line+0x54>

08000ce8 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000ce8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000cec:	461c      	mov	r4, r3
 8000cee:	4616      	mov	r6, r2
 8000cf0:	460d      	mov	r5, r1
 8000cf2:	4607      	mov	r7, r0
 8000cf4:	f89d 8020 	ldrb.w	r8, [sp, #32]
    ssd1306_Line(x1,y1,x2,y1,color);
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	f8cd 8000 	str.w	r8, [sp]
 8000cfe:	f7ff ffad 	bl	8000c5c <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8000d02:	4623      	mov	r3, r4
 8000d04:	4632      	mov	r2, r6
 8000d06:	4629      	mov	r1, r5
 8000d08:	4630      	mov	r0, r6
 8000d0a:	f8cd 8000 	str.w	r8, [sp]
 8000d0e:	f7ff ffa5 	bl	8000c5c <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8000d12:	4623      	mov	r3, r4
 8000d14:	463a      	mov	r2, r7
 8000d16:	4621      	mov	r1, r4
 8000d18:	4630      	mov	r0, r6
 8000d1a:	f8cd 8000 	str.w	r8, [sp]
 8000d1e:	f7ff ff9d 	bl	8000c5c <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8000d22:	462b      	mov	r3, r5
 8000d24:	463a      	mov	r2, r7
 8000d26:	4621      	mov	r1, r4
 8000d28:	4638      	mov	r0, r7
 8000d2a:	f8cd 8020 	str.w	r8, [sp, #32]

    return;
}
 8000d2e:	b002      	add	sp, #8
 8000d30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ssd1306_Line(x1,y2,x1,y1,color);
 8000d34:	f7ff bf92 	b.w	8000c5c <ssd1306_Line>

08000d38 <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d3c:	4614      	mov	r4, r2
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 8000d3e:	42a0      	cmp	r0, r4
 8000d40:	4680      	mov	r8, r0
 8000d42:	bf28      	it	cs
 8000d44:	46a0      	movcs	r8, r4
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8000d46:	42a0      	cmp	r0, r4
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000d48:	4606      	mov	r6, r0
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8000d4a:	bf38      	it	cc
 8000d4c:	4626      	movcc	r6, r4
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8000d4e:	4299      	cmp	r1, r3
 8000d50:	460c      	mov	r4, r1
 8000d52:	bf28      	it	cs
 8000d54:	461c      	movcs	r4, r3
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8000d56:	4299      	cmp	r1, r3
 8000d58:	bf38      	it	cc
 8000d5a:	4619      	movcc	r1, r3
 8000d5c:	460f      	mov	r7, r1
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000d5e:	f89d 2018 	ldrb.w	r2, [sp, #24]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8000d62:	42bc      	cmp	r4, r7
 8000d64:	d801      	bhi.n	8000d6a <ssd1306_FillRectangle+0x32>
 8000d66:	2c3f      	cmp	r4, #63	@ 0x3f
 8000d68:	d90e      	bls.n	8000d88 <ssd1306_FillRectangle+0x50>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
            ssd1306_DrawPixel(x, y, color);
        }
    }
    return;
}
 8000d6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            ssd1306_DrawPixel(x, y, color);
 8000d6e:	4628      	mov	r0, r5
 8000d70:	4621      	mov	r1, r4
 8000d72:	f7ff feed 	bl	8000b50 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8000d76:	3501      	adds	r5, #1
 8000d78:	b2ed      	uxtb	r5, r5
 8000d7a:	42b5      	cmp	r5, r6
 8000d7c:	d801      	bhi.n	8000d82 <ssd1306_FillRectangle+0x4a>
 8000d7e:	062b      	lsls	r3, r5, #24
 8000d80:	d5f5      	bpl.n	8000d6e <ssd1306_FillRectangle+0x36>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 8000d82:	3401      	adds	r4, #1
 8000d84:	b2e4      	uxtb	r4, r4
 8000d86:	e7ec      	b.n	8000d62 <ssd1306_FillRectangle+0x2a>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8000d88:	4645      	mov	r5, r8
 8000d8a:	e7f6      	b.n	8000d7a <ssd1306_FillRectangle+0x42>

08000d8c <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000d8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000d90:	f010 0f80 	tst.w	r0, #128	@ 0x80
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000d94:	9200      	str	r2, [sp, #0]
 8000d96:	4681      	mov	r9, r0
 8000d98:	460c      	mov	r4, r1
 8000d9a:	469a      	mov	sl, r3
 8000d9c:	f89d 2034 	ldrb.w	r2, [sp, #52]	@ 0x34
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000da0:	d12b      	bne.n	8000dfa <ssd1306_DrawBitmap+0x6e>
 8000da2:	293f      	cmp	r1, #63	@ 0x3f
 8000da4:	d829      	bhi.n	8000dfa <ssd1306_DrawBitmap+0x6e>
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000da6:	2700      	movs	r7, #0
    uint8_t byte = 0;
 8000da8:	463d      	mov	r5, r7
 8000daa:	f89d 6030 	ldrb.w	r6, [sp, #48]	@ 0x30
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000dae:	f103 0b07 	add.w	fp, r3, #7
 8000db2:	440e      	add	r6, r1
 8000db4:	ea4f 0beb 	mov.w	fp, fp, asr #3
 8000db8:	b2f6      	uxtb	r6, r6
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000dba:	42b4      	cmp	r4, r6
 8000dbc:	d01d      	beq.n	8000dfa <ssd1306_DrawBitmap+0x6e>
        for (uint8_t i = 0; i < w; i++) {
            if (i & 7) {
                byte <<= 1;
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000dbe:	9b00      	ldr	r3, [sp, #0]
    for (uint8_t j = 0; j < h; j++, y++) {
 8000dc0:	f04f 0800 	mov.w	r8, #0
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000dc4:	443b      	add	r3, r7
 8000dc6:	e010      	b.n	8000dea <ssd1306_DrawBitmap+0x5e>
            if (i & 7) {
 8000dc8:	0741      	lsls	r1, r0, #29
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000dca:	bf0b      	itete	eq
 8000dcc:	08c1      	lsreq	r1, r0, #3
                byte <<= 1;
 8000dce:	006d      	lslne	r5, r5, #1
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000dd0:	5c5d      	ldrbeq	r5, [r3, r1]
                byte <<= 1;
 8000dd2:	b2ed      	uxtbne	r5, r5
            }

            if (byte & 0x80) {
 8000dd4:	0629      	lsls	r1, r5, #24
 8000dd6:	d506      	bpl.n	8000de6 <ssd1306_DrawBitmap+0x5a>
                ssd1306_DrawPixel(x + i, y, color);
 8000dd8:	4448      	add	r0, r9
 8000dda:	4621      	mov	r1, r4
 8000ddc:	b2c0      	uxtb	r0, r0
 8000dde:	9301      	str	r3, [sp, #4]
 8000de0:	f7ff feb6 	bl	8000b50 <ssd1306_DrawPixel>
 8000de4:	9b01      	ldr	r3, [sp, #4]
        for (uint8_t i = 0; i < w; i++) {
 8000de6:	f108 0801 	add.w	r8, r8, #1
 8000dea:	45d0      	cmp	r8, sl
 8000dec:	fa5f f088 	uxtb.w	r0, r8
 8000df0:	d1ea      	bne.n	8000dc8 <ssd1306_DrawBitmap+0x3c>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000df2:	3401      	adds	r4, #1
 8000df4:	b2e4      	uxtb	r4, r4
 8000df6:	445f      	add	r7, fp
 8000df8:	e7df      	b.n	8000dba <ssd1306_DrawBitmap+0x2e>
            }
        }
    }
    return;
}
 8000dfa:	b003      	add	sp, #12
 8000dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000e00 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000e00:	b510      	push	{r4, lr}
 8000e02:	4604      	mov	r4, r0
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000e04:	2081      	movs	r0, #129	@ 0x81
 8000e06:	f7ff fe55 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000e0a:	4620      	mov	r0, r4
}
 8000e0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ssd1306_WriteCommand(value);
 8000e10:	f7ff be50 	b.w	8000ab4 <ssd1306_WriteCommand>

08000e14 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
    uint8_t value;
    if (on) {
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
 8000e14:	2800      	cmp	r0, #0
    if (on) {
 8000e16:	4603      	mov	r3, r0
        SSD1306.DisplayOn = 1;
 8000e18:	bf0c      	ite	eq
 8000e1a:	4603      	moveq	r3, r0
 8000e1c:	2301      	movne	r3, #1
 8000e1e:	4a03      	ldr	r2, [pc, #12]	@ (8000e2c <ssd1306_SetDisplayOn+0x18>)
 8000e20:	bf0c      	ite	eq
 8000e22:	20ae      	moveq	r0, #174	@ 0xae
 8000e24:	20af      	movne	r0, #175	@ 0xaf
 8000e26:	7153      	strb	r3, [r2, #5]
    } else {
        value = 0xAE;   // Display off
        SSD1306.DisplayOn = 0;
    }
    ssd1306_WriteCommand(value);
 8000e28:	f7ff be44 	b.w	8000ab4 <ssd1306_WriteCommand>
 8000e2c:	200007d4 	.word	0x200007d4

08000e30 <ssd1306_Init>:
void ssd1306_Init(void) {
 8000e30:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8000e32:	2064      	movs	r0, #100	@ 0x64
 8000e34:	f000 f9b4 	bl	80011a0 <HAL_Delay>
    ssd1306_SetDisplayOn(0); //display off
 8000e38:	2000      	movs	r0, #0
 8000e3a:	f7ff ffeb 	bl	8000e14 <ssd1306_SetDisplayOn>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000e3e:	2020      	movs	r0, #32
 8000e40:	f7ff fe38 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000e44:	2000      	movs	r0, #0
 8000e46:	f7ff fe35 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000e4a:	20b0      	movs	r0, #176	@ 0xb0
 8000e4c:	f7ff fe32 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000e50:	20c8      	movs	r0, #200	@ 0xc8
 8000e52:	f7ff fe2f 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 8000e56:	2000      	movs	r0, #0
 8000e58:	f7ff fe2c 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000e5c:	2010      	movs	r0, #16
 8000e5e:	f7ff fe29 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000e62:	2040      	movs	r0, #64	@ 0x40
 8000e64:	f7ff fe26 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_SetContrast(0xFF);
 8000e68:	20ff      	movs	r0, #255	@ 0xff
 8000e6a:	f7ff ffc9 	bl	8000e00 <ssd1306_SetContrast>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000e6e:	20a1      	movs	r0, #161	@ 0xa1
 8000e70:	f7ff fe20 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000e74:	20a6      	movs	r0, #166	@ 0xa6
 8000e76:	f7ff fe1d 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000e7a:	20a8      	movs	r0, #168	@ 0xa8
 8000e7c:	f7ff fe1a 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8000e80:	203f      	movs	r0, #63	@ 0x3f
 8000e82:	f7ff fe17 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000e86:	20a4      	movs	r0, #164	@ 0xa4
 8000e88:	f7ff fe14 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000e8c:	20d3      	movs	r0, #211	@ 0xd3
 8000e8e:	f7ff fe11 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000e92:	2000      	movs	r0, #0
 8000e94:	f7ff fe0e 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000e98:	20d5      	movs	r0, #213	@ 0xd5
 8000e9a:	f7ff fe0b 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000e9e:	20f0      	movs	r0, #240	@ 0xf0
 8000ea0:	f7ff fe08 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000ea4:	20d9      	movs	r0, #217	@ 0xd9
 8000ea6:	f7ff fe05 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000eaa:	2022      	movs	r0, #34	@ 0x22
 8000eac:	f7ff fe02 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000eb0:	20da      	movs	r0, #218	@ 0xda
 8000eb2:	f7ff fdff 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8000eb6:	2012      	movs	r0, #18
 8000eb8:	f7ff fdfc 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000ebc:	20db      	movs	r0, #219	@ 0xdb
 8000ebe:	f7ff fdf9 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000ec2:	2020      	movs	r0, #32
 8000ec4:	f7ff fdf6 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000ec8:	208d      	movs	r0, #141	@ 0x8d
 8000eca:	f7ff fdf3 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000ece:	2014      	movs	r0, #20
 8000ed0:	f7ff fdf0 	bl	8000ab4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f7ff ff9d 	bl	8000e14 <ssd1306_SetDisplayOn>
    ssd1306_Fill(Black);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f7ff fe12 	bl	8000b04 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8000ee0:	f7ff fe1c 	bl	8000b1c <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	4b03      	ldr	r3, [pc, #12]	@ (8000ef4 <ssd1306_Init+0xc4>)
 8000ee8:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000eea:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8000eec:	2201      	movs	r2, #1
 8000eee:	711a      	strb	r2, [r3, #4]
}
 8000ef0:	bd08      	pop	{r3, pc}
 8000ef2:	bf00      	nop
 8000ef4:	200007d4 	.word	0x200007d4

08000ef8 <ssd1306_GetDisplayOn>:
}

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}
 8000ef8:	4b01      	ldr	r3, [pc, #4]	@ (8000f00 <ssd1306_GetDisplayOn+0x8>)
 8000efa:	7958      	ldrb	r0, [r3, #5]
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	200007d4 	.word	0x200007d4

08000f04 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f04:	4b11      	ldr	r3, [pc, #68]	@ (8000f4c <HAL_MspInit+0x48>)
{
 8000f06:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f08:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f0a:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f0c:	f042 0201 	orr.w	r2, r2, #1
 8000f10:	619a      	str	r2, [r3, #24]
 8000f12:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f14:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f18:	f002 0201 	and.w	r2, r2, #1
 8000f1c:	9200      	str	r2, [sp, #0]
 8000f1e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f20:	69da      	ldr	r2, [r3, #28]
 8000f22:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000f26:	61da      	str	r2, [r3, #28]
 8000f28:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f2a:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000f34:	f000 fc4a 	bl	80017cc <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000f38:	4a05      	ldr	r2, [pc, #20]	@ (8000f50 <HAL_MspInit+0x4c>)
 8000f3a:	6853      	ldr	r3, [r2, #4]
 8000f3c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000f40:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000f44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f46:	b003      	add	sp, #12
 8000f48:	f85d fb04 	ldr.w	pc, [sp], #4
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40010000 	.word	0x40010000

08000f54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000f54:	b510      	push	{r4, lr}
 8000f56:	4604      	mov	r4, r0
 8000f58:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5a:	2210      	movs	r2, #16
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	a802      	add	r0, sp, #8
 8000f60:	f003 fa65 	bl	800442e <memset>
  if(hadc->Instance==ADC1)
 8000f64:	6822      	ldr	r2, [r4, #0]
 8000f66:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <HAL_ADC_MspInit+0x54>)
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d11b      	bne.n	8000fa4 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f6c:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8000f70:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	480e      	ldr	r0, [pc, #56]	@ (8000fac <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f74:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f78:	619a      	str	r2, [r3, #24]
 8000f7a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f7c:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f7e:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 8000f82:	9200      	str	r2, [sp, #0]
 8000f84:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f86:	699a      	ldr	r2, [r3, #24]
 8000f88:	f042 0204 	orr.w	r2, r2, #4
 8000f8c:	619a      	str	r2, [r3, #24]
 8000f8e:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f90:	2220      	movs	r2, #32
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f92:	f003 0304 	and.w	r3, r3, #4
 8000f96:	9301      	str	r3, [sp, #4]
 8000f98:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f9a:	2303      	movs	r3, #3
 8000f9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa0:	f000 fc58 	bl	8001854 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000fa4:	b006      	add	sp, #24
 8000fa6:	bd10      	pop	{r4, pc}
 8000fa8:	40012400 	.word	0x40012400
 8000fac:	40010800 	.word	0x40010800

08000fb0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fb0:	b510      	push	{r4, lr}
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb6:	2210      	movs	r2, #16
 8000fb8:	2100      	movs	r1, #0
 8000fba:	a802      	add	r0, sp, #8
 8000fbc:	f003 fa37 	bl	800442e <memset>
  if(hi2c->Instance==I2C1)
 8000fc0:	6822      	ldr	r2, [r4, #0]
 8000fc2:	4b15      	ldr	r3, [pc, #84]	@ (8001018 <HAL_I2C_MspInit+0x68>)
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	d124      	bne.n	8001012 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc8:	4c14      	ldr	r4, [pc, #80]	@ (800101c <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fca:	f44f 7240 	mov.w	r2, #768	@ 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fd0:	4813      	ldr	r0, [pc, #76]	@ (8001020 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd2:	f043 0308 	orr.w	r3, r3, #8
 8000fd6:	61a3      	str	r3, [r4, #24]
 8000fd8:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fda:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fdc:	f003 0308 	and.w	r3, r3, #8
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe4:	2312      	movs	r3, #18
 8000fe6:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fea:	2303      	movs	r3, #3
 8000fec:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fee:	f000 fc31 	bl	8001854 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000ff2:	4a0c      	ldr	r2, [pc, #48]	@ (8001024 <HAL_I2C_MspInit+0x74>)
 8000ff4:	6853      	ldr	r3, [r2, #4]
 8000ff6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001000:	69e3      	ldr	r3, [r4, #28]
 8001002:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001006:	61e3      	str	r3, [r4, #28]
 8001008:	69e3      	ldr	r3, [r4, #28]
 800100a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800100e:	9301      	str	r3, [sp, #4]
 8001010:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001012:	b006      	add	sp, #24
 8001014:	bd10      	pop	{r4, pc}
 8001016:	bf00      	nop
 8001018:	40005400 	.word	0x40005400
 800101c:	40021000 	.word	0x40021000
 8001020:	40010c00 	.word	0x40010c00
 8001024:	40010000 	.word	0x40010000

08001028 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001028:	e7fe      	b.n	8001028 <NMI_Handler>

0800102a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler>

0800102c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <MemManage_Handler>

0800102e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <BusFault_Handler>

08001030 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <UsageFault_Handler>

08001032 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001032:	4770      	bx	lr

08001034 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001034:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001036:	f000 f8a1 	bl	800117c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800103a:	f002 fbc9 	bl	80037d0 <xTaskGetSchedulerState>
 800103e:	2801      	cmp	r0, #1
 8001040:	d003      	beq.n	800104a <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001042:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 8001046:	f002 bf1d 	b.w	8003e84 <xPortSysTickHandler>
}
 800104a:	bd08      	pop	{r3, pc}

0800104c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800104c:	b570      	push	{r4, r5, r6, lr}
 800104e:	460d      	mov	r5, r1
 8001050:	4614      	mov	r4, r2
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001052:	460e      	mov	r6, r1
 8001054:	1b73      	subs	r3, r6, r5
 8001056:	429c      	cmp	r4, r3
 8001058:	dc01      	bgt.n	800105e <_read+0x12>
  {
    *ptr++ = __io_getchar();
  }

  return len;
}
 800105a:	4620      	mov	r0, r4
 800105c:	bd70      	pop	{r4, r5, r6, pc}
    *ptr++ = __io_getchar();
 800105e:	f3af 8000 	nop.w
 8001062:	f806 0b01 	strb.w	r0, [r6], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001066:	e7f5      	b.n	8001054 <_read+0x8>

08001068 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	4770      	bx	lr

0800106e <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 800106e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  return 0;
}
 8001072:	2000      	movs	r0, #0
  st->st_mode = S_IFCHR;
 8001074:	604b      	str	r3, [r1, #4]
}
 8001076:	4770      	bx	lr

08001078 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8001078:	2001      	movs	r0, #1
 800107a:	4770      	bx	lr

0800107c <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 800107c:	2000      	movs	r0, #0
 800107e:	4770      	bx	lr

08001080 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001080:	4a0b      	ldr	r2, [pc, #44]	@ (80010b0 <_sbrk+0x30>)
{
 8001082:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001084:	6811      	ldr	r1, [r2, #0]
{
 8001086:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001088:	b909      	cbnz	r1, 800108e <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800108a:	490a      	ldr	r1, [pc, #40]	@ (80010b4 <_sbrk+0x34>)
 800108c:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800108e:	6810      	ldr	r0, [r2, #0]
 8001090:	4909      	ldr	r1, [pc, #36]	@ (80010b8 <_sbrk+0x38>)
 8001092:	4c0a      	ldr	r4, [pc, #40]	@ (80010bc <_sbrk+0x3c>)
 8001094:	4403      	add	r3, r0
 8001096:	1b09      	subs	r1, r1, r4
 8001098:	428b      	cmp	r3, r1
 800109a:	d906      	bls.n	80010aa <_sbrk+0x2a>
  {
    errno = ENOMEM;
 800109c:	f003 fa16 	bl	80044cc <__errno>
 80010a0:	230c      	movs	r3, #12
 80010a2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80010a4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80010a8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80010aa:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80010ac:	e7fc      	b.n	80010a8 <_sbrk+0x28>
 80010ae:	bf00      	nop
 80010b0:	20000bdc 	.word	0x20000bdc
 80010b4:	20001bb8 	.word	0x20001bb8
 80010b8:	20002800 	.word	0x20002800
 80010bc:	00000400 	.word	0x00000400

080010c0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010c0:	4770      	bx	lr
	...

080010c4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c4:	f7ff fffc 	bl	80010c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c8:	480b      	ldr	r0, [pc, #44]	@ (80010f8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80010ca:	490c      	ldr	r1, [pc, #48]	@ (80010fc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80010cc:	4a0c      	ldr	r2, [pc, #48]	@ (8001100 <LoopFillZerobss+0x16>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a09      	ldr	r2, [pc, #36]	@ (8001104 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80010e0:	4c09      	ldr	r4, [pc, #36]	@ (8001108 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010ee:	f003 f9f3 	bl	80044d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010f2:	f7ff fbe1 	bl	80008b8 <main>
  bx lr
 80010f6:	4770      	bx	lr
  ldr r0, =_sdata
 80010f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010fc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001100:	08006d4c 	.word	0x08006d4c
  ldr r2, =_sbss
 8001104:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001108:	20001bb4 	.word	0x20001bb4

0800110c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800110c:	e7fe      	b.n	800110c <ADC1_2_IRQHandler>
	...

08001110 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001110:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001112:	4b0e      	ldr	r3, [pc, #56]	@ (800114c <HAL_InitTick+0x3c>)
{
 8001114:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001120:	4a0b      	ldr	r2, [pc, #44]	@ (8001150 <HAL_InitTick+0x40>)
 8001122:	6810      	ldr	r0, [r2, #0]
 8001124:	fbb0 f0f3 	udiv	r0, r0, r3
 8001128:	f000 fb80 	bl	800182c <HAL_SYSTICK_Config>
 800112c:	4604      	mov	r4, r0
 800112e:	b958      	cbnz	r0, 8001148 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001130:	2d0f      	cmp	r5, #15
 8001132:	d809      	bhi.n	8001148 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001134:	4602      	mov	r2, r0
 8001136:	4629      	mov	r1, r5
 8001138:	f04f 30ff 	mov.w	r0, #4294967295
 800113c:	f000 fb46 	bl	80017cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001140:	4620      	mov	r0, r4
 8001142:	4b04      	ldr	r3, [pc, #16]	@ (8001154 <HAL_InitTick+0x44>)
 8001144:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001146:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001148:	2001      	movs	r0, #1
 800114a:	e7fc      	b.n	8001146 <HAL_InitTick+0x36>
 800114c:	2000000c 	.word	0x2000000c
 8001150:	20000008 	.word	0x20000008
 8001154:	20000010 	.word	0x20000010

08001158 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001158:	4a07      	ldr	r2, [pc, #28]	@ (8001178 <HAL_Init+0x20>)
{
 800115a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800115c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001160:	f043 0310 	orr.w	r3, r3, #16
 8001164:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001166:	f000 fb1f 	bl	80017a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800116a:	200f      	movs	r0, #15
 800116c:	f7ff ffd0 	bl	8001110 <HAL_InitTick>
  HAL_MspInit();
 8001170:	f7ff fec8 	bl	8000f04 <HAL_MspInit>
}
 8001174:	2000      	movs	r0, #0
 8001176:	bd08      	pop	{r3, pc}
 8001178:	40022000 	.word	0x40022000

0800117c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800117c:	4a03      	ldr	r2, [pc, #12]	@ (800118c <HAL_IncTick+0x10>)
 800117e:	4b04      	ldr	r3, [pc, #16]	@ (8001190 <HAL_IncTick+0x14>)
 8001180:	6811      	ldr	r1, [r2, #0]
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	440b      	add	r3, r1
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	20000be0 	.word	0x20000be0
 8001190:	2000000c 	.word	0x2000000c

08001194 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001194:	4b01      	ldr	r3, [pc, #4]	@ (800119c <HAL_GetTick+0x8>)
 8001196:	6818      	ldr	r0, [r3, #0]
}
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	20000be0 	.word	0x20000be0

080011a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011a0:	b538      	push	{r3, r4, r5, lr}
 80011a2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80011a4:	f7ff fff6 	bl	8001194 <HAL_GetTick>
 80011a8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011aa:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80011ac:	bf1e      	ittt	ne
 80011ae:	4b04      	ldrne	r3, [pc, #16]	@ (80011c0 <HAL_Delay+0x20>)
 80011b0:	781b      	ldrbne	r3, [r3, #0]
 80011b2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011b4:	f7ff ffee 	bl	8001194 <HAL_GetTick>
 80011b8:	1b43      	subs	r3, r0, r5
 80011ba:	42a3      	cmp	r3, r4
 80011bc:	d3fa      	bcc.n	80011b4 <HAL_Delay+0x14>
  {
  }
}
 80011be:	bd38      	pop	{r3, r4, r5, pc}
 80011c0:	2000000c 	.word	0x2000000c

080011c4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80011c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80011c6:	2600      	movs	r6, #0
{
 80011c8:	4604      	mov	r4, r0
 80011ca:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80011cc:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80011ce:	f7ff ffe1 	bl	8001194 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80011d2:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80011d4:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	05d1      	lsls	r1, r2, #23
 80011da:	d508      	bpl.n	80011ee <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 80011dc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011de:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    __HAL_UNLOCK(hadc);
 80011e0:	f884 6024 	strb.w	r6, [r4, #36]	@ 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011e4:	f043 0320 	orr.w	r3, r3, #32
 80011e8:	62a3      	str	r3, [r4, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 80011ea:	b003      	add	sp, #12
 80011ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	05d2      	lsls	r2, r2, #23
 80011f2:	d403      	bmi.n	80011fc <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 80011f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80011f6:	f413 0f70 	tst.w	r3, #15728640	@ 0xf00000
 80011fa:	d03d      	beq.n	8001278 <HAL_ADC_PollForConversion+0xb4>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80011fc:	4b3d      	ldr	r3, [pc, #244]	@ (80012f4 <HAL_ADC_PollForConversion+0x130>)
 80011fe:	2002      	movs	r0, #2
 8001200:	681e      	ldr	r6, [r3, #0]
 8001202:	f001 f97d 	bl	8002500 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001206:	6823      	ldr	r3, [r4, #0]
 8001208:	4a3b      	ldr	r2, [pc, #236]	@ (80012f8 <HAL_ADC_PollForConversion+0x134>)
 800120a:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800120c:	fbb6 f6f0 	udiv	r6, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8001210:	4211      	tst	r1, r2
 8001212:	4a3a      	ldr	r2, [pc, #232]	@ (80012fc <HAL_ADC_PollForConversion+0x138>)
 8001214:	d151      	bne.n	80012ba <HAL_ADC_PollForConversion+0xf6>
 8001216:	68d8      	ldr	r0, [r3, #12]
 8001218:	4939      	ldr	r1, [pc, #228]	@ (8001300 <HAL_ADC_PollForConversion+0x13c>)
 800121a:	4208      	tst	r0, r1
 800121c:	d14d      	bne.n	80012ba <HAL_ADC_PollForConversion+0xf6>
 800121e:	6919      	ldr	r1, [r3, #16]
 8001220:	4211      	tst	r1, r2
 8001222:	d15b      	bne.n	80012dc <HAL_ADC_PollForConversion+0x118>
 8001224:	68da      	ldr	r2, [r3, #12]
 8001226:	4b37      	ldr	r3, [pc, #220]	@ (8001304 <HAL_ADC_PollForConversion+0x140>)
 8001228:	421a      	tst	r2, r3
 800122a:	bf14      	ite	ne
 800122c:	2329      	movne	r3, #41	@ 0x29
 800122e:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001230:	435e      	muls	r6, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001232:	9b01      	ldr	r3, [sp, #4]
 8001234:	42b3      	cmp	r3, r6
 8001236:	d223      	bcs.n	8001280 <HAL_ADC_PollForConversion+0xbc>
      if(Timeout != HAL_MAX_DELAY)
 8001238:	1c6a      	adds	r2, r5, #1
 800123a:	d004      	beq.n	8001246 <HAL_ADC_PollForConversion+0x82>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800123c:	2d00      	cmp	r5, #0
 800123e:	d153      	bne.n	80012e8 <HAL_ADC_PollForConversion+0x124>
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001240:	9b01      	ldr	r3, [sp, #4]
 8001242:	42b3      	cmp	r3, r6
 8001244:	d30a      	bcc.n	800125c <HAL_ADC_PollForConversion+0x98>
      Conversion_Timeout_CPU_cycles ++;
 8001246:	9b01      	ldr	r3, [sp, #4]
 8001248:	3301      	adds	r3, #1
 800124a:	9301      	str	r3, [sp, #4]
 800124c:	e7f1      	b.n	8001232 <HAL_ADC_PollForConversion+0x6e>
      if(Timeout != HAL_MAX_DELAY)
 800124e:	1c6e      	adds	r6, r5, #1
 8001250:	d013      	beq.n	800127a <HAL_ADC_PollForConversion+0xb6>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001252:	b965      	cbnz	r5, 800126e <HAL_ADC_PollForConversion+0xaa>
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001254:	6823      	ldr	r3, [r4, #0]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	0798      	lsls	r0, r3, #30
 800125a:	d40d      	bmi.n	8001278 <HAL_ADC_PollForConversion+0xb4>
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800125c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
            return HAL_TIMEOUT;
 800125e:	2003      	movs	r0, #3
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001260:	f043 0304 	orr.w	r3, r3, #4
 8001264:	62a3      	str	r3, [r4, #40]	@ 0x28
            __HAL_UNLOCK(hadc);
 8001266:	2300      	movs	r3, #0
 8001268:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800126c:	e7bd      	b.n	80011ea <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800126e:	f7ff ff91 	bl	8001194 <HAL_GetTick>
 8001272:	1bc0      	subs	r0, r0, r7
 8001274:	42a8      	cmp	r0, r5
 8001276:	d8ed      	bhi.n	8001254 <HAL_ADC_PollForConversion+0x90>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001278:	6822      	ldr	r2, [r4, #0]
 800127a:	6813      	ldr	r3, [r2, #0]
 800127c:	0799      	lsls	r1, r3, #30
 800127e:	d5e6      	bpl.n	800124e <HAL_ADC_PollForConversion+0x8a>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001280:	f06f 0312 	mvn.w	r3, #18
 8001284:	6822      	ldr	r2, [r4, #0]
 8001286:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001288:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800128a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800128e:	62a3      	str	r3, [r4, #40]	@ 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001290:	6893      	ldr	r3, [r2, #8]
 8001292:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001296:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800129a:	d10c      	bne.n	80012b6 <HAL_ADC_PollForConversion+0xf2>
 800129c:	7b23      	ldrb	r3, [r4, #12]
 800129e:	b953      	cbnz	r3, 80012b6 <HAL_ADC_PollForConversion+0xf2>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012a0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80012a2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80012a6:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012a8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80012aa:	04db      	lsls	r3, r3, #19
 80012ac:	d403      	bmi.n	80012b6 <HAL_ADC_PollForConversion+0xf2>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012ae:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	62a3      	str	r3, [r4, #40]	@ 0x28
  return HAL_OK;
 80012b6:	2000      	movs	r0, #0
 80012b8:	e797      	b.n	80011ea <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80012ba:	6919      	ldr	r1, [r3, #16]
 80012bc:	4211      	tst	r1, r2
 80012be:	d103      	bne.n	80012c8 <HAL_ADC_PollForConversion+0x104>
 80012c0:	68d9      	ldr	r1, [r3, #12]
 80012c2:	4a10      	ldr	r2, [pc, #64]	@ (8001304 <HAL_ADC_PollForConversion+0x140>)
 80012c4:	4211      	tst	r1, r2
 80012c6:	d00b      	beq.n	80012e0 <HAL_ADC_PollForConversion+0x11c>
 80012c8:	6919      	ldr	r1, [r3, #16]
 80012ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001308 <HAL_ADC_PollForConversion+0x144>)
 80012cc:	4211      	tst	r1, r2
 80012ce:	d109      	bne.n	80012e4 <HAL_ADC_PollForConversion+0x120>
 80012d0:	68db      	ldr	r3, [r3, #12]
 80012d2:	4213      	tst	r3, r2
 80012d4:	bf14      	ite	ne
 80012d6:	23fc      	movne	r3, #252	@ 0xfc
 80012d8:	2354      	moveq	r3, #84	@ 0x54
 80012da:	e7a9      	b.n	8001230 <HAL_ADC_PollForConversion+0x6c>
 80012dc:	2329      	movs	r3, #41	@ 0x29
 80012de:	e7a7      	b.n	8001230 <HAL_ADC_PollForConversion+0x6c>
 80012e0:	2354      	movs	r3, #84	@ 0x54
 80012e2:	e7a5      	b.n	8001230 <HAL_ADC_PollForConversion+0x6c>
 80012e4:	23fc      	movs	r3, #252	@ 0xfc
 80012e6:	e7a3      	b.n	8001230 <HAL_ADC_PollForConversion+0x6c>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80012e8:	f7ff ff54 	bl	8001194 <HAL_GetTick>
 80012ec:	1bc0      	subs	r0, r0, r7
 80012ee:	42a8      	cmp	r0, r5
 80012f0:	d8a6      	bhi.n	8001240 <HAL_ADC_PollForConversion+0x7c>
 80012f2:	e7a8      	b.n	8001246 <HAL_ADC_PollForConversion+0x82>
 80012f4:	20000008 	.word	0x20000008
 80012f8:	24924924 	.word	0x24924924
 80012fc:	12492492 	.word	0x12492492
 8001300:	00924924 	.word	0x00924924
 8001304:	00492492 	.word	0x00492492
 8001308:	00249249 	.word	0x00249249

0800130c <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800130c:	6803      	ldr	r3, [r0, #0]
 800130e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
}
 8001310:	4770      	bx	lr
	...

08001314 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001314:	2300      	movs	r3, #0
{ 
 8001316:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001318:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800131a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{ 
 800131e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001320:	2b01      	cmp	r3, #1
 8001322:	d06c      	beq.n	80013fe <HAL_ADC_ConfigChannel+0xea>
 8001324:	2301      	movs	r3, #1
 8001326:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800132a:	684d      	ldr	r5, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800132c:	6802      	ldr	r2, [r0, #0]
  if (sConfig->Rank < 7U)
 800132e:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001330:	6808      	ldr	r0, [r1, #0]
 8001332:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7U)
 8001336:	d822      	bhi.n	800137e <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001338:	261f      	movs	r6, #31
 800133a:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 800133c:	3b05      	subs	r3, #5
 800133e:	409e      	lsls	r6, r3
 8001340:	ea25 0506 	bic.w	r5, r5, r6
 8001344:	fa00 f303 	lsl.w	r3, r0, r3
 8001348:	432b      	orrs	r3, r5
 800134a:	6353      	str	r3, [r2, #52]	@ 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 800134c:	2809      	cmp	r0, #9
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800134e:	688b      	ldr	r3, [r1, #8]
 8001350:	eb00 0540 	add.w	r5, r0, r0, lsl #1
 8001354:	f04f 0107 	mov.w	r1, #7
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001358:	d929      	bls.n	80013ae <HAL_ADC_ConfigChannel+0x9a>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800135a:	68d6      	ldr	r6, [r2, #12]
 800135c:	3d1e      	subs	r5, #30
 800135e:	40a9      	lsls	r1, r5
 8001360:	ea26 0101 	bic.w	r1, r6, r1
 8001364:	40ab      	lsls	r3, r5
 8001366:	430b      	orrs	r3, r1
 8001368:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800136a:	f1a0 0310 	sub.w	r3, r0, #16
 800136e:	2b01      	cmp	r3, #1
 8001370:	d925      	bls.n	80013be <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001372:	2000      	movs	r0, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001374:	2300      	movs	r3, #0
 8001376:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 800137a:	b002      	add	sp, #8
 800137c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800137e:	2d0c      	cmp	r5, #12
 8001380:	f04f 051f 	mov.w	r5, #31
 8001384:	d809      	bhi.n	800139a <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001386:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 8001388:	3b23      	subs	r3, #35	@ 0x23
 800138a:	409d      	lsls	r5, r3
 800138c:	ea26 0505 	bic.w	r5, r6, r5
 8001390:	fa00 f303 	lsl.w	r3, r0, r3
 8001394:	432b      	orrs	r3, r5
 8001396:	6313      	str	r3, [r2, #48]	@ 0x30
 8001398:	e7d8      	b.n	800134c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800139a:	6ad6      	ldr	r6, [r2, #44]	@ 0x2c
 800139c:	3b41      	subs	r3, #65	@ 0x41
 800139e:	409d      	lsls	r5, r3
 80013a0:	ea26 0505 	bic.w	r5, r6, r5
 80013a4:	fa00 f303 	lsl.w	r3, r0, r3
 80013a8:	432b      	orrs	r3, r5
 80013aa:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80013ac:	e7ce      	b.n	800134c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80013ae:	6910      	ldr	r0, [r2, #16]
 80013b0:	40a9      	lsls	r1, r5
 80013b2:	ea20 0101 	bic.w	r1, r0, r1
 80013b6:	40ab      	lsls	r3, r5
 80013b8:	430b      	orrs	r3, r1
 80013ba:	6113      	str	r3, [r2, #16]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80013bc:	e7d9      	b.n	8001372 <HAL_ADC_ConfigChannel+0x5e>
    if (hadc->Instance == ADC1)
 80013be:	4b11      	ldr	r3, [pc, #68]	@ (8001404 <HAL_ADC_ConfigChannel+0xf0>)
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d116      	bne.n	80013f2 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80013c4:	6893      	ldr	r3, [r2, #8]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	d4d3      	bmi.n	8001372 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013ca:	6893      	ldr	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013cc:	2810      	cmp	r0, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80013ce:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80013d2:	6093      	str	r3, [r2, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d4:	d1cd      	bne.n	8001372 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013d6:	4b0c      	ldr	r3, [pc, #48]	@ (8001408 <HAL_ADC_ConfigChannel+0xf4>)
 80013d8:	4a0c      	ldr	r2, [pc, #48]	@ (800140c <HAL_ADC_ConfigChannel+0xf8>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80013e0:	220a      	movs	r2, #10
 80013e2:	4353      	muls	r3, r2
            wait_loop_index--;
 80013e4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80013e6:	9b01      	ldr	r3, [sp, #4]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d0c2      	beq.n	8001372 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 80013ec:	9b01      	ldr	r3, [sp, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	e7f8      	b.n	80013e4 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 80013f4:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013f6:	f043 0320 	orr.w	r3, r3, #32
 80013fa:	62a3      	str	r3, [r4, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 80013fc:	e7ba      	b.n	8001374 <HAL_ADC_ConfigChannel+0x60>
  __HAL_LOCK(hadc);
 80013fe:	2002      	movs	r0, #2
 8001400:	e7bb      	b.n	800137a <HAL_ADC_ConfigChannel+0x66>
 8001402:	bf00      	nop
 8001404:	40012400 	.word	0x40012400
 8001408:	20000008 	.word	0x20000008
 800140c:	000f4240 	.word	0x000f4240

08001410 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8001410:	2300      	movs	r3, #0
{
 8001412:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0U;
 8001414:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001416:	6803      	ldr	r3, [r0, #0]
{
 8001418:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	07d2      	lsls	r2, r2, #31
 800141e:	d502      	bpl.n	8001426 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001420:	2000      	movs	r0, #0
}
 8001422:	b003      	add	sp, #12
 8001424:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	f042 0201 	orr.w	r2, r2, #1
 800142c:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800142e:	4b14      	ldr	r3, [pc, #80]	@ (8001480 <ADC_Enable+0x70>)
 8001430:	4a14      	ldr	r2, [pc, #80]	@ (8001484 <ADC_Enable+0x74>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8001438:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 800143a:	9b01      	ldr	r3, [sp, #4]
 800143c:	b9e3      	cbnz	r3, 8001478 <ADC_Enable+0x68>
    tickstart = HAL_GetTick();
 800143e:	f7ff fea9 	bl	8001194 <HAL_GetTick>
 8001442:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001444:	6823      	ldr	r3, [r4, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	07db      	lsls	r3, r3, #31
 800144a:	d4e9      	bmi.n	8001420 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800144c:	f7ff fea2 	bl	8001194 <HAL_GetTick>
 8001450:	1b40      	subs	r0, r0, r5
 8001452:	2802      	cmp	r0, #2
 8001454:	d9f6      	bls.n	8001444 <ADC_Enable+0x34>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f013 0301 	ands.w	r3, r3, #1
 800145e:	d1f1      	bne.n	8001444 <ADC_Enable+0x34>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001460:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8001462:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001464:	f042 0210 	orr.w	r2, r2, #16
 8001468:	62a2      	str	r2, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800146a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 800146c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001470:	f042 0201 	orr.w	r2, r2, #1
 8001474:	62e2      	str	r2, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8001476:	e7d4      	b.n	8001422 <ADC_Enable+0x12>
      wait_loop_index--;
 8001478:	9b01      	ldr	r3, [sp, #4]
 800147a:	3b01      	subs	r3, #1
 800147c:	e7dc      	b.n	8001438 <ADC_Enable+0x28>
 800147e:	bf00      	nop
 8001480:	20000008 	.word	0x20000008
 8001484:	000f4240 	.word	0x000f4240

08001488 <HAL_ADC_Start>:
{
 8001488:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800148a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 800148e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001490:	2b01      	cmp	r3, #1
 8001492:	d054      	beq.n	800153e <HAL_ADC_Start+0xb6>
 8001494:	2301      	movs	r3, #1
 8001496:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_Enable(hadc);
 800149a:	f7ff ffb9 	bl	8001410 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 800149e:	2800      	cmp	r0, #0
 80014a0:	d149      	bne.n	8001536 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 80014a2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014a4:	4a27      	ldr	r2, [pc, #156]	@ (8001544 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 80014a6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80014aa:	f023 0301 	bic.w	r3, r3, #1
 80014ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014b2:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80014b4:	6823      	ldr	r3, [r4, #0]
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d104      	bne.n	80014c4 <HAL_ADC_Start+0x3c>
 80014ba:	4923      	ldr	r1, [pc, #140]	@ (8001548 <HAL_ADC_Start+0xc0>)
 80014bc:	684a      	ldr	r2, [r1, #4]
 80014be:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 80014c2:	d12e      	bne.n	8001522 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80014c4:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80014c6:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 80014ca:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80014cc:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80014ce:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80014d0:	bf41      	itttt	mi
 80014d2:	6aa2      	ldrmi	r2, [r4, #40]	@ 0x28
 80014d4:	f422 5240 	bicmi.w	r2, r2, #12288	@ 0x3000
 80014d8:	f442 5280 	orrmi.w	r2, r2, #4096	@ 0x1000
 80014dc:	62a2      	strmi	r2, [r4, #40]	@ 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80014de:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80014e0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80014e4:	bf1c      	itt	ne
 80014e6:	6ae2      	ldrne	r2, [r4, #44]	@ 0x2c
 80014e8:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80014ec:	62e2      	str	r2, [r4, #44]	@ 0x2c
    __HAL_UNLOCK(hadc);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f884 2024 	strb.w	r2, [r4, #36]	@ 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 80014f4:	f06f 0202 	mvn.w	r2, #2
 80014f8:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80014fa:	689a      	ldr	r2, [r3, #8]
 80014fc:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8001500:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8001504:	d113      	bne.n	800152e <HAL_ADC_Start+0xa6>
 8001506:	4a0f      	ldr	r2, [pc, #60]	@ (8001544 <HAL_ADC_Start+0xbc>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d105      	bne.n	8001518 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800150c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8001510:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001512:	f412 2f70 	tst.w	r2, #983040	@ 0xf0000
 8001516:	d10a      	bne.n	800152e <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001518:	689a      	ldr	r2, [r3, #8]
 800151a:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800151e:	609a      	str	r2, [r3, #8]
}
 8001520:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001522:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001524:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001528:	62a2      	str	r2, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800152a:	684a      	ldr	r2, [r1, #4]
 800152c:	e7cf      	b.n	80014ce <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001534:	e7f3      	b.n	800151e <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8001536:	2300      	movs	r3, #0
 8001538:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800153c:	e7f0      	b.n	8001520 <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 800153e:	2002      	movs	r0, #2
 8001540:	e7ee      	b.n	8001520 <HAL_ADC_Start+0x98>
 8001542:	bf00      	nop
 8001544:	40012800 	.word	0x40012800
 8001548:	40012400 	.word	0x40012400

0800154c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800154c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800154e:	6803      	ldr	r3, [r0, #0]
{
 8001550:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001552:	689a      	ldr	r2, [r3, #8]
 8001554:	07d1      	lsls	r1, r2, #31
 8001556:	d401      	bmi.n	800155c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001558:	2000      	movs	r0, #0
}
 800155a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800155c:	689a      	ldr	r2, [r3, #8]
 800155e:	f022 0201 	bic.w	r2, r2, #1
 8001562:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001564:	f7ff fe16 	bl	8001194 <HAL_GetTick>
 8001568:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800156a:	6823      	ldr	r3, [r4, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	07db      	lsls	r3, r3, #31
 8001570:	d5f2      	bpl.n	8001558 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001572:	f7ff fe0f 	bl	8001194 <HAL_GetTick>
 8001576:	1b40      	subs	r0, r0, r5
 8001578:	2802      	cmp	r0, #2
 800157a:	d9f6      	bls.n	800156a <ADC_ConversionStop_Disable+0x1e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 800157c:	6823      	ldr	r3, [r4, #0]
 800157e:	689b      	ldr	r3, [r3, #8]
 8001580:	07da      	lsls	r2, r3, #31
 8001582:	d5f2      	bpl.n	800156a <ADC_ConversionStop_Disable+0x1e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001584:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8001586:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001588:	f043 0310 	orr.w	r3, r3, #16
 800158c:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8001596:	e7e0      	b.n	800155a <ADC_ConversionStop_Disable+0xe>

08001598 <HAL_ADC_Init>:
{
 8001598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(hadc == NULL)
 800159a:	4604      	mov	r4, r0
 800159c:	2800      	cmp	r0, #0
 800159e:	d06d      	beq.n	800167c <HAL_ADC_Init+0xe4>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80015a0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80015a2:	b923      	cbnz	r3, 80015ae <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80015a4:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80015a6:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 80015aa:	f7ff fcd3 	bl	8000f54 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80015ae:	4620      	mov	r0, r4
 80015b0:	f7ff ffcc 	bl	800154c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015b4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80015b6:	f013 0310 	ands.w	r3, r3, #16
 80015ba:	d161      	bne.n	8001680 <HAL_ADC_Init+0xe8>
 80015bc:	2800      	cmp	r0, #0
 80015be:	d15f      	bne.n	8001680 <HAL_ADC_Init+0xe8>
    ADC_STATE_CLR_SET(hadc->State,
 80015c0:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015c2:	6861      	ldr	r1, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80015c4:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 80015c8:	f022 0202 	bic.w	r2, r2, #2
 80015cc:	f042 0202 	orr.w	r2, r2, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015d0:	69e5      	ldr	r5, [r4, #28]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015d2:	68a6      	ldr	r6, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80015d4:	62a2      	str	r2, [r4, #40]	@ 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 80015d6:	7b22      	ldrb	r2, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 80015d8:	4329      	orrs	r1, r5
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015da:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 80015de:	ea41 0142 	orr.w	r1, r1, r2, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80015e2:	d036      	beq.n	8001652 <HAL_ADC_Init+0xba>
 80015e4:	1e77      	subs	r7, r6, #1
 80015e6:	427d      	negs	r5, r7
 80015e8:	417d      	adcs	r5, r7
 80015ea:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80015ec:	7d27      	ldrb	r7, [r4, #20]
 80015ee:	2f01      	cmp	r7, #1
 80015f0:	d106      	bne.n	8001600 <HAL_ADC_Init+0x68>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80015f2:	bb82      	cbnz	r2, 8001656 <HAL_ADC_Init+0xbe>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80015f4:	69a2      	ldr	r2, [r4, #24]
 80015f6:	3a01      	subs	r2, #1
 80015f8:	ea45 3242 	orr.w	r2, r5, r2, lsl #13
 80015fc:	f442 6500 	orr.w	r5, r2, #2048	@ 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8001600:	6822      	ldr	r2, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001602:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8001606:	6857      	ldr	r7, [r2, #4]
 8001608:	f427 4769 	bic.w	r7, r7, #59648	@ 0xe900
 800160c:	ea45 0507 	orr.w	r5, r5, r7
 8001610:	6055      	str	r5, [r2, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001612:	6897      	ldr	r7, [r2, #8]
 8001614:	4d1d      	ldr	r5, [pc, #116]	@ (800168c <HAL_ADC_Init+0xf4>)
 8001616:	ea05 0507 	and.w	r5, r5, r7
 800161a:	ea45 0501 	orr.w	r5, r5, r1
 800161e:	6095      	str	r5, [r2, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001620:	d001      	beq.n	8001626 <HAL_ADC_Init+0x8e>
 8001622:	2e01      	cmp	r6, #1
 8001624:	d102      	bne.n	800162c <HAL_ADC_Init+0x94>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001626:	6923      	ldr	r3, [r4, #16]
 8001628:	3b01      	subs	r3, #1
 800162a:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 800162c:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800162e:	f425 0570 	bic.w	r5, r5, #15728640	@ 0xf00000
 8001632:	432b      	orrs	r3, r5
 8001634:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001636:	6892      	ldr	r2, [r2, #8]
 8001638:	4b15      	ldr	r3, [pc, #84]	@ (8001690 <HAL_ADC_Init+0xf8>)
 800163a:	4013      	ands	r3, r2
 800163c:	4299      	cmp	r1, r3
 800163e:	d113      	bne.n	8001668 <HAL_ADC_Init+0xd0>
      ADC_CLEAR_ERRORCODE(hadc);
 8001640:	2300      	movs	r3, #0
 8001642:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001644:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001646:	f023 0303 	bic.w	r3, r3, #3
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8001650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001652:	4635      	mov	r5, r6
 8001654:	e7ca      	b.n	80015ec <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001656:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001658:	f042 0220 	orr.w	r2, r2, #32
 800165c:	62a2      	str	r2, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800165e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8001660:	f042 0201 	orr.w	r2, r2, #1
 8001664:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8001666:	e7cb      	b.n	8001600 <HAL_ADC_Init+0x68>
      ADC_STATE_CLR_SET(hadc->State,
 8001668:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800166a:	f023 0312 	bic.w	r3, r3, #18
 800166e:	f043 0310 	orr.w	r3, r3, #16
 8001672:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001674:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001676:	f043 0301 	orr.w	r3, r3, #1
 800167a:	62e3      	str	r3, [r4, #44]	@ 0x2c
    return HAL_ERROR;
 800167c:	2001      	movs	r0, #1
 800167e:	e7e7      	b.n	8001650 <HAL_ADC_Init+0xb8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001680:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001682:	f043 0310 	orr.w	r3, r3, #16
 8001686:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8001688:	e7f8      	b.n	800167c <HAL_ADC_Init+0xe4>
 800168a:	bf00      	nop
 800168c:	ffe1f7fd 	.word	0xffe1f7fd
 8001690:	ff1f0efe 	.word	0xff1f0efe

08001694 <HAL_ADC_Stop>:
{
 8001694:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001696:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 800169a:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800169c:	2b01      	cmp	r3, #1
 800169e:	d011      	beq.n	80016c4 <HAL_ADC_Stop+0x30>
 80016a0:	2301      	movs	r3, #1
 80016a2:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016a6:	f7ff ff51 	bl	800154c <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 80016aa:	b938      	cbnz	r0, 80016bc <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 80016ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80016ae:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	62a3      	str	r3, [r4, #40]	@ 0x28
  __HAL_UNLOCK(hadc);
 80016bc:	2300      	movs	r3, #0
 80016be:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 80016c2:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80016c4:	2002      	movs	r0, #2
 80016c6:	e7fc      	b.n	80016c2 <HAL_ADC_Stop+0x2e>

080016c8 <HAL_ADCEx_Calibration_Start>:
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 80016c8:	2300      	movs	r3, #0
{
 80016ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80016cc:	9301      	str	r3, [sp, #4]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80016ce:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 80016d2:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d062      	beq.n	800179e <HAL_ADCEx_Calibration_Start+0xd6>
 80016d8:	2301      	movs	r3, #1
 80016da:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80016de:	f7ff ff35 	bl	800154c <ADC_ConversionStop_Disable>
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 80016e2:	4620      	mov	r0, r4
 80016e4:	f7ff fe94 	bl	8001410 <ADC_Enable>

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 80016e8:	4605      	mov	r5, r0
 80016ea:	2800      	cmp	r0, #0
 80016ec:	d12f      	bne.n	800174e <HAL_ADCEx_Calibration_Start+0x86>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 80016ee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80016f0:	2002      	movs	r0, #2
     ADC_STATE_CLR_SET(hadc->State,
 80016f2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016f6:	f023 0302 	bic.w	r3, r3, #2
 80016fa:	f043 0302 	orr.w	r3, r3, #2
 80016fe:	62a3      	str	r3, [r4, #40]	@ 0x28
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001700:	4b28      	ldr	r3, [pc, #160]	@ (80017a4 <HAL_ADCEx_Calibration_Start+0xdc>)
 8001702:	681e      	ldr	r6, [r3, #0]
 8001704:	f000 fefc 	bl	8002500 <HAL_RCCEx_GetPeriphCLKFreq>
 8001708:	fbb6 f6f0 	udiv	r6, r6, r0
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 800170c:	0076      	lsls	r6, r6, #1
    wait_loop_index = ((SystemCoreClock
 800170e:	9601      	str	r6, [sp, #4]

    while(wait_loop_index != 0U)
 8001710:	9b01      	ldr	r3, [sp, #4]
 8001712:	bb03      	cbnz	r3, 8001756 <HAL_ADCEx_Calibration_Start+0x8e>
    {
      wait_loop_index--;
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8001714:	6822      	ldr	r2, [r4, #0]
 8001716:	6893      	ldr	r3, [r2, #8]
 8001718:	f043 0308 	orr.w	r3, r3, #8
 800171c:	6093      	str	r3, [r2, #8]
    
    tickstart = HAL_GetTick();  
 800171e:	f7ff fd39 	bl	8001194 <HAL_GetTick>
 8001722:	4606      	mov	r6, r0

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001724:	6823      	ldr	r3, [r4, #0]
 8001726:	689a      	ldr	r2, [r3, #8]
 8001728:	0711      	lsls	r1, r2, #28
 800172a:	d418      	bmi.n	800175e <HAL_ADCEx_Calibration_Start+0x96>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800172c:	689a      	ldr	r2, [r3, #8]
 800172e:	f042 0204 	orr.w	r2, r2, #4
 8001732:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8001734:	f7ff fd2e 	bl	8001194 <HAL_GetTick>
 8001738:	4606      	mov	r6, r0

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800173a:	6823      	ldr	r3, [r4, #0]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	075b      	lsls	r3, r3, #29
 8001740:	d423      	bmi.n	800178a <HAL_ADCEx_Calibration_Start+0xc2>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001742:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001744:	f023 0303 	bic.w	r3, r3, #3
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	62a3      	str	r3, [r4, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800174e:	2300      	movs	r3, #0
 8001750:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001754:	e016      	b.n	8001784 <HAL_ADCEx_Calibration_Start+0xbc>
      wait_loop_index--;
 8001756:	9b01      	ldr	r3, [sp, #4]
 8001758:	3b01      	subs	r3, #1
 800175a:	9301      	str	r3, [sp, #4]
 800175c:	e7d8      	b.n	8001710 <HAL_ADCEx_Calibration_Start+0x48>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800175e:	f7ff fd19 	bl	8001194 <HAL_GetTick>
 8001762:	1b80      	subs	r0, r0, r6
 8001764:	280a      	cmp	r0, #10
 8001766:	d9dd      	bls.n	8001724 <HAL_ADCEx_Calibration_Start+0x5c>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	0718      	lsls	r0, r3, #28
 800176e:	d5d9      	bpl.n	8001724 <HAL_ADCEx_Calibration_Start+0x5c>
          ADC_STATE_CLR_SET(hadc->State,
 8001770:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
          return HAL_ERROR;
 8001772:	2501      	movs	r5, #1
          ADC_STATE_CLR_SET(hadc->State,
 8001774:	f023 0312 	bic.w	r3, r3, #18
 8001778:	f043 0310 	orr.w	r3, r3, #16
 800177c:	62a3      	str	r3, [r4, #40]	@ 0x28
          __HAL_UNLOCK(hadc);
 800177e:	2300      	movs	r3, #0
 8001780:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
}
 8001784:	4628      	mov	r0, r5
 8001786:	b002      	add	sp, #8
 8001788:	bd70      	pop	{r4, r5, r6, pc}
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 800178a:	f7ff fd03 	bl	8001194 <HAL_GetTick>
 800178e:	1b80      	subs	r0, r0, r6
 8001790:	280a      	cmp	r0, #10
 8001792:	d9d2      	bls.n	800173a <HAL_ADCEx_Calibration_Start+0x72>
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001794:	6823      	ldr	r3, [r4, #0]
 8001796:	689b      	ldr	r3, [r3, #8]
 8001798:	075a      	lsls	r2, r3, #29
 800179a:	d5ce      	bpl.n	800173a <HAL_ADCEx_Calibration_Start+0x72>
 800179c:	e7e8      	b.n	8001770 <HAL_ADCEx_Calibration_Start+0xa8>
  __HAL_LOCK(hadc);
 800179e:	2502      	movs	r5, #2
 80017a0:	e7f0      	b.n	8001784 <HAL_ADCEx_Calibration_Start+0xbc>
 80017a2:	bf00      	nop
 80017a4:	20000008 	.word	0x20000008

080017a8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a8:	4907      	ldr	r1, [pc, #28]	@ (80017c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017aa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ac:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80017ae:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80017b6:	0412      	lsls	r2, r2, #16
 80017b8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80017c4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80017c6:	4770      	bx	lr
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017cc:	4b15      	ldr	r3, [pc, #84]	@ (8001824 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ce:	b530      	push	{r4, r5, lr}
 80017d0:	68dc      	ldr	r4, [r3, #12]
 80017d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017da:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017dc:	2b04      	cmp	r3, #4
 80017de:	bf28      	it	cs
 80017e0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e2:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e8:	bf94      	ite	ls
 80017ea:	2400      	movls	r4, #0
 80017ec:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ee:	fa05 f303 	lsl.w	r3, r5, r3
 80017f2:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f6:	40a5      	lsls	r5, r4
 80017f8:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017fc:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 80017fe:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001800:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001804:	bfac      	ite	ge
 8001806:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180a:	4a07      	ldrlt	r2, [pc, #28]	@ (8001828 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001810:	b2db      	uxtb	r3, r3
 8001812:	bfab      	itete	ge
 8001814:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800181c:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001820:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001822:	bd30      	pop	{r4, r5, pc}
 8001824:	e000ed00 	.word	0xe000ed00
 8001828:	e000ed14 	.word	0xe000ed14

0800182c <HAL_SYSTICK_Config>:
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800182c:	3801      	subs	r0, #1
 800182e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001832:	d20b      	bcs.n	800184c <HAL_SYSTICK_Config+0x20>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001834:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	21f0      	movs	r1, #240	@ 0xf0
 800183a:	4a05      	ldr	r2, [pc, #20]	@ (8001850 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800183e:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001842:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001844:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001846:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001848:	611a      	str	r2, [r3, #16]
  return (0UL);                                                     /* Function successful */
 800184a:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800184c:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800184e:	4770      	bx	lr
 8001850:	e000ed00 	.word	0xe000ed00

08001854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001854:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001858:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800185a:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800185c:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 80019dc <HAL_GPIO_Init+0x188>
 8001860:	4b5f      	ldr	r3, [pc, #380]	@ (80019e0 <HAL_GPIO_Init+0x18c>)
      switch (GPIO_Init->Mode)
 8001862:	f8df e180 	ldr.w	lr, [pc, #384]	@ 80019e4 <HAL_GPIO_Init+0x190>
 8001866:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 80019e8 <HAL_GPIO_Init+0x194>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800186a:	680d      	ldr	r5, [r1, #0]
 800186c:	fa35 f406 	lsrs.w	r4, r5, r6
 8001870:	d102      	bne.n	8001878 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8001872:	b003      	add	sp, #12
 8001874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8001878:	2701      	movs	r7, #1
 800187a:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800187c:	ea05 0407 	and.w	r4, r5, r7
    if (iocurrent == ioposition)
 8001880:	ea37 0505 	bics.w	r5, r7, r5
 8001884:	d175      	bne.n	8001972 <HAL_GPIO_Init+0x11e>
      switch (GPIO_Init->Mode)
 8001886:	684d      	ldr	r5, [r1, #4]
 8001888:	2d03      	cmp	r5, #3
 800188a:	d806      	bhi.n	800189a <HAL_GPIO_Init+0x46>
 800188c:	3d01      	subs	r5, #1
 800188e:	2d02      	cmp	r5, #2
 8001890:	d87e      	bhi.n	8001990 <HAL_GPIO_Init+0x13c>
 8001892:	e8df f005 	tbb	[pc, r5]
 8001896:	948f      	.short	0x948f
 8001898:	9a          	.byte	0x9a
 8001899:	00          	.byte	0x00
 800189a:	2d12      	cmp	r5, #18
 800189c:	f000 8092 	beq.w	80019c4 <HAL_GPIO_Init+0x170>
 80018a0:	d869      	bhi.n	8001976 <HAL_GPIO_Init+0x122>
 80018a2:	2d11      	cmp	r5, #17
 80018a4:	f000 8088 	beq.w	80019b8 <HAL_GPIO_Init+0x164>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018a8:	2cff      	cmp	r4, #255	@ 0xff
 80018aa:	bf98      	it	ls
 80018ac:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018ae:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018b2:	bf88      	it	hi
 80018b4:	f100 0904 	addhi.w	r9, r0, #4
 80018b8:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018bc:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018c0:	bf88      	it	hi
 80018c2:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018c4:	fa0b fa05 	lsl.w	sl, fp, r5
 80018c8:	ea27 070a 	bic.w	r7, r7, sl
 80018cc:	fa02 f505 	lsl.w	r5, r2, r5
 80018d0:	432f      	orrs	r7, r5
 80018d2:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018d6:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80018da:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 80018de:	d048      	beq.n	8001972 <HAL_GPIO_Init+0x11e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018e0:	f8dc 5018 	ldr.w	r5, [ip, #24]
 80018e4:	f026 0703 	bic.w	r7, r6, #3
 80018e8:	f045 0501 	orr.w	r5, r5, #1
 80018ec:	f8cc 5018 	str.w	r5, [ip, #24]
 80018f0:	f8dc 5018 	ldr.w	r5, [ip, #24]
 80018f4:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80018f8:	f005 0501 	and.w	r5, r5, #1
 80018fc:	9501      	str	r5, [sp, #4]
 80018fe:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001902:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001906:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001908:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 800190c:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800190e:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001912:	ea25 0b0b 	bic.w	fp, r5, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001916:	4d35      	ldr	r5, [pc, #212]	@ (80019ec <HAL_GPIO_Init+0x198>)
 8001918:	42a8      	cmp	r0, r5
 800191a:	d05a      	beq.n	80019d2 <HAL_GPIO_Init+0x17e>
 800191c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001920:	42a8      	cmp	r0, r5
 8001922:	d058      	beq.n	80019d6 <HAL_GPIO_Init+0x182>
 8001924:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001928:	42a8      	cmp	r0, r5
 800192a:	bf14      	ite	ne
 800192c:	2503      	movne	r5, #3
 800192e:	2502      	moveq	r5, #2
 8001930:	fa05 f50a 	lsl.w	r5, r5, sl
 8001934:	ea45 050b 	orr.w	r5, r5, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8001938:	60bd      	str	r5, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 800193a:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800193c:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001940:	bf14      	ite	ne
 8001942:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001944:	43a5      	biceq	r5, r4
 8001946:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001948:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800194a:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800194e:	bf14      	ite	ne
 8001950:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001952:	43a5      	biceq	r5, r4
 8001954:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8001956:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001958:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 800195c:	bf14      	ite	ne
 800195e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001960:	43a5      	biceq	r5, r4
 8001962:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8001964:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001966:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800196a:	bf14      	ite	ne
 800196c:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800196e:	43a5      	biceq	r5, r4
 8001970:	601d      	str	r5, [r3, #0]
	position++;
 8001972:	3601      	adds	r6, #1
 8001974:	e779      	b.n	800186a <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 8001976:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 80019f0 <HAL_GPIO_Init+0x19c>
 800197a:	454d      	cmp	r5, r9
 800197c:	d008      	beq.n	8001990 <HAL_GPIO_Init+0x13c>
 800197e:	d811      	bhi.n	80019a4 <HAL_GPIO_Init+0x150>
 8001980:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8001984:	454d      	cmp	r5, r9
 8001986:	d003      	beq.n	8001990 <HAL_GPIO_Init+0x13c>
 8001988:	4575      	cmp	r5, lr
 800198a:	d001      	beq.n	8001990 <HAL_GPIO_Init+0x13c>
 800198c:	4545      	cmp	r5, r8
 800198e:	d18b      	bne.n	80018a8 <HAL_GPIO_Init+0x54>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001990:	688a      	ldr	r2, [r1, #8]
 8001992:	b1e2      	cbz	r2, 80019ce <HAL_GPIO_Init+0x17a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001994:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8001996:	bf08      	it	eq
 8001998:	6107      	streq	r7, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800199a:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 800199e:	bf18      	it	ne
 80019a0:	6147      	strne	r7, [r0, #20]
 80019a2:	e781      	b.n	80018a8 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 80019a4:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 80019f4 <HAL_GPIO_Init+0x1a0>
 80019a8:	454d      	cmp	r5, r9
 80019aa:	d0f1      	beq.n	8001990 <HAL_GPIO_Init+0x13c>
 80019ac:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 80019b0:	454d      	cmp	r5, r9
 80019b2:	e7ec      	b.n	800198e <HAL_GPIO_Init+0x13a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80019b4:	68ca      	ldr	r2, [r1, #12]
          break;
 80019b6:	e777      	b.n	80018a8 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80019b8:	68ca      	ldr	r2, [r1, #12]
 80019ba:	3204      	adds	r2, #4
          break;
 80019bc:	e774      	b.n	80018a8 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019be:	68ca      	ldr	r2, [r1, #12]
 80019c0:	3208      	adds	r2, #8
          break;
 80019c2:	e771      	b.n	80018a8 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019c4:	68ca      	ldr	r2, [r1, #12]
 80019c6:	320c      	adds	r2, #12
          break;
 80019c8:	e76e      	b.n	80018a8 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 80019ca:	2200      	movs	r2, #0
 80019cc:	e76c      	b.n	80018a8 <HAL_GPIO_Init+0x54>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019ce:	2204      	movs	r2, #4
 80019d0:	e76a      	b.n	80018a8 <HAL_GPIO_Init+0x54>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019d2:	2500      	movs	r5, #0
 80019d4:	e7ac      	b.n	8001930 <HAL_GPIO_Init+0xdc>
 80019d6:	2501      	movs	r5, #1
 80019d8:	e7aa      	b.n	8001930 <HAL_GPIO_Init+0xdc>
 80019da:	bf00      	nop
 80019dc:	40021000 	.word	0x40021000
 80019e0:	40010400 	.word	0x40010400
 80019e4:	10210000 	.word	0x10210000
 80019e8:	10110000 	.word	0x10110000
 80019ec:	40010800 	.word	0x40010800
 80019f0:	10220000 	.word	0x10220000
 80019f4:	10310000 	.word	0x10310000

080019f8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80019f8:	6883      	ldr	r3, [r0, #8]
 80019fa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80019fc:	bf14      	ite	ne
 80019fe:	2001      	movne	r0, #1
 8001a00:	2000      	moveq	r0, #0
 8001a02:	4770      	bx	lr

08001a04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a04:	b10a      	cbz	r2, 8001a0a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a06:	6101      	str	r1, [r0, #16]
  }
}
 8001a08:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001a0a:	0409      	lsls	r1, r1, #16
 8001a0c:	e7fb      	b.n	8001a06 <HAL_GPIO_WritePin+0x2>

08001a0e <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001a0e:	6801      	ldr	r1, [r0, #0]
 8001a10:	2200      	movs	r2, #0
 8001a12:	694b      	ldr	r3, [r1, #20]
 8001a14:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8001a18:	d010      	beq.n	8001a3c <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a1a:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8001a1e:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a20:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001a22:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001a24:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a28:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a2c:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a2e:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001a32:	f043 0304 	orr.w	r3, r3, #4
 8001a36:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8001a38:	2001      	movs	r0, #1
 8001a3a:	4770      	bx	lr
  }
  return HAL_OK;
 8001a3c:	4618      	mov	r0, r3
}
 8001a3e:	4770      	bx	lr

08001a40 <I2C_WaitOnFlagUntilTimeout>:
{
 8001a40:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8001a44:	4606      	mov	r6, r0
 8001a46:	460f      	mov	r7, r1
 8001a48:	4691      	mov	r9, r2
 8001a4a:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a4c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8001a50:	6833      	ldr	r3, [r6, #0]
 8001a52:	f1ba 0f01 	cmp.w	sl, #1
 8001a56:	bf0c      	ite	eq
 8001a58:	695c      	ldreq	r4, [r3, #20]
 8001a5a:	699c      	ldrne	r4, [r3, #24]
 8001a5c:	ea27 0404 	bic.w	r4, r7, r4
 8001a60:	b2a4      	uxth	r4, r4
 8001a62:	fab4 f484 	clz	r4, r4
 8001a66:	0964      	lsrs	r4, r4, #5
 8001a68:	45a1      	cmp	r9, r4
 8001a6a:	d001      	beq.n	8001a70 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	e025      	b.n	8001abc <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8001a70:	1c6a      	adds	r2, r5, #1
 8001a72:	d0ee      	beq.n	8001a52 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a74:	f7ff fb8e 	bl	8001194 <HAL_GetTick>
 8001a78:	9b08      	ldr	r3, [sp, #32]
 8001a7a:	1ac0      	subs	r0, r0, r3
 8001a7c:	42a8      	cmp	r0, r5
 8001a7e:	d801      	bhi.n	8001a84 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001a80:	2d00      	cmp	r5, #0
 8001a82:	d1e5      	bne.n	8001a50 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001a84:	6833      	ldr	r3, [r6, #0]
 8001a86:	f1ba 0f01 	cmp.w	sl, #1
 8001a8a:	bf0c      	ite	eq
 8001a8c:	695b      	ldreq	r3, [r3, #20]
 8001a8e:	699b      	ldrne	r3, [r3, #24]
 8001a90:	ea27 0303 	bic.w	r3, r7, r3
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	fab3 f383 	clz	r3, r3
 8001a9a:	095b      	lsrs	r3, r3, #5
 8001a9c:	4599      	cmp	r9, r3
 8001a9e:	d1d7      	bne.n	8001a50 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001aa0:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8001aa2:	2220      	movs	r2, #32
          return HAL_ERROR;
 8001aa4:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001aa6:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001aa8:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001aac:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ab0:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001ab2:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ab6:	f042 0220 	orr.w	r2, r2, #32
 8001aba:	6432      	str	r2, [r6, #64]	@ 0x40
}
 8001abc:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08001ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	460f      	mov	r7, r1
 8001ac8:	4616      	mov	r6, r2
 8001aca:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001acc:	6825      	ldr	r5, [r4, #0]
 8001ace:	6968      	ldr	r0, [r5, #20]
 8001ad0:	ea27 0000 	bic.w	r0, r7, r0
 8001ad4:	b280      	uxth	r0, r0
 8001ad6:	b1c0      	cbz	r0, 8001b0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ad8:	696b      	ldr	r3, [r5, #20]
 8001ada:	055a      	lsls	r2, r3, #21
 8001adc:	d517      	bpl.n	8001b0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ade:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ae0:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ae2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ae6:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ae8:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8001aec:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001af2:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001af6:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001afa:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001afc:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b00:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001b02:	2300      	movs	r3, #0
      return HAL_ERROR;
 8001b04:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8001b06:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001b0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001b0e:	1c73      	adds	r3, r6, #1
 8001b10:	d0dd      	beq.n	8001ace <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b12:	f7ff fb3f 	bl	8001194 <HAL_GetTick>
 8001b16:	eba0 0008 	sub.w	r0, r0, r8
 8001b1a:	42b0      	cmp	r0, r6
 8001b1c:	d801      	bhi.n	8001b22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 8001b1e:	2e00      	cmp	r6, #0
 8001b20:	d1d4      	bne.n	8001acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001b22:	6823      	ldr	r3, [r4, #0]
 8001b24:	695a      	ldr	r2, [r3, #20]
 8001b26:	ea27 0202 	bic.w	r2, r7, r2
 8001b2a:	b292      	uxth	r2, r2
 8001b2c:	2a00      	cmp	r2, #0
 8001b2e:	d0cd      	beq.n	8001acc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b30:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b32:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b34:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b36:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b3a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b3e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001b40:	4313      	orrs	r3, r2
 8001b42:	e7dd      	b.n	8001b00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08001b44 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001b44:	b570      	push	{r4, r5, r6, lr}
 8001b46:	4604      	mov	r4, r0
 8001b48:	460d      	mov	r5, r1
 8001b4a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b4c:	6823      	ldr	r3, [r4, #0]
 8001b4e:	695b      	ldr	r3, [r3, #20]
 8001b50:	061b      	lsls	r3, r3, #24
 8001b52:	d501      	bpl.n	8001b58 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001b54:	2000      	movs	r0, #0
 8001b56:	e01e      	b.n	8001b96 <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b58:	4620      	mov	r0, r4
 8001b5a:	f7ff ff58 	bl	8001a0e <I2C_IsAcknowledgeFailed>
 8001b5e:	b9c8      	cbnz	r0, 8001b94 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001b60:	1c6a      	adds	r2, r5, #1
 8001b62:	d0f3      	beq.n	8001b4c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b64:	f7ff fb16 	bl	8001194 <HAL_GetTick>
 8001b68:	1b80      	subs	r0, r0, r6
 8001b6a:	42a8      	cmp	r0, r5
 8001b6c:	d801      	bhi.n	8001b72 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001b6e:	2d00      	cmp	r5, #0
 8001b70:	d1ec      	bne.n	8001b4c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001b72:	6823      	ldr	r3, [r4, #0]
 8001b74:	695b      	ldr	r3, [r3, #20]
 8001b76:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 8001b7a:	d1e7      	bne.n	8001b4c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b7c:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b7e:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b80:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b84:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b88:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001b8a:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b8e:	f042 0220 	orr.w	r2, r2, #32
 8001b92:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8001b94:	2001      	movs	r0, #1
}
 8001b96:	bd70      	pop	{r4, r5, r6, pc}

08001b98 <I2C_RequestMemoryWrite>:
{
 8001b98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001b9c:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001b9e:	6802      	ldr	r2, [r0, #0]
{
 8001ba0:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ba2:	6813      	ldr	r3, [r2, #0]
{
 8001ba4:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ba6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001baa:	6013      	str	r3, [r2, #0]
{
 8001bac:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 8001bb0:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bb2:	463b      	mov	r3, r7
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8001bba:	f8cd 8000 	str.w	r8, [sp]
{
 8001bbe:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001bc0:	f7ff ff3e 	bl	8001a40 <I2C_WaitOnFlagUntilTimeout>
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	b138      	cbz	r0, 8001bd8 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	05db      	lsls	r3, r3, #23
 8001bcc:	d502      	bpl.n	8001bd4 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001bce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001bd2:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8001bd4:	2603      	movs	r6, #3
 8001bd6:	e020      	b.n	8001c1a <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001bd8:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8001bdc:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001bde:	463a      	mov	r2, r7
 8001be0:	4643      	mov	r3, r8
 8001be2:	4620      	mov	r0, r4
 8001be4:	4918      	ldr	r1, [pc, #96]	@ (8001c48 <I2C_RequestMemoryWrite+0xb0>)
 8001be6:	f7ff ff6b 	bl	8001ac0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001bea:	b9a8      	cbnz	r0, 8001c18 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	9003      	str	r0, [sp, #12]
 8001bf0:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bf2:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bf4:	9203      	str	r2, [sp, #12]
 8001bf6:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bf8:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bfa:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001bfc:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001bfe:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c00:	f7ff ffa0 	bl	8001b44 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c04:	4606      	mov	r6, r0
 8001c06:	b160      	cbz	r0, 8001c22 <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c0a:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c0c:	bf01      	itttt	eq
 8001c0e:	6822      	ldreq	r2, [r4, #0]
 8001c10:	6813      	ldreq	r3, [r2, #0]
 8001c12:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8001c16:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8001c18:	2601      	movs	r6, #1
}
 8001c1a:	4630      	mov	r0, r6
 8001c1c:	b005      	add	sp, #20
 8001c1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c22:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c26:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001c28:	d102      	bne.n	8001c30 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c2a:	b2ed      	uxtb	r5, r5
 8001c2c:	611d      	str	r5, [r3, #16]
 8001c2e:	e7f4      	b.n	8001c1a <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001c30:	0a2a      	lsrs	r2, r5, #8
 8001c32:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c34:	4639      	mov	r1, r7
 8001c36:	4642      	mov	r2, r8
 8001c38:	4620      	mov	r0, r4
 8001c3a:	f7ff ff83 	bl	8001b44 <I2C_WaitOnTXEFlagUntilTimeout>
 8001c3e:	2800      	cmp	r0, #0
 8001c40:	d1e2      	bne.n	8001c08 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001c42:	6823      	ldr	r3, [r4, #0]
 8001c44:	e7f1      	b.n	8001c2a <I2C_RequestMemoryWrite+0x92>
 8001c46:	bf00      	nop
 8001c48:	00010002 	.word	0x00010002

08001c4c <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001c4c:	b570      	push	{r4, r5, r6, lr}
 8001c4e:	4604      	mov	r4, r0
 8001c50:	460d      	mov	r5, r1
 8001c52:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	695b      	ldr	r3, [r3, #20]
 8001c58:	075b      	lsls	r3, r3, #29
 8001c5a:	d501      	bpl.n	8001c60 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001c5c:	2000      	movs	r0, #0
 8001c5e:	e01e      	b.n	8001c9e <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c60:	4620      	mov	r0, r4
 8001c62:	f7ff fed4 	bl	8001a0e <I2C_IsAcknowledgeFailed>
 8001c66:	b9c8      	cbnz	r0, 8001c9c <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001c68:	1c6a      	adds	r2, r5, #1
 8001c6a:	d0f3      	beq.n	8001c54 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c6c:	f7ff fa92 	bl	8001194 <HAL_GetTick>
 8001c70:	1b80      	subs	r0, r0, r6
 8001c72:	42a8      	cmp	r0, r5
 8001c74:	d801      	bhi.n	8001c7a <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8001c76:	2d00      	cmp	r5, #0
 8001c78:	d1ec      	bne.n	8001c54 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	f013 0304 	ands.w	r3, r3, #4
 8001c82:	d1e7      	bne.n	8001c54 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c84:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001c86:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001c88:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c8c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c90:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001c92:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c96:	f042 0220 	orr.w	r2, r2, #32
 8001c9a:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8001c9c:	2001      	movs	r0, #1
}
 8001c9e:	bd70      	pop	{r4, r5, r6, pc}

08001ca0 <HAL_I2C_Init>:
{
 8001ca0:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	b908      	cbnz	r0, 8001caa <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8001ca6:	2001      	movs	r0, #1
}
 8001ca8:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001caa:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001cae:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001cb2:	b91b      	cbnz	r3, 8001cbc <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001cb4:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 8001cb8:	f7ff f97a 	bl	8000fb0 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cbc:	2324      	movs	r3, #36	@ 0x24
 8001cbe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001cc2:	6823      	ldr	r3, [r4, #0]
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	f022 0201 	bic.w	r2, r2, #1
 8001cca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001cd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001cda:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001cdc:	f000 fb76 	bl	80023cc <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ce0:	4b3f      	ldr	r3, [pc, #252]	@ (8001de0 <HAL_I2C_Init+0x140>)
 8001ce2:	6865      	ldr	r5, [r4, #4]
 8001ce4:	429d      	cmp	r5, r3
 8001ce6:	bf94      	ite	ls
 8001ce8:	4b3e      	ldrls	r3, [pc, #248]	@ (8001de4 <HAL_I2C_Init+0x144>)
 8001cea:	4b3f      	ldrhi	r3, [pc, #252]	@ (8001de8 <HAL_I2C_Init+0x148>)
 8001cec:	4298      	cmp	r0, r3
 8001cee:	bf8c      	ite	hi
 8001cf0:	2300      	movhi	r3, #0
 8001cf2:	2301      	movls	r3, #1
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d1d6      	bne.n	8001ca6 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cf8:	4e39      	ldr	r6, [pc, #228]	@ (8001de0 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001cfa:	4b3c      	ldr	r3, [pc, #240]	@ (8001dec <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001cfc:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 8001cfe:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d02:	bf88      	it	hi
 8001d04:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d08:	6822      	ldr	r2, [r4, #0]
 8001d0a:	6851      	ldr	r1, [r2, #4]
 8001d0c:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8001d10:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d14:	bf82      	ittt	hi
 8001d16:	4373      	mulhi	r3, r6
 8001d18:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8001d1c:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d20:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d22:	6a11      	ldr	r1, [r2, #32]
 8001d24:	3301      	adds	r3, #1
 8001d26:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8001d2a:	430b      	orrs	r3, r1
 8001d2c:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001d2e:	69d1      	ldr	r1, [r2, #28]
 8001d30:	1e43      	subs	r3, r0, #1
 8001d32:	482b      	ldr	r0, [pc, #172]	@ (8001de0 <HAL_I2C_Init+0x140>)
 8001d34:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8001d38:	4285      	cmp	r5, r0
 8001d3a:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8001d3e:	d832      	bhi.n	8001da6 <HAL_I2C_Init+0x106>
 8001d40:	006d      	lsls	r5, r5, #1
 8001d42:	fbb3 f3f5 	udiv	r3, r3, r5
 8001d46:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	4203      	tst	r3, r0
 8001d4e:	d042      	beq.n	8001dd6 <HAL_I2C_Init+0x136>
 8001d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d54:	4319      	orrs	r1, r3
 8001d56:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001d58:	6811      	ldr	r1, [r2, #0]
 8001d5a:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8001d5e:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8001d62:	4303      	orrs	r3, r0
 8001d64:	430b      	orrs	r3, r1
 8001d66:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001d68:	6891      	ldr	r1, [r2, #8]
 8001d6a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8001d6e:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8001d72:	4303      	orrs	r3, r0
 8001d74:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8001d78:	430b      	orrs	r3, r1
 8001d7a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001d7c:	68d1      	ldr	r1, [r2, #12]
 8001d7e:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8001d82:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8001d86:	4303      	orrs	r3, r0
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001d8c:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d8e:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8001d90:	f043 0301 	orr.w	r3, r3, #1
 8001d94:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8001d96:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d98:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001d9a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d9e:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da0:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8001da4:	e780      	b.n	8001ca8 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001da6:	68a0      	ldr	r0, [r4, #8]
 8001da8:	b950      	cbnz	r0, 8001dc0 <HAL_I2C_Init+0x120>
 8001daa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001dae:	fbb3 f3f5 	udiv	r3, r3, r5
 8001db2:	3301      	adds	r3, #1
 8001db4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001db8:	b17b      	cbz	r3, 8001dda <HAL_I2C_Init+0x13a>
 8001dba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001dbe:	e7c9      	b.n	8001d54 <HAL_I2C_Init+0xb4>
 8001dc0:	2019      	movs	r0, #25
 8001dc2:	4368      	muls	r0, r5
 8001dc4:	fbb3 f3f0 	udiv	r3, r3, r0
 8001dc8:	3301      	adds	r3, #1
 8001dca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001dce:	b123      	cbz	r3, 8001dda <HAL_I2C_Init+0x13a>
 8001dd0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001dd4:	e7be      	b.n	8001d54 <HAL_I2C_Init+0xb4>
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	e7bc      	b.n	8001d54 <HAL_I2C_Init+0xb4>
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e7ba      	b.n	8001d54 <HAL_I2C_Init+0xb4>
 8001dde:	bf00      	nop
 8001de0:	000186a0 	.word	0x000186a0
 8001de4:	001e847f 	.word	0x001e847f
 8001de8:	003d08ff 	.word	0x003d08ff
 8001dec:	000f4240 	.word	0x000f4240

08001df0 <HAL_I2C_Mem_Write>:
{
 8001df0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001df4:	4604      	mov	r4, r0
 8001df6:	4699      	mov	r9, r3
 8001df8:	460f      	mov	r7, r1
 8001dfa:	4690      	mov	r8, r2
 8001dfc:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 8001dfe:	f7ff f9c9 	bl	8001194 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e02:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001e06:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e08:	2b20      	cmp	r3, #32
 8001e0a:	d003      	beq.n	8001e14 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 8001e0c:	2002      	movs	r0, #2
}
 8001e0e:	b003      	add	sp, #12
 8001e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e14:	9000      	str	r0, [sp, #0]
 8001e16:	2319      	movs	r3, #25
 8001e18:	2201      	movs	r2, #1
 8001e1a:	4620      	mov	r0, r4
 8001e1c:	493a      	ldr	r1, [pc, #232]	@ (8001f08 <HAL_I2C_Mem_Write+0x118>)
 8001e1e:	f7ff fe0f 	bl	8001a40 <I2C_WaitOnFlagUntilTimeout>
 8001e22:	2800      	cmp	r0, #0
 8001e24:	d1f2      	bne.n	8001e0c <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001e26:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d0ee      	beq.n	8001e0c <HAL_I2C_Mem_Write+0x1c>
 8001e2e:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e30:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 8001e32:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e36:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e38:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001e3a:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8001e3c:	bf58      	it	pl
 8001e3e:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e40:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8001e42:	bf5c      	itt	pl
 8001e44:	f043 0301 	orrpl.w	r3, r3, #1
 8001e48:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001e4a:	6803      	ldr	r3, [r0, #0]
 8001e4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001e50:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001e52:	2321      	movs	r3, #33	@ 0x21
 8001e54:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001e58:	2340      	movs	r3, #64	@ 0x40
 8001e5a:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8001e62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e64:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 8001e66:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001e68:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8001e6c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e6e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001e70:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e72:	4b26      	ldr	r3, [pc, #152]	@ (8001f0c <HAL_I2C_Mem_Write+0x11c>)
 8001e74:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e76:	464b      	mov	r3, r9
 8001e78:	e9cd 6500 	strd	r6, r5, [sp]
 8001e7c:	f7ff fe8c 	bl	8001b98 <I2C_RequestMemoryWrite>
 8001e80:	2800      	cmp	r0, #0
 8001e82:	d02a      	beq.n	8001eda <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8001e84:	2001      	movs	r0, #1
 8001e86:	e7c2      	b.n	8001e0e <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e88:	f7ff fe5c 	bl	8001b44 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e8c:	b140      	cbz	r0, 8001ea0 <HAL_I2C_Mem_Write+0xb0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e8e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001e90:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e92:	bf01      	itttt	eq
 8001e94:	6822      	ldreq	r2, [r4, #0]
 8001e96:	6813      	ldreq	r3, [r2, #0]
 8001e98:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8001e9c:	6013      	streq	r3, [r2, #0]
 8001e9e:	e7f1      	b.n	8001e84 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ea0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001ea2:	6827      	ldr	r7, [r4, #0]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001eaa:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8001eac:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001eae:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001eb0:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8001eb2:	3a01      	subs	r2, #1
 8001eb4:	b292      	uxth	r2, r2
 8001eb6:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001eb8:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8001eba:	1e48      	subs	r0, r1, #1
 8001ebc:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ebe:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8001ec0:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001ec2:	d50a      	bpl.n	8001eda <HAL_I2C_Mem_Write+0xea>
 8001ec4:	b148      	cbz	r0, 8001eda <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ec6:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8001ec8:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001eca:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8001ecc:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8001ece:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8001ed0:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001ed6:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8001ed8:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001eda:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001edc:	462a      	mov	r2, r5
 8001ede:	4631      	mov	r1, r6
 8001ee0:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1d0      	bne.n	8001e88 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee6:	f7ff feb1 	bl	8001c4c <I2C_WaitOnBTFFlagUntilTimeout>
 8001eea:	2800      	cmp	r0, #0
 8001eec:	d1cf      	bne.n	8001e8e <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eee:	6822      	ldr	r2, [r4, #0]
 8001ef0:	6813      	ldr	r3, [r2, #0]
 8001ef2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ef6:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001ef8:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8001efa:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8001efe:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f02:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 8001f06:	e782      	b.n	8001e0e <HAL_I2C_Mem_Write+0x1e>
 8001f08:	00100002 	.word	0x00100002
 8001f0c:	ffff0000 	.word	0xffff0000

08001f10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f10:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f14:	4605      	mov	r5, r0
 8001f16:	b338      	cbz	r0, 8001f68 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f18:	6803      	ldr	r3, [r0, #0]
 8001f1a:	07db      	lsls	r3, r3, #31
 8001f1c:	d410      	bmi.n	8001f40 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f1e:	682b      	ldr	r3, [r5, #0]
 8001f20:	079f      	lsls	r7, r3, #30
 8001f22:	d45e      	bmi.n	8001fe2 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f24:	682b      	ldr	r3, [r5, #0]
 8001f26:	0719      	lsls	r1, r3, #28
 8001f28:	f100 8095 	bmi.w	8002056 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f2c:	682b      	ldr	r3, [r5, #0]
 8001f2e:	075a      	lsls	r2, r3, #29
 8001f30:	f100 80c1 	bmi.w	80020b6 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f34:	69eb      	ldr	r3, [r5, #28]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f040 812c 	bne.w	8002194 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001f3c:	2000      	movs	r0, #0
 8001f3e:	e029      	b.n	8001f94 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f40:	4c90      	ldr	r4, [pc, #576]	@ (8002184 <HAL_RCC_OscConfig+0x274>)
 8001f42:	6863      	ldr	r3, [r4, #4]
 8001f44:	f003 030c 	and.w	r3, r3, #12
 8001f48:	2b04      	cmp	r3, #4
 8001f4a:	d007      	beq.n	8001f5c <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f4c:	6863      	ldr	r3, [r4, #4]
 8001f4e:	f003 030c 	and.w	r3, r3, #12
 8001f52:	2b08      	cmp	r3, #8
 8001f54:	d10a      	bne.n	8001f6c <HAL_RCC_OscConfig+0x5c>
 8001f56:	6863      	ldr	r3, [r4, #4]
 8001f58:	03de      	lsls	r6, r3, #15
 8001f5a:	d507      	bpl.n	8001f6c <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5c:	6823      	ldr	r3, [r4, #0]
 8001f5e:	039c      	lsls	r4, r3, #14
 8001f60:	d5dd      	bpl.n	8001f1e <HAL_RCC_OscConfig+0xe>
 8001f62:	686b      	ldr	r3, [r5, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1da      	bne.n	8001f1e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8001f68:	2001      	movs	r0, #1
 8001f6a:	e013      	b.n	8001f94 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f6c:	686b      	ldr	r3, [r5, #4]
 8001f6e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f72:	d112      	bne.n	8001f9a <HAL_RCC_OscConfig+0x8a>
 8001f74:	6823      	ldr	r3, [r4, #0]
 8001f76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f7a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f7c:	f7ff f90a 	bl	8001194 <HAL_GetTick>
 8001f80:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f82:	6823      	ldr	r3, [r4, #0]
 8001f84:	0398      	lsls	r0, r3, #14
 8001f86:	d4ca      	bmi.n	8001f1e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f88:	f7ff f904 	bl	8001194 <HAL_GetTick>
 8001f8c:	1b80      	subs	r0, r0, r6
 8001f8e:	2864      	cmp	r0, #100	@ 0x64
 8001f90:	d9f7      	bls.n	8001f82 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001f92:	2003      	movs	r0, #3
}
 8001f94:	b002      	add	sp, #8
 8001f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f9a:	b99b      	cbnz	r3, 8001fc4 <HAL_RCC_OscConfig+0xb4>
 8001f9c:	6823      	ldr	r3, [r4, #0]
 8001f9e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fa2:	6023      	str	r3, [r4, #0]
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001faa:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001fac:	f7ff f8f2 	bl	8001194 <HAL_GetTick>
 8001fb0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb2:	6823      	ldr	r3, [r4, #0]
 8001fb4:	0399      	lsls	r1, r3, #14
 8001fb6:	d5b2      	bpl.n	8001f1e <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fb8:	f7ff f8ec 	bl	8001194 <HAL_GetTick>
 8001fbc:	1b80      	subs	r0, r0, r6
 8001fbe:	2864      	cmp	r0, #100	@ 0x64
 8001fc0:	d9f7      	bls.n	8001fb2 <HAL_RCC_OscConfig+0xa2>
 8001fc2:	e7e6      	b.n	8001f92 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001fc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fc8:	6823      	ldr	r3, [r4, #0]
 8001fca:	d103      	bne.n	8001fd4 <HAL_RCC_OscConfig+0xc4>
 8001fcc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fd0:	6023      	str	r3, [r4, #0]
 8001fd2:	e7cf      	b.n	8001f74 <HAL_RCC_OscConfig+0x64>
 8001fd4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fd8:	6023      	str	r3, [r4, #0]
 8001fda:	6823      	ldr	r3, [r4, #0]
 8001fdc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fe0:	e7cb      	b.n	8001f7a <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fe2:	4c68      	ldr	r4, [pc, #416]	@ (8002184 <HAL_RCC_OscConfig+0x274>)
 8001fe4:	6863      	ldr	r3, [r4, #4]
 8001fe6:	f013 0f0c 	tst.w	r3, #12
 8001fea:	d007      	beq.n	8001ffc <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001fec:	6863      	ldr	r3, [r4, #4]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	2b08      	cmp	r3, #8
 8001ff4:	d110      	bne.n	8002018 <HAL_RCC_OscConfig+0x108>
 8001ff6:	6863      	ldr	r3, [r4, #4]
 8001ff8:	03da      	lsls	r2, r3, #15
 8001ffa:	d40d      	bmi.n	8002018 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ffc:	6823      	ldr	r3, [r4, #0]
 8001ffe:	079b      	lsls	r3, r3, #30
 8002000:	d502      	bpl.n	8002008 <HAL_RCC_OscConfig+0xf8>
 8002002:	692b      	ldr	r3, [r5, #16]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d1af      	bne.n	8001f68 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002008:	6823      	ldr	r3, [r4, #0]
 800200a:	696a      	ldr	r2, [r5, #20]
 800200c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002010:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8002014:	6023      	str	r3, [r4, #0]
 8002016:	e785      	b.n	8001f24 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002018:	692a      	ldr	r2, [r5, #16]
 800201a:	4b5b      	ldr	r3, [pc, #364]	@ (8002188 <HAL_RCC_OscConfig+0x278>)
 800201c:	b16a      	cbz	r2, 800203a <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800201e:	2201      	movs	r2, #1
 8002020:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002022:	f7ff f8b7 	bl	8001194 <HAL_GetTick>
 8002026:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002028:	6823      	ldr	r3, [r4, #0]
 800202a:	079f      	lsls	r7, r3, #30
 800202c:	d4ec      	bmi.n	8002008 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800202e:	f7ff f8b1 	bl	8001194 <HAL_GetTick>
 8002032:	1b80      	subs	r0, r0, r6
 8002034:	2802      	cmp	r0, #2
 8002036:	d9f7      	bls.n	8002028 <HAL_RCC_OscConfig+0x118>
 8002038:	e7ab      	b.n	8001f92 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 800203a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800203c:	f7ff f8aa 	bl	8001194 <HAL_GetTick>
 8002040:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	0798      	lsls	r0, r3, #30
 8002046:	f57f af6d 	bpl.w	8001f24 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800204a:	f7ff f8a3 	bl	8001194 <HAL_GetTick>
 800204e:	1b80      	subs	r0, r0, r6
 8002050:	2802      	cmp	r0, #2
 8002052:	d9f6      	bls.n	8002042 <HAL_RCC_OscConfig+0x132>
 8002054:	e79d      	b.n	8001f92 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002056:	69aa      	ldr	r2, [r5, #24]
 8002058:	4e4a      	ldr	r6, [pc, #296]	@ (8002184 <HAL_RCC_OscConfig+0x274>)
 800205a:	4b4b      	ldr	r3, [pc, #300]	@ (8002188 <HAL_RCC_OscConfig+0x278>)
 800205c:	b1e2      	cbz	r2, 8002098 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800205e:	2201      	movs	r2, #1
 8002060:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8002064:	f7ff f896 	bl	8001194 <HAL_GetTick>
 8002068:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800206a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800206c:	079b      	lsls	r3, r3, #30
 800206e:	d50d      	bpl.n	800208c <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002070:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8002074:	4b45      	ldr	r3, [pc, #276]	@ (800218c <HAL_RCC_OscConfig+0x27c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	fbb3 f3f2 	udiv	r3, r3, r2
 800207c:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 800207e:	bf00      	nop
  }
  while (Delay --);
 8002080:	9b01      	ldr	r3, [sp, #4]
 8002082:	1e5a      	subs	r2, r3, #1
 8002084:	9201      	str	r2, [sp, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d1f9      	bne.n	800207e <HAL_RCC_OscConfig+0x16e>
 800208a:	e74f      	b.n	8001f2c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800208c:	f7ff f882 	bl	8001194 <HAL_GetTick>
 8002090:	1b00      	subs	r0, r0, r4
 8002092:	2802      	cmp	r0, #2
 8002094:	d9e9      	bls.n	800206a <HAL_RCC_OscConfig+0x15a>
 8002096:	e77c      	b.n	8001f92 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 8002098:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 800209c:	f7ff f87a 	bl	8001194 <HAL_GetTick>
 80020a0:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020a2:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80020a4:	079f      	lsls	r7, r3, #30
 80020a6:	f57f af41 	bpl.w	8001f2c <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020aa:	f7ff f873 	bl	8001194 <HAL_GetTick>
 80020ae:	1b00      	subs	r0, r0, r4
 80020b0:	2802      	cmp	r0, #2
 80020b2:	d9f6      	bls.n	80020a2 <HAL_RCC_OscConfig+0x192>
 80020b4:	e76d      	b.n	8001f92 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020b6:	4c33      	ldr	r4, [pc, #204]	@ (8002184 <HAL_RCC_OscConfig+0x274>)
 80020b8:	69e3      	ldr	r3, [r4, #28]
 80020ba:	00d8      	lsls	r0, r3, #3
 80020bc:	d424      	bmi.n	8002108 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80020be:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c0:	69e3      	ldr	r3, [r4, #28]
 80020c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020c6:	61e3      	str	r3, [r4, #28]
 80020c8:	69e3      	ldr	r3, [r4, #28]
 80020ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ce:	9300      	str	r3, [sp, #0]
 80020d0:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d2:	4e2f      	ldr	r6, [pc, #188]	@ (8002190 <HAL_RCC_OscConfig+0x280>)
 80020d4:	6833      	ldr	r3, [r6, #0]
 80020d6:	05d9      	lsls	r1, r3, #23
 80020d8:	d518      	bpl.n	800210c <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020da:	68eb      	ldr	r3, [r5, #12]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d126      	bne.n	800212e <HAL_RCC_OscConfig+0x21e>
 80020e0:	6a23      	ldr	r3, [r4, #32]
 80020e2:	f043 0301 	orr.w	r3, r3, #1
 80020e6:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80020e8:	f7ff f854 	bl	8001194 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ec:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80020f0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020f2:	6a23      	ldr	r3, [r4, #32]
 80020f4:	079b      	lsls	r3, r3, #30
 80020f6:	d53f      	bpl.n	8002178 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80020f8:	2f00      	cmp	r7, #0
 80020fa:	f43f af1b 	beq.w	8001f34 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fe:	69e3      	ldr	r3, [r4, #28]
 8002100:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002104:	61e3      	str	r3, [r4, #28]
 8002106:	e715      	b.n	8001f34 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8002108:	2700      	movs	r7, #0
 800210a:	e7e2      	b.n	80020d2 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800210c:	6833      	ldr	r3, [r6, #0]
 800210e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002112:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8002114:	f7ff f83e 	bl	8001194 <HAL_GetTick>
 8002118:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800211a:	6833      	ldr	r3, [r6, #0]
 800211c:	05da      	lsls	r2, r3, #23
 800211e:	d4dc      	bmi.n	80020da <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002120:	f7ff f838 	bl	8001194 <HAL_GetTick>
 8002124:	eba0 0008 	sub.w	r0, r0, r8
 8002128:	2864      	cmp	r0, #100	@ 0x64
 800212a:	d9f6      	bls.n	800211a <HAL_RCC_OscConfig+0x20a>
 800212c:	e731      	b.n	8001f92 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800212e:	b9ab      	cbnz	r3, 800215c <HAL_RCC_OscConfig+0x24c>
 8002130:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002132:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002136:	f023 0301 	bic.w	r3, r3, #1
 800213a:	6223      	str	r3, [r4, #32]
 800213c:	6a23      	ldr	r3, [r4, #32]
 800213e:	f023 0304 	bic.w	r3, r3, #4
 8002142:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8002144:	f7ff f826 	bl	8001194 <HAL_GetTick>
 8002148:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800214a:	6a23      	ldr	r3, [r4, #32]
 800214c:	0798      	lsls	r0, r3, #30
 800214e:	d5d3      	bpl.n	80020f8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002150:	f7ff f820 	bl	8001194 <HAL_GetTick>
 8002154:	1b80      	subs	r0, r0, r6
 8002156:	4540      	cmp	r0, r8
 8002158:	d9f7      	bls.n	800214a <HAL_RCC_OscConfig+0x23a>
 800215a:	e71a      	b.n	8001f92 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215c:	2b05      	cmp	r3, #5
 800215e:	6a23      	ldr	r3, [r4, #32]
 8002160:	d103      	bne.n	800216a <HAL_RCC_OscConfig+0x25a>
 8002162:	f043 0304 	orr.w	r3, r3, #4
 8002166:	6223      	str	r3, [r4, #32]
 8002168:	e7ba      	b.n	80020e0 <HAL_RCC_OscConfig+0x1d0>
 800216a:	f023 0301 	bic.w	r3, r3, #1
 800216e:	6223      	str	r3, [r4, #32]
 8002170:	6a23      	ldr	r3, [r4, #32]
 8002172:	f023 0304 	bic.w	r3, r3, #4
 8002176:	e7b6      	b.n	80020e6 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002178:	f7ff f80c 	bl	8001194 <HAL_GetTick>
 800217c:	1b80      	subs	r0, r0, r6
 800217e:	4540      	cmp	r0, r8
 8002180:	d9b7      	bls.n	80020f2 <HAL_RCC_OscConfig+0x1e2>
 8002182:	e706      	b.n	8001f92 <HAL_RCC_OscConfig+0x82>
 8002184:	40021000 	.word	0x40021000
 8002188:	42420000 	.word	0x42420000
 800218c:	20000008 	.word	0x20000008
 8002190:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002194:	4c2a      	ldr	r4, [pc, #168]	@ (8002240 <HAL_RCC_OscConfig+0x330>)
 8002196:	6862      	ldr	r2, [r4, #4]
 8002198:	f002 020c 	and.w	r2, r2, #12
 800219c:	2a08      	cmp	r2, #8
 800219e:	d03e      	beq.n	800221e <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a0:	2200      	movs	r2, #0
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	4b27      	ldr	r3, [pc, #156]	@ (8002244 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 80021a6:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021a8:	d12c      	bne.n	8002204 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80021aa:	f7fe fff3 	bl	8001194 <HAL_GetTick>
 80021ae:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021b0:	6823      	ldr	r3, [r4, #0]
 80021b2:	0199      	lsls	r1, r3, #6
 80021b4:	d420      	bmi.n	80021f8 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021b6:	6a2b      	ldr	r3, [r5, #32]
 80021b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021bc:	d105      	bne.n	80021ca <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021be:	6862      	ldr	r2, [r4, #4]
 80021c0:	68a9      	ldr	r1, [r5, #8]
 80021c2:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80021c6:	430a      	orrs	r2, r1
 80021c8:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ca:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 80021cc:	6862      	ldr	r2, [r4, #4]
 80021ce:	430b      	orrs	r3, r1
 80021d0:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 80021d4:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 80021d6:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021d8:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80021da:	4b1a      	ldr	r3, [pc, #104]	@ (8002244 <HAL_RCC_OscConfig+0x334>)
 80021dc:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80021de:	f7fe ffd9 	bl	8001194 <HAL_GetTick>
 80021e2:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021e4:	6823      	ldr	r3, [r4, #0]
 80021e6:	019a      	lsls	r2, r3, #6
 80021e8:	f53f aea8 	bmi.w	8001f3c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ec:	f7fe ffd2 	bl	8001194 <HAL_GetTick>
 80021f0:	1b40      	subs	r0, r0, r5
 80021f2:	2802      	cmp	r0, #2
 80021f4:	d9f6      	bls.n	80021e4 <HAL_RCC_OscConfig+0x2d4>
 80021f6:	e6cc      	b.n	8001f92 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021f8:	f7fe ffcc 	bl	8001194 <HAL_GetTick>
 80021fc:	1b80      	subs	r0, r0, r6
 80021fe:	2802      	cmp	r0, #2
 8002200:	d9d6      	bls.n	80021b0 <HAL_RCC_OscConfig+0x2a0>
 8002202:	e6c6      	b.n	8001f92 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8002204:	f7fe ffc6 	bl	8001194 <HAL_GetTick>
 8002208:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800220a:	6823      	ldr	r3, [r4, #0]
 800220c:	019b      	lsls	r3, r3, #6
 800220e:	f57f ae95 	bpl.w	8001f3c <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002212:	f7fe ffbf 	bl	8001194 <HAL_GetTick>
 8002216:	1b40      	subs	r0, r0, r5
 8002218:	2802      	cmp	r0, #2
 800221a:	d9f6      	bls.n	800220a <HAL_RCC_OscConfig+0x2fa>
 800221c:	e6b9      	b.n	8001f92 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800221e:	2b01      	cmp	r3, #1
 8002220:	f43f aea2 	beq.w	8001f68 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8002224:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002226:	6a2b      	ldr	r3, [r5, #32]
 8002228:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 800222c:	429a      	cmp	r2, r3
 800222e:	f47f ae9b 	bne.w	8001f68 <HAL_RCC_OscConfig+0x58>
 8002232:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002234:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002238:	1ac0      	subs	r0, r0, r3
 800223a:	bf18      	it	ne
 800223c:	2001      	movne	r0, #1
 800223e:	e6a9      	b.n	8001f94 <HAL_RCC_OscConfig+0x84>
 8002240:	40021000 	.word	0x40021000
 8002244:	42420000 	.word	0x42420000

08002248 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002248:	4a0d      	ldr	r2, [pc, #52]	@ (8002280 <HAL_RCC_GetSysClockFreq+0x38>)
 800224a:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800224c:	f003 010c 	and.w	r1, r3, #12
 8002250:	2908      	cmp	r1, #8
 8002252:	d112      	bne.n	800227a <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002254:	480b      	ldr	r0, [pc, #44]	@ (8002284 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002256:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800225a:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800225c:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800225e:	d509      	bpl.n	8002274 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002260:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002262:	4a09      	ldr	r2, [pc, #36]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002264:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002268:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800226a:	4a08      	ldr	r2, [pc, #32]	@ (800228c <HAL_RCC_GetSysClockFreq+0x44>)
 800226c:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800226e:	fbb0 f0f3 	udiv	r0, r0, r3
 8002272:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002274:	4b06      	ldr	r3, [pc, #24]	@ (8002290 <HAL_RCC_GetSysClockFreq+0x48>)
 8002276:	4358      	muls	r0, r3
 8002278:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 800227a:	4803      	ldr	r0, [pc, #12]	@ (8002288 <HAL_RCC_GetSysClockFreq+0x40>)
}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	08006cda 	.word	0x08006cda
 8002288:	007a1200 	.word	0x007a1200
 800228c:	08006cd8 	.word	0x08006cd8
 8002290:	003d0900 	.word	0x003d0900

08002294 <HAL_RCC_ClockConfig>:
{
 8002294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002298:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800229a:	4604      	mov	r4, r0
 800229c:	b910      	cbnz	r0, 80022a4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800229e:	2001      	movs	r0, #1
}
 80022a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022a4:	4a44      	ldr	r2, [pc, #272]	@ (80023b8 <HAL_RCC_ClockConfig+0x124>)
 80022a6:	6813      	ldr	r3, [r2, #0]
 80022a8:	f003 0307 	and.w	r3, r3, #7
 80022ac:	428b      	cmp	r3, r1
 80022ae:	d328      	bcc.n	8002302 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022b0:	6821      	ldr	r1, [r4, #0]
 80022b2:	078e      	lsls	r6, r1, #30
 80022b4:	d430      	bmi.n	8002318 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022b6:	07ca      	lsls	r2, r1, #31
 80022b8:	d443      	bmi.n	8002342 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022ba:	4a3f      	ldr	r2, [pc, #252]	@ (80023b8 <HAL_RCC_ClockConfig+0x124>)
 80022bc:	6813      	ldr	r3, [r2, #0]
 80022be:	f003 0307 	and.w	r3, r3, #7
 80022c2:	42ab      	cmp	r3, r5
 80022c4:	d865      	bhi.n	8002392 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022c6:	6822      	ldr	r2, [r4, #0]
 80022c8:	4d3c      	ldr	r5, [pc, #240]	@ (80023bc <HAL_RCC_ClockConfig+0x128>)
 80022ca:	f012 0f04 	tst.w	r2, #4
 80022ce:	d16c      	bne.n	80023aa <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022d0:	0713      	lsls	r3, r2, #28
 80022d2:	d506      	bpl.n	80022e2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022d4:	686b      	ldr	r3, [r5, #4]
 80022d6:	6922      	ldr	r2, [r4, #16]
 80022d8:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 80022dc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80022e0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022e2:	f7ff ffb1 	bl	8002248 <HAL_RCC_GetSysClockFreq>
 80022e6:	686b      	ldr	r3, [r5, #4]
 80022e8:	4a35      	ldr	r2, [pc, #212]	@ (80023c0 <HAL_RCC_ClockConfig+0x12c>)
 80022ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80022ee:	5cd3      	ldrb	r3, [r2, r3]
 80022f0:	40d8      	lsrs	r0, r3
 80022f2:	4b34      	ldr	r3, [pc, #208]	@ (80023c4 <HAL_RCC_ClockConfig+0x130>)
 80022f4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80022f6:	4b34      	ldr	r3, [pc, #208]	@ (80023c8 <HAL_RCC_ClockConfig+0x134>)
 80022f8:	6818      	ldr	r0, [r3, #0]
 80022fa:	f7fe ff09 	bl	8001110 <HAL_InitTick>
  return HAL_OK;
 80022fe:	2000      	movs	r0, #0
 8002300:	e7ce      	b.n	80022a0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002302:	6813      	ldr	r3, [r2, #0]
 8002304:	f023 0307 	bic.w	r3, r3, #7
 8002308:	430b      	orrs	r3, r1
 800230a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800230c:	6813      	ldr	r3, [r2, #0]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	428b      	cmp	r3, r1
 8002314:	d1c3      	bne.n	800229e <HAL_RCC_ClockConfig+0xa>
 8002316:	e7cb      	b.n	80022b0 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002318:	4b28      	ldr	r3, [pc, #160]	@ (80023bc <HAL_RCC_ClockConfig+0x128>)
 800231a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800231e:	bf1e      	ittt	ne
 8002320:	685a      	ldrne	r2, [r3, #4]
 8002322:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8002326:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002328:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800232a:	bf42      	ittt	mi
 800232c:	685a      	ldrmi	r2, [r3, #4]
 800232e:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8002332:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	68a0      	ldr	r0, [r4, #8]
 8002338:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800233c:	4302      	orrs	r2, r0
 800233e:	605a      	str	r2, [r3, #4]
 8002340:	e7b9      	b.n	80022b6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002342:	6862      	ldr	r2, [r4, #4]
 8002344:	4e1d      	ldr	r6, [pc, #116]	@ (80023bc <HAL_RCC_ClockConfig+0x128>)
 8002346:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002348:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800234a:	d11a      	bne.n	8002382 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800234c:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002350:	d0a5      	beq.n	800229e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002352:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002354:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002358:	f023 0303 	bic.w	r3, r3, #3
 800235c:	4313      	orrs	r3, r2
 800235e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8002360:	f7fe ff18 	bl	8001194 <HAL_GetTick>
 8002364:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002366:	6873      	ldr	r3, [r6, #4]
 8002368:	6862      	ldr	r2, [r4, #4]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002372:	d0a2      	beq.n	80022ba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002374:	f7fe ff0e 	bl	8001194 <HAL_GetTick>
 8002378:	1bc0      	subs	r0, r0, r7
 800237a:	4540      	cmp	r0, r8
 800237c:	d9f3      	bls.n	8002366 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800237e:	2003      	movs	r0, #3
 8002380:	e78e      	b.n	80022a0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002382:	2a02      	cmp	r2, #2
 8002384:	d102      	bne.n	800238c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002386:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800238a:	e7e1      	b.n	8002350 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238c:	f013 0f02 	tst.w	r3, #2
 8002390:	e7de      	b.n	8002350 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	6813      	ldr	r3, [r2, #0]
 8002394:	f023 0307 	bic.w	r3, r3, #7
 8002398:	432b      	orrs	r3, r5
 800239a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800239c:	6813      	ldr	r3, [r2, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	42ab      	cmp	r3, r5
 80023a4:	f47f af7b 	bne.w	800229e <HAL_RCC_ClockConfig+0xa>
 80023a8:	e78d      	b.n	80022c6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023aa:	686b      	ldr	r3, [r5, #4]
 80023ac:	68e1      	ldr	r1, [r4, #12]
 80023ae:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80023b2:	430b      	orrs	r3, r1
 80023b4:	606b      	str	r3, [r5, #4]
 80023b6:	e78b      	b.n	80022d0 <HAL_RCC_ClockConfig+0x3c>
 80023b8:	40022000 	.word	0x40022000
 80023bc:	40021000 	.word	0x40021000
 80023c0:	08006cc8 	.word	0x08006cc8
 80023c4:	20000008 	.word	0x20000008
 80023c8:	20000010 	.word	0x20000010

080023cc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023cc:	4b04      	ldr	r3, [pc, #16]	@ (80023e0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80023ce:	4a05      	ldr	r2, [pc, #20]	@ (80023e4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80023d6:	5cd3      	ldrb	r3, [r2, r3]
 80023d8:	4a03      	ldr	r2, [pc, #12]	@ (80023e8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80023da:	6810      	ldr	r0, [r2, #0]
}
 80023dc:	40d8      	lsrs	r0, r3
 80023de:	4770      	bx	lr
 80023e0:	40021000 	.word	0x40021000
 80023e4:	08006cc0 	.word	0x08006cc0
 80023e8:	20000008 	.word	0x20000008

080023ec <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023ec:	4b04      	ldr	r3, [pc, #16]	@ (8002400 <HAL_RCC_GetPCLK2Freq+0x14>)
 80023ee:	4a05      	ldr	r2, [pc, #20]	@ (8002404 <HAL_RCC_GetPCLK2Freq+0x18>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80023f6:	5cd3      	ldrb	r3, [r2, r3]
 80023f8:	4a03      	ldr	r2, [pc, #12]	@ (8002408 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80023fa:	6810      	ldr	r0, [r2, #0]
}
 80023fc:	40d8      	lsrs	r0, r3
 80023fe:	4770      	bx	lr
 8002400:	40021000 	.word	0x40021000
 8002404:	08006cc0 	.word	0x08006cc0
 8002408:	20000008 	.word	0x20000008

0800240c <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800240c:	6803      	ldr	r3, [r0, #0]
{
 800240e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002412:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002414:	07d8      	lsls	r0, r3, #31
 8002416:	d521      	bpl.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x50>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002418:	4c36      	ldr	r4, [pc, #216]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800241a:	69e3      	ldr	r3, [r4, #28]
 800241c:	00d9      	lsls	r1, r3, #3
 800241e:	d42b      	bmi.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8002420:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002422:	69e3      	ldr	r3, [r4, #28]
 8002424:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002428:	61e3      	str	r3, [r4, #28]
 800242a:	69e3      	ldr	r3, [r4, #28]
 800242c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002430:	9301      	str	r3, [sp, #4]
 8002432:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002434:	4f30      	ldr	r7, [pc, #192]	@ (80024f8 <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	05da      	lsls	r2, r3, #23
 800243a:	d51f      	bpl.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x70>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800243c:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800243e:	686a      	ldr	r2, [r5, #4]
 8002440:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002444:	d12e      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002446:	6a23      	ldr	r3, [r4, #32]
 8002448:	686a      	ldr	r2, [r5, #4]
 800244a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800244e:	4313      	orrs	r3, r2
 8002450:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002452:	b11e      	cbz	r6, 800245c <HAL_RCCEx_PeriphCLKConfig+0x50>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002454:	69e3      	ldr	r3, [r4, #28]
 8002456:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800245a:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800245c:	682a      	ldr	r2, [r5, #0]
 800245e:	0791      	lsls	r1, r2, #30
 8002460:	d506      	bpl.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002462:	4924      	ldr	r1, [pc, #144]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002464:	68a8      	ldr	r0, [r5, #8]
 8002466:	684b      	ldr	r3, [r1, #4]
 8002468:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800246c:	4303      	orrs	r3, r0
 800246e:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002470:	06d3      	lsls	r3, r2, #27
 8002472:	d436      	bmi.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002474:	2000      	movs	r0, #0
 8002476:	e012      	b.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x92>
    FlagStatus pwrclkchanged = RESET;
 8002478:	2600      	movs	r6, #0
 800247a:	e7db      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002482:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002484:	f7fe fe86 	bl	8001194 <HAL_GetTick>
 8002488:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	05db      	lsls	r3, r3, #23
 800248e:	d4d5      	bmi.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002490:	f7fe fe80 	bl	8001194 <HAL_GetTick>
 8002494:	eba0 0008 	sub.w	r0, r0, r8
 8002498:	2864      	cmp	r0, #100	@ 0x64
 800249a:	d9f6      	bls.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x7e>
          return HAL_TIMEOUT;
 800249c:	2003      	movs	r0, #3
}
 800249e:	b002      	add	sp, #8
 80024a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024a4:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d0cc      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x3a>
      __HAL_RCC_BACKUPRESET_FORCE();
 80024ac:	2001      	movs	r0, #1
 80024ae:	4a13      	ldr	r2, [pc, #76]	@ (80024fc <HAL_RCCEx_PeriphCLKConfig+0xf0>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024b0:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80024b2:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024b6:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024b8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024bc:	07df      	lsls	r7, r3, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024be:	f8c2 0440 	str.w	r0, [r2, #1088]	@ 0x440
      RCC->BDCR = temp_reg;
 80024c2:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80024c4:	d5bf      	bpl.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        tickstart = HAL_GetTick();
 80024c6:	f7fe fe65 	bl	8001194 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ca:	f241 3888 	movw	r8, #5000	@ 0x1388
        tickstart = HAL_GetTick();
 80024ce:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024d0:	6a23      	ldr	r3, [r4, #32]
 80024d2:	0798      	lsls	r0, r3, #30
 80024d4:	d4b7      	bmi.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x3a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7fe fe5d 	bl	8001194 <HAL_GetTick>
 80024da:	1bc0      	subs	r0, r0, r7
 80024dc:	4540      	cmp	r0, r8
 80024de:	d9f7      	bls.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 80024e0:	e7dc      	b.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x90>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024e2:	4a04      	ldr	r2, [pc, #16]	@ (80024f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80024e4:	68e9      	ldr	r1, [r5, #12]
 80024e6:	6853      	ldr	r3, [r2, #4]
 80024e8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80024ec:	430b      	orrs	r3, r1
 80024ee:	6053      	str	r3, [r2, #4]
 80024f0:	e7c0      	b.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x68>
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000
 80024f8:	40007000 	.word	0x40007000
 80024fc:	42420000 	.word	0x42420000

08002500 <HAL_RCCEx_GetPeriphCLKFreq>:
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002500:	2802      	cmp	r0, #2
{
 8002502:	b508      	push	{r3, lr}
  switch (PeriphClk)
 8002504:	d044      	beq.n	8002590 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
 8002506:	2810      	cmp	r0, #16
 8002508:	d003      	beq.n	8002512 <HAL_RCCEx_GetPeriphCLKFreq+0x12>
 800250a:	2801      	cmp	r0, #1
 800250c:	d022      	beq.n	8002554 <HAL_RCCEx_GetPeriphCLKFreq+0x54>
  uint32_t temp_reg = 0U, frequency = 0U;
 800250e:	2000      	movs	r0, #0
    default:
    {
      break;
    }
  }
  return (frequency);
 8002510:	e034      	b.n	800257c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      temp_reg = RCC->CFGR;
 8002512:	4b25      	ldr	r3, [pc, #148]	@ (80025a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002514:	685a      	ldr	r2, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002516:	6818      	ldr	r0, [r3, #0]
 8002518:	f010 7080 	ands.w	r0, r0, #16777216	@ 0x1000000
 800251c:	d02e      	beq.n	800257c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800251e:	f3c2 4183 	ubfx	r1, r2, #18, #4
 8002522:	4822      	ldr	r0, [pc, #136]	@ (80025ac <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002524:	03d2      	lsls	r2, r2, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002526:	bf48      	it	mi
 8002528:	685a      	ldrmi	r2, [r3, #4]
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800252a:	5c40      	ldrb	r0, [r0, r1]
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800252c:	bf41      	itttt	mi
 800252e:	4920      	ldrmi	r1, [pc, #128]	@ (80025b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8002530:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8002534:	5c89      	ldrbmi	r1, [r1, r2]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002536:	4a1f      	ldrmi	r2, [pc, #124]	@ (80025b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002538:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800253a:	bf4c      	ite	mi
 800253c:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002540:	4a1d      	ldrpl	r2, [pc, #116]	@ (80025b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002542:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002544:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002548:	d418      	bmi.n	800257c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
          frequency = (pllclk * 2) / 3;
 800254a:	2303      	movs	r3, #3
 800254c:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800254e:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 8002552:	e013      	b.n	800257c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002554:	f240 3102 	movw	r1, #770	@ 0x302
      temp_reg = RCC->BDCR;
 8002558:	4a13      	ldr	r2, [pc, #76]	@ (80025a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 800255a:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 800255c:	4019      	ands	r1, r3
 800255e:	f5b1 7f81 	cmp.w	r1, #258	@ 0x102
 8002562:	d01e      	beq.n	80025a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002564:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002568:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800256c:	d107      	bne.n	800257e <HAL_RCCEx_GetPeriphCLKFreq+0x7e>
        frequency = LSI_VALUE;
 800256e:	f649 4340 	movw	r3, #40000	@ 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002572:	6a50      	ldr	r0, [r2, #36]	@ 0x24
        frequency = LSI_VALUE;
 8002574:	f010 0002 	ands.w	r0, r0, #2
        frequency = HSE_VALUE / 128U;
 8002578:	bf18      	it	ne
 800257a:	4618      	movne	r0, r3
}
 800257c:	bd08      	pop	{r3, pc}
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800257e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002582:	d1c4      	bne.n	800250e <HAL_RCCEx_GetPeriphCLKFreq+0xe>
 8002584:	6810      	ldr	r0, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8002586:	f24f 4324 	movw	r3, #62500	@ 0xf424
 800258a:	f410 3000 	ands.w	r0, r0, #131072	@ 0x20000
 800258e:	e7f3      	b.n	8002578 <HAL_RCCEx_GetPeriphCLKFreq+0x78>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002590:	f7ff ff2c 	bl	80023ec <HAL_RCC_GetPCLK2Freq>
 8002594:	4b04      	ldr	r3, [pc, #16]	@ (80025a8 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800259c:	3301      	adds	r3, #1
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	e7d5      	b.n	800254e <HAL_RCCEx_GetPeriphCLKFreq+0x4e>
        frequency = LSE_VALUE;
 80025a2:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 80025a6:	e7e9      	b.n	800257c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 80025a8:	40021000 	.word	0x40021000
 80025ac:	08006cec 	.word	0x08006cec
 80025b0:	08006cea 	.word	0x08006cea
 80025b4:	007a1200 	.word	0x007a1200
 80025b8:	003d0900 	.word	0x003d0900

080025bc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80025bc:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 80025be:	f000 fe7b 	bl	80032b8 <vTaskStartScheduler>
  
  return osOK;
}
 80025c2:	2000      	movs	r0, #0
 80025c4:	bd08      	pop	{r3, pc}

080025c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80025c6:	b570      	push	{r4, r5, r6, lr}
 80025c8:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80025ca:	6946      	ldr	r6, [r0, #20]
{
 80025cc:	460b      	mov	r3, r1
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025ce:	e9d0 1000 	ldrd	r1, r0, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80025d2:	692a      	ldr	r2, [r5, #16]
 80025d4:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 80025d8:	b086      	sub	sp, #24
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80025da:	b176      	cbz	r6, 80025fa <osThreadCreate+0x34>
 80025dc:	69ad      	ldr	r5, [r5, #24]
 80025de:	b165      	cbz	r5, 80025fa <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 80025e0:	2c84      	cmp	r4, #132	@ 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80025e2:	bf0c      	ite	eq
 80025e4:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 80025e6:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80025e8:	e9cd 6501 	strd	r6, r5, [sp, #4]
 80025ec:	9400      	str	r4, [sp, #0]
 80025ee:	f000 fdfe 	bl	80031ee <xTaskCreateStatic>
 80025f2:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80025f4:	9805      	ldr	r0, [sp, #20]
}
 80025f6:	b006      	add	sp, #24
 80025f8:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 80025fa:	2c84      	cmp	r4, #132	@ 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80025fc:	bf0c      	ite	eq
 80025fe:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8002600:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002602:	ad05      	add	r5, sp, #20
 8002604:	e9cd 4500 	strd	r4, r5, [sp]
 8002608:	b292      	uxth	r2, r2
 800260a:	f000 fe27 	bl	800325c <xTaskCreate>
 800260e:	2801      	cmp	r0, #1
 8002610:	d0f0      	beq.n	80025f4 <osThreadCreate+0x2e>
      return NULL;
 8002612:	2000      	movs	r0, #0
 8002614:	e7ef      	b.n	80025f6 <osThreadCreate+0x30>

08002616 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002616:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002618:	2801      	cmp	r0, #1
 800261a:	bf38      	it	cc
 800261c:	2001      	movcc	r0, #1
 800261e:	f000 ffaf 	bl	8003580 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002622:	2000      	movs	r0, #0
 8002624:	bd08      	pop	{r3, pc}
	...

08002628 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8002628:	b513      	push	{r0, r1, r4, lr}
  if(timer_def->controlblock != NULL) {
    return xTimerCreateStatic((const char *)"",
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 800262a:	c811      	ldmia	r0, {r0, r4}
    return xTimerCreateStatic((const char *)"",
 800262c:	3901      	subs	r1, #1
{
 800262e:	4613      	mov	r3, r2
    return xTimerCreateStatic((const char *)"",
 8002630:	424a      	negs	r2, r1
 8002632:	414a      	adcs	r2, r1
  if(timer_def->controlblock != NULL) {
 8002634:	b13c      	cbz	r4, 8002646 <osTimerCreate+0x1e>
    return xTimerCreateStatic((const char *)"",
 8002636:	e9cd 0400 	strd	r0, r4, [sp]
 800263a:	2101      	movs	r1, #1
 800263c:	4805      	ldr	r0, [pc, #20]	@ (8002654 <osTimerCreate+0x2c>)
 800263e:	f001 f9d2 	bl	80039e6 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8002642:	b002      	add	sp, #8
 8002644:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 8002646:	9000      	str	r0, [sp, #0]
 8002648:	2101      	movs	r1, #1
 800264a:	4802      	ldr	r0, [pc, #8]	@ (8002654 <osTimerCreate+0x2c>)
 800264c:	f001 f9a4 	bl	8003998 <xTimerCreate>
 8002650:	e7f7      	b.n	8002642 <osTimerCreate+0x1a>
 8002652:	bf00      	nop
 8002654:	08005447 	.word	0x08005447

08002658 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8002658:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800265a:	2400      	movs	r4, #0
 800265c:	2901      	cmp	r1, #1
 800265e:	460a      	mov	r2, r1
 8002660:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 8002662:	bf38      	it	cc
 8002664:	2201      	movcc	r2, #1
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002666:	f3ef 8305 	mrs	r3, IPSR
    ticks = 1;
    
  if (inHandlerMode()) 
 800266a:	b1bb      	cbz	r3, 800269c <osTimerStart+0x44>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 800266c:	2109      	movs	r1, #9
 800266e:	9400      	str	r4, [sp, #0]
 8002670:	ab03      	add	r3, sp, #12
 8002672:	f001 f9f5 	bl	8003a60 <xTimerGenericCommand>
 8002676:	2801      	cmp	r0, #1
 8002678:	d002      	beq.n	8002680 <osTimerStart+0x28>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
      result = osErrorOS;
 800267a:	20ff      	movs	r0, #255	@ 0xff

#else 
  result = osErrorOS;
#endif
  return result;
}
 800267c:	b004      	add	sp, #16
 800267e:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 8002680:	9b03      	ldr	r3, [sp, #12]
 8002682:	b14b      	cbz	r3, 8002698 <osTimerStart+0x40>
 8002684:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002688:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800268c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002690:	f3bf 8f4f 	dsb	sy
 8002694:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8002698:	2000      	movs	r0, #0
  return result;
 800269a:	e7ef      	b.n	800267c <osTimerStart+0x24>
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 800269c:	2104      	movs	r1, #4
 800269e:	9300      	str	r3, [sp, #0]
 80026a0:	f001 f9de 	bl	8003a60 <xTimerGenericCommand>
 80026a4:	2801      	cmp	r0, #1
 80026a6:	d1e8      	bne.n	800267a <osTimerStart+0x22>
 80026a8:	e7f6      	b.n	8002698 <osTimerStart+0x40>

080026aa <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 80026aa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80026ac:	2200      	movs	r2, #0
 80026ae:	9203      	str	r2, [sp, #12]
 80026b0:	f3ef 8305 	mrs	r3, IPSR

  if (inHandlerMode()) {
 80026b4:	b1c3      	cbz	r3, 80026e8 <osTimerStop+0x3e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 80026b6:	2108      	movs	r1, #8
 80026b8:	9200      	str	r2, [sp, #0]
 80026ba:	ab03      	add	r3, sp, #12
 80026bc:	f001 f9d0 	bl	8003a60 <xTimerGenericCommand>
 80026c0:	2801      	cmp	r0, #1
 80026c2:	d003      	beq.n	80026cc <osTimerStop+0x22>
      return osErrorOS;
 80026c4:	20ff      	movs	r0, #255	@ 0xff
  }
#else 
  result = osErrorOS;
#endif 
  return result;
}
 80026c6:	b005      	add	sp, #20
 80026c8:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 80026cc:	9b03      	ldr	r3, [sp, #12]
 80026ce:	b14b      	cbz	r3, 80026e4 <osTimerStop+0x3a>
 80026d0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80026d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 80026e4:	2000      	movs	r0, #0
 80026e6:	e7ee      	b.n	80026c6 <osTimerStop+0x1c>
    if (xTimerStop(timer_id, 0) != pdPASS) {
 80026e8:	461a      	mov	r2, r3
 80026ea:	2103      	movs	r1, #3
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	f001 f9b7 	bl	8003a60 <xTimerGenericCommand>
 80026f2:	2801      	cmp	r0, #1
 80026f4:	d1e6      	bne.n	80026c4 <osTimerStop+0x1a>
 80026f6:	e7f5      	b.n	80026e4 <osTimerStop+0x3a>

080026f8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80026f8:	4603      	mov	r3, r0
 80026fa:	b513      	push	{r0, r1, r4, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80026fc:	c807      	ldmia	r0, {r0, r1, r2}
  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80026fe:	b10a      	cbz	r2, 8002704 <osMessageCreate+0xc>
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	b92b      	cbnz	r3, 8002710 <osMessageCreate+0x18>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8002704:	2200      	movs	r2, #0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002706:	b002      	add	sp, #8
 8002708:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800270c:	f000 b9bb 	b.w	8002a86 <xQueueGenericCreate>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8002710:	2400      	movs	r4, #0
 8002712:	9400      	str	r4, [sp, #0]
 8002714:	f000 f96e 	bl	80029f4 <xQueueGenericCreateStatic>
}
 8002718:	b002      	add	sp, #8
 800271a:	bd10      	pop	{r4, pc}

0800271c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800271c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800271e:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002720:	2100      	movs	r1, #0
 8002722:	9103      	str	r1, [sp, #12]
 8002724:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8002728:	b1c3      	cbz	r3, 800275c <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800272a:	460b      	mov	r3, r1
 800272c:	aa03      	add	r2, sp, #12
 800272e:	a901      	add	r1, sp, #4
 8002730:	f000 fa7f 	bl	8002c32 <xQueueGenericSendFromISR>
 8002734:	2801      	cmp	r0, #1
 8002736:	d003      	beq.n	8002740 <osMessagePut+0x24>
      return osErrorOS;
 8002738:	20ff      	movs	r0, #255	@ 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 800273a:	b005      	add	sp, #20
 800273c:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 8002740:	9b03      	ldr	r3, [sp, #12]
 8002742:	b14b      	cbz	r3, 8002758 <osMessagePut+0x3c>
 8002744:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800274c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002750:	f3bf 8f4f 	dsb	sy
 8002754:	f3bf 8f6f 	isb	sy
  return osOK;
 8002758:	2000      	movs	r0, #0
 800275a:	e7ee      	b.n	800273a <osMessagePut+0x1e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800275c:	2a01      	cmp	r2, #1
 800275e:	bf38      	it	cc
 8002760:	2201      	movcc	r2, #1
 8002762:	a901      	add	r1, sp, #4
 8002764:	f000 f9b3 	bl	8002ace <xQueueGenericSend>
 8002768:	2801      	cmp	r0, #1
 800276a:	d0f5      	beq.n	8002758 <osMessagePut+0x3c>
 800276c:	e7e4      	b.n	8002738 <osMessagePut+0x1c>

0800276e <osMessageGet>:
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 800276e:	2300      	movs	r3, #0
{
 8002770:	b530      	push	{r4, r5, lr}
 8002772:	b085      	sub	sp, #20
 8002774:	4605      	mov	r5, r0
 8002776:	4614      	mov	r4, r2
 8002778:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 800277a:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 800277c:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 800277e:	b911      	cbnz	r1, 8002786 <osMessageGet+0x18>
    event.status = osErrorParameter;
 8002780:	2380      	movs	r3, #128	@ 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 8002782:	9301      	str	r3, [sp, #4]
 8002784:	e018      	b.n	80027b8 <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8002786:	9300      	str	r3, [sp, #0]
 8002788:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 800278c:	b1e3      	cbz	r3, 80027c8 <osMessageGet+0x5a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800278e:	466a      	mov	r2, sp
 8002790:	a902      	add	r1, sp, #8
 8002792:	f000 fb48 	bl	8002e26 <xQueueReceiveFromISR>
 8002796:	1e43      	subs	r3, r0, #1
 8002798:	4258      	negs	r0, r3
 800279a:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 800279c:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800279e:	0100      	lsls	r0, r0, #4
 80027a0:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 80027a2:	b14b      	cbz	r3, 80027b8 <osMessageGet+0x4a>
 80027a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80027a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80027ac:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80027b0:	f3bf 8f4f 	dsb	sy
 80027b4:	f3bf 8f6f 	isb	sy
    return event;
 80027b8:	ab04      	add	r3, sp, #16
 80027ba:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 80027be:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
 80027c2:	4628      	mov	r0, r5
 80027c4:	b005      	add	sp, #20
 80027c6:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80027c8:	a902      	add	r1, sp, #8
 80027ca:	f000 fa8e 	bl	8002cea <xQueueReceive>
 80027ce:	2801      	cmp	r0, #1
 80027d0:	d101      	bne.n	80027d6 <osMessageGet+0x68>
      event.status = osEventMessage;
 80027d2:	2310      	movs	r3, #16
 80027d4:	e7d5      	b.n	8002782 <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80027d6:	3c00      	subs	r4, #0
 80027d8:	bf18      	it	ne
 80027da:	2401      	movne	r4, #1
 80027dc:	01a4      	lsls	r4, r4, #6
 80027de:	9401      	str	r4, [sp, #4]
  return event;
 80027e0:	e7ea      	b.n	80027b8 <osMessageGet+0x4a>

080027e2 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80027e2:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027e6:	f100 0308 	add.w	r3, r0, #8

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ea:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027ee:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80027f0:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80027f6:	4770      	bx	lr

080027f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80027f8:	2300      	movs	r3, #0
 80027fa:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027fc:	4770      	bx	lr

080027fe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80027fe:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002800:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8002802:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002804:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002806:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002808:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 800280a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800280c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800280e:	3301      	adds	r3, #1
 8002810:	6003      	str	r3, [r0, #0]
}
 8002812:	4770      	bx	lr

08002814 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002814:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002816:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002818:	1c63      	adds	r3, r4, #1
 800281a:	d10a      	bne.n	8002832 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800281c:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800281e:	685a      	ldr	r2, [r3, #4]
 8002820:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002822:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002824:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8002826:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8002828:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 800282a:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800282c:	3301      	adds	r3, #1
 800282e:	6003      	str	r3, [r0, #0]
}
 8002830:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002832:	f100 0208 	add.w	r2, r0, #8
 8002836:	4613      	mov	r3, r2
 8002838:	6852      	ldr	r2, [r2, #4]
 800283a:	6815      	ldr	r5, [r2, #0]
 800283c:	42a5      	cmp	r5, r4
 800283e:	d9fa      	bls.n	8002836 <vListInsert+0x22>
 8002840:	e7ed      	b.n	800281e <vListInsert+0xa>

08002842 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002842:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002844:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8002848:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800284a:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800284c:	6859      	ldr	r1, [r3, #4]
 800284e:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002850:	bf08      	it	eq
 8002852:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002854:	2200      	movs	r2, #0
 8002856:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	3a01      	subs	r2, #1
 800285c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800285e:	6818      	ldr	r0, [r3, #0]
}
 8002860:	4770      	bx	lr

08002862 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002862:	b510      	push	{r4, lr}
 8002864:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002866:	f001 fab5 	bl	8003dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800286a:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800286c:	f001 fad2 	bl	8003e14 <vPortExitCritical>

	return xReturn;
}
 8002870:	fab4 f084 	clz	r0, r4
 8002874:	0940      	lsrs	r0, r0, #5
 8002876:	bd10      	pop	{r4, pc}

08002878 <prvCopyDataToQueue>:
{
 8002878:	b570      	push	{r4, r5, r6, lr}
 800287a:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800287c:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800287e:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002880:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002882:	b942      	cbnz	r2, 8002896 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002884:	6806      	ldr	r6, [r0, #0]
 8002886:	b99e      	cbnz	r6, 80028b0 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8002888:	6840      	ldr	r0, [r0, #4]
 800288a:	f000 ffb1 	bl	80037f0 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800288e:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002890:	3501      	adds	r5, #1
 8002892:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8002894:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8002896:	b96e      	cbnz	r6, 80028b4 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8002898:	6880      	ldr	r0, [r0, #8]
 800289a:	f001 fe44 	bl	8004526 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800289e:	68a3      	ldr	r3, [r4, #8]
 80028a0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80028a2:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028a4:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80028a6:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028a8:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80028aa:	bf24      	itt	cs
 80028ac:	6823      	ldrcs	r3, [r4, #0]
 80028ae:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80028b0:	2000      	movs	r0, #0
 80028b2:	e7ed      	b.n	8002890 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028b4:	68c0      	ldr	r0, [r0, #12]
 80028b6:	f001 fe36 	bl	8004526 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80028ba:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80028bc:	68e3      	ldr	r3, [r4, #12]
 80028be:	4251      	negs	r1, r2
 80028c0:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028c2:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80028c4:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80028c6:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80028c8:	bf3e      	ittt	cc
 80028ca:	6863      	ldrcc	r3, [r4, #4]
 80028cc:	185b      	addcc	r3, r3, r1
 80028ce:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80028d0:	2e02      	cmp	r6, #2
 80028d2:	d1ed      	bne.n	80028b0 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80028d4:	b10d      	cbz	r5, 80028da <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80028d6:	3d01      	subs	r5, #1
 80028d8:	e7ea      	b.n	80028b0 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80028da:	4628      	mov	r0, r5
 80028dc:	e7d8      	b.n	8002890 <prvCopyDataToQueue+0x18>

080028de <prvCopyDataFromQueue>:
{
 80028de:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028e0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 80028e2:	4608      	mov	r0, r1
 80028e4:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80028e6:	b162      	cbz	r2, 8002902 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80028e8:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028ea:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80028ec:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80028ee:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80028f0:	bf28      	it	cs
 80028f2:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80028f4:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80028f6:	bf28      	it	cs
 80028f8:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80028fa:	68d9      	ldr	r1, [r3, #12]
}
 80028fc:	bc10      	pop	{r4}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80028fe:	f001 be12 	b.w	8004526 <memcpy>
}
 8002902:	bc10      	pop	{r4}
 8002904:	4770      	bx	lr

08002906 <prvUnlockQueue>:
{
 8002906:	b570      	push	{r4, r5, r6, lr}
 8002908:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800290a:	f001 fa63 	bl	8003dd4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800290e:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002912:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8002916:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002918:	2d00      	cmp	r5, #0
 800291a:	dc14      	bgt.n	8002946 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800291c:	23ff      	movs	r3, #255	@ 0xff
 800291e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8002922:	f001 fa77 	bl	8003e14 <vPortExitCritical>
	taskENTER_CRITICAL();
 8002926:	f001 fa55 	bl	8003dd4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800292a:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800292e:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8002932:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002934:	2d00      	cmp	r5, #0
 8002936:	dc12      	bgt.n	800295e <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8002938:	23ff      	movs	r3, #255	@ 0xff
 800293a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800293e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8002942:	f001 ba67 	b.w	8003e14 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002946:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002948:	2b00      	cmp	r3, #0
 800294a:	d0e7      	beq.n	800291c <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800294c:	4630      	mov	r0, r6
 800294e:	f000 feaf 	bl	80036b0 <xTaskRemoveFromEventList>
 8002952:	b108      	cbz	r0, 8002958 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8002954:	f000 ff36 	bl	80037c4 <vTaskMissedYield>
			--cTxLock;
 8002958:	3d01      	subs	r5, #1
 800295a:	b26d      	sxtb	r5, r5
 800295c:	e7dc      	b.n	8002918 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800295e:	6923      	ldr	r3, [r4, #16]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d0e9      	beq.n	8002938 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002964:	4630      	mov	r0, r6
 8002966:	f000 fea3 	bl	80036b0 <xTaskRemoveFromEventList>
 800296a:	b108      	cbz	r0, 8002970 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800296c:	f000 ff2a 	bl	80037c4 <vTaskMissedYield>
				--cRxLock;
 8002970:	3d01      	subs	r5, #1
 8002972:	b26d      	sxtb	r5, r5
 8002974:	e7de      	b.n	8002934 <prvUnlockQueue+0x2e>

08002976 <xQueueGenericReset>:
{
 8002976:	b538      	push	{r3, r4, r5, lr}
 8002978:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800297a:	4604      	mov	r4, r0
 800297c:	b940      	cbnz	r0, 8002990 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800297e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002982:	f383 8811 	msr	BASEPRI, r3
 8002986:	f3bf 8f6f 	isb	sy
 800298a:	f3bf 8f4f 	dsb	sy
 800298e:	e7fe      	b.n	800298e <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8002990:	f001 fa20 	bl	8003dd4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002994:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8002998:	434b      	muls	r3, r1
 800299a:	6822      	ldr	r2, [r4, #0]
 800299c:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800299e:	1a5b      	subs	r3, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80029a0:	6060      	str	r0, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80029a2:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029a4:	2000      	movs	r0, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80029a6:	441a      	add	r2, r3
		pxQueue->cRxLock = queueUNLOCKED;
 80029a8:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80029aa:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80029ac:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80029ae:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80029b2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 80029b6:	b9a5      	cbnz	r5, 80029e2 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80029b8:	6923      	ldr	r3, [r4, #16]
 80029ba:	b173      	cbz	r3, 80029da <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80029bc:	f104 0010 	add.w	r0, r4, #16
 80029c0:	f000 fe76 	bl	80036b0 <xTaskRemoveFromEventList>
 80029c4:	b148      	cbz	r0, 80029da <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 80029c6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80029ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80029ce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80029d2:	f3bf 8f4f 	dsb	sy
 80029d6:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80029da:	f001 fa1b 	bl	8003e14 <vPortExitCritical>
}
 80029de:	2001      	movs	r0, #1
 80029e0:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80029e2:	f104 0010 	add.w	r0, r4, #16
 80029e6:	f7ff fefc 	bl	80027e2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80029ea:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80029ee:	f7ff fef8 	bl	80027e2 <vListInitialise>
 80029f2:	e7f2      	b.n	80029da <xQueueGenericReset+0x64>

080029f4 <xQueueGenericCreateStatic>:
	{
 80029f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80029f6:	460d      	mov	r5, r1
 80029f8:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80029fa:	b940      	cbnz	r0, 8002a0e <xQueueGenericCreateStatic+0x1a>
 80029fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a00:	f383 8811 	msr	BASEPRI, r3
 8002a04:	f3bf 8f6f 	isb	sy
 8002a08:	f3bf 8f4f 	dsb	sy
 8002a0c:	e7fe      	b.n	8002a0c <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8002a0e:	b943      	cbnz	r3, 8002a22 <xQueueGenericCreateStatic+0x2e>
 8002a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a14:	f383 8811 	msr	BASEPRI, r3
 8002a18:	f3bf 8f6f 	isb	sy
 8002a1c:	f3bf 8f4f 	dsb	sy
 8002a20:	e7fe      	b.n	8002a20 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002a22:	b14a      	cbz	r2, 8002a38 <xQueueGenericCreateStatic+0x44>
 8002a24:	b991      	cbnz	r1, 8002a4c <xQueueGenericCreateStatic+0x58>
 8002a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a2a:	f383 8811 	msr	BASEPRI, r3
 8002a2e:	f3bf 8f6f 	isb	sy
 8002a32:	f3bf 8f4f 	dsb	sy
 8002a36:	e7fe      	b.n	8002a36 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002a38:	b141      	cbz	r1, 8002a4c <xQueueGenericCreateStatic+0x58>
 8002a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a3e:	f383 8811 	msr	BASEPRI, r3
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	e7fe      	b.n	8002a4a <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002a4c:	2348      	movs	r3, #72	@ 0x48
 8002a4e:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002a50:	9b01      	ldr	r3, [sp, #4]
 8002a52:	2b48      	cmp	r3, #72	@ 0x48
 8002a54:	d008      	beq.n	8002a68 <xQueueGenericCreateStatic+0x74>
 8002a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a5a:	f383 8811 	msr	BASEPRI, r3
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	e7fe      	b.n	8002a66 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a68:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a6a:	2d00      	cmp	r5, #0
 8002a6c:	bf08      	it	eq
 8002a6e:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8002a70:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002a74:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a78:	4620      	mov	r0, r4
 8002a7a:	6022      	str	r2, [r4, #0]
 8002a7c:	f7ff ff7b 	bl	8002976 <xQueueGenericReset>
	}
 8002a80:	4620      	mov	r0, r4
 8002a82:	b003      	add	sp, #12
 8002a84:	bd30      	pop	{r4, r5, pc}

08002a86 <xQueueGenericCreate>:
	{
 8002a86:	b570      	push	{r4, r5, r6, lr}
 8002a88:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a8a:	4606      	mov	r6, r0
 8002a8c:	b940      	cbnz	r0, 8002aa0 <xQueueGenericCreate+0x1a>
 8002a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a92:	f383 8811 	msr	BASEPRI, r3
 8002a96:	f3bf 8f6f 	isb	sy
 8002a9a:	f3bf 8f4f 	dsb	sy
 8002a9e:	e7fe      	b.n	8002a9e <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aa0:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002aa2:	3048      	adds	r0, #72	@ 0x48
 8002aa4:	f001 fac2 	bl	800402c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002aa8:	4604      	mov	r4, r0
 8002aaa:	b160      	cbz	r0, 8002ac6 <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002aac:	2300      	movs	r3, #0
 8002aae:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 8002ab2:	b155      	cbz	r5, 8002aca <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002ab4:	f100 0348 	add.w	r3, r0, #72	@ 0x48
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ab8:	2101      	movs	r1, #1
 8002aba:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8002abc:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 8002ac0:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ac2:	f7ff ff58 	bl	8002976 <xQueueGenericReset>
	}
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002aca:	4603      	mov	r3, r0
 8002acc:	e7f4      	b.n	8002ab8 <xQueueGenericCreate+0x32>

08002ace <xQueueGenericSend>:
{
 8002ace:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002ad2:	460f      	mov	r7, r1
 8002ad4:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8002ad6:	4604      	mov	r4, r0
{
 8002ad8:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8002ada:	b940      	cbnz	r0, 8002aee <xQueueGenericSend+0x20>
 8002adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ae0:	f383 8811 	msr	BASEPRI, r3
 8002ae4:	f3bf 8f6f 	isb	sy
 8002ae8:	f3bf 8f4f 	dsb	sy
 8002aec:	e7fe      	b.n	8002aec <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002aee:	b951      	cbnz	r1, 8002b06 <xQueueGenericSend+0x38>
 8002af0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002af2:	b143      	cbz	r3, 8002b06 <xQueueGenericSend+0x38>
 8002af4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	e7fe      	b.n	8002b04 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b06:	2e02      	cmp	r6, #2
 8002b08:	d10b      	bne.n	8002b22 <xQueueGenericSend+0x54>
 8002b0a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d008      	beq.n	8002b22 <xQueueGenericSend+0x54>
 8002b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b14:	f383 8811 	msr	BASEPRI, r3
 8002b18:	f3bf 8f6f 	isb	sy
 8002b1c:	f3bf 8f4f 	dsb	sy
 8002b20:	e7fe      	b.n	8002b20 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b22:	f000 fe55 	bl	80037d0 <xTaskGetSchedulerState>
 8002b26:	4605      	mov	r5, r0
 8002b28:	b330      	cbz	r0, 8002b78 <xQueueGenericSend+0xaa>
 8002b2a:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8002b2c:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8002b30:	f001 f950 	bl	8003dd4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b34:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002b36:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d301      	bcc.n	8002b40 <xQueueGenericSend+0x72>
 8002b3c:	2e02      	cmp	r6, #2
 8002b3e:	d127      	bne.n	8002b90 <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002b40:	4632      	mov	r2, r6
 8002b42:	4639      	mov	r1, r7
 8002b44:	4620      	mov	r0, r4
 8002b46:	f7ff fe97 	bl	8002878 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b4a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002b4c:	b11b      	cbz	r3, 8002b56 <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b4e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002b52:	f000 fdad 	bl	80036b0 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 8002b56:	b148      	cbz	r0, 8002b6c <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 8002b58:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002b5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b60:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002b64:	f3bf 8f4f 	dsb	sy
 8002b68:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002b6c:	f001 f952 	bl	8003e14 <vPortExitCritical>
				return pdPASS;
 8002b70:	2001      	movs	r0, #1
}
 8002b72:	b004      	add	sp, #16
 8002b74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b78:	9b01      	ldr	r3, [sp, #4]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d0d6      	beq.n	8002b2c <xQueueGenericSend+0x5e>
 8002b7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b82:	f383 8811 	msr	BASEPRI, r3
 8002b86:	f3bf 8f6f 	isb	sy
 8002b8a:	f3bf 8f4f 	dsb	sy
 8002b8e:	e7fe      	b.n	8002b8e <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b90:	9b01      	ldr	r3, [sp, #4]
 8002b92:	b91b      	cbnz	r3, 8002b9c <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8002b94:	f001 f93e 	bl	8003e14 <vPortExitCritical>
					return errQUEUE_FULL;
 8002b98:	2000      	movs	r0, #0
 8002b9a:	e7ea      	b.n	8002b72 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8002b9c:	b915      	cbnz	r5, 8002ba4 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b9e:	a802      	add	r0, sp, #8
 8002ba0:	f000 fdc8 	bl	8003734 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002ba4:	f001 f936 	bl	8003e14 <vPortExitCritical>
		vTaskSuspendAll();
 8002ba8:	f000 fbcc 	bl	8003344 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bac:	f001 f912 	bl	8003dd4 <vPortEnterCritical>
 8002bb0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8002bb4:	2bff      	cmp	r3, #255	@ 0xff
 8002bb6:	bf08      	it	eq
 8002bb8:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8002bbc:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8002bc0:	2bff      	cmp	r3, #255	@ 0xff
 8002bc2:	bf08      	it	eq
 8002bc4:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8002bc8:	f001 f924 	bl	8003e14 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bcc:	a901      	add	r1, sp, #4
 8002bce:	a802      	add	r0, sp, #8
 8002bd0:	f000 fdbc 	bl	800374c <xTaskCheckForTimeOut>
 8002bd4:	bb38      	cbnz	r0, 8002c26 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002bd6:	f001 f8fd 	bl	8003dd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002bda:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002bdc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d10e      	bne.n	8002c00 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8002be2:	f001 f917 	bl	8003e14 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002be6:	9901      	ldr	r1, [sp, #4]
 8002be8:	f104 0010 	add.w	r0, r4, #16
 8002bec:	f000 fd26 	bl	800363c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002bf0:	4620      	mov	r0, r4
 8002bf2:	f7ff fe88 	bl	8002906 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002bf6:	f000 fc4d 	bl	8003494 <xTaskResumeAll>
 8002bfa:	b148      	cbz	r0, 8002c10 <xQueueGenericSend+0x142>
 8002bfc:	2501      	movs	r5, #1
 8002bfe:	e797      	b.n	8002b30 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 8002c00:	f001 f908 	bl	8003e14 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8002c04:	4620      	mov	r0, r4
 8002c06:	f7ff fe7e 	bl	8002906 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c0a:	f000 fc43 	bl	8003494 <xTaskResumeAll>
 8002c0e:	e7f5      	b.n	8002bfc <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8002c10:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002c14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c18:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002c1c:	f3bf 8f4f 	dsb	sy
 8002c20:	f3bf 8f6f 	isb	sy
 8002c24:	e7ea      	b.n	8002bfc <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8002c26:	4620      	mov	r0, r4
 8002c28:	f7ff fe6d 	bl	8002906 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c2c:	f000 fc32 	bl	8003494 <xTaskResumeAll>
			return errQUEUE_FULL;
 8002c30:	e7b2      	b.n	8002b98 <xQueueGenericSend+0xca>

08002c32 <xQueueGenericSendFromISR>:
{
 8002c32:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c36:	4689      	mov	r9, r1
 8002c38:	4617      	mov	r7, r2
 8002c3a:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8002c3c:	4604      	mov	r4, r0
 8002c3e:	b940      	cbnz	r0, 8002c52 <xQueueGenericSendFromISR+0x20>
 8002c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c44:	f383 8811 	msr	BASEPRI, r3
 8002c48:	f3bf 8f6f 	isb	sy
 8002c4c:	f3bf 8f4f 	dsb	sy
 8002c50:	e7fe      	b.n	8002c50 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c52:	b951      	cbnz	r1, 8002c6a <xQueueGenericSendFromISR+0x38>
 8002c54:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002c56:	b143      	cbz	r3, 8002c6a <xQueueGenericSendFromISR+0x38>
 8002c58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c5c:	f383 8811 	msr	BASEPRI, r3
 8002c60:	f3bf 8f6f 	isb	sy
 8002c64:	f3bf 8f4f 	dsb	sy
 8002c68:	e7fe      	b.n	8002c68 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c6a:	2e02      	cmp	r6, #2
 8002c6c:	d10b      	bne.n	8002c86 <xQueueGenericSendFromISR+0x54>
 8002c6e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002c70:	2b01      	cmp	r3, #1
 8002c72:	d008      	beq.n	8002c86 <xQueueGenericSendFromISR+0x54>
 8002c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c78:	f383 8811 	msr	BASEPRI, r3
 8002c7c:	f3bf 8f6f 	isb	sy
 8002c80:	f3bf 8f4f 	dsb	sy
 8002c84:	e7fe      	b.n	8002c84 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002c86:	f001 f97d 	bl	8003f84 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002c8a:	f3ef 8811 	mrs	r8, BASEPRI
 8002c8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c92:	f383 8811 	msr	BASEPRI, r3
 8002c96:	f3bf 8f6f 	isb	sy
 8002c9a:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002c9e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002ca0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d301      	bcc.n	8002caa <xQueueGenericSendFromISR+0x78>
 8002ca6:	2e02      	cmp	r6, #2
 8002ca8:	d11d      	bne.n	8002ce6 <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002caa:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cae:	4632      	mov	r2, r6
 8002cb0:	4649      	mov	r1, r9
 8002cb2:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8002cb4:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cb6:	f7ff fddf 	bl	8002878 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002cba:	1c6b      	adds	r3, r5, #1
 8002cbc:	d10e      	bne.n	8002cdc <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cbe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002cc0:	b13b      	cbz	r3, 8002cd2 <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002cc2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002cc6:	f000 fcf3 	bl	80036b0 <xTaskRemoveFromEventList>
 8002cca:	b110      	cbz	r0, 8002cd2 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8002ccc:	b10f      	cbz	r7, 8002cd2 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 8002cd2:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002cd4:	f388 8811 	msr	BASEPRI, r8
}
 8002cd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002cdc:	3501      	adds	r5, #1
 8002cde:	b26d      	sxtb	r5, r5
 8002ce0:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8002ce4:	e7f5      	b.n	8002cd2 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	e7f4      	b.n	8002cd4 <xQueueGenericSendFromISR+0xa2>

08002cea <xQueueReceive>:
{
 8002cea:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8002cee:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 8002cf0:	4604      	mov	r4, r0
{
 8002cf2:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002cf4:	b940      	cbnz	r0, 8002d08 <xQueueReceive+0x1e>
	__asm volatile
 8002cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cfa:	f383 8811 	msr	BASEPRI, r3
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	e7fe      	b.n	8002d06 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d08:	b951      	cbnz	r1, 8002d20 <xQueueReceive+0x36>
 8002d0a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002d0c:	b143      	cbz	r3, 8002d20 <xQueueReceive+0x36>
 8002d0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d12:	f383 8811 	msr	BASEPRI, r3
 8002d16:	f3bf 8f6f 	isb	sy
 8002d1a:	f3bf 8f4f 	dsb	sy
 8002d1e:	e7fe      	b.n	8002d1e <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d20:	f000 fd56 	bl	80037d0 <xTaskGetSchedulerState>
 8002d24:	4605      	mov	r5, r0
 8002d26:	b318      	cbz	r0, 8002d70 <xQueueReceive+0x86>
 8002d28:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8002d2a:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8002d2e:	f001 f851 	bl	8003dd4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d32:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002d34:	b347      	cbz	r7, 8002d88 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d36:	4631      	mov	r1, r6
 8002d38:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d3a:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d3c:	f7ff fdcf 	bl	80028de <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d40:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d42:	6923      	ldr	r3, [r4, #16]
 8002d44:	b173      	cbz	r3, 8002d64 <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d46:	f104 0010 	add.w	r0, r4, #16
 8002d4a:	f000 fcb1 	bl	80036b0 <xTaskRemoveFromEventList>
 8002d4e:	b148      	cbz	r0, 8002d64 <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8002d50:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002d54:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d58:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002d5c:	f3bf 8f4f 	dsb	sy
 8002d60:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002d64:	f001 f856 	bl	8003e14 <vPortExitCritical>
				return pdPASS;
 8002d68:	2001      	movs	r0, #1
}
 8002d6a:	b004      	add	sp, #16
 8002d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d70:	9b01      	ldr	r3, [sp, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0d9      	beq.n	8002d2a <xQueueReceive+0x40>
 8002d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d7a:	f383 8811 	msr	BASEPRI, r3
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f3bf 8f4f 	dsb	sy
 8002d86:	e7fe      	b.n	8002d86 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d88:	9b01      	ldr	r3, [sp, #4]
 8002d8a:	b91b      	cbnz	r3, 8002d94 <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8002d8c:	f001 f842 	bl	8003e14 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002d90:	2000      	movs	r0, #0
 8002d92:	e7ea      	b.n	8002d6a <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8002d94:	b915      	cbnz	r5, 8002d9c <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d96:	a802      	add	r0, sp, #8
 8002d98:	f000 fccc 	bl	8003734 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002d9c:	f001 f83a 	bl	8003e14 <vPortExitCritical>
		vTaskSuspendAll();
 8002da0:	f000 fad0 	bl	8003344 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002da4:	f001 f816 	bl	8003dd4 <vPortEnterCritical>
 8002da8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8002dac:	2bff      	cmp	r3, #255	@ 0xff
 8002dae:	bf08      	it	eq
 8002db0:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8002db4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8002db8:	2bff      	cmp	r3, #255	@ 0xff
 8002dba:	bf08      	it	eq
 8002dbc:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8002dc0:	f001 f828 	bl	8003e14 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002dc4:	a901      	add	r1, sp, #4
 8002dc6:	a802      	add	r0, sp, #8
 8002dc8:	f000 fcc0 	bl	800374c <xTaskCheckForTimeOut>
 8002dcc:	bb00      	cbnz	r0, 8002e10 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002dce:	4620      	mov	r0, r4
 8002dd0:	f7ff fd47 	bl	8002862 <prvIsQueueEmpty>
 8002dd4:	b1b0      	cbz	r0, 8002e04 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002dd6:	9901      	ldr	r1, [sp, #4]
 8002dd8:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002ddc:	f000 fc2e 	bl	800363c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002de0:	4620      	mov	r0, r4
 8002de2:	f7ff fd90 	bl	8002906 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002de6:	f000 fb55 	bl	8003494 <xTaskResumeAll>
 8002dea:	b948      	cbnz	r0, 8002e00 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8002dec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002df0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002df4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002df8:	f3bf 8f4f 	dsb	sy
 8002dfc:	f3bf 8f6f 	isb	sy
 8002e00:	2501      	movs	r5, #1
 8002e02:	e794      	b.n	8002d2e <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8002e04:	4620      	mov	r0, r4
 8002e06:	f7ff fd7e 	bl	8002906 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e0a:	f000 fb43 	bl	8003494 <xTaskResumeAll>
 8002e0e:	e7f7      	b.n	8002e00 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8002e10:	4620      	mov	r0, r4
 8002e12:	f7ff fd78 	bl	8002906 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e16:	f000 fb3d 	bl	8003494 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	f7ff fd21 	bl	8002862 <prvIsQueueEmpty>
 8002e20:	2800      	cmp	r0, #0
 8002e22:	d0ed      	beq.n	8002e00 <xQueueReceive+0x116>
 8002e24:	e7b4      	b.n	8002d90 <xQueueReceive+0xa6>

08002e26 <xQueueReceiveFromISR>:
{
 8002e26:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e2a:	4689      	mov	r9, r1
 8002e2c:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8002e2e:	4604      	mov	r4, r0
 8002e30:	b940      	cbnz	r0, 8002e44 <xQueueReceiveFromISR+0x1e>
 8002e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e36:	f383 8811 	msr	BASEPRI, r3
 8002e3a:	f3bf 8f6f 	isb	sy
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	e7fe      	b.n	8002e42 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e44:	b951      	cbnz	r1, 8002e5c <xQueueReceiveFromISR+0x36>
 8002e46:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002e48:	b143      	cbz	r3, 8002e5c <xQueueReceiveFromISR+0x36>
 8002e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	e7fe      	b.n	8002e5a <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e5c:	f001 f892 	bl	8003f84 <vPortValidateInterruptPriority>
	__asm volatile
 8002e60:	f3ef 8711 	mrs	r7, BASEPRI
 8002e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e68:	f383 8811 	msr	BASEPRI, r3
 8002e6c:	f3bf 8f6f 	isb	sy
 8002e70:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e74:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e76:	b30d      	cbz	r5, 8002ebc <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 8002e78:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e7c:	4649      	mov	r1, r9
 8002e7e:	4620      	mov	r0, r4
			const int8_t cRxLock = pxQueue->cRxLock;
 8002e80:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e82:	f7ff fd2c 	bl	80028de <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e86:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 8002e88:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e8a:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8002e8c:	d111      	bne.n	8002eb2 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e8e:	6923      	ldr	r3, [r4, #16]
 8002e90:	b153      	cbz	r3, 8002ea8 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e92:	f104 0010 	add.w	r0, r4, #16
 8002e96:	f000 fc0b 	bl	80036b0 <xTaskRemoveFromEventList>
 8002e9a:	b128      	cbz	r0, 8002ea8 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8002e9c:	f1b8 0f00 	cmp.w	r8, #0
 8002ea0:	d002      	beq.n	8002ea8 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8002ea8:	2001      	movs	r0, #1
	__asm volatile
 8002eaa:	f387 8811 	msr	BASEPRI, r7
}
 8002eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002eb2:	3601      	adds	r6, #1
 8002eb4:	b276      	sxtb	r6, r6
 8002eb6:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8002eba:	e7f5      	b.n	8002ea8 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8002ebc:	4628      	mov	r0, r5
 8002ebe:	e7f4      	b.n	8002eaa <xQueueReceiveFromISR+0x84>

08002ec0 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ec0:	2300      	movs	r3, #0
	{
 8002ec2:	b530      	push	{r4, r5, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002ec4:	4a06      	ldr	r2, [pc, #24]	@ (8002ee0 <vQueueAddToRegistry+0x20>)
 8002ec6:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8002eca:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8002ece:	b91d      	cbnz	r5, 8002ed8 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002ed0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002ed4:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002ed6:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002ed8:	3301      	adds	r3, #1
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d1f3      	bne.n	8002ec6 <vQueueAddToRegistry+0x6>
 8002ede:	e7fa      	b.n	8002ed6 <vQueueAddToRegistry+0x16>
 8002ee0:	20000be4 	.word	0x20000be4

08002ee4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002ee4:	b570      	push	{r4, r5, r6, lr}
 8002ee6:	4604      	mov	r4, r0
 8002ee8:	460d      	mov	r5, r1
 8002eea:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002eec:	f000 ff72 	bl	8003dd4 <vPortEnterCritical>
 8002ef0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8002ef4:	2bff      	cmp	r3, #255	@ 0xff
 8002ef6:	bf04      	itt	eq
 8002ef8:	2300      	moveq	r3, #0
 8002efa:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 8002efe:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8002f02:	2bff      	cmp	r3, #255	@ 0xff
 8002f04:	bf04      	itt	eq
 8002f06:	2300      	moveq	r3, #0
 8002f08:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8002f0c:	f000 ff82 	bl	8003e14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002f10:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002f12:	b92b      	cbnz	r3, 8002f20 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002f14:	4632      	mov	r2, r6
 8002f16:	4629      	mov	r1, r5
 8002f18:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002f1c:	f000 fba8 	bl	8003670 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002f20:	4620      	mov	r0, r4
	}
 8002f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8002f26:	f7ff bcee 	b.w	8002906 <prvUnlockQueue>
	...

08002f2c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f30:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002f32:	f000 ff4f 	bl	8003dd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002f36:	4b2f      	ldr	r3, [pc, #188]	@ (8002ff4 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 8002f38:	4e2f      	ldr	r6, [pc, #188]	@ (8002ff8 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	4f2f      	ldr	r7, [pc, #188]	@ (8002ffc <prvAddNewTaskToReadyList+0xd0>)
 8002f3e:	3201      	adds	r2, #1
 8002f40:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002f42:	6835      	ldr	r5, [r6, #0]
 8002f44:	2d00      	cmp	r5, #0
 8002f46:	d14a      	bne.n	8002fde <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002f48:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d11f      	bne.n	8002f90 <prvAddNewTaskToReadyList+0x64>
 8002f50:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f52:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f54:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002f56:	f7ff fc44 	bl	80027e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002f5a:	2d07      	cmp	r5, #7
 8002f5c:	f108 0814 	add.w	r8, r8, #20
 8002f60:	d1f7      	bne.n	8002f52 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002f62:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 8003000 <prvAddNewTaskToReadyList+0xd4>
	vListInitialise( &xDelayedTaskList2 );
 8002f66:	4d27      	ldr	r5, [pc, #156]	@ (8003004 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 8002f68:	4640      	mov	r0, r8
 8002f6a:	f7ff fc3a 	bl	80027e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002f6e:	4628      	mov	r0, r5
 8002f70:	f7ff fc37 	bl	80027e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002f74:	4824      	ldr	r0, [pc, #144]	@ (8003008 <prvAddNewTaskToReadyList+0xdc>)
 8002f76:	f7ff fc34 	bl	80027e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002f7a:	4824      	ldr	r0, [pc, #144]	@ (800300c <prvAddNewTaskToReadyList+0xe0>)
 8002f7c:	f7ff fc31 	bl	80027e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002f80:	4823      	ldr	r0, [pc, #140]	@ (8003010 <prvAddNewTaskToReadyList+0xe4>)
 8002f82:	f7ff fc2e 	bl	80027e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002f86:	4b23      	ldr	r3, [pc, #140]	@ (8003014 <prvAddNewTaskToReadyList+0xe8>)
 8002f88:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002f8c:	4b22      	ldr	r3, [pc, #136]	@ (8003018 <prvAddNewTaskToReadyList+0xec>)
 8002f8e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002f90:	4a22      	ldr	r2, [pc, #136]	@ (800301c <prvAddNewTaskToReadyList+0xf0>)
		prvAddTaskToReadyList( pxNewTCB );
 8002f92:	4923      	ldr	r1, [pc, #140]	@ (8003020 <prvAddNewTaskToReadyList+0xf4>)
		uxTaskNumber++;
 8002f94:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002f96:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002f98:	3301      	adds	r3, #1
 8002f9a:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002fa0:	4093      	lsls	r3, r2
 8002fa2:	4303      	orrs	r3, r0
 8002fa4:	2014      	movs	r0, #20
 8002fa6:	600b      	str	r3, [r1, #0]
 8002fa8:	fb00 7002 	mla	r0, r0, r2, r7
 8002fac:	1d21      	adds	r1, r4, #4
 8002fae:	f7ff fc26 	bl	80027fe <vListInsertEnd>
	taskEXIT_CRITICAL();
 8002fb2:	f000 ff2f 	bl	8003e14 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002fb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003024 <prvAddNewTaskToReadyList+0xf8>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	b173      	cbz	r3, 8002fda <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002fbc:	6833      	ldr	r3, [r6, #0]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fc0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d209      	bcs.n	8002fda <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8002fc6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002fca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fce:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002fd2:	f3bf 8f4f 	dsb	sy
 8002fd6:	f3bf 8f6f 	isb	sy
}
 8002fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8002fde:	4b11      	ldr	r3, [pc, #68]	@ (8003024 <prvAddNewTaskToReadyList+0xf8>)
 8002fe0:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fe2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8002fe4:	2a00      	cmp	r2, #0
 8002fe6:	d1d3      	bne.n	8002f90 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002fe8:	6832      	ldr	r2, [r6, #0]
 8002fea:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002fec:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8002fee:	bf98      	it	ls
 8002ff0:	6034      	strls	r4, [r6, #0]
 8002ff2:	e7cd      	b.n	8002f90 <prvAddNewTaskToReadyList+0x64>
 8002ff4:	20000c48 	.word	0x20000c48
 8002ff8:	20000d48 	.word	0x20000d48
 8002ffc:	20000cbc 	.word	0x20000cbc
 8003000:	20000ca8 	.word	0x20000ca8
 8003004:	20000c94 	.word	0x20000c94
 8003008:	20000c78 	.word	0x20000c78
 800300c:	20000c64 	.word	0x20000c64
 8003010:	20000c4c 	.word	0x20000c4c
 8003014:	20000c90 	.word	0x20000c90
 8003018:	20000c8c 	.word	0x20000c8c
 800301c:	20000c2c 	.word	0x20000c2c
 8003020:	20000c40 	.word	0x20000c40
 8003024:	20000c3c 	.word	0x20000c3c

08003028 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800302a:	4b1a      	ldr	r3, [pc, #104]	@ (8003094 <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800302c:	4d1a      	ldr	r5, [pc, #104]	@ (8003098 <prvAddCurrentTaskToDelayedList+0x70>)
{
 800302e:	4606      	mov	r6, r0
const TickType_t xConstTickCount = xTickCount;
 8003030:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003032:	6828      	ldr	r0, [r5, #0]
{
 8003034:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003036:	3004      	adds	r0, #4
 8003038:	f7ff fc03 	bl	8002842 <uxListRemove>
 800303c:	b940      	cbnz	r0, 8003050 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800303e:	682a      	ldr	r2, [r5, #0]
 8003040:	4916      	ldr	r1, [pc, #88]	@ (800309c <prvAddCurrentTaskToDelayedList+0x74>)
 8003042:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8003044:	2201      	movs	r2, #1
 8003046:	680b      	ldr	r3, [r1, #0]
 8003048:	4082      	lsls	r2, r0
 800304a:	ea23 0302 	bic.w	r3, r3, r2
 800304e:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003050:	1c73      	adds	r3, r6, #1
 8003052:	d107      	bne.n	8003064 <prvAddCurrentTaskToDelayedList+0x3c>
 8003054:	b137      	cbz	r7, 8003064 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003056:	6829      	ldr	r1, [r5, #0]
 8003058:	4811      	ldr	r0, [pc, #68]	@ (80030a0 <prvAddCurrentTaskToDelayedList+0x78>)
 800305a:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800305c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003060:	f7ff bbcd 	b.w	80027fe <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003064:	682b      	ldr	r3, [r5, #0]
 8003066:	19a4      	adds	r4, r4, r6
 8003068:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800306a:	d307      	bcc.n	800307c <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800306c:	4b0d      	ldr	r3, [pc, #52]	@ (80030a4 <prvAddCurrentTaskToDelayedList+0x7c>)
 800306e:	6818      	ldr	r0, [r3, #0]
 8003070:	6829      	ldr	r1, [r5, #0]
}
 8003072:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003076:	3104      	adds	r1, #4
 8003078:	f7ff bbcc 	b.w	8002814 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800307c:	4b0a      	ldr	r3, [pc, #40]	@ (80030a8 <prvAddCurrentTaskToDelayedList+0x80>)
 800307e:	6818      	ldr	r0, [r3, #0]
 8003080:	6829      	ldr	r1, [r5, #0]
 8003082:	3104      	adds	r1, #4
 8003084:	f7ff fbc6 	bl	8002814 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003088:	4b08      	ldr	r3, [pc, #32]	@ (80030ac <prvAddCurrentTaskToDelayedList+0x84>)
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 800308e:	bf88      	it	hi
 8003090:	601c      	strhi	r4, [r3, #0]
}
 8003092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003094:	20000c44 	.word	0x20000c44
 8003098:	20000d48 	.word	0x20000d48
 800309c:	20000c40 	.word	0x20000c40
 80030a0:	20000c4c 	.word	0x20000c4c
 80030a4:	20000c8c 	.word	0x20000c8c
 80030a8:	20000c90 	.word	0x20000c90
 80030ac:	20000c28 	.word	0x20000c28

080030b0 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030b0:	4a06      	ldr	r2, [pc, #24]	@ (80030cc <prvResetNextTaskUnblockTime+0x1c>)
 80030b2:	6813      	ldr	r3, [r2, #0]
 80030b4:	6819      	ldr	r1, [r3, #0]
 80030b6:	4b06      	ldr	r3, [pc, #24]	@ (80030d0 <prvResetNextTaskUnblockTime+0x20>)
 80030b8:	b919      	cbnz	r1, 80030c2 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80030ba:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80030be:	601a      	str	r2, [r3, #0]
}
 80030c0:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80030c2:	6812      	ldr	r2, [r2, #0]
 80030c4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80030c6:	68d2      	ldr	r2, [r2, #12]
 80030c8:	6852      	ldr	r2, [r2, #4]
 80030ca:	e7f8      	b.n	80030be <prvResetNextTaskUnblockTime+0xe>
 80030cc:	20000c90 	.word	0x20000c90
 80030d0:	20000c28 	.word	0x20000c28

080030d4 <prvDeleteTCB>:
	{
 80030d4:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80030d6:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
	{
 80030da:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80030dc:	b93b      	cbnz	r3, 80030ee <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80030de:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80030e0:	f001 f836 	bl	8004150 <vPortFree>
				vPortFree( pxTCB );
 80030e4:	4620      	mov	r0, r4
	}
 80030e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80030ea:	f001 b831 	b.w	8004150 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d0f9      	beq.n	80030e6 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d008      	beq.n	8003108 <prvDeleteTCB+0x34>
	__asm volatile
 80030f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030fa:	f383 8811 	msr	BASEPRI, r3
 80030fe:	f3bf 8f6f 	isb	sy
 8003102:	f3bf 8f4f 	dsb	sy
 8003106:	e7fe      	b.n	8003106 <prvDeleteTCB+0x32>
	}
 8003108:	bd10      	pop	{r4, pc}
	...

0800310c <prvIdleTask>:
{
 800310c:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800310e:	4c13      	ldr	r4, [pc, #76]	@ (800315c <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8003110:	4f13      	ldr	r7, [pc, #76]	@ (8003160 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8003112:	4d14      	ldr	r5, [pc, #80]	@ (8003164 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003114:	6823      	ldr	r3, [r4, #0]
 8003116:	b973      	cbnz	r3, 8003136 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003118:	4b13      	ldr	r3, [pc, #76]	@ (8003168 <prvIdleTask+0x5c>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d9f8      	bls.n	8003112 <prvIdleTask+0x6>
				taskYIELD();
 8003120:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003124:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003128:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	f3bf 8f6f 	isb	sy
 8003134:	e7ed      	b.n	8003112 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 8003136:	f000 fe4d 	bl	8003dd4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800313e:	1d30      	adds	r0, r6, #4
 8003140:	f7ff fb7f 	bl	8002842 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003144:	682b      	ldr	r3, [r5, #0]
 8003146:	3b01      	subs	r3, #1
 8003148:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	3b01      	subs	r3, #1
 800314e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8003150:	f000 fe60 	bl	8003e14 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8003154:	4630      	mov	r0, r6
 8003156:	f7ff ffbd 	bl	80030d4 <prvDeleteTCB>
 800315a:	e7db      	b.n	8003114 <prvIdleTask+0x8>
 800315c:	20000c60 	.word	0x20000c60
 8003160:	20000c64 	.word	0x20000c64
 8003164:	20000c48 	.word	0x20000c48
 8003168:	20000cbc 	.word	0x20000cbc

0800316c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800316c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003170:	4607      	mov	r7, r0
 8003172:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	@ 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003176:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800317a:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 800317c:	3a01      	subs	r2, #1
 800317e:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8003182:	4699      	mov	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003184:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003188:	1e4b      	subs	r3, r1, #1
 800318a:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800318e:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003190:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003194:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8003198:	b108      	cbz	r0, 800319e <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800319a:	428b      	cmp	r3, r1
 800319c:	d1f8      	bne.n	8003190 <prvInitialiseNewTask.constprop.0+0x24>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800319e:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031a0:	f04f 0a00 	mov.w	sl, #0
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80031a4:	2d06      	cmp	r5, #6
 80031a6:	bf28      	it	cs
 80031a8:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031aa:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 80031ac:	e9c4 5a11 	strd	r5, sl, [r4, #68]	@ 0x44
	pxNewTCB->uxPriority = uxPriority;
 80031b0:	62e5      	str	r5, [r4, #44]	@ 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80031b2:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80031b6:	f7ff fb1f 	bl	80027f8 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031ba:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80031be:	f104 0018 	add.w	r0, r4, #24
 80031c2:	f7ff fb19 	bl	80027f8 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80031c6:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031ca:	464a      	mov	r2, r9
 80031cc:	4639      	mov	r1, r7
 80031ce:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80031d0:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80031d2:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80031d4:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80031d6:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80031da:	f000 fdd3 	bl	8003d84 <pxPortInitialiseStack>
 80031de:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80031e0:	f1b8 0f00 	cmp.w	r8, #0
 80031e4:	d001      	beq.n	80031ea <prvInitialiseNewTask.constprop.0+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80031e6:	f8c8 4000 	str.w	r4, [r8]
}
 80031ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080031ee <xTaskCreateStatic>:
	{
 80031ee:	b570      	push	{r4, r5, r6, lr}
 80031f0:	b086      	sub	sp, #24
 80031f2:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80031f6:	b945      	cbnz	r5, 800320a <xTaskCreateStatic+0x1c>
 80031f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031fc:	f383 8811 	msr	BASEPRI, r3
 8003200:	f3bf 8f6f 	isb	sy
 8003204:	f3bf 8f4f 	dsb	sy
 8003208:	e7fe      	b.n	8003208 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800320a:	b944      	cbnz	r4, 800321e <xTaskCreateStatic+0x30>
 800320c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	e7fe      	b.n	800321c <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800321e:	2654      	movs	r6, #84	@ 0x54
 8003220:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003222:	9e05      	ldr	r6, [sp, #20]
 8003224:	2e54      	cmp	r6, #84	@ 0x54
 8003226:	d008      	beq.n	800323a <xTaskCreateStatic+0x4c>
 8003228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	e7fe      	b.n	8003238 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800323a:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800323c:	2502      	movs	r5, #2
 800323e:	f884 5051 	strb.w	r5, [r4, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003242:	ad04      	add	r5, sp, #16
 8003244:	9501      	str	r5, [sp, #4]
 8003246:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8003248:	9402      	str	r4, [sp, #8]
 800324a:	9500      	str	r5, [sp, #0]
 800324c:	f7ff ff8e 	bl	800316c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003250:	4620      	mov	r0, r4
 8003252:	f7ff fe6b 	bl	8002f2c <prvAddNewTaskToReadyList>
	}
 8003256:	9804      	ldr	r0, [sp, #16]
 8003258:	b006      	add	sp, #24
 800325a:	bd70      	pop	{r4, r5, r6, pc}

0800325c <xTaskCreate>:
	{
 800325c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003260:	4607      	mov	r7, r0
 8003262:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003264:	0090      	lsls	r0, r2, #2
	{
 8003266:	4688      	mov	r8, r1
 8003268:	4616      	mov	r6, r2
 800326a:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800326c:	f000 fede 	bl	800402c <pvPortMalloc>
			if( pxStack != NULL )
 8003270:	4605      	mov	r5, r0
 8003272:	b920      	cbnz	r0, 800327e <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003274:	f04f 30ff 	mov.w	r0, #4294967295
	}
 8003278:	b005      	add	sp, #20
 800327a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800327e:	2054      	movs	r0, #84	@ 0x54
 8003280:	f000 fed4 	bl	800402c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8003284:	4604      	mov	r4, r0
 8003286:	b198      	cbz	r0, 80032b0 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003288:	2300      	movs	r3, #0
 800328a:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800328e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8003290:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003292:	9301      	str	r3, [sp, #4]
 8003294:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003296:	4632      	mov	r2, r6
 8003298:	4641      	mov	r1, r8
 800329a:	9002      	str	r0, [sp, #8]
 800329c:	9300      	str	r3, [sp, #0]
 800329e:	4638      	mov	r0, r7
 80032a0:	464b      	mov	r3, r9
 80032a2:	f7ff ff63 	bl	800316c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80032a6:	4620      	mov	r0, r4
 80032a8:	f7ff fe40 	bl	8002f2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80032ac:	2001      	movs	r0, #1
 80032ae:	e7e3      	b.n	8003278 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 80032b0:	4628      	mov	r0, r5
 80032b2:	f000 ff4d 	bl	8004150 <vPortFree>
		if( pxNewTCB != NULL )
 80032b6:	e7dd      	b.n	8003274 <xTaskCreate+0x18>

080032b8 <vTaskStartScheduler>:
{
 80032b8:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80032ba:	2400      	movs	r4, #0
{
 80032bc:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80032be:	aa07      	add	r2, sp, #28
 80032c0:	a906      	add	r1, sp, #24
 80032c2:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80032c4:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80032c8:	f7fc ff42 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80032cc:	9b05      	ldr	r3, [sp, #20]
 80032ce:	9a07      	ldr	r2, [sp, #28]
 80032d0:	9302      	str	r3, [sp, #8]
 80032d2:	9b06      	ldr	r3, [sp, #24]
 80032d4:	4916      	ldr	r1, [pc, #88]	@ (8003330 <vTaskStartScheduler+0x78>)
 80032d6:	e9cd 4300 	strd	r4, r3, [sp]
 80032da:	4816      	ldr	r0, [pc, #88]	@ (8003334 <vTaskStartScheduler+0x7c>)
 80032dc:	4623      	mov	r3, r4
 80032de:	f7ff ff86 	bl	80031ee <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80032e2:	b318      	cbz	r0, 800332c <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 80032e4:	f000 fb26 	bl	8003934 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80032e8:	2801      	cmp	r0, #1
 80032ea:	d114      	bne.n	8003316 <vTaskStartScheduler+0x5e>
 80032ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f0:	f383 8811 	msr	BASEPRI, r3
 80032f4:	f3bf 8f6f 	isb	sy
 80032f8:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80032fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003300:	4b0d      	ldr	r3, [pc, #52]	@ (8003338 <vTaskStartScheduler+0x80>)
 8003302:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003304:	4b0d      	ldr	r3, [pc, #52]	@ (800333c <vTaskStartScheduler+0x84>)
 8003306:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003308:	4b0d      	ldr	r3, [pc, #52]	@ (8003340 <vTaskStartScheduler+0x88>)
 800330a:	601c      	str	r4, [r3, #0]
}
 800330c:	b008      	add	sp, #32
 800330e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8003312:	f000 bddf 	b.w	8003ed4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003316:	3001      	adds	r0, #1
 8003318:	d108      	bne.n	800332c <vTaskStartScheduler+0x74>
 800331a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800331e:	f383 8811 	msr	BASEPRI, r3
 8003322:	f3bf 8f6f 	isb	sy
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	e7fe      	b.n	800332a <vTaskStartScheduler+0x72>
}
 800332c:	b008      	add	sp, #32
 800332e:	bd10      	pop	{r4, pc}
 8003330:	08006cfc 	.word	0x08006cfc
 8003334:	0800310d 	.word	0x0800310d
 8003338:	20000c28 	.word	0x20000c28
 800333c:	20000c3c 	.word	0x20000c3c
 8003340:	20000c44 	.word	0x20000c44

08003344 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8003344:	4a02      	ldr	r2, [pc, #8]	@ (8003350 <vTaskSuspendAll+0xc>)
 8003346:	6813      	ldr	r3, [r2, #0]
 8003348:	3301      	adds	r3, #1
 800334a:	6013      	str	r3, [r2, #0]
}
 800334c:	4770      	bx	lr
 800334e:	bf00      	nop
 8003350:	20000c24 	.word	0x20000c24

08003354 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8003354:	4b01      	ldr	r3, [pc, #4]	@ (800335c <xTaskGetTickCount+0x8>)
 8003356:	6818      	ldr	r0, [r3, #0]
}
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	20000c44 	.word	0x20000c44

08003360 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003360:	4b41      	ldr	r3, [pc, #260]	@ (8003468 <xTaskIncrementTick+0x108>)
{
 8003362:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d175      	bne.n	8003458 <xTaskIncrementTick+0xf8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800336c:	4b3f      	ldr	r3, [pc, #252]	@ (800346c <xTaskIncrementTick+0x10c>)
 800336e:	681c      	ldr	r4, [r3, #0]
 8003370:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8003372:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003374:	b9bc      	cbnz	r4, 80033a6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8003376:	4b3e      	ldr	r3, [pc, #248]	@ (8003470 <xTaskIncrementTick+0x110>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	6812      	ldr	r2, [r2, #0]
 800337c:	b142      	cbz	r2, 8003390 <xTaskIncrementTick+0x30>
 800337e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	e7fe      	b.n	800338e <xTaskIncrementTick+0x2e>
 8003390:	4a38      	ldr	r2, [pc, #224]	@ (8003474 <xTaskIncrementTick+0x114>)
 8003392:	6819      	ldr	r1, [r3, #0]
 8003394:	6810      	ldr	r0, [r2, #0]
 8003396:	6018      	str	r0, [r3, #0]
 8003398:	6011      	str	r1, [r2, #0]
 800339a:	4a37      	ldr	r2, [pc, #220]	@ (8003478 <xTaskIncrementTick+0x118>)
 800339c:	6813      	ldr	r3, [r2, #0]
 800339e:	3301      	adds	r3, #1
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	f7ff fe85 	bl	80030b0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 80033a6:	4d35      	ldr	r5, [pc, #212]	@ (800347c <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 80033a8:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80033ac:	682b      	ldr	r3, [r5, #0]
 80033ae:	4e34      	ldr	r6, [pc, #208]	@ (8003480 <xTaskIncrementTick+0x120>)
 80033b0:	42a3      	cmp	r3, r4
 80033b2:	4f34      	ldr	r7, [pc, #208]	@ (8003484 <xTaskIncrementTick+0x124>)
 80033b4:	d911      	bls.n	80033da <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033b6:	2114      	movs	r1, #20
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80033bc:	434a      	muls	r2, r1
 80033be:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 80033c0:	2a02      	cmp	r2, #2
 80033c2:	bf28      	it	cs
 80033c4:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80033c8:	4a2f      	ldr	r2, [pc, #188]	@ (8003488 <xTaskIncrementTick+0x128>)
 80033ca:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80033cc:	2a00      	cmp	r2, #0
}
 80033ce:	bf0c      	ite	eq
 80033d0:	4658      	moveq	r0, fp
 80033d2:	2001      	movne	r0, #1
 80033d4:	b003      	add	sp, #12
 80033d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033da:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8003470 <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 80033de:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 800348c <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033e2:	f8da 2000 	ldr.w	r2, [sl]
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	b91a      	cbnz	r2, 80033f2 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80033ea:	f04f 32ff 	mov.w	r2, #4294967295
 80033ee:	602a      	str	r2, [r5, #0]
					break;
 80033f0:	e7e1      	b.n	80033b6 <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80033f2:	f8da 2000 	ldr.w	r2, [sl]
 80033f6:	68d2      	ldr	r2, [r2, #12]
 80033f8:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80033fc:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 8003400:	428c      	cmp	r4, r1
 8003402:	d201      	bcs.n	8003408 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8003404:	6029      	str	r1, [r5, #0]
						break;
 8003406:	e7d6      	b.n	80033b6 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003408:	f108 0304 	add.w	r3, r8, #4
 800340c:	4618      	mov	r0, r3
 800340e:	9301      	str	r3, [sp, #4]
 8003410:	f7ff fa17 	bl	8002842 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003414:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8003418:	b119      	cbz	r1, 8003422 <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800341a:	f108 0018 	add.w	r0, r8, #24
 800341e:	f7ff fa10 	bl	8002842 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003422:	2201      	movs	r2, #1
 8003424:	f04f 0c14 	mov.w	ip, #20
 8003428:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800342c:	f8d9 3000 	ldr.w	r3, [r9]
 8003430:	fa02 f100 	lsl.w	r1, r2, r0
 8003434:	4319      	orrs	r1, r3
 8003436:	fb0c 6000 	mla	r0, ip, r0, r6
 800343a:	f8c9 1000 	str.w	r1, [r9]
 800343e:	f108 0104 	add.w	r1, r8, #4
 8003442:	f7ff f9dc 	bl	80027fe <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003446:	6838      	ldr	r0, [r7, #0]
 8003448:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800344c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800344e:	4291      	cmp	r1, r2
 8003450:	bf28      	it	cs
 8003452:	f04f 0b01 	movcs.w	fp, #1
 8003456:	e7c4      	b.n	80033e2 <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 8003458:	4a0d      	ldr	r2, [pc, #52]	@ (8003490 <xTaskIncrementTick+0x130>)
BaseType_t xSwitchRequired = pdFALSE;
 800345a:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800345e:	6813      	ldr	r3, [r2, #0]
 8003460:	3301      	adds	r3, #1
 8003462:	6013      	str	r3, [r2, #0]
 8003464:	e7b0      	b.n	80033c8 <xTaskIncrementTick+0x68>
 8003466:	bf00      	nop
 8003468:	20000c24 	.word	0x20000c24
 800346c:	20000c44 	.word	0x20000c44
 8003470:	20000c90 	.word	0x20000c90
 8003474:	20000c8c 	.word	0x20000c8c
 8003478:	20000c30 	.word	0x20000c30
 800347c:	20000c28 	.word	0x20000c28
 8003480:	20000cbc 	.word	0x20000cbc
 8003484:	20000d48 	.word	0x20000d48
 8003488:	20000c34 	.word	0x20000c34
 800348c:	20000c40 	.word	0x20000c40
 8003490:	20000c38 	.word	0x20000c38

08003494 <xTaskResumeAll>:
{
 8003494:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8003498:	4c31      	ldr	r4, [pc, #196]	@ (8003560 <xTaskResumeAll+0xcc>)
 800349a:	6823      	ldr	r3, [r4, #0]
 800349c:	b943      	cbnz	r3, 80034b0 <xTaskResumeAll+0x1c>
 800349e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a2:	f383 8811 	msr	BASEPRI, r3
 80034a6:	f3bf 8f6f 	isb	sy
 80034aa:	f3bf 8f4f 	dsb	sy
 80034ae:	e7fe      	b.n	80034ae <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 80034b0:	f000 fc90 	bl	8003dd4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 80034b4:	6823      	ldr	r3, [r4, #0]
 80034b6:	3b01      	subs	r3, #1
 80034b8:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034ba:	6824      	ldr	r4, [r4, #0]
 80034bc:	b12c      	cbz	r4, 80034ca <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 80034be:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80034c0:	f000 fca8 	bl	8003e14 <vPortExitCritical>
}
 80034c4:	4620      	mov	r0, r4
 80034c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80034ca:	4b26      	ldr	r3, [pc, #152]	@ (8003564 <xTaskResumeAll+0xd0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d0f5      	beq.n	80034be <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80034d2:	4d25      	ldr	r5, [pc, #148]	@ (8003568 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 80034d4:	4e25      	ldr	r6, [pc, #148]	@ (800356c <xTaskResumeAll+0xd8>)
 80034d6:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8003570 <xTaskResumeAll+0xdc>
 80034da:	e01f      	b.n	800351c <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80034dc:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 80034de:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80034e0:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034e2:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034e6:	f104 0018 	add.w	r0, r4, #24
 80034ea:	f7ff f9aa 	bl	8002842 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034ee:	4648      	mov	r0, r9
 80034f0:	f7ff f9a7 	bl	8002842 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80034f4:	2014      	movs	r0, #20
 80034f6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80034f8:	6831      	ldr	r1, [r6, #0]
 80034fa:	fa07 f302 	lsl.w	r3, r7, r2
 80034fe:	430b      	orrs	r3, r1
 8003500:	fb00 8002 	mla	r0, r0, r2, r8
 8003504:	4649      	mov	r1, r9
 8003506:	6033      	str	r3, [r6, #0]
 8003508:	f7ff f979 	bl	80027fe <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800350c:	4b19      	ldr	r3, [pc, #100]	@ (8003574 <xTaskResumeAll+0xe0>)
 800350e:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003514:	429a      	cmp	r2, r3
 8003516:	d301      	bcc.n	800351c <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8003518:	4b17      	ldr	r3, [pc, #92]	@ (8003578 <xTaskResumeAll+0xe4>)
 800351a:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800351c:	682b      	ldr	r3, [r5, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d1dc      	bne.n	80034dc <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8003522:	b10c      	cbz	r4, 8003528 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8003524:	f7ff fdc4 	bl	80030b0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003528:	4d14      	ldr	r5, [pc, #80]	@ (800357c <xTaskResumeAll+0xe8>)
 800352a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800352c:	b144      	cbz	r4, 8003540 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 800352e:	2701      	movs	r7, #1
 8003530:	4e11      	ldr	r6, [pc, #68]	@ (8003578 <xTaskResumeAll+0xe4>)
							if( xTaskIncrementTick() != pdFALSE )
 8003532:	f7ff ff15 	bl	8003360 <xTaskIncrementTick>
 8003536:	b100      	cbz	r0, 800353a <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8003538:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800353a:	3c01      	subs	r4, #1
 800353c:	d1f9      	bne.n	8003532 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 800353e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8003540:	4b0d      	ldr	r3, [pc, #52]	@ (8003578 <xTaskResumeAll+0xe4>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d0ba      	beq.n	80034be <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8003548:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800354c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003550:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003554:	f3bf 8f4f 	dsb	sy
 8003558:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800355c:	2401      	movs	r4, #1
 800355e:	e7af      	b.n	80034c0 <xTaskResumeAll+0x2c>
 8003560:	20000c24 	.word	0x20000c24
 8003564:	20000c48 	.word	0x20000c48
 8003568:	20000c78 	.word	0x20000c78
 800356c:	20000c40 	.word	0x20000c40
 8003570:	20000cbc 	.word	0x20000cbc
 8003574:	20000d48 	.word	0x20000d48
 8003578:	20000c34 	.word	0x20000c34
 800357c:	20000c38 	.word	0x20000c38

08003580 <vTaskDelay>:
	{
 8003580:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003582:	b950      	cbnz	r0, 800359a <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8003584:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800358c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	f3bf 8f6f 	isb	sy
	}
 8003598:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800359a:	4b0a      	ldr	r3, [pc, #40]	@ (80035c4 <vTaskDelay+0x44>)
 800359c:	6819      	ldr	r1, [r3, #0]
 800359e:	b141      	cbz	r1, 80035b2 <vTaskDelay+0x32>
 80035a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035a4:	f383 8811 	msr	BASEPRI, r3
 80035a8:	f3bf 8f6f 	isb	sy
 80035ac:	f3bf 8f4f 	dsb	sy
 80035b0:	e7fe      	b.n	80035b0 <vTaskDelay+0x30>
			vTaskSuspendAll();
 80035b2:	f7ff fec7 	bl	8003344 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80035b6:	f7ff fd37 	bl	8003028 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 80035ba:	f7ff ff6b 	bl	8003494 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 80035be:	2800      	cmp	r0, #0
 80035c0:	d0e0      	beq.n	8003584 <vTaskDelay+0x4>
 80035c2:	e7e9      	b.n	8003598 <vTaskDelay+0x18>
 80035c4:	20000c24 	.word	0x20000c24

080035c8 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035c8:	4b17      	ldr	r3, [pc, #92]	@ (8003628 <vTaskSwitchContext+0x60>)
{
 80035ca:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	4b17      	ldr	r3, [pc, #92]	@ (800362c <vTaskSwitchContext+0x64>)
 80035d0:	b112      	cbz	r2, 80035d8 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 80035d2:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80035d4:	601a      	str	r2, [r3, #0]
}
 80035d6:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 80035d8:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80035da:	4b15      	ldr	r3, [pc, #84]	@ (8003630 <vTaskSwitchContext+0x68>)
 80035dc:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80035de:	fab2 f282 	clz	r2, r2
 80035e2:	2314      	movs	r3, #20
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	f1c2 021f 	rsb	r2, r2, #31
 80035ea:	4353      	muls	r3, r2
 80035ec:	4911      	ldr	r1, [pc, #68]	@ (8003634 <vTaskSwitchContext+0x6c>)
 80035ee:	58cc      	ldr	r4, [r1, r3]
 80035f0:	18c8      	adds	r0, r1, r3
 80035f2:	b944      	cbnz	r4, 8003606 <vTaskSwitchContext+0x3e>
	__asm volatile
 80035f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035f8:	f383 8811 	msr	BASEPRI, r3
 80035fc:	f3bf 8f6f 	isb	sy
 8003600:	f3bf 8f4f 	dsb	sy
 8003604:	e7fe      	b.n	8003604 <vTaskSwitchContext+0x3c>
 8003606:	6844      	ldr	r4, [r0, #4]
 8003608:	3308      	adds	r3, #8
 800360a:	6864      	ldr	r4, [r4, #4]
 800360c:	440b      	add	r3, r1
 800360e:	429c      	cmp	r4, r3
 8003610:	bf08      	it	eq
 8003612:	6863      	ldreq	r3, [r4, #4]
 8003614:	6044      	str	r4, [r0, #4]
 8003616:	bf08      	it	eq
 8003618:	6043      	streq	r3, [r0, #4]
 800361a:	2314      	movs	r3, #20
 800361c:	fb03 1102 	mla	r1, r3, r2, r1
 8003620:	684b      	ldr	r3, [r1, #4]
 8003622:	68da      	ldr	r2, [r3, #12]
 8003624:	4b04      	ldr	r3, [pc, #16]	@ (8003638 <vTaskSwitchContext+0x70>)
 8003626:	e7d5      	b.n	80035d4 <vTaskSwitchContext+0xc>
 8003628:	20000c24 	.word	0x20000c24
 800362c:	20000c34 	.word	0x20000c34
 8003630:	20000c40 	.word	0x20000c40
 8003634:	20000cbc 	.word	0x20000cbc
 8003638:	20000d48 	.word	0x20000d48

0800363c <vTaskPlaceOnEventList>:
{
 800363c:	b510      	push	{r4, lr}
 800363e:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8003640:	b940      	cbnz	r0, 8003654 <vTaskPlaceOnEventList+0x18>
 8003642:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003646:	f383 8811 	msr	BASEPRI, r3
 800364a:	f3bf 8f6f 	isb	sy
 800364e:	f3bf 8f4f 	dsb	sy
 8003652:	e7fe      	b.n	8003652 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003654:	4b05      	ldr	r3, [pc, #20]	@ (800366c <vTaskPlaceOnEventList+0x30>)
 8003656:	6819      	ldr	r1, [r3, #0]
 8003658:	3118      	adds	r1, #24
 800365a:	f7ff f8db 	bl	8002814 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800365e:	4620      	mov	r0, r4
}
 8003660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003664:	2101      	movs	r1, #1
 8003666:	f7ff bcdf 	b.w	8003028 <prvAddCurrentTaskToDelayedList>
 800366a:	bf00      	nop
 800366c:	20000d48 	.word	0x20000d48

08003670 <vTaskPlaceOnEventListRestricted>:
	{
 8003670:	b538      	push	{r3, r4, r5, lr}
 8003672:	460d      	mov	r5, r1
 8003674:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8003676:	b940      	cbnz	r0, 800368a <vTaskPlaceOnEventListRestricted+0x1a>
 8003678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800367c:	f383 8811 	msr	BASEPRI, r3
 8003680:	f3bf 8f6f 	isb	sy
 8003684:	f3bf 8f4f 	dsb	sy
 8003688:	e7fe      	b.n	8003688 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800368a:	4b08      	ldr	r3, [pc, #32]	@ (80036ac <vTaskPlaceOnEventListRestricted+0x3c>)
 800368c:	6819      	ldr	r1, [r3, #0]
 800368e:	3118      	adds	r1, #24
 8003690:	f7ff f8b5 	bl	80027fe <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8003694:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003696:	4621      	mov	r1, r4
 8003698:	bf08      	it	eq
 800369a:	4628      	moveq	r0, r5
	}
 800369c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80036a0:	bf18      	it	ne
 80036a2:	f04f 30ff 	movne.w	r0, #4294967295
 80036a6:	f7ff bcbf 	b.w	8003028 <prvAddCurrentTaskToDelayedList>
 80036aa:	bf00      	nop
 80036ac:	20000d48 	.word	0x20000d48

080036b0 <xTaskRemoveFromEventList>:
{
 80036b0:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80036b2:	68c3      	ldr	r3, [r0, #12]
 80036b4:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 80036b6:	b944      	cbnz	r4, 80036ca <xTaskRemoveFromEventList+0x1a>
 80036b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036bc:	f383 8811 	msr	BASEPRI, r3
 80036c0:	f3bf 8f6f 	isb	sy
 80036c4:	f3bf 8f4f 	dsb	sy
 80036c8:	e7fe      	b.n	80036c8 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80036ca:	f104 0518 	add.w	r5, r4, #24
 80036ce:	4628      	mov	r0, r5
 80036d0:	f7ff f8b7 	bl	8002842 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036d4:	4b11      	ldr	r3, [pc, #68]	@ (800371c <xTaskRemoveFromEventList+0x6c>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	b9e3      	cbnz	r3, 8003714 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80036da:	1d25      	adds	r5, r4, #4
 80036dc:	4628      	mov	r0, r5
 80036de:	f7ff f8b0 	bl	8002842 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80036e2:	2301      	movs	r3, #1
 80036e4:	490e      	ldr	r1, [pc, #56]	@ (8003720 <xTaskRemoveFromEventList+0x70>)
 80036e6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80036e8:	6808      	ldr	r0, [r1, #0]
 80036ea:	4093      	lsls	r3, r2
 80036ec:	4303      	orrs	r3, r0
 80036ee:	2014      	movs	r0, #20
 80036f0:	600b      	str	r3, [r1, #0]
 80036f2:	4629      	mov	r1, r5
 80036f4:	4b0b      	ldr	r3, [pc, #44]	@ (8003724 <xTaskRemoveFromEventList+0x74>)
 80036f6:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80036fa:	f7ff f880 	bl	80027fe <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036fe:	4b0a      	ldr	r3, [pc, #40]	@ (8003728 <xTaskRemoveFromEventList+0x78>)
 8003700:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003706:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8003708:	bf85      	ittet	hi
 800370a:	2001      	movhi	r0, #1
 800370c:	4b07      	ldrhi	r3, [pc, #28]	@ (800372c <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 800370e:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8003710:	6018      	strhi	r0, [r3, #0]
}
 8003712:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003714:	4629      	mov	r1, r5
 8003716:	4806      	ldr	r0, [pc, #24]	@ (8003730 <xTaskRemoveFromEventList+0x80>)
 8003718:	e7ef      	b.n	80036fa <xTaskRemoveFromEventList+0x4a>
 800371a:	bf00      	nop
 800371c:	20000c24 	.word	0x20000c24
 8003720:	20000c40 	.word	0x20000c40
 8003724:	20000cbc 	.word	0x20000cbc
 8003728:	20000d48 	.word	0x20000d48
 800372c:	20000c34 	.word	0x20000c34
 8003730:	20000c78 	.word	0x20000c78

08003734 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003734:	4b03      	ldr	r3, [pc, #12]	@ (8003744 <vTaskInternalSetTimeOutState+0x10>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800373a:	4b03      	ldr	r3, [pc, #12]	@ (8003748 <vTaskInternalSetTimeOutState+0x14>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6043      	str	r3, [r0, #4]
}
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	20000c30 	.word	0x20000c30
 8003748:	20000c44 	.word	0x20000c44

0800374c <xTaskCheckForTimeOut>:
{
 800374c:	b570      	push	{r4, r5, r6, lr}
 800374e:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8003750:	4605      	mov	r5, r0
 8003752:	b940      	cbnz	r0, 8003766 <xTaskCheckForTimeOut+0x1a>
 8003754:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003758:	f383 8811 	msr	BASEPRI, r3
 800375c:	f3bf 8f6f 	isb	sy
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	e7fe      	b.n	8003764 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8003766:	b941      	cbnz	r1, 800377a <xTaskCheckForTimeOut+0x2e>
 8003768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	e7fe      	b.n	8003778 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800377a:	f000 fb2b 	bl	8003dd4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800377e:	4b0f      	ldr	r3, [pc, #60]	@ (80037bc <xTaskCheckForTimeOut+0x70>)
 8003780:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8003782:	6823      	ldr	r3, [r4, #0]
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	d010      	beq.n	80037aa <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003788:	480d      	ldr	r0, [pc, #52]	@ (80037c0 <xTaskCheckForTimeOut+0x74>)
 800378a:	682e      	ldr	r6, [r5, #0]
 800378c:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800378e:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003790:	4286      	cmp	r6, r0
 8003792:	d001      	beq.n	8003798 <xTaskCheckForTimeOut+0x4c>
 8003794:	428a      	cmp	r2, r1
 8003796:	d90f      	bls.n	80037b8 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003798:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800379a:	4283      	cmp	r3, r0
 800379c:	d90a      	bls.n	80037b4 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800379e:	1a5b      	subs	r3, r3, r1
 80037a0:	4413      	add	r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 80037a2:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 80037a4:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80037a6:	f7ff ffc5 	bl	8003734 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 80037aa:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 80037ac:	f000 fb32 	bl	8003e14 <vPortExitCritical>
}
 80037b0:	4620      	mov	r0, r4
 80037b2:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 80037b4:	2300      	movs	r3, #0
 80037b6:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 80037b8:	2401      	movs	r4, #1
 80037ba:	e7f7      	b.n	80037ac <xTaskCheckForTimeOut+0x60>
 80037bc:	20000c44 	.word	0x20000c44
 80037c0:	20000c30 	.word	0x20000c30

080037c4 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 80037c4:	2201      	movs	r2, #1
 80037c6:	4b01      	ldr	r3, [pc, #4]	@ (80037cc <vTaskMissedYield+0x8>)
 80037c8:	601a      	str	r2, [r3, #0]
}
 80037ca:	4770      	bx	lr
 80037cc:	20000c34 	.word	0x20000c34

080037d0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80037d0:	4b05      	ldr	r3, [pc, #20]	@ (80037e8 <xTaskGetSchedulerState+0x18>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	b133      	cbz	r3, 80037e4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037d6:	4b05      	ldr	r3, [pc, #20]	@ (80037ec <xTaskGetSchedulerState+0x1c>)
 80037d8:	6818      	ldr	r0, [r3, #0]
 80037da:	fab0 f080 	clz	r0, r0
 80037de:	0940      	lsrs	r0, r0, #5
 80037e0:	0040      	lsls	r0, r0, #1
 80037e2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80037e4:	2001      	movs	r0, #1
	}
 80037e6:	4770      	bx	lr
 80037e8:	20000c3c 	.word	0x20000c3c
 80037ec:	20000c24 	.word	0x20000c24

080037f0 <xTaskPriorityDisinherit>:
	{
 80037f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80037f2:	4604      	mov	r4, r0
 80037f4:	b908      	cbnz	r0, 80037fa <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 80037f6:	2000      	movs	r0, #0
	}
 80037f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 80037fa:	4b22      	ldr	r3, [pc, #136]	@ (8003884 <xTaskPriorityDisinherit+0x94>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4283      	cmp	r3, r0
 8003800:	d008      	beq.n	8003814 <xTaskPriorityDisinherit+0x24>
 8003802:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003806:	f383 8811 	msr	BASEPRI, r3
 800380a:	f3bf 8f6f 	isb	sy
 800380e:	f3bf 8f4f 	dsb	sy
 8003812:	e7fe      	b.n	8003812 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8003814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003816:	b943      	cbnz	r3, 800382a <xTaskPriorityDisinherit+0x3a>
 8003818:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800381c:	f383 8811 	msr	BASEPRI, r3
 8003820:	f3bf 8f6f 	isb	sy
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	e7fe      	b.n	8003828 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800382a:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 800382c:	6c42      	ldr	r2, [r0, #68]	@ 0x44
			( pxTCB->uxMutexesHeld )--;
 800382e:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003830:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8003832:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003834:	d0df      	beq.n	80037f6 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003836:	2b00      	cmp	r3, #0
 8003838:	d1dd      	bne.n	80037f6 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800383a:	1d06      	adds	r6, r0, #4
 800383c:	4630      	mov	r0, r6
 800383e:	f7ff f800 	bl	8002842 <uxListRemove>
 8003842:	4f11      	ldr	r7, [pc, #68]	@ (8003888 <xTaskPriorityDisinherit+0x98>)
 8003844:	4a11      	ldr	r2, [pc, #68]	@ (800388c <xTaskPriorityDisinherit+0x9c>)
 8003846:	b950      	cbnz	r0, 800385e <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003848:	2314      	movs	r3, #20
 800384a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800384c:	434b      	muls	r3, r1
 800384e:	58fb      	ldr	r3, [r7, r3]
 8003850:	b92b      	cbnz	r3, 800385e <xTaskPriorityDisinherit+0x6e>
 8003852:	2501      	movs	r5, #1
 8003854:	6813      	ldr	r3, [r2, #0]
 8003856:	408d      	lsls	r5, r1
 8003858:	ea23 0305 	bic.w	r3, r3, r5
 800385c:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800385e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
					prvAddTaskToReadyList( pxTCB );
 8003860:	2014      	movs	r0, #20
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003862:	f1c3 0107 	rsb	r1, r3, #7
 8003866:	61a1      	str	r1, [r4, #24]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003868:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxTCB );
 800386a:	2401      	movs	r4, #1
 800386c:	6811      	ldr	r1, [r2, #0]
 800386e:	fa04 f503 	lsl.w	r5, r4, r3
 8003872:	fb00 7003 	mla	r0, r0, r3, r7
 8003876:	430d      	orrs	r5, r1
 8003878:	4631      	mov	r1, r6
 800387a:	6015      	str	r5, [r2, #0]
 800387c:	f7fe ffbf 	bl	80027fe <vListInsertEnd>
					xReturn = pdTRUE;
 8003880:	4620      	mov	r0, r4
		return xReturn;
 8003882:	e7b9      	b.n	80037f8 <xTaskPriorityDisinherit+0x8>
 8003884:	20000d48 	.word	0x20000d48
 8003888:	20000cbc 	.word	0x20000cbc
 800388c:	20000c40 	.word	0x20000c40

08003890 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8003890:	4291      	cmp	r1, r2
{
 8003892:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003894:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003896:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8003898:	d80a      	bhi.n	80038b0 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800389a:	1ad2      	subs	r2, r2, r3
 800389c:	6983      	ldr	r3, [r0, #24]
 800389e:	429a      	cmp	r2, r3
 80038a0:	d20d      	bcs.n	80038be <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80038a2:	4b08      	ldr	r3, [pc, #32]	@ (80038c4 <prvInsertTimerInActiveList+0x34>)
 80038a4:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038a6:	6818      	ldr	r0, [r3, #0]
 80038a8:	f7fe ffb4 	bl	8002814 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 80038ac:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 80038ae:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d201      	bcs.n	80038b8 <prvInsertTimerInActiveList+0x28>
 80038b4:	4299      	cmp	r1, r3
 80038b6:	d202      	bcs.n	80038be <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038b8:	4b03      	ldr	r3, [pc, #12]	@ (80038c8 <prvInsertTimerInActiveList+0x38>)
 80038ba:	1d01      	adds	r1, r0, #4
 80038bc:	e7f3      	b.n	80038a6 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 80038be:	2001      	movs	r0, #1
	return xProcessTimerNow;
 80038c0:	e7f5      	b.n	80038ae <prvInsertTimerInActiveList+0x1e>
 80038c2:	bf00      	nop
 80038c4:	20000e18 	.word	0x20000e18
 80038c8:	20000e1c 	.word	0x20000e1c

080038cc <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80038cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80038ce:	4c11      	ldr	r4, [pc, #68]	@ (8003914 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80038d0:	f000 fa80 	bl	8003dd4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80038d4:	6825      	ldr	r5, [r4, #0]
 80038d6:	b9bd      	cbnz	r5, 8003908 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80038d8:	4f0f      	ldr	r7, [pc, #60]	@ (8003918 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80038da:	4e10      	ldr	r6, [pc, #64]	@ (800391c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80038dc:	4638      	mov	r0, r7
 80038de:	f7fe ff80 	bl	80027e2 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80038e2:	4630      	mov	r0, r6
 80038e4:	f7fe ff7d 	bl	80027e2 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80038e8:	4b0d      	ldr	r3, [pc, #52]	@ (8003920 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80038ea:	210c      	movs	r1, #12
			pxCurrentTimerList = &xActiveTimerList1;
 80038ec:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80038ee:	4b0d      	ldr	r3, [pc, #52]	@ (8003924 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80038f0:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 80038f2:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80038f4:	4a0c      	ldr	r2, [pc, #48]	@ (8003928 <prvCheckForValidListAndQueue+0x5c>)
 80038f6:	4b0d      	ldr	r3, [pc, #52]	@ (800392c <prvCheckForValidListAndQueue+0x60>)
 80038f8:	9500      	str	r5, [sp, #0]
 80038fa:	f7ff f87b 	bl	80029f4 <xQueueGenericCreateStatic>
 80038fe:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003900:	b110      	cbz	r0, 8003908 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003902:	490b      	ldr	r1, [pc, #44]	@ (8003930 <prvCheckForValidListAndQueue+0x64>)
 8003904:	f7ff fadc 	bl	8002ec0 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8003908:	b003      	add	sp, #12
 800390a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800390e:	f000 ba81 	b.w	8003e14 <vPortExitCritical>
 8003912:	bf00      	nop
 8003914:	20000e14 	.word	0x20000e14
 8003918:	20000e34 	.word	0x20000e34
 800391c:	20000e20 	.word	0x20000e20
 8003920:	20000e1c 	.word	0x20000e1c
 8003924:	20000e18 	.word	0x20000e18
 8003928:	20000d94 	.word	0x20000d94
 800392c:	20000d4c 	.word	0x20000d4c
 8003930:	08006d01 	.word	0x08006d01

08003934 <xTimerCreateTimerTask>:
{
 8003934:	b510      	push	{r4, lr}
 8003936:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8003938:	f7ff ffc8 	bl	80038cc <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800393c:	4b12      	ldr	r3, [pc, #72]	@ (8003988 <xTimerCreateTimerTask+0x54>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	b1b3      	cbz	r3, 8003970 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003942:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003944:	aa07      	add	r2, sp, #28
 8003946:	a906      	add	r1, sp, #24
 8003948:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800394a:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800394e:	f7fc fc0b 	bl	8000168 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003952:	9b05      	ldr	r3, [sp, #20]
 8003954:	9a07      	ldr	r2, [sp, #28]
 8003956:	9302      	str	r3, [sp, #8]
 8003958:	9b06      	ldr	r3, [sp, #24]
 800395a:	490c      	ldr	r1, [pc, #48]	@ (800398c <xTimerCreateTimerTask+0x58>)
 800395c:	9301      	str	r3, [sp, #4]
 800395e:	2302      	movs	r3, #2
 8003960:	480b      	ldr	r0, [pc, #44]	@ (8003990 <xTimerCreateTimerTask+0x5c>)
 8003962:	9300      	str	r3, [sp, #0]
 8003964:	4623      	mov	r3, r4
 8003966:	f7ff fc42 	bl	80031ee <xTaskCreateStatic>
 800396a:	4b0a      	ldr	r3, [pc, #40]	@ (8003994 <xTimerCreateTimerTask+0x60>)
 800396c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800396e:	b940      	cbnz	r0, 8003982 <xTimerCreateTimerTask+0x4e>
 8003970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8003980:	e7fe      	b.n	8003980 <xTimerCreateTimerTask+0x4c>
}
 8003982:	2001      	movs	r0, #1
 8003984:	b008      	add	sp, #32
 8003986:	bd10      	pop	{r4, pc}
 8003988:	20000e14 	.word	0x20000e14
 800398c:	08006d06 	.word	0x08006d06
 8003990:	08003b55 	.word	0x08003b55
 8003994:	20000e10 	.word	0x20000e10

08003998 <xTimerCreate>:
	{
 8003998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800399c:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800399e:	202c      	movs	r0, #44	@ 0x2c
	{
 80039a0:	460d      	mov	r5, r1
 80039a2:	4617      	mov	r7, r2
 80039a4:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 80039a6:	f000 fb41 	bl	800402c <pvPortMalloc>
		if( pxNewTimer != NULL )
 80039aa:	4604      	mov	r4, r0
 80039ac:	b1c0      	cbz	r0, 80039e0 <xTimerCreate+0x48>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80039ae:	b945      	cbnz	r5, 80039c2 <xTimerCreate+0x2a>
 80039b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039b4:	f383 8811 	msr	BASEPRI, r3
 80039b8:	f3bf 8f6f 	isb	sy
 80039bc:	f3bf 8f4f 	dsb	sy
 80039c0:	e7fe      	b.n	80039c0 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
 80039c2:	f7ff ff83 	bl	80038cc <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80039c6:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 80039c8:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80039cc:	6263      	str	r3, [r4, #36]	@ 0x24
		pxNewTimer->pcTimerName = pcTimerName;
 80039ce:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 80039d2:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80039d4:	1d20      	adds	r0, r4, #4
 80039d6:	f7fe ff0f 	bl	80027f8 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 80039da:	2300      	movs	r3, #0
 80039dc:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
	}
 80039e0:	4620      	mov	r0, r4
 80039e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080039e6 <xTimerCreateStatic>:
	{
 80039e6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80039ea:	461e      	mov	r6, r3
			volatile size_t xSize = sizeof( StaticTimer_t );
 80039ec:	232c      	movs	r3, #44	@ 0x2c
 80039ee:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Timer_t ) );
 80039f0:	9b01      	ldr	r3, [sp, #4]
	{
 80039f2:	4680      	mov	r8, r0
			configASSERT( xSize == sizeof( Timer_t ) );
 80039f4:	2b2c      	cmp	r3, #44	@ 0x2c
	{
 80039f6:	460d      	mov	r5, r1
 80039f8:	4617      	mov	r7, r2
 80039fa:	9c09      	ldr	r4, [sp, #36]	@ 0x24
			configASSERT( xSize == sizeof( Timer_t ) );
 80039fc:	d008      	beq.n	8003a10 <xTimerCreateStatic+0x2a>
 80039fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a02:	f383 8811 	msr	BASEPRI, r3
 8003a06:	f3bf 8f6f 	isb	sy
 8003a0a:	f3bf 8f4f 	dsb	sy
 8003a0e:	e7fe      	b.n	8003a0e <xTimerCreateStatic+0x28>
		configASSERT( pxTimerBuffer );
 8003a10:	b944      	cbnz	r4, 8003a24 <xTimerCreateStatic+0x3e>
 8003a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a16:	f383 8811 	msr	BASEPRI, r3
 8003a1a:	f3bf 8f6f 	isb	sy
 8003a1e:	f3bf 8f4f 	dsb	sy
 8003a22:	e7fe      	b.n	8003a22 <xTimerCreateStatic+0x3c>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003a24:	b941      	cbnz	r1, 8003a38 <xTimerCreateStatic+0x52>
 8003a26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a2a:	f383 8811 	msr	BASEPRI, r3
 8003a2e:	f3bf 8f6f 	isb	sy
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	e7fe      	b.n	8003a36 <xTimerCreateStatic+0x50>
		prvCheckForValidListAndQueue();
 8003a38:	f7ff ff48 	bl	80038cc <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003a3c:	9b08      	ldr	r3, [sp, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003a3e:	1d20      	adds	r0, r4, #4
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003a40:	6263      	str	r3, [r4, #36]	@ 0x24
		pxNewTimer->uxAutoReload = uxAutoReload;
 8003a42:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 8003a46:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 8003a4a:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003a4c:	f7fe fed4 	bl	80027f8 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8003a50:	2301      	movs	r3, #1
	}
 8003a52:	4620      	mov	r0, r4
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8003a54:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
	}
 8003a58:	b002      	add	sp, #8
 8003a5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003a60 <xTimerGenericCommand>:
{
 8003a60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003a62:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8003a64:	4604      	mov	r4, r0
{
 8003a66:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8003a68:	b940      	cbnz	r0, 8003a7c <xTimerGenericCommand+0x1c>
 8003a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a6e:	f383 8811 	msr	BASEPRI, r3
 8003a72:	f3bf 8f6f 	isb	sy
 8003a76:	f3bf 8f4f 	dsb	sy
 8003a7a:	e7fe      	b.n	8003a7a <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8003a7c:	4d0c      	ldr	r5, [pc, #48]	@ (8003ab0 <xTimerGenericCommand+0x50>)
 8003a7e:	6828      	ldr	r0, [r5, #0]
 8003a80:	b178      	cbz	r0, 8003aa2 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a82:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003a84:	e9cd 1601 	strd	r1, r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8003a88:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003a8a:	dc0c      	bgt.n	8003aa6 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a8c:	f7ff fea0 	bl	80037d0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a90:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003a92:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a94:	bf14      	ite	ne
 8003a96:	461a      	movne	r2, r3
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003a98:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003a9a:	6828      	ldr	r0, [r5, #0]
 8003a9c:	a901      	add	r1, sp, #4
 8003a9e:	f7ff f816 	bl	8002ace <xQueueGenericSend>
}
 8003aa2:	b004      	add	sp, #16
 8003aa4:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	a901      	add	r1, sp, #4
 8003aaa:	f7ff f8c2 	bl	8002c32 <xQueueGenericSendFromISR>
 8003aae:	e7f8      	b.n	8003aa2 <xTimerGenericCommand+0x42>
 8003ab0:	20000e14 	.word	0x20000e14

08003ab4 <prvSampleTimeNow>:
{
 8003ab4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ab8:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8003aba:	f7ff fc4b 	bl	8003354 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8003abe:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 8003b48 <prvSampleTimeNow+0x94>
	xTimeNow = xTaskGetTickCount();
 8003ac2:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8003ac4:	f8d8 3000 	ldr.w	r3, [r8]
 8003ac8:	4283      	cmp	r3, r0
 8003aca:	d909      	bls.n	8003ae0 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003acc:	4f1f      	ldr	r7, [pc, #124]	@ (8003b4c <prvSampleTimeNow+0x98>)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	b96a      	cbnz	r2, 8003af0 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8003ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8003b50 <prvSampleTimeNow+0x9c>)
 8003ad6:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003ad8:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8003ada:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e000      	b.n	8003ae2 <prvSampleTimeNow+0x2e>
 8003ae0:	2300      	movs	r3, #0
}
 8003ae2:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8003ae4:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8003ae6:	f8c8 5000 	str.w	r5, [r8]
}
 8003aea:	b002      	add	sp, #8
 8003aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003af0:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003af2:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003af4:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003af8:	f104 0a04 	add.w	sl, r4, #4
 8003afc:	4650      	mov	r0, sl
 8003afe:	f7fe fea0 	bl	8002842 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b02:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003b04:	4620      	mov	r0, r4
 8003b06:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003b08:	69e3      	ldr	r3, [r4, #28]
 8003b0a:	2b01      	cmp	r3, #1
 8003b0c:	d1df      	bne.n	8003ace <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003b0e:	69a3      	ldr	r3, [r4, #24]
 8003b10:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8003b12:	4599      	cmp	r9, r3
 8003b14:	d206      	bcs.n	8003b24 <prvSampleTimeNow+0x70>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b16:	4651      	mov	r1, sl
 8003b18:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003b1a:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b1c:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b1e:	f7fe fe79 	bl	8002814 <vListInsert>
 8003b22:	e7d4      	b.n	8003ace <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b24:	2300      	movs	r3, #0
 8003b26:	464a      	mov	r2, r9
 8003b28:	4619      	mov	r1, r3
 8003b2a:	4620      	mov	r0, r4
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	f7ff ff97 	bl	8003a60 <xTimerGenericCommand>
				configASSERT( xResult );
 8003b32:	2800      	cmp	r0, #0
 8003b34:	d1cb      	bne.n	8003ace <prvSampleTimeNow+0x1a>
 8003b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	e7fe      	b.n	8003b46 <prvSampleTimeNow+0x92>
 8003b48:	20000e0c 	.word	0x20000e0c
 8003b4c:	20000e1c 	.word	0x20000e1c
 8003b50:	20000e18 	.word	0x20000e18

08003b54 <prvTimerTask>:
{
 8003b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003b58:	4e64      	ldr	r6, [pc, #400]	@ (8003cec <prvTimerTask+0x198>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003b5a:	4f65      	ldr	r7, [pc, #404]	@ (8003cf0 <prvTimerTask+0x19c>)
{
 8003b5c:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003b5e:	6833      	ldr	r3, [r6, #0]
 8003b60:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003b62:	2d00      	cmp	r5, #0
 8003b64:	d033      	beq.n	8003bce <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8003b6c:	f7ff fbea 	bl	8003344 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b70:	a803      	add	r0, sp, #12
 8003b72:	f7ff ff9f 	bl	8003ab4 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 8003b76:	9c03      	ldr	r4, [sp, #12]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b78:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 8003b7a:	2c00      	cmp	r4, #0
 8003b7c:	d175      	bne.n	8003c6a <prvTimerTask+0x116>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003b7e:	2d00      	cmp	r5, #0
 8003b80:	d058      	beq.n	8003c34 <prvTimerTask+0xe0>
 8003b82:	4540      	cmp	r0, r8
 8003b84:	d35c      	bcc.n	8003c40 <prvTimerTask+0xec>
				( void ) xTaskResumeAll();
 8003b86:	f7ff fc85 	bl	8003494 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003b8a:	6833      	ldr	r3, [r6, #0]
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b90:	1d28      	adds	r0, r5, #4
 8003b92:	f7fe fe56 	bl	8002842 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003b96:	69eb      	ldr	r3, [r5, #28]
 8003b98:	2b01      	cmp	r3, #1
 8003b9a:	d11a      	bne.n	8003bd2 <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003b9c:	69a9      	ldr	r1, [r5, #24]
 8003b9e:	4643      	mov	r3, r8
 8003ba0:	464a      	mov	r2, r9
 8003ba2:	4628      	mov	r0, r5
 8003ba4:	4441      	add	r1, r8
 8003ba6:	f7ff fe73 	bl	8003890 <prvInsertTimerInActiveList>
 8003baa:	b190      	cbz	r0, 8003bd2 <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003bac:	4623      	mov	r3, r4
 8003bae:	4642      	mov	r2, r8
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	4628      	mov	r0, r5
 8003bb4:	9400      	str	r4, [sp, #0]
 8003bb6:	f7ff ff53 	bl	8003a60 <xTimerGenericCommand>
			configASSERT( xResult );
 8003bba:	b950      	cbnz	r0, 8003bd2 <prvTimerTask+0x7e>
 8003bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc0:	f383 8811 	msr	BASEPRI, r3
 8003bc4:	f3bf 8f6f 	isb	sy
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	e7fe      	b.n	8003bcc <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 8003bce:	46a8      	mov	r8, r5
 8003bd0:	e7cc      	b.n	8003b6c <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003bd2:	4628      	mov	r0, r5
 8003bd4:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003bd6:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003bd8:	2200      	movs	r2, #0
 8003bda:	6838      	ldr	r0, [r7, #0]
 8003bdc:	a903      	add	r1, sp, #12
 8003bde:	f7ff f884 	bl	8002cea <xQueueReceive>
 8003be2:	2800      	cmp	r0, #0
 8003be4:	d0bb      	beq.n	8003b5e <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003be6:	9b03      	ldr	r3, [sp, #12]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	dbf5      	blt.n	8003bd8 <prvTimerTask+0x84>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003bec:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003bee:	6963      	ldr	r3, [r4, #20]
 8003bf0:	b113      	cbz	r3, 8003bf8 <prvTimerTask+0xa4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bf2:	1d20      	adds	r0, r4, #4
 8003bf4:	f7fe fe25 	bl	8002842 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003bf8:	a802      	add	r0, sp, #8
 8003bfa:	f7ff ff5b 	bl	8003ab4 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 8003bfe:	9b03      	ldr	r3, [sp, #12]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c00:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 8003c02:	2b09      	cmp	r3, #9
 8003c04:	d8e8      	bhi.n	8003bd8 <prvTimerTask+0x84>
 8003c06:	a101      	add	r1, pc, #4	@ (adr r1, 8003c0c <prvTimerTask+0xb8>)
 8003c08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003c0c:	08003c71 	.word	0x08003c71
 8003c10:	08003c71 	.word	0x08003c71
 8003c14:	08003c71 	.word	0x08003c71
 8003c18:	08003bd9 	.word	0x08003bd9
 8003c1c:	08003cb5 	.word	0x08003cb5
 8003c20:	08003cd9 	.word	0x08003cd9
 8003c24:	08003c71 	.word	0x08003c71
 8003c28:	08003c71 	.word	0x08003c71
 8003c2c:	08003bd9 	.word	0x08003bd9
 8003c30:	08003cb5 	.word	0x08003cb5
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003c34:	4b2f      	ldr	r3, [pc, #188]	@ (8003cf4 <prvTimerTask+0x1a0>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681c      	ldr	r4, [r3, #0]
 8003c3a:	fab4 f484 	clz	r4, r4
 8003c3e:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003c40:	4622      	mov	r2, r4
 8003c42:	6838      	ldr	r0, [r7, #0]
 8003c44:	eba8 0109 	sub.w	r1, r8, r9
 8003c48:	f7ff f94c 	bl	8002ee4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003c4c:	f7ff fc22 	bl	8003494 <xTaskResumeAll>
 8003c50:	2800      	cmp	r0, #0
 8003c52:	d1c1      	bne.n	8003bd8 <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 8003c54:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003c58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c5c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	f3bf 8f6f 	isb	sy
 8003c68:	e7b6      	b.n	8003bd8 <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 8003c6a:	f7ff fc13 	bl	8003494 <xTaskResumeAll>
}
 8003c6e:	e7b3      	b.n	8003bd8 <prvTimerTask+0x84>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003c70:	69a1      	ldr	r1, [r4, #24]
 8003c72:	9b04      	ldr	r3, [sp, #16]
 8003c74:	4620      	mov	r0, r4
 8003c76:	4419      	add	r1, r3
 8003c78:	f7ff fe0a 	bl	8003890 <prvInsertTimerInActiveList>
 8003c7c:	2800      	cmp	r0, #0
 8003c7e:	d0ab      	beq.n	8003bd8 <prvTimerTask+0x84>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c80:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003c82:	4620      	mov	r0, r4
 8003c84:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003c86:	69e3      	ldr	r3, [r4, #28]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d1a5      	bne.n	8003bd8 <prvTimerTask+0x84>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	69a2      	ldr	r2, [r4, #24]
 8003c90:	9904      	ldr	r1, [sp, #16]
 8003c92:	4620      	mov	r0, r4
 8003c94:	440a      	add	r2, r1
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	4619      	mov	r1, r3
 8003c9a:	f7ff fee1 	bl	8003a60 <xTimerGenericCommand>
							configASSERT( xResult );
 8003c9e:	2800      	cmp	r0, #0
 8003ca0:	d19a      	bne.n	8003bd8 <prvTimerTask+0x84>
 8003ca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ca6:	f383 8811 	msr	BASEPRI, r3
 8003caa:	f3bf 8f6f 	isb	sy
 8003cae:	f3bf 8f4f 	dsb	sy
 8003cb2:	e7fe      	b.n	8003cb2 <prvTimerTask+0x15e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003cb4:	9904      	ldr	r1, [sp, #16]
 8003cb6:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003cb8:	b941      	cbnz	r1, 8003ccc <prvTimerTask+0x178>
 8003cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cbe:	f383 8811 	msr	BASEPRI, r3
 8003cc2:	f3bf 8f6f 	isb	sy
 8003cc6:	f3bf 8f4f 	dsb	sy
 8003cca:	e7fe      	b.n	8003cca <prvTimerTask+0x176>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003ccc:	4603      	mov	r3, r0
 8003cce:	4401      	add	r1, r0
 8003cd0:	4620      	mov	r0, r4
 8003cd2:	f7ff fddd 	bl	8003890 <prvInsertTimerInActiveList>
					break;
 8003cd6:	e77f      	b.n	8003bd8 <prvTimerTask+0x84>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003cd8:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	f47f af7b 	bne.w	8003bd8 <prvTimerTask+0x84>
							vPortFree( pxTimer );
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	f000 fa34 	bl	8004150 <vPortFree>
 8003ce8:	e776      	b.n	8003bd8 <prvTimerTask+0x84>
 8003cea:	bf00      	nop
 8003cec:	20000e1c 	.word	0x20000e1c
 8003cf0:	20000e14 	.word	0x20000e14
 8003cf4:	20000e18 	.word	0x20000e18

08003cf8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8003cf8:	b510      	push	{r4, lr}
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );
 8003cfa:	4604      	mov	r4, r0
 8003cfc:	b940      	cbnz	r0, 8003d10 <xTimerIsTimerActive+0x18>
 8003cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d02:	f383 8811 	msr	BASEPRI, r3
 8003d06:	f3bf 8f6f 	isb	sy
 8003d0a:	f3bf 8f4f 	dsb	sy
 8003d0e:	e7fe      	b.n	8003d0e <xTimerIsTimerActive+0x16>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8003d10:	f000 f860 	bl	8003dd4 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 8003d14:	6964      	ldr	r4, [r4, #20]
 8003d16:	3c00      	subs	r4, #0
 8003d18:	bf18      	it	ne
 8003d1a:	2401      	movne	r4, #1
	}
	taskEXIT_CRITICAL();
 8003d1c:	f000 f87a 	bl	8003e14 <vPortExitCritical>

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8003d20:	4620      	mov	r0, r4
 8003d22:	bd10      	pop	{r4, pc}

08003d24 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003d24:	4806      	ldr	r0, [pc, #24]	@ (8003d40 <prvPortStartFirstTask+0x1c>)
 8003d26:	6800      	ldr	r0, [r0, #0]
 8003d28:	6800      	ldr	r0, [r0, #0]
 8003d2a:	f380 8808 	msr	MSP, r0
 8003d2e:	b662      	cpsie	i
 8003d30:	b661      	cpsie	f
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	f3bf 8f6f 	isb	sy
 8003d3a:	df00      	svc	0
 8003d3c:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d3e:	0000      	.short	0x0000
 8003d40:	e000ed08 	.word	0xe000ed08

08003d44 <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 8003d44:	2300      	movs	r3, #0
{
 8003d46:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8003d48:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 8003d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d80 <prvTaskExitError+0x3c>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	3301      	adds	r3, #1
 8003d50:	d008      	beq.n	8003d64 <prvTaskExitError+0x20>
 8003d52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d56:	f383 8811 	msr	BASEPRI, r3
 8003d5a:	f3bf 8f6f 	isb	sy
 8003d5e:	f3bf 8f4f 	dsb	sy
 8003d62:	e7fe      	b.n	8003d62 <prvTaskExitError+0x1e>
 8003d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8003d74:	9b01      	ldr	r3, [sp, #4]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d0fc      	beq.n	8003d74 <prvTaskExitError+0x30>
}
 8003d7a:	b002      	add	sp, #8
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	20000014 	.word	0x20000014

08003d84 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d84:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003d88:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d8c:	4b05      	ldr	r3, [pc, #20]	@ (8003da4 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d8e:	f021 0101 	bic.w	r1, r1, #1
 8003d92:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d96:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d9a:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8003d9e:	3840      	subs	r0, #64	@ 0x40
 8003da0:	4770      	bx	lr
 8003da2:	bf00      	nop
 8003da4:	08003d45 	.word	0x08003d45
	...

08003db0 <SVC_Handler>:
	__asm volatile (
 8003db0:	4b07      	ldr	r3, [pc, #28]	@ (8003dd0 <pxCurrentTCBConst2>)
 8003db2:	6819      	ldr	r1, [r3, #0]
 8003db4:	6808      	ldr	r0, [r1, #0]
 8003db6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003dba:	f380 8809 	msr	PSP, r0
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f04f 0000 	mov.w	r0, #0
 8003dc6:	f380 8811 	msr	BASEPRI, r0
 8003dca:	f04e 0e0d 	orr.w	lr, lr, #13
 8003dce:	4770      	bx	lr

08003dd0 <pxCurrentTCBConst2>:
 8003dd0:	20000d48 	.word	0x20000d48

08003dd4 <vPortEnterCritical>:
 8003dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd8:	f383 8811 	msr	BASEPRI, r3
 8003ddc:	f3bf 8f6f 	isb	sy
 8003de0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003de4:	4a0a      	ldr	r2, [pc, #40]	@ (8003e10 <vPortEnterCritical+0x3c>)
 8003de6:	6813      	ldr	r3, [r2, #0]
 8003de8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003dea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8003dec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8003dee:	d10e      	bne.n	8003e0e <vPortEnterCritical+0x3a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003df0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003df4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	b143      	cbz	r3, 8003e0e <vPortEnterCritical+0x3a>
 8003dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	e7fe      	b.n	8003e0c <vPortEnterCritical+0x38>
	}
}
 8003e0e:	4770      	bx	lr
 8003e10:	20000014 	.word	0x20000014

08003e14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8003e14:	4a08      	ldr	r2, [pc, #32]	@ (8003e38 <vPortExitCritical+0x24>)
 8003e16:	6813      	ldr	r3, [r2, #0]
 8003e18:	b943      	cbnz	r3, 8003e2c <vPortExitCritical+0x18>
 8003e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	e7fe      	b.n	8003e2a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003e30:	b90b      	cbnz	r3, 8003e36 <vPortExitCritical+0x22>
	__asm volatile
 8003e32:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003e36:	4770      	bx	lr
 8003e38:	20000014 	.word	0x20000014
 8003e3c:	00000000 	.word	0x00000000

08003e40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003e40:	f3ef 8009 	mrs	r0, PSP
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	4b0d      	ldr	r3, [pc, #52]	@ (8003e80 <pxCurrentTCBConst>)
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e50:	6010      	str	r0, [r2, #0]
 8003e52:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003e56:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003e5a:	f380 8811 	msr	BASEPRI, r0
 8003e5e:	f7ff fbb3 	bl	80035c8 <vTaskSwitchContext>
 8003e62:	f04f 0000 	mov.w	r0, #0
 8003e66:	f380 8811 	msr	BASEPRI, r0
 8003e6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003e6e:	6819      	ldr	r1, [r3, #0]
 8003e70:	6808      	ldr	r0, [r1, #0]
 8003e72:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e76:	f380 8809 	msr	PSP, r0
 8003e7a:	f3bf 8f6f 	isb	sy
 8003e7e:	4770      	bx	lr

08003e80 <pxCurrentTCBConst>:
 8003e80:	20000d48 	.word	0x20000d48

08003e84 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003e84:	b508      	push	{r3, lr}
	__asm volatile
 8003e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8a:	f383 8811 	msr	BASEPRI, r3
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003e96:	f7ff fa63 	bl	8003360 <xTaskIncrementTick>
 8003e9a:	b128      	cbz	r0, 8003ea8 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003e9c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003ea0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ea4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8003eae:	bd08      	pop	{r3, pc}

08003eb0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003eb0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003eb4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003eb6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003eba:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ebc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ebe:	4b04      	ldr	r3, [pc, #16]	@ (8003ed0 <vPortSetupTimerInterrupt+0x20>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003eca:	2307      	movs	r3, #7
 8003ecc:	6113      	str	r3, [r2, #16]
}
 8003ece:	4770      	bx	lr
 8003ed0:	20000008 	.word	0x20000008

08003ed4 <xPortStartScheduler>:
{
 8003ed4:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ed6:	4b27      	ldr	r3, [pc, #156]	@ (8003f74 <xPortStartScheduler+0xa0>)
 8003ed8:	781a      	ldrb	r2, [r3, #0]
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003ede:	22ff      	movs	r2, #255	@ 0xff
 8003ee0:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ee2:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ee4:	4a24      	ldr	r2, [pc, #144]	@ (8003f78 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ee6:	b2db      	uxtb	r3, r3
 8003ee8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003eec:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003ef0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003ef4:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ef6:	2307      	movs	r3, #7
 8003ef8:	4a20      	ldr	r2, [pc, #128]	@ (8003f7c <xPortStartScheduler+0xa8>)
 8003efa:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003efc:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8003f00:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f02:	0609      	lsls	r1, r1, #24
 8003f04:	d40a      	bmi.n	8003f1c <xPortStartScheduler+0x48>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f06:	2b03      	cmp	r3, #3
 8003f08:	d011      	beq.n	8003f2e <xPortStartScheduler+0x5a>
	__asm volatile
 8003f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	e7fe      	b.n	8003f1a <xPortStartScheduler+0x46>
			ulMaxPRIGROUPValue--;
 8003f1c:	3b01      	subs	r3, #1
 8003f1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f20:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	f88d 3003 	strb.w	r3, [sp, #3]
 8003f2c:	e7e6      	b.n	8003efc <xPortStartScheduler+0x28>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f2e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003f32:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f34:	9b01      	ldr	r3, [sp, #4]
 8003f36:	4a0f      	ldr	r2, [pc, #60]	@ (8003f74 <xPortStartScheduler+0xa0>)
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f3c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 8003f40:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f42:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8003f46:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8003f4a:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f4e:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8003f52:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 8003f56:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 8003f5a:	f7ff ffa9 	bl	8003eb0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8003f5e:	4b08      	ldr	r3, [pc, #32]	@ (8003f80 <xPortStartScheduler+0xac>)
 8003f60:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8003f62:	f7ff fedf 	bl	8003d24 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8003f66:	f7ff fb2f 	bl	80035c8 <vTaskSwitchContext>
}
 8003f6a:	4620      	mov	r0, r4
	prvTaskExitError();
 8003f6c:	f7ff feea 	bl	8003d44 <prvTaskExitError>
}
 8003f70:	b002      	add	sp, #8
 8003f72:	bd10      	pop	{r4, pc}
 8003f74:	e000e400 	.word	0xe000e400
 8003f78:	20000e4c 	.word	0x20000e4c
 8003f7c:	20000e48 	.word	0x20000e48
 8003f80:	20000014 	.word	0x20000014

08003f84 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003f84:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003f88:	2b0f      	cmp	r3, #15
 8003f8a:	d90e      	bls.n	8003faa <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003f8c:	4a11      	ldr	r2, [pc, #68]	@ (8003fd4 <vPortValidateInterruptPriority+0x50>)
 8003f8e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003f90:	4a11      	ldr	r2, [pc, #68]	@ (8003fd8 <vPortValidateInterruptPriority+0x54>)
 8003f92:	7812      	ldrb	r2, [r2, #0]
 8003f94:	429a      	cmp	r2, r3
 8003f96:	d908      	bls.n	8003faa <vPortValidateInterruptPriority+0x26>
 8003f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f9c:	f383 8811 	msr	BASEPRI, r3
 8003fa0:	f3bf 8f6f 	isb	sy
 8003fa4:	f3bf 8f4f 	dsb	sy
 8003fa8:	e7fe      	b.n	8003fa8 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003faa:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003fae:	4a0b      	ldr	r2, [pc, #44]	@ (8003fdc <vPortValidateInterruptPriority+0x58>)
 8003fb0:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8003fb4:	6812      	ldr	r2, [r2, #0]
 8003fb6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d908      	bls.n	8003fd0 <vPortValidateInterruptPriority+0x4c>
 8003fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc2:	f383 8811 	msr	BASEPRI, r3
 8003fc6:	f3bf 8f6f 	isb	sy
 8003fca:	f3bf 8f4f 	dsb	sy
 8003fce:	e7fe      	b.n	8003fce <vPortValidateInterruptPriority+0x4a>
	}
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	e000e3f0 	.word	0xe000e3f0
 8003fd8:	20000e4c 	.word	0x20000e4c
 8003fdc:	20000e48 	.word	0x20000e48

08003fe0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003fe0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003fe2:	4b10      	ldr	r3, [pc, #64]	@ (8004024 <prvInsertBlockIntoFreeList+0x44>)
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4283      	cmp	r3, r0
 8003fea:	d3fb      	bcc.n	8003fe4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003fec:	6854      	ldr	r4, [r2, #4]
 8003fee:	1911      	adds	r1, r2, r4
 8003ff0:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003ff2:	bf01      	itttt	eq
 8003ff4:	6841      	ldreq	r1, [r0, #4]
 8003ff6:	4610      	moveq	r0, r2
 8003ff8:	1909      	addeq	r1, r1, r4
 8003ffa:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003ffc:	6844      	ldr	r4, [r0, #4]
 8003ffe:	1901      	adds	r1, r0, r4
 8004000:	428b      	cmp	r3, r1
 8004002:	d10c      	bne.n	800401e <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004004:	4908      	ldr	r1, [pc, #32]	@ (8004028 <prvInsertBlockIntoFreeList+0x48>)
 8004006:	6809      	ldr	r1, [r1, #0]
 8004008:	428b      	cmp	r3, r1
 800400a:	d003      	beq.n	8004014 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800400c:	6859      	ldr	r1, [r3, #4]
 800400e:	4421      	add	r1, r4
 8004010:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004012:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004014:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004016:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004018:	bf18      	it	ne
 800401a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800401c:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800401e:	4619      	mov	r1, r3
 8004020:	e7f8      	b.n	8004014 <prvInsertBlockIntoFreeList+0x34>
 8004022:	bf00      	nop
 8004024:	20000e60 	.word	0x20000e60
 8004028:	20000e5c 	.word	0x20000e5c

0800402c <pvPortMalloc>:
{
 800402c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004030:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8004032:	f7ff f987 	bl	8003344 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8004036:	4940      	ldr	r1, [pc, #256]	@ (8004138 <pvPortMalloc+0x10c>)
 8004038:	4d40      	ldr	r5, [pc, #256]	@ (800413c <pvPortMalloc+0x110>)
 800403a:	680b      	ldr	r3, [r1, #0]
 800403c:	bb0b      	cbnz	r3, 8004082 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800403e:	4a40      	ldr	r2, [pc, #256]	@ (8004140 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004040:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004042:	bf1f      	itttt	ne
 8004044:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004046:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800404a:	f502 6240 	addne.w	r2, r2, #3072	@ 0xc00
 800404e:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004050:	bf0c      	ite	eq
 8004052:	f44f 6340 	moveq.w	r3, #3072	@ 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004056:	4602      	movne	r2, r0
	xStart.xBlockSize = ( size_t ) 0;
 8004058:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800405a:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800405c:	4e39      	ldr	r6, [pc, #228]	@ (8004144 <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 800405e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004060:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8004064:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004066:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8004068:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800406c:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800406e:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8004072:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004074:	4b34      	ldr	r3, [pc, #208]	@ (8004148 <pvPortMalloc+0x11c>)
 8004076:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004078:	4b34      	ldr	r3, [pc, #208]	@ (800414c <pvPortMalloc+0x120>)
 800407a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800407c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8004080:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004082:	682e      	ldr	r6, [r5, #0]
 8004084:	4226      	tst	r6, r4
 8004086:	d151      	bne.n	800412c <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 8004088:	2c00      	cmp	r4, #0
 800408a:	d042      	beq.n	8004112 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 800408c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004090:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004092:	bf1c      	itt	ne
 8004094:	f023 0307 	bicne.w	r3, r3, #7
 8004098:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800409a:	2b00      	cmp	r3, #0
 800409c:	d046      	beq.n	800412c <pvPortMalloc+0x100>
 800409e:	4f2b      	ldr	r7, [pc, #172]	@ (800414c <pvPortMalloc+0x120>)
 80040a0:	683c      	ldr	r4, [r7, #0]
 80040a2:	429c      	cmp	r4, r3
 80040a4:	d342      	bcc.n	800412c <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 80040a6:	4a27      	ldr	r2, [pc, #156]	@ (8004144 <pvPortMalloc+0x118>)
 80040a8:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80040aa:	6868      	ldr	r0, [r5, #4]
 80040ac:	4298      	cmp	r0, r3
 80040ae:	d204      	bcs.n	80040ba <pvPortMalloc+0x8e>
 80040b0:	f8d5 c000 	ldr.w	ip, [r5]
 80040b4:	f1bc 0f00 	cmp.w	ip, #0
 80040b8:	d115      	bne.n	80040e6 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 80040ba:	6809      	ldr	r1, [r1, #0]
 80040bc:	42a9      	cmp	r1, r5
 80040be:	d035      	beq.n	800412c <pvPortMalloc+0x100>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040c0:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80040c2:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80040c6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80040c8:	1ac2      	subs	r2, r0, r3
 80040ca:	2a10      	cmp	r2, #16
 80040cc:	d912      	bls.n	80040f4 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80040ce:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040d0:	0741      	lsls	r1, r0, #29
 80040d2:	d00b      	beq.n	80040ec <pvPortMalloc+0xc0>
 80040d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d8:	f383 8811 	msr	BASEPRI, r3
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f3bf 8f4f 	dsb	sy
 80040e4:	e7fe      	b.n	80040e4 <pvPortMalloc+0xb8>
 80040e6:	462a      	mov	r2, r5
 80040e8:	4665      	mov	r5, ip
 80040ea:	e7de      	b.n	80040aa <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80040ec:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80040ee:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80040f0:	f7ff ff76 	bl	8003fe0 <prvInsertBlockIntoFreeList>
					pxBlock->pxNextFreeBlock = NULL;
 80040f4:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80040f6:	4914      	ldr	r1, [pc, #80]	@ (8004148 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040f8:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80040fa:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80040fc:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80040fe:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004100:	ea46 0602 	orr.w	r6, r6, r2
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004104:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004106:	bf38      	it	cc
 8004108:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800410a:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800410c:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8004110:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8004112:	f7ff f9bf 	bl	8003494 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004116:	0763      	lsls	r3, r4, #29
 8004118:	d00a      	beq.n	8004130 <pvPortMalloc+0x104>
 800411a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	e7fe      	b.n	800412a <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 800412c:	2400      	movs	r4, #0
 800412e:	e7f0      	b.n	8004112 <pvPortMalloc+0xe6>
}
 8004130:	4620      	mov	r0, r4
 8004132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004136:	bf00      	nop
 8004138:	20000e5c 	.word	0x20000e5c
 800413c:	20000e50 	.word	0x20000e50
 8004140:	20000e68 	.word	0x20000e68
 8004144:	20000e60 	.word	0x20000e60
 8004148:	20000e54 	.word	0x20000e54
 800414c:	20000e58 	.word	0x20000e58

08004150 <vPortFree>:
{
 8004150:	b510      	push	{r4, lr}
	if( pv != NULL )
 8004152:	4604      	mov	r4, r0
 8004154:	b370      	cbz	r0, 80041b4 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004156:	4a18      	ldr	r2, [pc, #96]	@ (80041b8 <vPortFree+0x68>)
 8004158:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	4213      	tst	r3, r2
 8004160:	d108      	bne.n	8004174 <vPortFree+0x24>
 8004162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004166:	f383 8811 	msr	BASEPRI, r3
 800416a:	f3bf 8f6f 	isb	sy
 800416e:	f3bf 8f4f 	dsb	sy
 8004172:	e7fe      	b.n	8004172 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004174:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004178:	b141      	cbz	r1, 800418c <vPortFree+0x3c>
 800417a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	e7fe      	b.n	800418a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800418c:	ea23 0302 	bic.w	r3, r3, r2
 8004190:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8004194:	f7ff f8d6 	bl	8003344 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004198:	4a08      	ldr	r2, [pc, #32]	@ (80041bc <vPortFree+0x6c>)
 800419a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800419e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80041a0:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 80041a4:	440b      	add	r3, r1
 80041a6:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80041a8:	f7ff ff1a 	bl	8003fe0 <prvInsertBlockIntoFreeList>
}
 80041ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80041b0:	f7ff b970 	b.w	8003494 <xTaskResumeAll>
}
 80041b4:	bd10      	pop	{r4, pc}
 80041b6:	bf00      	nop
 80041b8:	20000e50 	.word	0x20000e50
 80041bc:	20000e58 	.word	0x20000e58

080041c0 <std>:
 80041c0:	2300      	movs	r3, #0
 80041c2:	b510      	push	{r4, lr}
 80041c4:	4604      	mov	r4, r0
 80041c6:	e9c0 3300 	strd	r3, r3, [r0]
 80041ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80041ce:	6083      	str	r3, [r0, #8]
 80041d0:	8181      	strh	r1, [r0, #12]
 80041d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80041d4:	81c2      	strh	r2, [r0, #14]
 80041d6:	6183      	str	r3, [r0, #24]
 80041d8:	4619      	mov	r1, r3
 80041da:	2208      	movs	r2, #8
 80041dc:	305c      	adds	r0, #92	@ 0x5c
 80041de:	f000 f926 	bl	800442e <memset>
 80041e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004218 <std+0x58>)
 80041e4:	6224      	str	r4, [r4, #32]
 80041e6:	6263      	str	r3, [r4, #36]	@ 0x24
 80041e8:	4b0c      	ldr	r3, [pc, #48]	@ (800421c <std+0x5c>)
 80041ea:	62a3      	str	r3, [r4, #40]	@ 0x28
 80041ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004220 <std+0x60>)
 80041ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80041f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004224 <std+0x64>)
 80041f2:	6323      	str	r3, [r4, #48]	@ 0x30
 80041f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004228 <std+0x68>)
 80041f6:	429c      	cmp	r4, r3
 80041f8:	d006      	beq.n	8004208 <std+0x48>
 80041fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80041fe:	4294      	cmp	r4, r2
 8004200:	d002      	beq.n	8004208 <std+0x48>
 8004202:	33d0      	adds	r3, #208	@ 0xd0
 8004204:	429c      	cmp	r4, r3
 8004206:	d105      	bne.n	8004214 <std+0x54>
 8004208:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800420c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004210:	f000 b986 	b.w	8004520 <__retarget_lock_init_recursive>
 8004214:	bd10      	pop	{r4, pc}
 8004216:	bf00      	nop
 8004218:	080043a9 	.word	0x080043a9
 800421c:	080043cb 	.word	0x080043cb
 8004220:	08004403 	.word	0x08004403
 8004224:	08004427 	.word	0x08004427
 8004228:	20001a68 	.word	0x20001a68

0800422c <stdio_exit_handler>:
 800422c:	4a02      	ldr	r2, [pc, #8]	@ (8004238 <stdio_exit_handler+0xc>)
 800422e:	4903      	ldr	r1, [pc, #12]	@ (800423c <stdio_exit_handler+0x10>)
 8004230:	4803      	ldr	r0, [pc, #12]	@ (8004240 <stdio_exit_handler+0x14>)
 8004232:	f000 b869 	b.w	8004308 <_fwalk_sglue>
 8004236:	bf00      	nop
 8004238:	20000018 	.word	0x20000018
 800423c:	08005085 	.word	0x08005085
 8004240:	20000028 	.word	0x20000028

08004244 <cleanup_stdio>:
 8004244:	6841      	ldr	r1, [r0, #4]
 8004246:	4b0c      	ldr	r3, [pc, #48]	@ (8004278 <cleanup_stdio+0x34>)
 8004248:	b510      	push	{r4, lr}
 800424a:	4299      	cmp	r1, r3
 800424c:	4604      	mov	r4, r0
 800424e:	d001      	beq.n	8004254 <cleanup_stdio+0x10>
 8004250:	f000 ff18 	bl	8005084 <_fflush_r>
 8004254:	68a1      	ldr	r1, [r4, #8]
 8004256:	4b09      	ldr	r3, [pc, #36]	@ (800427c <cleanup_stdio+0x38>)
 8004258:	4299      	cmp	r1, r3
 800425a:	d002      	beq.n	8004262 <cleanup_stdio+0x1e>
 800425c:	4620      	mov	r0, r4
 800425e:	f000 ff11 	bl	8005084 <_fflush_r>
 8004262:	68e1      	ldr	r1, [r4, #12]
 8004264:	4b06      	ldr	r3, [pc, #24]	@ (8004280 <cleanup_stdio+0x3c>)
 8004266:	4299      	cmp	r1, r3
 8004268:	d004      	beq.n	8004274 <cleanup_stdio+0x30>
 800426a:	4620      	mov	r0, r4
 800426c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004270:	f000 bf08 	b.w	8005084 <_fflush_r>
 8004274:	bd10      	pop	{r4, pc}
 8004276:	bf00      	nop
 8004278:	20001a68 	.word	0x20001a68
 800427c:	20001ad0 	.word	0x20001ad0
 8004280:	20001b38 	.word	0x20001b38

08004284 <global_stdio_init.part.0>:
 8004284:	b510      	push	{r4, lr}
 8004286:	4b0b      	ldr	r3, [pc, #44]	@ (80042b4 <global_stdio_init.part.0+0x30>)
 8004288:	4c0b      	ldr	r4, [pc, #44]	@ (80042b8 <global_stdio_init.part.0+0x34>)
 800428a:	4a0c      	ldr	r2, [pc, #48]	@ (80042bc <global_stdio_init.part.0+0x38>)
 800428c:	4620      	mov	r0, r4
 800428e:	601a      	str	r2, [r3, #0]
 8004290:	2104      	movs	r1, #4
 8004292:	2200      	movs	r2, #0
 8004294:	f7ff ff94 	bl	80041c0 <std>
 8004298:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800429c:	2201      	movs	r2, #1
 800429e:	2109      	movs	r1, #9
 80042a0:	f7ff ff8e 	bl	80041c0 <std>
 80042a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80042a8:	2202      	movs	r2, #2
 80042aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042ae:	2112      	movs	r1, #18
 80042b0:	f7ff bf86 	b.w	80041c0 <std>
 80042b4:	20001ba0 	.word	0x20001ba0
 80042b8:	20001a68 	.word	0x20001a68
 80042bc:	0800422d 	.word	0x0800422d

080042c0 <__sfp_lock_acquire>:
 80042c0:	4801      	ldr	r0, [pc, #4]	@ (80042c8 <__sfp_lock_acquire+0x8>)
 80042c2:	f000 b92e 	b.w	8004522 <__retarget_lock_acquire_recursive>
 80042c6:	bf00      	nop
 80042c8:	20001ba9 	.word	0x20001ba9

080042cc <__sfp_lock_release>:
 80042cc:	4801      	ldr	r0, [pc, #4]	@ (80042d4 <__sfp_lock_release+0x8>)
 80042ce:	f000 b929 	b.w	8004524 <__retarget_lock_release_recursive>
 80042d2:	bf00      	nop
 80042d4:	20001ba9 	.word	0x20001ba9

080042d8 <__sinit>:
 80042d8:	b510      	push	{r4, lr}
 80042da:	4604      	mov	r4, r0
 80042dc:	f7ff fff0 	bl	80042c0 <__sfp_lock_acquire>
 80042e0:	6a23      	ldr	r3, [r4, #32]
 80042e2:	b11b      	cbz	r3, 80042ec <__sinit+0x14>
 80042e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042e8:	f7ff bff0 	b.w	80042cc <__sfp_lock_release>
 80042ec:	4b04      	ldr	r3, [pc, #16]	@ (8004300 <__sinit+0x28>)
 80042ee:	6223      	str	r3, [r4, #32]
 80042f0:	4b04      	ldr	r3, [pc, #16]	@ (8004304 <__sinit+0x2c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d1f5      	bne.n	80042e4 <__sinit+0xc>
 80042f8:	f7ff ffc4 	bl	8004284 <global_stdio_init.part.0>
 80042fc:	e7f2      	b.n	80042e4 <__sinit+0xc>
 80042fe:	bf00      	nop
 8004300:	08004245 	.word	0x08004245
 8004304:	20001ba0 	.word	0x20001ba0

08004308 <_fwalk_sglue>:
 8004308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800430c:	4607      	mov	r7, r0
 800430e:	4688      	mov	r8, r1
 8004310:	4614      	mov	r4, r2
 8004312:	2600      	movs	r6, #0
 8004314:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004318:	f1b9 0901 	subs.w	r9, r9, #1
 800431c:	d505      	bpl.n	800432a <_fwalk_sglue+0x22>
 800431e:	6824      	ldr	r4, [r4, #0]
 8004320:	2c00      	cmp	r4, #0
 8004322:	d1f7      	bne.n	8004314 <_fwalk_sglue+0xc>
 8004324:	4630      	mov	r0, r6
 8004326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800432a:	89ab      	ldrh	r3, [r5, #12]
 800432c:	2b01      	cmp	r3, #1
 800432e:	d907      	bls.n	8004340 <_fwalk_sglue+0x38>
 8004330:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004334:	3301      	adds	r3, #1
 8004336:	d003      	beq.n	8004340 <_fwalk_sglue+0x38>
 8004338:	4629      	mov	r1, r5
 800433a:	4638      	mov	r0, r7
 800433c:	47c0      	blx	r8
 800433e:	4306      	orrs	r6, r0
 8004340:	3568      	adds	r5, #104	@ 0x68
 8004342:	e7e9      	b.n	8004318 <_fwalk_sglue+0x10>

08004344 <iprintf>:
 8004344:	b40f      	push	{r0, r1, r2, r3}
 8004346:	b507      	push	{r0, r1, r2, lr}
 8004348:	4906      	ldr	r1, [pc, #24]	@ (8004364 <iprintf+0x20>)
 800434a:	ab04      	add	r3, sp, #16
 800434c:	6808      	ldr	r0, [r1, #0]
 800434e:	f853 2b04 	ldr.w	r2, [r3], #4
 8004352:	6881      	ldr	r1, [r0, #8]
 8004354:	9301      	str	r3, [sp, #4]
 8004356:	f000 fb6b 	bl	8004a30 <_vfiprintf_r>
 800435a:	b003      	add	sp, #12
 800435c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004360:	b004      	add	sp, #16
 8004362:	4770      	bx	lr
 8004364:	20000024 	.word	0x20000024

08004368 <siprintf>:
 8004368:	b40e      	push	{r1, r2, r3}
 800436a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800436e:	b500      	push	{lr}
 8004370:	b09c      	sub	sp, #112	@ 0x70
 8004372:	ab1d      	add	r3, sp, #116	@ 0x74
 8004374:	9002      	str	r0, [sp, #8]
 8004376:	9006      	str	r0, [sp, #24]
 8004378:	9107      	str	r1, [sp, #28]
 800437a:	9104      	str	r1, [sp, #16]
 800437c:	4808      	ldr	r0, [pc, #32]	@ (80043a0 <siprintf+0x38>)
 800437e:	4909      	ldr	r1, [pc, #36]	@ (80043a4 <siprintf+0x3c>)
 8004380:	f853 2b04 	ldr.w	r2, [r3], #4
 8004384:	9105      	str	r1, [sp, #20]
 8004386:	6800      	ldr	r0, [r0, #0]
 8004388:	a902      	add	r1, sp, #8
 800438a:	9301      	str	r3, [sp, #4]
 800438c:	f000 fa2c 	bl	80047e8 <_svfiprintf_r>
 8004390:	2200      	movs	r2, #0
 8004392:	9b02      	ldr	r3, [sp, #8]
 8004394:	701a      	strb	r2, [r3, #0]
 8004396:	b01c      	add	sp, #112	@ 0x70
 8004398:	f85d eb04 	ldr.w	lr, [sp], #4
 800439c:	b003      	add	sp, #12
 800439e:	4770      	bx	lr
 80043a0:	20000024 	.word	0x20000024
 80043a4:	ffff0208 	.word	0xffff0208

080043a8 <__sread>:
 80043a8:	b510      	push	{r4, lr}
 80043aa:	460c      	mov	r4, r1
 80043ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043b0:	f000 f868 	bl	8004484 <_read_r>
 80043b4:	2800      	cmp	r0, #0
 80043b6:	bfab      	itete	ge
 80043b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80043ba:	89a3      	ldrhlt	r3, [r4, #12]
 80043bc:	181b      	addge	r3, r3, r0
 80043be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80043c2:	bfac      	ite	ge
 80043c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80043c6:	81a3      	strhlt	r3, [r4, #12]
 80043c8:	bd10      	pop	{r4, pc}

080043ca <__swrite>:
 80043ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80043ce:	461f      	mov	r7, r3
 80043d0:	898b      	ldrh	r3, [r1, #12]
 80043d2:	4605      	mov	r5, r0
 80043d4:	05db      	lsls	r3, r3, #23
 80043d6:	460c      	mov	r4, r1
 80043d8:	4616      	mov	r6, r2
 80043da:	d505      	bpl.n	80043e8 <__swrite+0x1e>
 80043dc:	2302      	movs	r3, #2
 80043de:	2200      	movs	r2, #0
 80043e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043e4:	f000 f83c 	bl	8004460 <_lseek_r>
 80043e8:	89a3      	ldrh	r3, [r4, #12]
 80043ea:	4632      	mov	r2, r6
 80043ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043f0:	81a3      	strh	r3, [r4, #12]
 80043f2:	4628      	mov	r0, r5
 80043f4:	463b      	mov	r3, r7
 80043f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043fe:	f000 b853 	b.w	80044a8 <_write_r>

08004402 <__sseek>:
 8004402:	b510      	push	{r4, lr}
 8004404:	460c      	mov	r4, r1
 8004406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800440a:	f000 f829 	bl	8004460 <_lseek_r>
 800440e:	1c43      	adds	r3, r0, #1
 8004410:	89a3      	ldrh	r3, [r4, #12]
 8004412:	bf15      	itete	ne
 8004414:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004416:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800441a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800441e:	81a3      	strheq	r3, [r4, #12]
 8004420:	bf18      	it	ne
 8004422:	81a3      	strhne	r3, [r4, #12]
 8004424:	bd10      	pop	{r4, pc}

08004426 <__sclose>:
 8004426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800442a:	f000 b809 	b.w	8004440 <_close_r>

0800442e <memset>:
 800442e:	4603      	mov	r3, r0
 8004430:	4402      	add	r2, r0
 8004432:	4293      	cmp	r3, r2
 8004434:	d100      	bne.n	8004438 <memset+0xa>
 8004436:	4770      	bx	lr
 8004438:	f803 1b01 	strb.w	r1, [r3], #1
 800443c:	e7f9      	b.n	8004432 <memset+0x4>
	...

08004440 <_close_r>:
 8004440:	b538      	push	{r3, r4, r5, lr}
 8004442:	2300      	movs	r3, #0
 8004444:	4d05      	ldr	r5, [pc, #20]	@ (800445c <_close_r+0x1c>)
 8004446:	4604      	mov	r4, r0
 8004448:	4608      	mov	r0, r1
 800444a:	602b      	str	r3, [r5, #0]
 800444c:	f7fc fe0c 	bl	8001068 <_close>
 8004450:	1c43      	adds	r3, r0, #1
 8004452:	d102      	bne.n	800445a <_close_r+0x1a>
 8004454:	682b      	ldr	r3, [r5, #0]
 8004456:	b103      	cbz	r3, 800445a <_close_r+0x1a>
 8004458:	6023      	str	r3, [r4, #0]
 800445a:	bd38      	pop	{r3, r4, r5, pc}
 800445c:	20001ba4 	.word	0x20001ba4

08004460 <_lseek_r>:
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	4604      	mov	r4, r0
 8004464:	4608      	mov	r0, r1
 8004466:	4611      	mov	r1, r2
 8004468:	2200      	movs	r2, #0
 800446a:	4d05      	ldr	r5, [pc, #20]	@ (8004480 <_lseek_r+0x20>)
 800446c:	602a      	str	r2, [r5, #0]
 800446e:	461a      	mov	r2, r3
 8004470:	f7fc fe04 	bl	800107c <_lseek>
 8004474:	1c43      	adds	r3, r0, #1
 8004476:	d102      	bne.n	800447e <_lseek_r+0x1e>
 8004478:	682b      	ldr	r3, [r5, #0]
 800447a:	b103      	cbz	r3, 800447e <_lseek_r+0x1e>
 800447c:	6023      	str	r3, [r4, #0]
 800447e:	bd38      	pop	{r3, r4, r5, pc}
 8004480:	20001ba4 	.word	0x20001ba4

08004484 <_read_r>:
 8004484:	b538      	push	{r3, r4, r5, lr}
 8004486:	4604      	mov	r4, r0
 8004488:	4608      	mov	r0, r1
 800448a:	4611      	mov	r1, r2
 800448c:	2200      	movs	r2, #0
 800448e:	4d05      	ldr	r5, [pc, #20]	@ (80044a4 <_read_r+0x20>)
 8004490:	602a      	str	r2, [r5, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	f7fc fdda 	bl	800104c <_read>
 8004498:	1c43      	adds	r3, r0, #1
 800449a:	d102      	bne.n	80044a2 <_read_r+0x1e>
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	b103      	cbz	r3, 80044a2 <_read_r+0x1e>
 80044a0:	6023      	str	r3, [r4, #0]
 80044a2:	bd38      	pop	{r3, r4, r5, pc}
 80044a4:	20001ba4 	.word	0x20001ba4

080044a8 <_write_r>:
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	4604      	mov	r4, r0
 80044ac:	4608      	mov	r0, r1
 80044ae:	4611      	mov	r1, r2
 80044b0:	2200      	movs	r2, #0
 80044b2:	4d05      	ldr	r5, [pc, #20]	@ (80044c8 <_write_r+0x20>)
 80044b4:	602a      	str	r2, [r5, #0]
 80044b6:	461a      	mov	r2, r3
 80044b8:	f7fc f9a6 	bl	8000808 <_write>
 80044bc:	1c43      	adds	r3, r0, #1
 80044be:	d102      	bne.n	80044c6 <_write_r+0x1e>
 80044c0:	682b      	ldr	r3, [r5, #0]
 80044c2:	b103      	cbz	r3, 80044c6 <_write_r+0x1e>
 80044c4:	6023      	str	r3, [r4, #0]
 80044c6:	bd38      	pop	{r3, r4, r5, pc}
 80044c8:	20001ba4 	.word	0x20001ba4

080044cc <__errno>:
 80044cc:	4b01      	ldr	r3, [pc, #4]	@ (80044d4 <__errno+0x8>)
 80044ce:	6818      	ldr	r0, [r3, #0]
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000024 	.word	0x20000024

080044d8 <__libc_init_array>:
 80044d8:	b570      	push	{r4, r5, r6, lr}
 80044da:	2600      	movs	r6, #0
 80044dc:	4d0c      	ldr	r5, [pc, #48]	@ (8004510 <__libc_init_array+0x38>)
 80044de:	4c0d      	ldr	r4, [pc, #52]	@ (8004514 <__libc_init_array+0x3c>)
 80044e0:	1b64      	subs	r4, r4, r5
 80044e2:	10a4      	asrs	r4, r4, #2
 80044e4:	42a6      	cmp	r6, r4
 80044e6:	d109      	bne.n	80044fc <__libc_init_array+0x24>
 80044e8:	f000 ff7a 	bl	80053e0 <_init>
 80044ec:	2600      	movs	r6, #0
 80044ee:	4d0a      	ldr	r5, [pc, #40]	@ (8004518 <__libc_init_array+0x40>)
 80044f0:	4c0a      	ldr	r4, [pc, #40]	@ (800451c <__libc_init_array+0x44>)
 80044f2:	1b64      	subs	r4, r4, r5
 80044f4:	10a4      	asrs	r4, r4, #2
 80044f6:	42a6      	cmp	r6, r4
 80044f8:	d105      	bne.n	8004506 <__libc_init_array+0x2e>
 80044fa:	bd70      	pop	{r4, r5, r6, pc}
 80044fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004500:	4798      	blx	r3
 8004502:	3601      	adds	r6, #1
 8004504:	e7ee      	b.n	80044e4 <__libc_init_array+0xc>
 8004506:	f855 3b04 	ldr.w	r3, [r5], #4
 800450a:	4798      	blx	r3
 800450c:	3601      	adds	r6, #1
 800450e:	e7f2      	b.n	80044f6 <__libc_init_array+0x1e>
 8004510:	08006d44 	.word	0x08006d44
 8004514:	08006d44 	.word	0x08006d44
 8004518:	08006d44 	.word	0x08006d44
 800451c:	08006d48 	.word	0x08006d48

08004520 <__retarget_lock_init_recursive>:
 8004520:	4770      	bx	lr

08004522 <__retarget_lock_acquire_recursive>:
 8004522:	4770      	bx	lr

08004524 <__retarget_lock_release_recursive>:
 8004524:	4770      	bx	lr

08004526 <memcpy>:
 8004526:	440a      	add	r2, r1
 8004528:	4291      	cmp	r1, r2
 800452a:	f100 33ff 	add.w	r3, r0, #4294967295
 800452e:	d100      	bne.n	8004532 <memcpy+0xc>
 8004530:	4770      	bx	lr
 8004532:	b510      	push	{r4, lr}
 8004534:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004538:	4291      	cmp	r1, r2
 800453a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800453e:	d1f9      	bne.n	8004534 <memcpy+0xe>
 8004540:	bd10      	pop	{r4, pc}
	...

08004544 <_free_r>:
 8004544:	b538      	push	{r3, r4, r5, lr}
 8004546:	4605      	mov	r5, r0
 8004548:	2900      	cmp	r1, #0
 800454a:	d040      	beq.n	80045ce <_free_r+0x8a>
 800454c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004550:	1f0c      	subs	r4, r1, #4
 8004552:	2b00      	cmp	r3, #0
 8004554:	bfb8      	it	lt
 8004556:	18e4      	addlt	r4, r4, r3
 8004558:	f000 f8de 	bl	8004718 <__malloc_lock>
 800455c:	4a1c      	ldr	r2, [pc, #112]	@ (80045d0 <_free_r+0x8c>)
 800455e:	6813      	ldr	r3, [r2, #0]
 8004560:	b933      	cbnz	r3, 8004570 <_free_r+0x2c>
 8004562:	6063      	str	r3, [r4, #4]
 8004564:	6014      	str	r4, [r2, #0]
 8004566:	4628      	mov	r0, r5
 8004568:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800456c:	f000 b8da 	b.w	8004724 <__malloc_unlock>
 8004570:	42a3      	cmp	r3, r4
 8004572:	d908      	bls.n	8004586 <_free_r+0x42>
 8004574:	6820      	ldr	r0, [r4, #0]
 8004576:	1821      	adds	r1, r4, r0
 8004578:	428b      	cmp	r3, r1
 800457a:	bf01      	itttt	eq
 800457c:	6819      	ldreq	r1, [r3, #0]
 800457e:	685b      	ldreq	r3, [r3, #4]
 8004580:	1809      	addeq	r1, r1, r0
 8004582:	6021      	streq	r1, [r4, #0]
 8004584:	e7ed      	b.n	8004562 <_free_r+0x1e>
 8004586:	461a      	mov	r2, r3
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	b10b      	cbz	r3, 8004590 <_free_r+0x4c>
 800458c:	42a3      	cmp	r3, r4
 800458e:	d9fa      	bls.n	8004586 <_free_r+0x42>
 8004590:	6811      	ldr	r1, [r2, #0]
 8004592:	1850      	adds	r0, r2, r1
 8004594:	42a0      	cmp	r0, r4
 8004596:	d10b      	bne.n	80045b0 <_free_r+0x6c>
 8004598:	6820      	ldr	r0, [r4, #0]
 800459a:	4401      	add	r1, r0
 800459c:	1850      	adds	r0, r2, r1
 800459e:	4283      	cmp	r3, r0
 80045a0:	6011      	str	r1, [r2, #0]
 80045a2:	d1e0      	bne.n	8004566 <_free_r+0x22>
 80045a4:	6818      	ldr	r0, [r3, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	4408      	add	r0, r1
 80045aa:	6010      	str	r0, [r2, #0]
 80045ac:	6053      	str	r3, [r2, #4]
 80045ae:	e7da      	b.n	8004566 <_free_r+0x22>
 80045b0:	d902      	bls.n	80045b8 <_free_r+0x74>
 80045b2:	230c      	movs	r3, #12
 80045b4:	602b      	str	r3, [r5, #0]
 80045b6:	e7d6      	b.n	8004566 <_free_r+0x22>
 80045b8:	6820      	ldr	r0, [r4, #0]
 80045ba:	1821      	adds	r1, r4, r0
 80045bc:	428b      	cmp	r3, r1
 80045be:	bf01      	itttt	eq
 80045c0:	6819      	ldreq	r1, [r3, #0]
 80045c2:	685b      	ldreq	r3, [r3, #4]
 80045c4:	1809      	addeq	r1, r1, r0
 80045c6:	6021      	streq	r1, [r4, #0]
 80045c8:	6063      	str	r3, [r4, #4]
 80045ca:	6054      	str	r4, [r2, #4]
 80045cc:	e7cb      	b.n	8004566 <_free_r+0x22>
 80045ce:	bd38      	pop	{r3, r4, r5, pc}
 80045d0:	20001bb0 	.word	0x20001bb0

080045d4 <sbrk_aligned>:
 80045d4:	b570      	push	{r4, r5, r6, lr}
 80045d6:	4e0f      	ldr	r6, [pc, #60]	@ (8004614 <sbrk_aligned+0x40>)
 80045d8:	460c      	mov	r4, r1
 80045da:	6831      	ldr	r1, [r6, #0]
 80045dc:	4605      	mov	r5, r0
 80045de:	b911      	cbnz	r1, 80045e6 <sbrk_aligned+0x12>
 80045e0:	f000 fe26 	bl	8005230 <_sbrk_r>
 80045e4:	6030      	str	r0, [r6, #0]
 80045e6:	4621      	mov	r1, r4
 80045e8:	4628      	mov	r0, r5
 80045ea:	f000 fe21 	bl	8005230 <_sbrk_r>
 80045ee:	1c43      	adds	r3, r0, #1
 80045f0:	d103      	bne.n	80045fa <sbrk_aligned+0x26>
 80045f2:	f04f 34ff 	mov.w	r4, #4294967295
 80045f6:	4620      	mov	r0, r4
 80045f8:	bd70      	pop	{r4, r5, r6, pc}
 80045fa:	1cc4      	adds	r4, r0, #3
 80045fc:	f024 0403 	bic.w	r4, r4, #3
 8004600:	42a0      	cmp	r0, r4
 8004602:	d0f8      	beq.n	80045f6 <sbrk_aligned+0x22>
 8004604:	1a21      	subs	r1, r4, r0
 8004606:	4628      	mov	r0, r5
 8004608:	f000 fe12 	bl	8005230 <_sbrk_r>
 800460c:	3001      	adds	r0, #1
 800460e:	d1f2      	bne.n	80045f6 <sbrk_aligned+0x22>
 8004610:	e7ef      	b.n	80045f2 <sbrk_aligned+0x1e>
 8004612:	bf00      	nop
 8004614:	20001bac 	.word	0x20001bac

08004618 <_malloc_r>:
 8004618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800461c:	1ccd      	adds	r5, r1, #3
 800461e:	f025 0503 	bic.w	r5, r5, #3
 8004622:	3508      	adds	r5, #8
 8004624:	2d0c      	cmp	r5, #12
 8004626:	bf38      	it	cc
 8004628:	250c      	movcc	r5, #12
 800462a:	2d00      	cmp	r5, #0
 800462c:	4606      	mov	r6, r0
 800462e:	db01      	blt.n	8004634 <_malloc_r+0x1c>
 8004630:	42a9      	cmp	r1, r5
 8004632:	d904      	bls.n	800463e <_malloc_r+0x26>
 8004634:	230c      	movs	r3, #12
 8004636:	6033      	str	r3, [r6, #0]
 8004638:	2000      	movs	r0, #0
 800463a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800463e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004714 <_malloc_r+0xfc>
 8004642:	f000 f869 	bl	8004718 <__malloc_lock>
 8004646:	f8d8 3000 	ldr.w	r3, [r8]
 800464a:	461c      	mov	r4, r3
 800464c:	bb44      	cbnz	r4, 80046a0 <_malloc_r+0x88>
 800464e:	4629      	mov	r1, r5
 8004650:	4630      	mov	r0, r6
 8004652:	f7ff ffbf 	bl	80045d4 <sbrk_aligned>
 8004656:	1c43      	adds	r3, r0, #1
 8004658:	4604      	mov	r4, r0
 800465a:	d158      	bne.n	800470e <_malloc_r+0xf6>
 800465c:	f8d8 4000 	ldr.w	r4, [r8]
 8004660:	4627      	mov	r7, r4
 8004662:	2f00      	cmp	r7, #0
 8004664:	d143      	bne.n	80046ee <_malloc_r+0xd6>
 8004666:	2c00      	cmp	r4, #0
 8004668:	d04b      	beq.n	8004702 <_malloc_r+0xea>
 800466a:	6823      	ldr	r3, [r4, #0]
 800466c:	4639      	mov	r1, r7
 800466e:	4630      	mov	r0, r6
 8004670:	eb04 0903 	add.w	r9, r4, r3
 8004674:	f000 fddc 	bl	8005230 <_sbrk_r>
 8004678:	4581      	cmp	r9, r0
 800467a:	d142      	bne.n	8004702 <_malloc_r+0xea>
 800467c:	6821      	ldr	r1, [r4, #0]
 800467e:	4630      	mov	r0, r6
 8004680:	1a6d      	subs	r5, r5, r1
 8004682:	4629      	mov	r1, r5
 8004684:	f7ff ffa6 	bl	80045d4 <sbrk_aligned>
 8004688:	3001      	adds	r0, #1
 800468a:	d03a      	beq.n	8004702 <_malloc_r+0xea>
 800468c:	6823      	ldr	r3, [r4, #0]
 800468e:	442b      	add	r3, r5
 8004690:	6023      	str	r3, [r4, #0]
 8004692:	f8d8 3000 	ldr.w	r3, [r8]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	bb62      	cbnz	r2, 80046f4 <_malloc_r+0xdc>
 800469a:	f8c8 7000 	str.w	r7, [r8]
 800469e:	e00f      	b.n	80046c0 <_malloc_r+0xa8>
 80046a0:	6822      	ldr	r2, [r4, #0]
 80046a2:	1b52      	subs	r2, r2, r5
 80046a4:	d420      	bmi.n	80046e8 <_malloc_r+0xd0>
 80046a6:	2a0b      	cmp	r2, #11
 80046a8:	d917      	bls.n	80046da <_malloc_r+0xc2>
 80046aa:	1961      	adds	r1, r4, r5
 80046ac:	42a3      	cmp	r3, r4
 80046ae:	6025      	str	r5, [r4, #0]
 80046b0:	bf18      	it	ne
 80046b2:	6059      	strne	r1, [r3, #4]
 80046b4:	6863      	ldr	r3, [r4, #4]
 80046b6:	bf08      	it	eq
 80046b8:	f8c8 1000 	streq.w	r1, [r8]
 80046bc:	5162      	str	r2, [r4, r5]
 80046be:	604b      	str	r3, [r1, #4]
 80046c0:	4630      	mov	r0, r6
 80046c2:	f000 f82f 	bl	8004724 <__malloc_unlock>
 80046c6:	f104 000b 	add.w	r0, r4, #11
 80046ca:	1d23      	adds	r3, r4, #4
 80046cc:	f020 0007 	bic.w	r0, r0, #7
 80046d0:	1ac2      	subs	r2, r0, r3
 80046d2:	bf1c      	itt	ne
 80046d4:	1a1b      	subne	r3, r3, r0
 80046d6:	50a3      	strne	r3, [r4, r2]
 80046d8:	e7af      	b.n	800463a <_malloc_r+0x22>
 80046da:	6862      	ldr	r2, [r4, #4]
 80046dc:	42a3      	cmp	r3, r4
 80046de:	bf0c      	ite	eq
 80046e0:	f8c8 2000 	streq.w	r2, [r8]
 80046e4:	605a      	strne	r2, [r3, #4]
 80046e6:	e7eb      	b.n	80046c0 <_malloc_r+0xa8>
 80046e8:	4623      	mov	r3, r4
 80046ea:	6864      	ldr	r4, [r4, #4]
 80046ec:	e7ae      	b.n	800464c <_malloc_r+0x34>
 80046ee:	463c      	mov	r4, r7
 80046f0:	687f      	ldr	r7, [r7, #4]
 80046f2:	e7b6      	b.n	8004662 <_malloc_r+0x4a>
 80046f4:	461a      	mov	r2, r3
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	42a3      	cmp	r3, r4
 80046fa:	d1fb      	bne.n	80046f4 <_malloc_r+0xdc>
 80046fc:	2300      	movs	r3, #0
 80046fe:	6053      	str	r3, [r2, #4]
 8004700:	e7de      	b.n	80046c0 <_malloc_r+0xa8>
 8004702:	230c      	movs	r3, #12
 8004704:	4630      	mov	r0, r6
 8004706:	6033      	str	r3, [r6, #0]
 8004708:	f000 f80c 	bl	8004724 <__malloc_unlock>
 800470c:	e794      	b.n	8004638 <_malloc_r+0x20>
 800470e:	6005      	str	r5, [r0, #0]
 8004710:	e7d6      	b.n	80046c0 <_malloc_r+0xa8>
 8004712:	bf00      	nop
 8004714:	20001bb0 	.word	0x20001bb0

08004718 <__malloc_lock>:
 8004718:	4801      	ldr	r0, [pc, #4]	@ (8004720 <__malloc_lock+0x8>)
 800471a:	f7ff bf02 	b.w	8004522 <__retarget_lock_acquire_recursive>
 800471e:	bf00      	nop
 8004720:	20001ba8 	.word	0x20001ba8

08004724 <__malloc_unlock>:
 8004724:	4801      	ldr	r0, [pc, #4]	@ (800472c <__malloc_unlock+0x8>)
 8004726:	f7ff befd 	b.w	8004524 <__retarget_lock_release_recursive>
 800472a:	bf00      	nop
 800472c:	20001ba8 	.word	0x20001ba8

08004730 <__ssputs_r>:
 8004730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004734:	461f      	mov	r7, r3
 8004736:	688e      	ldr	r6, [r1, #8]
 8004738:	4682      	mov	sl, r0
 800473a:	42be      	cmp	r6, r7
 800473c:	460c      	mov	r4, r1
 800473e:	4690      	mov	r8, r2
 8004740:	680b      	ldr	r3, [r1, #0]
 8004742:	d82d      	bhi.n	80047a0 <__ssputs_r+0x70>
 8004744:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004748:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800474c:	d026      	beq.n	800479c <__ssputs_r+0x6c>
 800474e:	6965      	ldr	r5, [r4, #20]
 8004750:	6909      	ldr	r1, [r1, #16]
 8004752:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004756:	eba3 0901 	sub.w	r9, r3, r1
 800475a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800475e:	1c7b      	adds	r3, r7, #1
 8004760:	444b      	add	r3, r9
 8004762:	106d      	asrs	r5, r5, #1
 8004764:	429d      	cmp	r5, r3
 8004766:	bf38      	it	cc
 8004768:	461d      	movcc	r5, r3
 800476a:	0553      	lsls	r3, r2, #21
 800476c:	d527      	bpl.n	80047be <__ssputs_r+0x8e>
 800476e:	4629      	mov	r1, r5
 8004770:	f7ff ff52 	bl	8004618 <_malloc_r>
 8004774:	4606      	mov	r6, r0
 8004776:	b360      	cbz	r0, 80047d2 <__ssputs_r+0xa2>
 8004778:	464a      	mov	r2, r9
 800477a:	6921      	ldr	r1, [r4, #16]
 800477c:	f7ff fed3 	bl	8004526 <memcpy>
 8004780:	89a3      	ldrh	r3, [r4, #12]
 8004782:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004786:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800478a:	81a3      	strh	r3, [r4, #12]
 800478c:	6126      	str	r6, [r4, #16]
 800478e:	444e      	add	r6, r9
 8004790:	6026      	str	r6, [r4, #0]
 8004792:	463e      	mov	r6, r7
 8004794:	6165      	str	r5, [r4, #20]
 8004796:	eba5 0509 	sub.w	r5, r5, r9
 800479a:	60a5      	str	r5, [r4, #8]
 800479c:	42be      	cmp	r6, r7
 800479e:	d900      	bls.n	80047a2 <__ssputs_r+0x72>
 80047a0:	463e      	mov	r6, r7
 80047a2:	4632      	mov	r2, r6
 80047a4:	4641      	mov	r1, r8
 80047a6:	6820      	ldr	r0, [r4, #0]
 80047a8:	f000 fd28 	bl	80051fc <memmove>
 80047ac:	2000      	movs	r0, #0
 80047ae:	68a3      	ldr	r3, [r4, #8]
 80047b0:	1b9b      	subs	r3, r3, r6
 80047b2:	60a3      	str	r3, [r4, #8]
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	4433      	add	r3, r6
 80047b8:	6023      	str	r3, [r4, #0]
 80047ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047be:	462a      	mov	r2, r5
 80047c0:	f000 fd54 	bl	800526c <_realloc_r>
 80047c4:	4606      	mov	r6, r0
 80047c6:	2800      	cmp	r0, #0
 80047c8:	d1e0      	bne.n	800478c <__ssputs_r+0x5c>
 80047ca:	4650      	mov	r0, sl
 80047cc:	6921      	ldr	r1, [r4, #16]
 80047ce:	f7ff feb9 	bl	8004544 <_free_r>
 80047d2:	230c      	movs	r3, #12
 80047d4:	f8ca 3000 	str.w	r3, [sl]
 80047d8:	89a3      	ldrh	r3, [r4, #12]
 80047da:	f04f 30ff 	mov.w	r0, #4294967295
 80047de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80047e2:	81a3      	strh	r3, [r4, #12]
 80047e4:	e7e9      	b.n	80047ba <__ssputs_r+0x8a>
	...

080047e8 <_svfiprintf_r>:
 80047e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ec:	4698      	mov	r8, r3
 80047ee:	898b      	ldrh	r3, [r1, #12]
 80047f0:	4607      	mov	r7, r0
 80047f2:	061b      	lsls	r3, r3, #24
 80047f4:	460d      	mov	r5, r1
 80047f6:	4614      	mov	r4, r2
 80047f8:	b09d      	sub	sp, #116	@ 0x74
 80047fa:	d510      	bpl.n	800481e <_svfiprintf_r+0x36>
 80047fc:	690b      	ldr	r3, [r1, #16]
 80047fe:	b973      	cbnz	r3, 800481e <_svfiprintf_r+0x36>
 8004800:	2140      	movs	r1, #64	@ 0x40
 8004802:	f7ff ff09 	bl	8004618 <_malloc_r>
 8004806:	6028      	str	r0, [r5, #0]
 8004808:	6128      	str	r0, [r5, #16]
 800480a:	b930      	cbnz	r0, 800481a <_svfiprintf_r+0x32>
 800480c:	230c      	movs	r3, #12
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	f04f 30ff 	mov.w	r0, #4294967295
 8004814:	b01d      	add	sp, #116	@ 0x74
 8004816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800481a:	2340      	movs	r3, #64	@ 0x40
 800481c:	616b      	str	r3, [r5, #20]
 800481e:	2300      	movs	r3, #0
 8004820:	9309      	str	r3, [sp, #36]	@ 0x24
 8004822:	2320      	movs	r3, #32
 8004824:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004828:	2330      	movs	r3, #48	@ 0x30
 800482a:	f04f 0901 	mov.w	r9, #1
 800482e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004832:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80049cc <_svfiprintf_r+0x1e4>
 8004836:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800483a:	4623      	mov	r3, r4
 800483c:	469a      	mov	sl, r3
 800483e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004842:	b10a      	cbz	r2, 8004848 <_svfiprintf_r+0x60>
 8004844:	2a25      	cmp	r2, #37	@ 0x25
 8004846:	d1f9      	bne.n	800483c <_svfiprintf_r+0x54>
 8004848:	ebba 0b04 	subs.w	fp, sl, r4
 800484c:	d00b      	beq.n	8004866 <_svfiprintf_r+0x7e>
 800484e:	465b      	mov	r3, fp
 8004850:	4622      	mov	r2, r4
 8004852:	4629      	mov	r1, r5
 8004854:	4638      	mov	r0, r7
 8004856:	f7ff ff6b 	bl	8004730 <__ssputs_r>
 800485a:	3001      	adds	r0, #1
 800485c:	f000 80a7 	beq.w	80049ae <_svfiprintf_r+0x1c6>
 8004860:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004862:	445a      	add	r2, fp
 8004864:	9209      	str	r2, [sp, #36]	@ 0x24
 8004866:	f89a 3000 	ldrb.w	r3, [sl]
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 809f 	beq.w	80049ae <_svfiprintf_r+0x1c6>
 8004870:	2300      	movs	r3, #0
 8004872:	f04f 32ff 	mov.w	r2, #4294967295
 8004876:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800487a:	f10a 0a01 	add.w	sl, sl, #1
 800487e:	9304      	str	r3, [sp, #16]
 8004880:	9307      	str	r3, [sp, #28]
 8004882:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004886:	931a      	str	r3, [sp, #104]	@ 0x68
 8004888:	4654      	mov	r4, sl
 800488a:	2205      	movs	r2, #5
 800488c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004890:	484e      	ldr	r0, [pc, #312]	@ (80049cc <_svfiprintf_r+0x1e4>)
 8004892:	f000 fcdd 	bl	8005250 <memchr>
 8004896:	9a04      	ldr	r2, [sp, #16]
 8004898:	b9d8      	cbnz	r0, 80048d2 <_svfiprintf_r+0xea>
 800489a:	06d0      	lsls	r0, r2, #27
 800489c:	bf44      	itt	mi
 800489e:	2320      	movmi	r3, #32
 80048a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048a4:	0711      	lsls	r1, r2, #28
 80048a6:	bf44      	itt	mi
 80048a8:	232b      	movmi	r3, #43	@ 0x2b
 80048aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80048ae:	f89a 3000 	ldrb.w	r3, [sl]
 80048b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80048b4:	d015      	beq.n	80048e2 <_svfiprintf_r+0xfa>
 80048b6:	4654      	mov	r4, sl
 80048b8:	2000      	movs	r0, #0
 80048ba:	f04f 0c0a 	mov.w	ip, #10
 80048be:	9a07      	ldr	r2, [sp, #28]
 80048c0:	4621      	mov	r1, r4
 80048c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048c6:	3b30      	subs	r3, #48	@ 0x30
 80048c8:	2b09      	cmp	r3, #9
 80048ca:	d94b      	bls.n	8004964 <_svfiprintf_r+0x17c>
 80048cc:	b1b0      	cbz	r0, 80048fc <_svfiprintf_r+0x114>
 80048ce:	9207      	str	r2, [sp, #28]
 80048d0:	e014      	b.n	80048fc <_svfiprintf_r+0x114>
 80048d2:	eba0 0308 	sub.w	r3, r0, r8
 80048d6:	fa09 f303 	lsl.w	r3, r9, r3
 80048da:	4313      	orrs	r3, r2
 80048dc:	46a2      	mov	sl, r4
 80048de:	9304      	str	r3, [sp, #16]
 80048e0:	e7d2      	b.n	8004888 <_svfiprintf_r+0xa0>
 80048e2:	9b03      	ldr	r3, [sp, #12]
 80048e4:	1d19      	adds	r1, r3, #4
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	9103      	str	r1, [sp, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	bfbb      	ittet	lt
 80048ee:	425b      	neglt	r3, r3
 80048f0:	f042 0202 	orrlt.w	r2, r2, #2
 80048f4:	9307      	strge	r3, [sp, #28]
 80048f6:	9307      	strlt	r3, [sp, #28]
 80048f8:	bfb8      	it	lt
 80048fa:	9204      	strlt	r2, [sp, #16]
 80048fc:	7823      	ldrb	r3, [r4, #0]
 80048fe:	2b2e      	cmp	r3, #46	@ 0x2e
 8004900:	d10a      	bne.n	8004918 <_svfiprintf_r+0x130>
 8004902:	7863      	ldrb	r3, [r4, #1]
 8004904:	2b2a      	cmp	r3, #42	@ 0x2a
 8004906:	d132      	bne.n	800496e <_svfiprintf_r+0x186>
 8004908:	9b03      	ldr	r3, [sp, #12]
 800490a:	3402      	adds	r4, #2
 800490c:	1d1a      	adds	r2, r3, #4
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	9203      	str	r2, [sp, #12]
 8004912:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004916:	9305      	str	r3, [sp, #20]
 8004918:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80049d0 <_svfiprintf_r+0x1e8>
 800491c:	2203      	movs	r2, #3
 800491e:	4650      	mov	r0, sl
 8004920:	7821      	ldrb	r1, [r4, #0]
 8004922:	f000 fc95 	bl	8005250 <memchr>
 8004926:	b138      	cbz	r0, 8004938 <_svfiprintf_r+0x150>
 8004928:	2240      	movs	r2, #64	@ 0x40
 800492a:	9b04      	ldr	r3, [sp, #16]
 800492c:	eba0 000a 	sub.w	r0, r0, sl
 8004930:	4082      	lsls	r2, r0
 8004932:	4313      	orrs	r3, r2
 8004934:	3401      	adds	r4, #1
 8004936:	9304      	str	r3, [sp, #16]
 8004938:	f814 1b01 	ldrb.w	r1, [r4], #1
 800493c:	2206      	movs	r2, #6
 800493e:	4825      	ldr	r0, [pc, #148]	@ (80049d4 <_svfiprintf_r+0x1ec>)
 8004940:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004944:	f000 fc84 	bl	8005250 <memchr>
 8004948:	2800      	cmp	r0, #0
 800494a:	d036      	beq.n	80049ba <_svfiprintf_r+0x1d2>
 800494c:	4b22      	ldr	r3, [pc, #136]	@ (80049d8 <_svfiprintf_r+0x1f0>)
 800494e:	bb1b      	cbnz	r3, 8004998 <_svfiprintf_r+0x1b0>
 8004950:	9b03      	ldr	r3, [sp, #12]
 8004952:	3307      	adds	r3, #7
 8004954:	f023 0307 	bic.w	r3, r3, #7
 8004958:	3308      	adds	r3, #8
 800495a:	9303      	str	r3, [sp, #12]
 800495c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800495e:	4433      	add	r3, r6
 8004960:	9309      	str	r3, [sp, #36]	@ 0x24
 8004962:	e76a      	b.n	800483a <_svfiprintf_r+0x52>
 8004964:	460c      	mov	r4, r1
 8004966:	2001      	movs	r0, #1
 8004968:	fb0c 3202 	mla	r2, ip, r2, r3
 800496c:	e7a8      	b.n	80048c0 <_svfiprintf_r+0xd8>
 800496e:	2300      	movs	r3, #0
 8004970:	f04f 0c0a 	mov.w	ip, #10
 8004974:	4619      	mov	r1, r3
 8004976:	3401      	adds	r4, #1
 8004978:	9305      	str	r3, [sp, #20]
 800497a:	4620      	mov	r0, r4
 800497c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004980:	3a30      	subs	r2, #48	@ 0x30
 8004982:	2a09      	cmp	r2, #9
 8004984:	d903      	bls.n	800498e <_svfiprintf_r+0x1a6>
 8004986:	2b00      	cmp	r3, #0
 8004988:	d0c6      	beq.n	8004918 <_svfiprintf_r+0x130>
 800498a:	9105      	str	r1, [sp, #20]
 800498c:	e7c4      	b.n	8004918 <_svfiprintf_r+0x130>
 800498e:	4604      	mov	r4, r0
 8004990:	2301      	movs	r3, #1
 8004992:	fb0c 2101 	mla	r1, ip, r1, r2
 8004996:	e7f0      	b.n	800497a <_svfiprintf_r+0x192>
 8004998:	ab03      	add	r3, sp, #12
 800499a:	9300      	str	r3, [sp, #0]
 800499c:	462a      	mov	r2, r5
 800499e:	4638      	mov	r0, r7
 80049a0:	4b0e      	ldr	r3, [pc, #56]	@ (80049dc <_svfiprintf_r+0x1f4>)
 80049a2:	a904      	add	r1, sp, #16
 80049a4:	f3af 8000 	nop.w
 80049a8:	1c42      	adds	r2, r0, #1
 80049aa:	4606      	mov	r6, r0
 80049ac:	d1d6      	bne.n	800495c <_svfiprintf_r+0x174>
 80049ae:	89ab      	ldrh	r3, [r5, #12]
 80049b0:	065b      	lsls	r3, r3, #25
 80049b2:	f53f af2d 	bmi.w	8004810 <_svfiprintf_r+0x28>
 80049b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80049b8:	e72c      	b.n	8004814 <_svfiprintf_r+0x2c>
 80049ba:	ab03      	add	r3, sp, #12
 80049bc:	9300      	str	r3, [sp, #0]
 80049be:	462a      	mov	r2, r5
 80049c0:	4638      	mov	r0, r7
 80049c2:	4b06      	ldr	r3, [pc, #24]	@ (80049dc <_svfiprintf_r+0x1f4>)
 80049c4:	a904      	add	r1, sp, #16
 80049c6:	f000 f9bd 	bl	8004d44 <_printf_i>
 80049ca:	e7ed      	b.n	80049a8 <_svfiprintf_r+0x1c0>
 80049cc:	08006d0e 	.word	0x08006d0e
 80049d0:	08006d14 	.word	0x08006d14
 80049d4:	08006d18 	.word	0x08006d18
 80049d8:	00000000 	.word	0x00000000
 80049dc:	08004731 	.word	0x08004731

080049e0 <__sfputc_r>:
 80049e0:	6893      	ldr	r3, [r2, #8]
 80049e2:	b410      	push	{r4}
 80049e4:	3b01      	subs	r3, #1
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	6093      	str	r3, [r2, #8]
 80049ea:	da07      	bge.n	80049fc <__sfputc_r+0x1c>
 80049ec:	6994      	ldr	r4, [r2, #24]
 80049ee:	42a3      	cmp	r3, r4
 80049f0:	db01      	blt.n	80049f6 <__sfputc_r+0x16>
 80049f2:	290a      	cmp	r1, #10
 80049f4:	d102      	bne.n	80049fc <__sfputc_r+0x1c>
 80049f6:	bc10      	pop	{r4}
 80049f8:	f000 bb6c 	b.w	80050d4 <__swbuf_r>
 80049fc:	6813      	ldr	r3, [r2, #0]
 80049fe:	1c58      	adds	r0, r3, #1
 8004a00:	6010      	str	r0, [r2, #0]
 8004a02:	7019      	strb	r1, [r3, #0]
 8004a04:	4608      	mov	r0, r1
 8004a06:	bc10      	pop	{r4}
 8004a08:	4770      	bx	lr

08004a0a <__sfputs_r>:
 8004a0a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0c:	4606      	mov	r6, r0
 8004a0e:	460f      	mov	r7, r1
 8004a10:	4614      	mov	r4, r2
 8004a12:	18d5      	adds	r5, r2, r3
 8004a14:	42ac      	cmp	r4, r5
 8004a16:	d101      	bne.n	8004a1c <__sfputs_r+0x12>
 8004a18:	2000      	movs	r0, #0
 8004a1a:	e007      	b.n	8004a2c <__sfputs_r+0x22>
 8004a1c:	463a      	mov	r2, r7
 8004a1e:	4630      	mov	r0, r6
 8004a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a24:	f7ff ffdc 	bl	80049e0 <__sfputc_r>
 8004a28:	1c43      	adds	r3, r0, #1
 8004a2a:	d1f3      	bne.n	8004a14 <__sfputs_r+0xa>
 8004a2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004a30 <_vfiprintf_r>:
 8004a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a34:	460d      	mov	r5, r1
 8004a36:	4614      	mov	r4, r2
 8004a38:	4698      	mov	r8, r3
 8004a3a:	4606      	mov	r6, r0
 8004a3c:	b09d      	sub	sp, #116	@ 0x74
 8004a3e:	b118      	cbz	r0, 8004a48 <_vfiprintf_r+0x18>
 8004a40:	6a03      	ldr	r3, [r0, #32]
 8004a42:	b90b      	cbnz	r3, 8004a48 <_vfiprintf_r+0x18>
 8004a44:	f7ff fc48 	bl	80042d8 <__sinit>
 8004a48:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a4a:	07d9      	lsls	r1, r3, #31
 8004a4c:	d405      	bmi.n	8004a5a <_vfiprintf_r+0x2a>
 8004a4e:	89ab      	ldrh	r3, [r5, #12]
 8004a50:	059a      	lsls	r2, r3, #22
 8004a52:	d402      	bmi.n	8004a5a <_vfiprintf_r+0x2a>
 8004a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a56:	f7ff fd64 	bl	8004522 <__retarget_lock_acquire_recursive>
 8004a5a:	89ab      	ldrh	r3, [r5, #12]
 8004a5c:	071b      	lsls	r3, r3, #28
 8004a5e:	d501      	bpl.n	8004a64 <_vfiprintf_r+0x34>
 8004a60:	692b      	ldr	r3, [r5, #16]
 8004a62:	b99b      	cbnz	r3, 8004a8c <_vfiprintf_r+0x5c>
 8004a64:	4629      	mov	r1, r5
 8004a66:	4630      	mov	r0, r6
 8004a68:	f000 fb72 	bl	8005150 <__swsetup_r>
 8004a6c:	b170      	cbz	r0, 8004a8c <_vfiprintf_r+0x5c>
 8004a6e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004a70:	07dc      	lsls	r4, r3, #31
 8004a72:	d504      	bpl.n	8004a7e <_vfiprintf_r+0x4e>
 8004a74:	f04f 30ff 	mov.w	r0, #4294967295
 8004a78:	b01d      	add	sp, #116	@ 0x74
 8004a7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a7e:	89ab      	ldrh	r3, [r5, #12]
 8004a80:	0598      	lsls	r0, r3, #22
 8004a82:	d4f7      	bmi.n	8004a74 <_vfiprintf_r+0x44>
 8004a84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004a86:	f7ff fd4d 	bl	8004524 <__retarget_lock_release_recursive>
 8004a8a:	e7f3      	b.n	8004a74 <_vfiprintf_r+0x44>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8004a90:	2320      	movs	r3, #32
 8004a92:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004a96:	2330      	movs	r3, #48	@ 0x30
 8004a98:	f04f 0901 	mov.w	r9, #1
 8004a9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004aa0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004c4c <_vfiprintf_r+0x21c>
 8004aa4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004aa8:	4623      	mov	r3, r4
 8004aaa:	469a      	mov	sl, r3
 8004aac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ab0:	b10a      	cbz	r2, 8004ab6 <_vfiprintf_r+0x86>
 8004ab2:	2a25      	cmp	r2, #37	@ 0x25
 8004ab4:	d1f9      	bne.n	8004aaa <_vfiprintf_r+0x7a>
 8004ab6:	ebba 0b04 	subs.w	fp, sl, r4
 8004aba:	d00b      	beq.n	8004ad4 <_vfiprintf_r+0xa4>
 8004abc:	465b      	mov	r3, fp
 8004abe:	4622      	mov	r2, r4
 8004ac0:	4629      	mov	r1, r5
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f7ff ffa1 	bl	8004a0a <__sfputs_r>
 8004ac8:	3001      	adds	r0, #1
 8004aca:	f000 80a7 	beq.w	8004c1c <_vfiprintf_r+0x1ec>
 8004ace:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ad0:	445a      	add	r2, fp
 8004ad2:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ad4:	f89a 3000 	ldrb.w	r3, [sl]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	f000 809f 	beq.w	8004c1c <_vfiprintf_r+0x1ec>
 8004ade:	2300      	movs	r3, #0
 8004ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ae8:	f10a 0a01 	add.w	sl, sl, #1
 8004aec:	9304      	str	r3, [sp, #16]
 8004aee:	9307      	str	r3, [sp, #28]
 8004af0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004af4:	931a      	str	r3, [sp, #104]	@ 0x68
 8004af6:	4654      	mov	r4, sl
 8004af8:	2205      	movs	r2, #5
 8004afa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004afe:	4853      	ldr	r0, [pc, #332]	@ (8004c4c <_vfiprintf_r+0x21c>)
 8004b00:	f000 fba6 	bl	8005250 <memchr>
 8004b04:	9a04      	ldr	r2, [sp, #16]
 8004b06:	b9d8      	cbnz	r0, 8004b40 <_vfiprintf_r+0x110>
 8004b08:	06d1      	lsls	r1, r2, #27
 8004b0a:	bf44      	itt	mi
 8004b0c:	2320      	movmi	r3, #32
 8004b0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b12:	0713      	lsls	r3, r2, #28
 8004b14:	bf44      	itt	mi
 8004b16:	232b      	movmi	r3, #43	@ 0x2b
 8004b18:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b1c:	f89a 3000 	ldrb.w	r3, [sl]
 8004b20:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b22:	d015      	beq.n	8004b50 <_vfiprintf_r+0x120>
 8004b24:	4654      	mov	r4, sl
 8004b26:	2000      	movs	r0, #0
 8004b28:	f04f 0c0a 	mov.w	ip, #10
 8004b2c:	9a07      	ldr	r2, [sp, #28]
 8004b2e:	4621      	mov	r1, r4
 8004b30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b34:	3b30      	subs	r3, #48	@ 0x30
 8004b36:	2b09      	cmp	r3, #9
 8004b38:	d94b      	bls.n	8004bd2 <_vfiprintf_r+0x1a2>
 8004b3a:	b1b0      	cbz	r0, 8004b6a <_vfiprintf_r+0x13a>
 8004b3c:	9207      	str	r2, [sp, #28]
 8004b3e:	e014      	b.n	8004b6a <_vfiprintf_r+0x13a>
 8004b40:	eba0 0308 	sub.w	r3, r0, r8
 8004b44:	fa09 f303 	lsl.w	r3, r9, r3
 8004b48:	4313      	orrs	r3, r2
 8004b4a:	46a2      	mov	sl, r4
 8004b4c:	9304      	str	r3, [sp, #16]
 8004b4e:	e7d2      	b.n	8004af6 <_vfiprintf_r+0xc6>
 8004b50:	9b03      	ldr	r3, [sp, #12]
 8004b52:	1d19      	adds	r1, r3, #4
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	9103      	str	r1, [sp, #12]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	bfbb      	ittet	lt
 8004b5c:	425b      	neglt	r3, r3
 8004b5e:	f042 0202 	orrlt.w	r2, r2, #2
 8004b62:	9307      	strge	r3, [sp, #28]
 8004b64:	9307      	strlt	r3, [sp, #28]
 8004b66:	bfb8      	it	lt
 8004b68:	9204      	strlt	r2, [sp, #16]
 8004b6a:	7823      	ldrb	r3, [r4, #0]
 8004b6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8004b6e:	d10a      	bne.n	8004b86 <_vfiprintf_r+0x156>
 8004b70:	7863      	ldrb	r3, [r4, #1]
 8004b72:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b74:	d132      	bne.n	8004bdc <_vfiprintf_r+0x1ac>
 8004b76:	9b03      	ldr	r3, [sp, #12]
 8004b78:	3402      	adds	r4, #2
 8004b7a:	1d1a      	adds	r2, r3, #4
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	9203      	str	r2, [sp, #12]
 8004b80:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004b84:	9305      	str	r3, [sp, #20]
 8004b86:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004c50 <_vfiprintf_r+0x220>
 8004b8a:	2203      	movs	r2, #3
 8004b8c:	4650      	mov	r0, sl
 8004b8e:	7821      	ldrb	r1, [r4, #0]
 8004b90:	f000 fb5e 	bl	8005250 <memchr>
 8004b94:	b138      	cbz	r0, 8004ba6 <_vfiprintf_r+0x176>
 8004b96:	2240      	movs	r2, #64	@ 0x40
 8004b98:	9b04      	ldr	r3, [sp, #16]
 8004b9a:	eba0 000a 	sub.w	r0, r0, sl
 8004b9e:	4082      	lsls	r2, r0
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	3401      	adds	r4, #1
 8004ba4:	9304      	str	r3, [sp, #16]
 8004ba6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004baa:	2206      	movs	r2, #6
 8004bac:	4829      	ldr	r0, [pc, #164]	@ (8004c54 <_vfiprintf_r+0x224>)
 8004bae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004bb2:	f000 fb4d 	bl	8005250 <memchr>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	d03f      	beq.n	8004c3a <_vfiprintf_r+0x20a>
 8004bba:	4b27      	ldr	r3, [pc, #156]	@ (8004c58 <_vfiprintf_r+0x228>)
 8004bbc:	bb1b      	cbnz	r3, 8004c06 <_vfiprintf_r+0x1d6>
 8004bbe:	9b03      	ldr	r3, [sp, #12]
 8004bc0:	3307      	adds	r3, #7
 8004bc2:	f023 0307 	bic.w	r3, r3, #7
 8004bc6:	3308      	adds	r3, #8
 8004bc8:	9303      	str	r3, [sp, #12]
 8004bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bcc:	443b      	add	r3, r7
 8004bce:	9309      	str	r3, [sp, #36]	@ 0x24
 8004bd0:	e76a      	b.n	8004aa8 <_vfiprintf_r+0x78>
 8004bd2:	460c      	mov	r4, r1
 8004bd4:	2001      	movs	r0, #1
 8004bd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bda:	e7a8      	b.n	8004b2e <_vfiprintf_r+0xfe>
 8004bdc:	2300      	movs	r3, #0
 8004bde:	f04f 0c0a 	mov.w	ip, #10
 8004be2:	4619      	mov	r1, r3
 8004be4:	3401      	adds	r4, #1
 8004be6:	9305      	str	r3, [sp, #20]
 8004be8:	4620      	mov	r0, r4
 8004bea:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bee:	3a30      	subs	r2, #48	@ 0x30
 8004bf0:	2a09      	cmp	r2, #9
 8004bf2:	d903      	bls.n	8004bfc <_vfiprintf_r+0x1cc>
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0c6      	beq.n	8004b86 <_vfiprintf_r+0x156>
 8004bf8:	9105      	str	r1, [sp, #20]
 8004bfa:	e7c4      	b.n	8004b86 <_vfiprintf_r+0x156>
 8004bfc:	4604      	mov	r4, r0
 8004bfe:	2301      	movs	r3, #1
 8004c00:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c04:	e7f0      	b.n	8004be8 <_vfiprintf_r+0x1b8>
 8004c06:	ab03      	add	r3, sp, #12
 8004c08:	9300      	str	r3, [sp, #0]
 8004c0a:	462a      	mov	r2, r5
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	4b13      	ldr	r3, [pc, #76]	@ (8004c5c <_vfiprintf_r+0x22c>)
 8004c10:	a904      	add	r1, sp, #16
 8004c12:	f3af 8000 	nop.w
 8004c16:	4607      	mov	r7, r0
 8004c18:	1c78      	adds	r0, r7, #1
 8004c1a:	d1d6      	bne.n	8004bca <_vfiprintf_r+0x19a>
 8004c1c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004c1e:	07d9      	lsls	r1, r3, #31
 8004c20:	d405      	bmi.n	8004c2e <_vfiprintf_r+0x1fe>
 8004c22:	89ab      	ldrh	r3, [r5, #12]
 8004c24:	059a      	lsls	r2, r3, #22
 8004c26:	d402      	bmi.n	8004c2e <_vfiprintf_r+0x1fe>
 8004c28:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004c2a:	f7ff fc7b 	bl	8004524 <__retarget_lock_release_recursive>
 8004c2e:	89ab      	ldrh	r3, [r5, #12]
 8004c30:	065b      	lsls	r3, r3, #25
 8004c32:	f53f af1f 	bmi.w	8004a74 <_vfiprintf_r+0x44>
 8004c36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c38:	e71e      	b.n	8004a78 <_vfiprintf_r+0x48>
 8004c3a:	ab03      	add	r3, sp, #12
 8004c3c:	9300      	str	r3, [sp, #0]
 8004c3e:	462a      	mov	r2, r5
 8004c40:	4630      	mov	r0, r6
 8004c42:	4b06      	ldr	r3, [pc, #24]	@ (8004c5c <_vfiprintf_r+0x22c>)
 8004c44:	a904      	add	r1, sp, #16
 8004c46:	f000 f87d 	bl	8004d44 <_printf_i>
 8004c4a:	e7e4      	b.n	8004c16 <_vfiprintf_r+0x1e6>
 8004c4c:	08006d0e 	.word	0x08006d0e
 8004c50:	08006d14 	.word	0x08006d14
 8004c54:	08006d18 	.word	0x08006d18
 8004c58:	00000000 	.word	0x00000000
 8004c5c:	08004a0b 	.word	0x08004a0b

08004c60 <_printf_common>:
 8004c60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c64:	4616      	mov	r6, r2
 8004c66:	4698      	mov	r8, r3
 8004c68:	688a      	ldr	r2, [r1, #8]
 8004c6a:	690b      	ldr	r3, [r1, #16]
 8004c6c:	4607      	mov	r7, r0
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	bfb8      	it	lt
 8004c72:	4613      	movlt	r3, r2
 8004c74:	6033      	str	r3, [r6, #0]
 8004c76:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004c80:	b10a      	cbz	r2, 8004c86 <_printf_common+0x26>
 8004c82:	3301      	adds	r3, #1
 8004c84:	6033      	str	r3, [r6, #0]
 8004c86:	6823      	ldr	r3, [r4, #0]
 8004c88:	0699      	lsls	r1, r3, #26
 8004c8a:	bf42      	ittt	mi
 8004c8c:	6833      	ldrmi	r3, [r6, #0]
 8004c8e:	3302      	addmi	r3, #2
 8004c90:	6033      	strmi	r3, [r6, #0]
 8004c92:	6825      	ldr	r5, [r4, #0]
 8004c94:	f015 0506 	ands.w	r5, r5, #6
 8004c98:	d106      	bne.n	8004ca8 <_printf_common+0x48>
 8004c9a:	f104 0a19 	add.w	sl, r4, #25
 8004c9e:	68e3      	ldr	r3, [r4, #12]
 8004ca0:	6832      	ldr	r2, [r6, #0]
 8004ca2:	1a9b      	subs	r3, r3, r2
 8004ca4:	42ab      	cmp	r3, r5
 8004ca6:	dc2b      	bgt.n	8004d00 <_printf_common+0xa0>
 8004ca8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004cac:	6822      	ldr	r2, [r4, #0]
 8004cae:	3b00      	subs	r3, #0
 8004cb0:	bf18      	it	ne
 8004cb2:	2301      	movne	r3, #1
 8004cb4:	0692      	lsls	r2, r2, #26
 8004cb6:	d430      	bmi.n	8004d1a <_printf_common+0xba>
 8004cb8:	4641      	mov	r1, r8
 8004cba:	4638      	mov	r0, r7
 8004cbc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004cc0:	47c8      	blx	r9
 8004cc2:	3001      	adds	r0, #1
 8004cc4:	d023      	beq.n	8004d0e <_printf_common+0xae>
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	6922      	ldr	r2, [r4, #16]
 8004cca:	f003 0306 	and.w	r3, r3, #6
 8004cce:	2b04      	cmp	r3, #4
 8004cd0:	bf14      	ite	ne
 8004cd2:	2500      	movne	r5, #0
 8004cd4:	6833      	ldreq	r3, [r6, #0]
 8004cd6:	f04f 0600 	mov.w	r6, #0
 8004cda:	bf08      	it	eq
 8004cdc:	68e5      	ldreq	r5, [r4, #12]
 8004cde:	f104 041a 	add.w	r4, r4, #26
 8004ce2:	bf08      	it	eq
 8004ce4:	1aed      	subeq	r5, r5, r3
 8004ce6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004cea:	bf08      	it	eq
 8004cec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	bfc4      	itt	gt
 8004cf4:	1a9b      	subgt	r3, r3, r2
 8004cf6:	18ed      	addgt	r5, r5, r3
 8004cf8:	42b5      	cmp	r5, r6
 8004cfa:	d11a      	bne.n	8004d32 <_printf_common+0xd2>
 8004cfc:	2000      	movs	r0, #0
 8004cfe:	e008      	b.n	8004d12 <_printf_common+0xb2>
 8004d00:	2301      	movs	r3, #1
 8004d02:	4652      	mov	r2, sl
 8004d04:	4641      	mov	r1, r8
 8004d06:	4638      	mov	r0, r7
 8004d08:	47c8      	blx	r9
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	d103      	bne.n	8004d16 <_printf_common+0xb6>
 8004d0e:	f04f 30ff 	mov.w	r0, #4294967295
 8004d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d16:	3501      	adds	r5, #1
 8004d18:	e7c1      	b.n	8004c9e <_printf_common+0x3e>
 8004d1a:	2030      	movs	r0, #48	@ 0x30
 8004d1c:	18e1      	adds	r1, r4, r3
 8004d1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004d22:	1c5a      	adds	r2, r3, #1
 8004d24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004d28:	4422      	add	r2, r4
 8004d2a:	3302      	adds	r3, #2
 8004d2c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004d30:	e7c2      	b.n	8004cb8 <_printf_common+0x58>
 8004d32:	2301      	movs	r3, #1
 8004d34:	4622      	mov	r2, r4
 8004d36:	4641      	mov	r1, r8
 8004d38:	4638      	mov	r0, r7
 8004d3a:	47c8      	blx	r9
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d0e6      	beq.n	8004d0e <_printf_common+0xae>
 8004d40:	3601      	adds	r6, #1
 8004d42:	e7d9      	b.n	8004cf8 <_printf_common+0x98>

08004d44 <_printf_i>:
 8004d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d48:	7e0f      	ldrb	r7, [r1, #24]
 8004d4a:	4691      	mov	r9, r2
 8004d4c:	2f78      	cmp	r7, #120	@ 0x78
 8004d4e:	4680      	mov	r8, r0
 8004d50:	460c      	mov	r4, r1
 8004d52:	469a      	mov	sl, r3
 8004d54:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004d56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004d5a:	d807      	bhi.n	8004d6c <_printf_i+0x28>
 8004d5c:	2f62      	cmp	r7, #98	@ 0x62
 8004d5e:	d80a      	bhi.n	8004d76 <_printf_i+0x32>
 8004d60:	2f00      	cmp	r7, #0
 8004d62:	f000 80d3 	beq.w	8004f0c <_printf_i+0x1c8>
 8004d66:	2f58      	cmp	r7, #88	@ 0x58
 8004d68:	f000 80ba 	beq.w	8004ee0 <_printf_i+0x19c>
 8004d6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004d70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004d74:	e03a      	b.n	8004dec <_printf_i+0xa8>
 8004d76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004d7a:	2b15      	cmp	r3, #21
 8004d7c:	d8f6      	bhi.n	8004d6c <_printf_i+0x28>
 8004d7e:	a101      	add	r1, pc, #4	@ (adr r1, 8004d84 <_printf_i+0x40>)
 8004d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d84:	08004ddd 	.word	0x08004ddd
 8004d88:	08004df1 	.word	0x08004df1
 8004d8c:	08004d6d 	.word	0x08004d6d
 8004d90:	08004d6d 	.word	0x08004d6d
 8004d94:	08004d6d 	.word	0x08004d6d
 8004d98:	08004d6d 	.word	0x08004d6d
 8004d9c:	08004df1 	.word	0x08004df1
 8004da0:	08004d6d 	.word	0x08004d6d
 8004da4:	08004d6d 	.word	0x08004d6d
 8004da8:	08004d6d 	.word	0x08004d6d
 8004dac:	08004d6d 	.word	0x08004d6d
 8004db0:	08004ef3 	.word	0x08004ef3
 8004db4:	08004e1b 	.word	0x08004e1b
 8004db8:	08004ead 	.word	0x08004ead
 8004dbc:	08004d6d 	.word	0x08004d6d
 8004dc0:	08004d6d 	.word	0x08004d6d
 8004dc4:	08004f15 	.word	0x08004f15
 8004dc8:	08004d6d 	.word	0x08004d6d
 8004dcc:	08004e1b 	.word	0x08004e1b
 8004dd0:	08004d6d 	.word	0x08004d6d
 8004dd4:	08004d6d 	.word	0x08004d6d
 8004dd8:	08004eb5 	.word	0x08004eb5
 8004ddc:	6833      	ldr	r3, [r6, #0]
 8004dde:	1d1a      	adds	r2, r3, #4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	6032      	str	r2, [r6, #0]
 8004de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004de8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004dec:	2301      	movs	r3, #1
 8004dee:	e09e      	b.n	8004f2e <_printf_i+0x1ea>
 8004df0:	6833      	ldr	r3, [r6, #0]
 8004df2:	6820      	ldr	r0, [r4, #0]
 8004df4:	1d19      	adds	r1, r3, #4
 8004df6:	6031      	str	r1, [r6, #0]
 8004df8:	0606      	lsls	r6, r0, #24
 8004dfa:	d501      	bpl.n	8004e00 <_printf_i+0xbc>
 8004dfc:	681d      	ldr	r5, [r3, #0]
 8004dfe:	e003      	b.n	8004e08 <_printf_i+0xc4>
 8004e00:	0645      	lsls	r5, r0, #25
 8004e02:	d5fb      	bpl.n	8004dfc <_printf_i+0xb8>
 8004e04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004e08:	2d00      	cmp	r5, #0
 8004e0a:	da03      	bge.n	8004e14 <_printf_i+0xd0>
 8004e0c:	232d      	movs	r3, #45	@ 0x2d
 8004e0e:	426d      	negs	r5, r5
 8004e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e14:	230a      	movs	r3, #10
 8004e16:	4859      	ldr	r0, [pc, #356]	@ (8004f7c <_printf_i+0x238>)
 8004e18:	e011      	b.n	8004e3e <_printf_i+0xfa>
 8004e1a:	6821      	ldr	r1, [r4, #0]
 8004e1c:	6833      	ldr	r3, [r6, #0]
 8004e1e:	0608      	lsls	r0, r1, #24
 8004e20:	f853 5b04 	ldr.w	r5, [r3], #4
 8004e24:	d402      	bmi.n	8004e2c <_printf_i+0xe8>
 8004e26:	0649      	lsls	r1, r1, #25
 8004e28:	bf48      	it	mi
 8004e2a:	b2ad      	uxthmi	r5, r5
 8004e2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004e2e:	6033      	str	r3, [r6, #0]
 8004e30:	bf14      	ite	ne
 8004e32:	230a      	movne	r3, #10
 8004e34:	2308      	moveq	r3, #8
 8004e36:	4851      	ldr	r0, [pc, #324]	@ (8004f7c <_printf_i+0x238>)
 8004e38:	2100      	movs	r1, #0
 8004e3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004e3e:	6866      	ldr	r6, [r4, #4]
 8004e40:	2e00      	cmp	r6, #0
 8004e42:	bfa8      	it	ge
 8004e44:	6821      	ldrge	r1, [r4, #0]
 8004e46:	60a6      	str	r6, [r4, #8]
 8004e48:	bfa4      	itt	ge
 8004e4a:	f021 0104 	bicge.w	r1, r1, #4
 8004e4e:	6021      	strge	r1, [r4, #0]
 8004e50:	b90d      	cbnz	r5, 8004e56 <_printf_i+0x112>
 8004e52:	2e00      	cmp	r6, #0
 8004e54:	d04b      	beq.n	8004eee <_printf_i+0x1aa>
 8004e56:	4616      	mov	r6, r2
 8004e58:	fbb5 f1f3 	udiv	r1, r5, r3
 8004e5c:	fb03 5711 	mls	r7, r3, r1, r5
 8004e60:	5dc7      	ldrb	r7, [r0, r7]
 8004e62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004e66:	462f      	mov	r7, r5
 8004e68:	42bb      	cmp	r3, r7
 8004e6a:	460d      	mov	r5, r1
 8004e6c:	d9f4      	bls.n	8004e58 <_printf_i+0x114>
 8004e6e:	2b08      	cmp	r3, #8
 8004e70:	d10b      	bne.n	8004e8a <_printf_i+0x146>
 8004e72:	6823      	ldr	r3, [r4, #0]
 8004e74:	07df      	lsls	r7, r3, #31
 8004e76:	d508      	bpl.n	8004e8a <_printf_i+0x146>
 8004e78:	6923      	ldr	r3, [r4, #16]
 8004e7a:	6861      	ldr	r1, [r4, #4]
 8004e7c:	4299      	cmp	r1, r3
 8004e7e:	bfde      	ittt	le
 8004e80:	2330      	movle	r3, #48	@ 0x30
 8004e82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004e86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004e8a:	1b92      	subs	r2, r2, r6
 8004e8c:	6122      	str	r2, [r4, #16]
 8004e8e:	464b      	mov	r3, r9
 8004e90:	4621      	mov	r1, r4
 8004e92:	4640      	mov	r0, r8
 8004e94:	f8cd a000 	str.w	sl, [sp]
 8004e98:	aa03      	add	r2, sp, #12
 8004e9a:	f7ff fee1 	bl	8004c60 <_printf_common>
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	d14a      	bne.n	8004f38 <_printf_i+0x1f4>
 8004ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea6:	b004      	add	sp, #16
 8004ea8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	f043 0320 	orr.w	r3, r3, #32
 8004eb2:	6023      	str	r3, [r4, #0]
 8004eb4:	2778      	movs	r7, #120	@ 0x78
 8004eb6:	4832      	ldr	r0, [pc, #200]	@ (8004f80 <_printf_i+0x23c>)
 8004eb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004ebc:	6823      	ldr	r3, [r4, #0]
 8004ebe:	6831      	ldr	r1, [r6, #0]
 8004ec0:	061f      	lsls	r7, r3, #24
 8004ec2:	f851 5b04 	ldr.w	r5, [r1], #4
 8004ec6:	d402      	bmi.n	8004ece <_printf_i+0x18a>
 8004ec8:	065f      	lsls	r7, r3, #25
 8004eca:	bf48      	it	mi
 8004ecc:	b2ad      	uxthmi	r5, r5
 8004ece:	6031      	str	r1, [r6, #0]
 8004ed0:	07d9      	lsls	r1, r3, #31
 8004ed2:	bf44      	itt	mi
 8004ed4:	f043 0320 	orrmi.w	r3, r3, #32
 8004ed8:	6023      	strmi	r3, [r4, #0]
 8004eda:	b11d      	cbz	r5, 8004ee4 <_printf_i+0x1a0>
 8004edc:	2310      	movs	r3, #16
 8004ede:	e7ab      	b.n	8004e38 <_printf_i+0xf4>
 8004ee0:	4826      	ldr	r0, [pc, #152]	@ (8004f7c <_printf_i+0x238>)
 8004ee2:	e7e9      	b.n	8004eb8 <_printf_i+0x174>
 8004ee4:	6823      	ldr	r3, [r4, #0]
 8004ee6:	f023 0320 	bic.w	r3, r3, #32
 8004eea:	6023      	str	r3, [r4, #0]
 8004eec:	e7f6      	b.n	8004edc <_printf_i+0x198>
 8004eee:	4616      	mov	r6, r2
 8004ef0:	e7bd      	b.n	8004e6e <_printf_i+0x12a>
 8004ef2:	6833      	ldr	r3, [r6, #0]
 8004ef4:	6825      	ldr	r5, [r4, #0]
 8004ef6:	1d18      	adds	r0, r3, #4
 8004ef8:	6961      	ldr	r1, [r4, #20]
 8004efa:	6030      	str	r0, [r6, #0]
 8004efc:	062e      	lsls	r6, r5, #24
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	d501      	bpl.n	8004f06 <_printf_i+0x1c2>
 8004f02:	6019      	str	r1, [r3, #0]
 8004f04:	e002      	b.n	8004f0c <_printf_i+0x1c8>
 8004f06:	0668      	lsls	r0, r5, #25
 8004f08:	d5fb      	bpl.n	8004f02 <_printf_i+0x1be>
 8004f0a:	8019      	strh	r1, [r3, #0]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	4616      	mov	r6, r2
 8004f10:	6123      	str	r3, [r4, #16]
 8004f12:	e7bc      	b.n	8004e8e <_printf_i+0x14a>
 8004f14:	6833      	ldr	r3, [r6, #0]
 8004f16:	2100      	movs	r1, #0
 8004f18:	1d1a      	adds	r2, r3, #4
 8004f1a:	6032      	str	r2, [r6, #0]
 8004f1c:	681e      	ldr	r6, [r3, #0]
 8004f1e:	6862      	ldr	r2, [r4, #4]
 8004f20:	4630      	mov	r0, r6
 8004f22:	f000 f995 	bl	8005250 <memchr>
 8004f26:	b108      	cbz	r0, 8004f2c <_printf_i+0x1e8>
 8004f28:	1b80      	subs	r0, r0, r6
 8004f2a:	6060      	str	r0, [r4, #4]
 8004f2c:	6863      	ldr	r3, [r4, #4]
 8004f2e:	6123      	str	r3, [r4, #16]
 8004f30:	2300      	movs	r3, #0
 8004f32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f36:	e7aa      	b.n	8004e8e <_printf_i+0x14a>
 8004f38:	4632      	mov	r2, r6
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	4640      	mov	r0, r8
 8004f3e:	6923      	ldr	r3, [r4, #16]
 8004f40:	47d0      	blx	sl
 8004f42:	3001      	adds	r0, #1
 8004f44:	d0ad      	beq.n	8004ea2 <_printf_i+0x15e>
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	079b      	lsls	r3, r3, #30
 8004f4a:	d413      	bmi.n	8004f74 <_printf_i+0x230>
 8004f4c:	68e0      	ldr	r0, [r4, #12]
 8004f4e:	9b03      	ldr	r3, [sp, #12]
 8004f50:	4298      	cmp	r0, r3
 8004f52:	bfb8      	it	lt
 8004f54:	4618      	movlt	r0, r3
 8004f56:	e7a6      	b.n	8004ea6 <_printf_i+0x162>
 8004f58:	2301      	movs	r3, #1
 8004f5a:	4632      	mov	r2, r6
 8004f5c:	4649      	mov	r1, r9
 8004f5e:	4640      	mov	r0, r8
 8004f60:	47d0      	blx	sl
 8004f62:	3001      	adds	r0, #1
 8004f64:	d09d      	beq.n	8004ea2 <_printf_i+0x15e>
 8004f66:	3501      	adds	r5, #1
 8004f68:	68e3      	ldr	r3, [r4, #12]
 8004f6a:	9903      	ldr	r1, [sp, #12]
 8004f6c:	1a5b      	subs	r3, r3, r1
 8004f6e:	42ab      	cmp	r3, r5
 8004f70:	dcf2      	bgt.n	8004f58 <_printf_i+0x214>
 8004f72:	e7eb      	b.n	8004f4c <_printf_i+0x208>
 8004f74:	2500      	movs	r5, #0
 8004f76:	f104 0619 	add.w	r6, r4, #25
 8004f7a:	e7f5      	b.n	8004f68 <_printf_i+0x224>
 8004f7c:	08006d1f 	.word	0x08006d1f
 8004f80:	08006d30 	.word	0x08006d30

08004f84 <__sflush_r>:
 8004f84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f8a:	0716      	lsls	r6, r2, #28
 8004f8c:	4605      	mov	r5, r0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	d454      	bmi.n	800503c <__sflush_r+0xb8>
 8004f92:	684b      	ldr	r3, [r1, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	dc02      	bgt.n	8004f9e <__sflush_r+0x1a>
 8004f98:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	dd48      	ble.n	8005030 <__sflush_r+0xac>
 8004f9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004fa0:	2e00      	cmp	r6, #0
 8004fa2:	d045      	beq.n	8005030 <__sflush_r+0xac>
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004faa:	682f      	ldr	r7, [r5, #0]
 8004fac:	6a21      	ldr	r1, [r4, #32]
 8004fae:	602b      	str	r3, [r5, #0]
 8004fb0:	d030      	beq.n	8005014 <__sflush_r+0x90>
 8004fb2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004fb4:	89a3      	ldrh	r3, [r4, #12]
 8004fb6:	0759      	lsls	r1, r3, #29
 8004fb8:	d505      	bpl.n	8004fc6 <__sflush_r+0x42>
 8004fba:	6863      	ldr	r3, [r4, #4]
 8004fbc:	1ad2      	subs	r2, r2, r3
 8004fbe:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004fc0:	b10b      	cbz	r3, 8004fc6 <__sflush_r+0x42>
 8004fc2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004fc4:	1ad2      	subs	r2, r2, r3
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	4628      	mov	r0, r5
 8004fca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004fcc:	6a21      	ldr	r1, [r4, #32]
 8004fce:	47b0      	blx	r6
 8004fd0:	1c43      	adds	r3, r0, #1
 8004fd2:	89a3      	ldrh	r3, [r4, #12]
 8004fd4:	d106      	bne.n	8004fe4 <__sflush_r+0x60>
 8004fd6:	6829      	ldr	r1, [r5, #0]
 8004fd8:	291d      	cmp	r1, #29
 8004fda:	d82b      	bhi.n	8005034 <__sflush_r+0xb0>
 8004fdc:	4a28      	ldr	r2, [pc, #160]	@ (8005080 <__sflush_r+0xfc>)
 8004fde:	410a      	asrs	r2, r1
 8004fe0:	07d6      	lsls	r6, r2, #31
 8004fe2:	d427      	bmi.n	8005034 <__sflush_r+0xb0>
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	6062      	str	r2, [r4, #4]
 8004fe8:	6922      	ldr	r2, [r4, #16]
 8004fea:	04d9      	lsls	r1, r3, #19
 8004fec:	6022      	str	r2, [r4, #0]
 8004fee:	d504      	bpl.n	8004ffa <__sflush_r+0x76>
 8004ff0:	1c42      	adds	r2, r0, #1
 8004ff2:	d101      	bne.n	8004ff8 <__sflush_r+0x74>
 8004ff4:	682b      	ldr	r3, [r5, #0]
 8004ff6:	b903      	cbnz	r3, 8004ffa <__sflush_r+0x76>
 8004ff8:	6560      	str	r0, [r4, #84]	@ 0x54
 8004ffa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004ffc:	602f      	str	r7, [r5, #0]
 8004ffe:	b1b9      	cbz	r1, 8005030 <__sflush_r+0xac>
 8005000:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005004:	4299      	cmp	r1, r3
 8005006:	d002      	beq.n	800500e <__sflush_r+0x8a>
 8005008:	4628      	mov	r0, r5
 800500a:	f7ff fa9b 	bl	8004544 <_free_r>
 800500e:	2300      	movs	r3, #0
 8005010:	6363      	str	r3, [r4, #52]	@ 0x34
 8005012:	e00d      	b.n	8005030 <__sflush_r+0xac>
 8005014:	2301      	movs	r3, #1
 8005016:	4628      	mov	r0, r5
 8005018:	47b0      	blx	r6
 800501a:	4602      	mov	r2, r0
 800501c:	1c50      	adds	r0, r2, #1
 800501e:	d1c9      	bne.n	8004fb4 <__sflush_r+0x30>
 8005020:	682b      	ldr	r3, [r5, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d0c6      	beq.n	8004fb4 <__sflush_r+0x30>
 8005026:	2b1d      	cmp	r3, #29
 8005028:	d001      	beq.n	800502e <__sflush_r+0xaa>
 800502a:	2b16      	cmp	r3, #22
 800502c:	d11d      	bne.n	800506a <__sflush_r+0xe6>
 800502e:	602f      	str	r7, [r5, #0]
 8005030:	2000      	movs	r0, #0
 8005032:	e021      	b.n	8005078 <__sflush_r+0xf4>
 8005034:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005038:	b21b      	sxth	r3, r3
 800503a:	e01a      	b.n	8005072 <__sflush_r+0xee>
 800503c:	690f      	ldr	r7, [r1, #16]
 800503e:	2f00      	cmp	r7, #0
 8005040:	d0f6      	beq.n	8005030 <__sflush_r+0xac>
 8005042:	0793      	lsls	r3, r2, #30
 8005044:	bf18      	it	ne
 8005046:	2300      	movne	r3, #0
 8005048:	680e      	ldr	r6, [r1, #0]
 800504a:	bf08      	it	eq
 800504c:	694b      	ldreq	r3, [r1, #20]
 800504e:	1bf6      	subs	r6, r6, r7
 8005050:	600f      	str	r7, [r1, #0]
 8005052:	608b      	str	r3, [r1, #8]
 8005054:	2e00      	cmp	r6, #0
 8005056:	ddeb      	ble.n	8005030 <__sflush_r+0xac>
 8005058:	4633      	mov	r3, r6
 800505a:	463a      	mov	r2, r7
 800505c:	4628      	mov	r0, r5
 800505e:	6a21      	ldr	r1, [r4, #32]
 8005060:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005064:	47e0      	blx	ip
 8005066:	2800      	cmp	r0, #0
 8005068:	dc07      	bgt.n	800507a <__sflush_r+0xf6>
 800506a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800506e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005072:	f04f 30ff 	mov.w	r0, #4294967295
 8005076:	81a3      	strh	r3, [r4, #12]
 8005078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800507a:	4407      	add	r7, r0
 800507c:	1a36      	subs	r6, r6, r0
 800507e:	e7e9      	b.n	8005054 <__sflush_r+0xd0>
 8005080:	dfbffffe 	.word	0xdfbffffe

08005084 <_fflush_r>:
 8005084:	b538      	push	{r3, r4, r5, lr}
 8005086:	690b      	ldr	r3, [r1, #16]
 8005088:	4605      	mov	r5, r0
 800508a:	460c      	mov	r4, r1
 800508c:	b913      	cbnz	r3, 8005094 <_fflush_r+0x10>
 800508e:	2500      	movs	r5, #0
 8005090:	4628      	mov	r0, r5
 8005092:	bd38      	pop	{r3, r4, r5, pc}
 8005094:	b118      	cbz	r0, 800509e <_fflush_r+0x1a>
 8005096:	6a03      	ldr	r3, [r0, #32]
 8005098:	b90b      	cbnz	r3, 800509e <_fflush_r+0x1a>
 800509a:	f7ff f91d 	bl	80042d8 <__sinit>
 800509e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f3      	beq.n	800508e <_fflush_r+0xa>
 80050a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80050a8:	07d0      	lsls	r0, r2, #31
 80050aa:	d404      	bmi.n	80050b6 <_fflush_r+0x32>
 80050ac:	0599      	lsls	r1, r3, #22
 80050ae:	d402      	bmi.n	80050b6 <_fflush_r+0x32>
 80050b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050b2:	f7ff fa36 	bl	8004522 <__retarget_lock_acquire_recursive>
 80050b6:	4628      	mov	r0, r5
 80050b8:	4621      	mov	r1, r4
 80050ba:	f7ff ff63 	bl	8004f84 <__sflush_r>
 80050be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80050c0:	4605      	mov	r5, r0
 80050c2:	07da      	lsls	r2, r3, #31
 80050c4:	d4e4      	bmi.n	8005090 <_fflush_r+0xc>
 80050c6:	89a3      	ldrh	r3, [r4, #12]
 80050c8:	059b      	lsls	r3, r3, #22
 80050ca:	d4e1      	bmi.n	8005090 <_fflush_r+0xc>
 80050cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80050ce:	f7ff fa29 	bl	8004524 <__retarget_lock_release_recursive>
 80050d2:	e7dd      	b.n	8005090 <_fflush_r+0xc>

080050d4 <__swbuf_r>:
 80050d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050d6:	460e      	mov	r6, r1
 80050d8:	4614      	mov	r4, r2
 80050da:	4605      	mov	r5, r0
 80050dc:	b118      	cbz	r0, 80050e6 <__swbuf_r+0x12>
 80050de:	6a03      	ldr	r3, [r0, #32]
 80050e0:	b90b      	cbnz	r3, 80050e6 <__swbuf_r+0x12>
 80050e2:	f7ff f8f9 	bl	80042d8 <__sinit>
 80050e6:	69a3      	ldr	r3, [r4, #24]
 80050e8:	60a3      	str	r3, [r4, #8]
 80050ea:	89a3      	ldrh	r3, [r4, #12]
 80050ec:	071a      	lsls	r2, r3, #28
 80050ee:	d501      	bpl.n	80050f4 <__swbuf_r+0x20>
 80050f0:	6923      	ldr	r3, [r4, #16]
 80050f2:	b943      	cbnz	r3, 8005106 <__swbuf_r+0x32>
 80050f4:	4621      	mov	r1, r4
 80050f6:	4628      	mov	r0, r5
 80050f8:	f000 f82a 	bl	8005150 <__swsetup_r>
 80050fc:	b118      	cbz	r0, 8005106 <__swbuf_r+0x32>
 80050fe:	f04f 37ff 	mov.w	r7, #4294967295
 8005102:	4638      	mov	r0, r7
 8005104:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005106:	6823      	ldr	r3, [r4, #0]
 8005108:	6922      	ldr	r2, [r4, #16]
 800510a:	b2f6      	uxtb	r6, r6
 800510c:	1a98      	subs	r0, r3, r2
 800510e:	6963      	ldr	r3, [r4, #20]
 8005110:	4637      	mov	r7, r6
 8005112:	4283      	cmp	r3, r0
 8005114:	dc05      	bgt.n	8005122 <__swbuf_r+0x4e>
 8005116:	4621      	mov	r1, r4
 8005118:	4628      	mov	r0, r5
 800511a:	f7ff ffb3 	bl	8005084 <_fflush_r>
 800511e:	2800      	cmp	r0, #0
 8005120:	d1ed      	bne.n	80050fe <__swbuf_r+0x2a>
 8005122:	68a3      	ldr	r3, [r4, #8]
 8005124:	3b01      	subs	r3, #1
 8005126:	60a3      	str	r3, [r4, #8]
 8005128:	6823      	ldr	r3, [r4, #0]
 800512a:	1c5a      	adds	r2, r3, #1
 800512c:	6022      	str	r2, [r4, #0]
 800512e:	701e      	strb	r6, [r3, #0]
 8005130:	6962      	ldr	r2, [r4, #20]
 8005132:	1c43      	adds	r3, r0, #1
 8005134:	429a      	cmp	r2, r3
 8005136:	d004      	beq.n	8005142 <__swbuf_r+0x6e>
 8005138:	89a3      	ldrh	r3, [r4, #12]
 800513a:	07db      	lsls	r3, r3, #31
 800513c:	d5e1      	bpl.n	8005102 <__swbuf_r+0x2e>
 800513e:	2e0a      	cmp	r6, #10
 8005140:	d1df      	bne.n	8005102 <__swbuf_r+0x2e>
 8005142:	4621      	mov	r1, r4
 8005144:	4628      	mov	r0, r5
 8005146:	f7ff ff9d 	bl	8005084 <_fflush_r>
 800514a:	2800      	cmp	r0, #0
 800514c:	d0d9      	beq.n	8005102 <__swbuf_r+0x2e>
 800514e:	e7d6      	b.n	80050fe <__swbuf_r+0x2a>

08005150 <__swsetup_r>:
 8005150:	b538      	push	{r3, r4, r5, lr}
 8005152:	4b29      	ldr	r3, [pc, #164]	@ (80051f8 <__swsetup_r+0xa8>)
 8005154:	4605      	mov	r5, r0
 8005156:	6818      	ldr	r0, [r3, #0]
 8005158:	460c      	mov	r4, r1
 800515a:	b118      	cbz	r0, 8005164 <__swsetup_r+0x14>
 800515c:	6a03      	ldr	r3, [r0, #32]
 800515e:	b90b      	cbnz	r3, 8005164 <__swsetup_r+0x14>
 8005160:	f7ff f8ba 	bl	80042d8 <__sinit>
 8005164:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005168:	0719      	lsls	r1, r3, #28
 800516a:	d422      	bmi.n	80051b2 <__swsetup_r+0x62>
 800516c:	06da      	lsls	r2, r3, #27
 800516e:	d407      	bmi.n	8005180 <__swsetup_r+0x30>
 8005170:	2209      	movs	r2, #9
 8005172:	602a      	str	r2, [r5, #0]
 8005174:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005178:	f04f 30ff 	mov.w	r0, #4294967295
 800517c:	81a3      	strh	r3, [r4, #12]
 800517e:	e033      	b.n	80051e8 <__swsetup_r+0x98>
 8005180:	0758      	lsls	r0, r3, #29
 8005182:	d512      	bpl.n	80051aa <__swsetup_r+0x5a>
 8005184:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005186:	b141      	cbz	r1, 800519a <__swsetup_r+0x4a>
 8005188:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800518c:	4299      	cmp	r1, r3
 800518e:	d002      	beq.n	8005196 <__swsetup_r+0x46>
 8005190:	4628      	mov	r0, r5
 8005192:	f7ff f9d7 	bl	8004544 <_free_r>
 8005196:	2300      	movs	r3, #0
 8005198:	6363      	str	r3, [r4, #52]	@ 0x34
 800519a:	89a3      	ldrh	r3, [r4, #12]
 800519c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80051a0:	81a3      	strh	r3, [r4, #12]
 80051a2:	2300      	movs	r3, #0
 80051a4:	6063      	str	r3, [r4, #4]
 80051a6:	6923      	ldr	r3, [r4, #16]
 80051a8:	6023      	str	r3, [r4, #0]
 80051aa:	89a3      	ldrh	r3, [r4, #12]
 80051ac:	f043 0308 	orr.w	r3, r3, #8
 80051b0:	81a3      	strh	r3, [r4, #12]
 80051b2:	6923      	ldr	r3, [r4, #16]
 80051b4:	b94b      	cbnz	r3, 80051ca <__swsetup_r+0x7a>
 80051b6:	89a3      	ldrh	r3, [r4, #12]
 80051b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80051bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051c0:	d003      	beq.n	80051ca <__swsetup_r+0x7a>
 80051c2:	4621      	mov	r1, r4
 80051c4:	4628      	mov	r0, r5
 80051c6:	f000 f8a4 	bl	8005312 <__smakebuf_r>
 80051ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051ce:	f013 0201 	ands.w	r2, r3, #1
 80051d2:	d00a      	beq.n	80051ea <__swsetup_r+0x9a>
 80051d4:	2200      	movs	r2, #0
 80051d6:	60a2      	str	r2, [r4, #8]
 80051d8:	6962      	ldr	r2, [r4, #20]
 80051da:	4252      	negs	r2, r2
 80051dc:	61a2      	str	r2, [r4, #24]
 80051de:	6922      	ldr	r2, [r4, #16]
 80051e0:	b942      	cbnz	r2, 80051f4 <__swsetup_r+0xa4>
 80051e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80051e6:	d1c5      	bne.n	8005174 <__swsetup_r+0x24>
 80051e8:	bd38      	pop	{r3, r4, r5, pc}
 80051ea:	0799      	lsls	r1, r3, #30
 80051ec:	bf58      	it	pl
 80051ee:	6962      	ldrpl	r2, [r4, #20]
 80051f0:	60a2      	str	r2, [r4, #8]
 80051f2:	e7f4      	b.n	80051de <__swsetup_r+0x8e>
 80051f4:	2000      	movs	r0, #0
 80051f6:	e7f7      	b.n	80051e8 <__swsetup_r+0x98>
 80051f8:	20000024 	.word	0x20000024

080051fc <memmove>:
 80051fc:	4288      	cmp	r0, r1
 80051fe:	b510      	push	{r4, lr}
 8005200:	eb01 0402 	add.w	r4, r1, r2
 8005204:	d902      	bls.n	800520c <memmove+0x10>
 8005206:	4284      	cmp	r4, r0
 8005208:	4623      	mov	r3, r4
 800520a:	d807      	bhi.n	800521c <memmove+0x20>
 800520c:	1e43      	subs	r3, r0, #1
 800520e:	42a1      	cmp	r1, r4
 8005210:	d008      	beq.n	8005224 <memmove+0x28>
 8005212:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005216:	f803 2f01 	strb.w	r2, [r3, #1]!
 800521a:	e7f8      	b.n	800520e <memmove+0x12>
 800521c:	4601      	mov	r1, r0
 800521e:	4402      	add	r2, r0
 8005220:	428a      	cmp	r2, r1
 8005222:	d100      	bne.n	8005226 <memmove+0x2a>
 8005224:	bd10      	pop	{r4, pc}
 8005226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800522a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800522e:	e7f7      	b.n	8005220 <memmove+0x24>

08005230 <_sbrk_r>:
 8005230:	b538      	push	{r3, r4, r5, lr}
 8005232:	2300      	movs	r3, #0
 8005234:	4d05      	ldr	r5, [pc, #20]	@ (800524c <_sbrk_r+0x1c>)
 8005236:	4604      	mov	r4, r0
 8005238:	4608      	mov	r0, r1
 800523a:	602b      	str	r3, [r5, #0]
 800523c:	f7fb ff20 	bl	8001080 <_sbrk>
 8005240:	1c43      	adds	r3, r0, #1
 8005242:	d102      	bne.n	800524a <_sbrk_r+0x1a>
 8005244:	682b      	ldr	r3, [r5, #0]
 8005246:	b103      	cbz	r3, 800524a <_sbrk_r+0x1a>
 8005248:	6023      	str	r3, [r4, #0]
 800524a:	bd38      	pop	{r3, r4, r5, pc}
 800524c:	20001ba4 	.word	0x20001ba4

08005250 <memchr>:
 8005250:	4603      	mov	r3, r0
 8005252:	b510      	push	{r4, lr}
 8005254:	b2c9      	uxtb	r1, r1
 8005256:	4402      	add	r2, r0
 8005258:	4293      	cmp	r3, r2
 800525a:	4618      	mov	r0, r3
 800525c:	d101      	bne.n	8005262 <memchr+0x12>
 800525e:	2000      	movs	r0, #0
 8005260:	e003      	b.n	800526a <memchr+0x1a>
 8005262:	7804      	ldrb	r4, [r0, #0]
 8005264:	3301      	adds	r3, #1
 8005266:	428c      	cmp	r4, r1
 8005268:	d1f6      	bne.n	8005258 <memchr+0x8>
 800526a:	bd10      	pop	{r4, pc}

0800526c <_realloc_r>:
 800526c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005270:	4680      	mov	r8, r0
 8005272:	4615      	mov	r5, r2
 8005274:	460c      	mov	r4, r1
 8005276:	b921      	cbnz	r1, 8005282 <_realloc_r+0x16>
 8005278:	4611      	mov	r1, r2
 800527a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800527e:	f7ff b9cb 	b.w	8004618 <_malloc_r>
 8005282:	b92a      	cbnz	r2, 8005290 <_realloc_r+0x24>
 8005284:	f7ff f95e 	bl	8004544 <_free_r>
 8005288:	2400      	movs	r4, #0
 800528a:	4620      	mov	r0, r4
 800528c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005290:	f000 f89e 	bl	80053d0 <_malloc_usable_size_r>
 8005294:	4285      	cmp	r5, r0
 8005296:	4606      	mov	r6, r0
 8005298:	d802      	bhi.n	80052a0 <_realloc_r+0x34>
 800529a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800529e:	d8f4      	bhi.n	800528a <_realloc_r+0x1e>
 80052a0:	4629      	mov	r1, r5
 80052a2:	4640      	mov	r0, r8
 80052a4:	f7ff f9b8 	bl	8004618 <_malloc_r>
 80052a8:	4607      	mov	r7, r0
 80052aa:	2800      	cmp	r0, #0
 80052ac:	d0ec      	beq.n	8005288 <_realloc_r+0x1c>
 80052ae:	42b5      	cmp	r5, r6
 80052b0:	462a      	mov	r2, r5
 80052b2:	4621      	mov	r1, r4
 80052b4:	bf28      	it	cs
 80052b6:	4632      	movcs	r2, r6
 80052b8:	f7ff f935 	bl	8004526 <memcpy>
 80052bc:	4621      	mov	r1, r4
 80052be:	4640      	mov	r0, r8
 80052c0:	f7ff f940 	bl	8004544 <_free_r>
 80052c4:	463c      	mov	r4, r7
 80052c6:	e7e0      	b.n	800528a <_realloc_r+0x1e>

080052c8 <__swhatbuf_r>:
 80052c8:	b570      	push	{r4, r5, r6, lr}
 80052ca:	460c      	mov	r4, r1
 80052cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d0:	4615      	mov	r5, r2
 80052d2:	2900      	cmp	r1, #0
 80052d4:	461e      	mov	r6, r3
 80052d6:	b096      	sub	sp, #88	@ 0x58
 80052d8:	da0c      	bge.n	80052f4 <__swhatbuf_r+0x2c>
 80052da:	89a3      	ldrh	r3, [r4, #12]
 80052dc:	2100      	movs	r1, #0
 80052de:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80052e2:	bf14      	ite	ne
 80052e4:	2340      	movne	r3, #64	@ 0x40
 80052e6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80052ea:	2000      	movs	r0, #0
 80052ec:	6031      	str	r1, [r6, #0]
 80052ee:	602b      	str	r3, [r5, #0]
 80052f0:	b016      	add	sp, #88	@ 0x58
 80052f2:	bd70      	pop	{r4, r5, r6, pc}
 80052f4:	466a      	mov	r2, sp
 80052f6:	f000 f849 	bl	800538c <_fstat_r>
 80052fa:	2800      	cmp	r0, #0
 80052fc:	dbed      	blt.n	80052da <__swhatbuf_r+0x12>
 80052fe:	9901      	ldr	r1, [sp, #4]
 8005300:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005304:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005308:	4259      	negs	r1, r3
 800530a:	4159      	adcs	r1, r3
 800530c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005310:	e7eb      	b.n	80052ea <__swhatbuf_r+0x22>

08005312 <__smakebuf_r>:
 8005312:	898b      	ldrh	r3, [r1, #12]
 8005314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005316:	079d      	lsls	r5, r3, #30
 8005318:	4606      	mov	r6, r0
 800531a:	460c      	mov	r4, r1
 800531c:	d507      	bpl.n	800532e <__smakebuf_r+0x1c>
 800531e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005322:	6023      	str	r3, [r4, #0]
 8005324:	6123      	str	r3, [r4, #16]
 8005326:	2301      	movs	r3, #1
 8005328:	6163      	str	r3, [r4, #20]
 800532a:	b003      	add	sp, #12
 800532c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800532e:	466a      	mov	r2, sp
 8005330:	ab01      	add	r3, sp, #4
 8005332:	f7ff ffc9 	bl	80052c8 <__swhatbuf_r>
 8005336:	9f00      	ldr	r7, [sp, #0]
 8005338:	4605      	mov	r5, r0
 800533a:	4639      	mov	r1, r7
 800533c:	4630      	mov	r0, r6
 800533e:	f7ff f96b 	bl	8004618 <_malloc_r>
 8005342:	b948      	cbnz	r0, 8005358 <__smakebuf_r+0x46>
 8005344:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005348:	059a      	lsls	r2, r3, #22
 800534a:	d4ee      	bmi.n	800532a <__smakebuf_r+0x18>
 800534c:	f023 0303 	bic.w	r3, r3, #3
 8005350:	f043 0302 	orr.w	r3, r3, #2
 8005354:	81a3      	strh	r3, [r4, #12]
 8005356:	e7e2      	b.n	800531e <__smakebuf_r+0xc>
 8005358:	89a3      	ldrh	r3, [r4, #12]
 800535a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800535e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005362:	81a3      	strh	r3, [r4, #12]
 8005364:	9b01      	ldr	r3, [sp, #4]
 8005366:	6020      	str	r0, [r4, #0]
 8005368:	b15b      	cbz	r3, 8005382 <__smakebuf_r+0x70>
 800536a:	4630      	mov	r0, r6
 800536c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005370:	f000 f81e 	bl	80053b0 <_isatty_r>
 8005374:	b128      	cbz	r0, 8005382 <__smakebuf_r+0x70>
 8005376:	89a3      	ldrh	r3, [r4, #12]
 8005378:	f023 0303 	bic.w	r3, r3, #3
 800537c:	f043 0301 	orr.w	r3, r3, #1
 8005380:	81a3      	strh	r3, [r4, #12]
 8005382:	89a3      	ldrh	r3, [r4, #12]
 8005384:	431d      	orrs	r5, r3
 8005386:	81a5      	strh	r5, [r4, #12]
 8005388:	e7cf      	b.n	800532a <__smakebuf_r+0x18>
	...

0800538c <_fstat_r>:
 800538c:	b538      	push	{r3, r4, r5, lr}
 800538e:	2300      	movs	r3, #0
 8005390:	4d06      	ldr	r5, [pc, #24]	@ (80053ac <_fstat_r+0x20>)
 8005392:	4604      	mov	r4, r0
 8005394:	4608      	mov	r0, r1
 8005396:	4611      	mov	r1, r2
 8005398:	602b      	str	r3, [r5, #0]
 800539a:	f7fb fe68 	bl	800106e <_fstat>
 800539e:	1c43      	adds	r3, r0, #1
 80053a0:	d102      	bne.n	80053a8 <_fstat_r+0x1c>
 80053a2:	682b      	ldr	r3, [r5, #0]
 80053a4:	b103      	cbz	r3, 80053a8 <_fstat_r+0x1c>
 80053a6:	6023      	str	r3, [r4, #0]
 80053a8:	bd38      	pop	{r3, r4, r5, pc}
 80053aa:	bf00      	nop
 80053ac:	20001ba4 	.word	0x20001ba4

080053b0 <_isatty_r>:
 80053b0:	b538      	push	{r3, r4, r5, lr}
 80053b2:	2300      	movs	r3, #0
 80053b4:	4d05      	ldr	r5, [pc, #20]	@ (80053cc <_isatty_r+0x1c>)
 80053b6:	4604      	mov	r4, r0
 80053b8:	4608      	mov	r0, r1
 80053ba:	602b      	str	r3, [r5, #0]
 80053bc:	f7fb fe5c 	bl	8001078 <_isatty>
 80053c0:	1c43      	adds	r3, r0, #1
 80053c2:	d102      	bne.n	80053ca <_isatty_r+0x1a>
 80053c4:	682b      	ldr	r3, [r5, #0]
 80053c6:	b103      	cbz	r3, 80053ca <_isatty_r+0x1a>
 80053c8:	6023      	str	r3, [r4, #0]
 80053ca:	bd38      	pop	{r3, r4, r5, pc}
 80053cc:	20001ba4 	.word	0x20001ba4

080053d0 <_malloc_usable_size_r>:
 80053d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053d4:	1f18      	subs	r0, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bfbc      	itt	lt
 80053da:	580b      	ldrlt	r3, [r1, r0]
 80053dc:	18c0      	addlt	r0, r0, r3
 80053de:	4770      	bx	lr

080053e0 <_init>:
 80053e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e2:	bf00      	nop
 80053e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e6:	bc08      	pop	{r3}
 80053e8:	469e      	mov	lr, r3
 80053ea:	4770      	bx	lr

080053ec <_fini>:
 80053ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053ee:	bf00      	nop
 80053f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053f2:	bc08      	pop	{r3}
 80053f4:	469e      	mov	lr, r3
 80053f6:	4770      	bx	lr
