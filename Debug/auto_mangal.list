
auto_mangal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005228  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013f4  08005338  08005338  00006338  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800672c  0800672c  00008018  2**0
                  CONTENTS
  4 .ARM          00000000  0800672c  0800672c  00008018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800672c  0800672c  00008018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800672c  0800672c  0000772c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006730  08006730  00007730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08006734  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000019bc  20000018  0800674c  00008018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200019d4  0800674c  000089d4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00008018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e686  00000000  00000000  00008041  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b43  00000000  00000000  000166c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e18  00000000  00000000  00019210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00019208  00000000  00000000  0001a028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010e9d  00000000  00000000  00033230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0008942d  00000000  00000000  000440cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000cd4fa  2**0
                  CONTENTS, READONLY
 19 .debug_rnglists 00000abe  00000000  00000000  000cd53d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000038f0  00000000  00000000  000cdffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  000d18ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08005320 	.word	0x08005320

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08005320 	.word	0x08005320

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	20000034 	.word	0x20000034
 800017c:	20000088 	.word	0x20000088

08000180 <vApplicationGetTimerTaskMemory>:
/* USER CODE BEGIN GET_TIMER_TASK_MEMORY */
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
 8000180:	b480      	push	{r7}
 8000182:	b085      	sub	sp, #20
 8000184:	af00      	add	r7, sp, #0
 8000186:	60f8      	str	r0, [r7, #12]
 8000188:	60b9      	str	r1, [r7, #8]
 800018a:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 800018c:	68fb      	ldr	r3, [r7, #12]
 800018e:	4a07      	ldr	r2, [pc, #28]	@ (80001ac <vApplicationGetTimerTaskMemory+0x2c>)
 8000190:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 8000192:	68bb      	ldr	r3, [r7, #8]
 8000194:	4a06      	ldr	r2, [pc, #24]	@ (80001b0 <vApplicationGetTimerTaskMemory+0x30>)
 8000196:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800019e:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	20000288 	.word	0x20000288
 80001b0:	200002dc 	.word	0x200002dc

080001b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b4:	b5b0      	push	{r4, r5, r7, lr}
 80001b6:	b094      	sub	sp, #80	@ 0x50
 80001b8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ba:	f000 fd83 	bl	8000cc4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001be:	f000 f86b 	bl	8000298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c2:	f000 f8dd 	bl	8000380 <MX_GPIO_Init>
  MX_I2C1_Init();
 80001c6:	f000 f8ad 	bl	8000324 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80001ca:	f000 fac5 	bl	8000758 <ssd1306_Init>
  ssd1306_Fill(Black);
 80001ce:	2000      	movs	r0, #0
 80001d0:	f000 fb2c 	bl	800082c <ssd1306_Fill>
  //ssd1306_DrawBitmap(40, 8, logo, 48, 48, White);
  ssd1306_WriteString("Привет", Font_7x11, White);
 80001d4:	4a26      	ldr	r2, [pc, #152]	@ (8000270 <main+0xbc>)
 80001d6:	2301      	movs	r3, #1
 80001d8:	ca06      	ldmia	r2, {r1, r2}
 80001da:	4826      	ldr	r0, [pc, #152]	@ (8000274 <main+0xc0>)
 80001dc:	f000 fc3c 	bl	8000a58 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80001e0:	f000 fb3c 	bl	800085c <ssd1306_UpdateScreen>
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* definition and creation of cancelButton */
  osTimerDef(cancelButton, cancelButtonCallback);
 80001e4:	4b24      	ldr	r3, [pc, #144]	@ (8000278 <main+0xc4>)
 80001e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80001e8:	2300      	movs	r3, #0
 80001ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  cancelButtonHandle = osTimerCreate(osTimer(cancelButton), osTimerOnce, NULL);
 80001ec:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80001f0:	2200      	movs	r2, #0
 80001f2:	2100      	movs	r1, #0
 80001f4:	4618      	mov	r0, r3
 80001f6:	f002 f9b3 	bl	8002560 <osTimerCreate>
 80001fa:	4603      	mov	r3, r0
 80001fc:	4a1f      	ldr	r2, [pc, #124]	@ (800027c <main+0xc8>)
 80001fe:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of buttonPressedQueue */
  osMessageQDef(buttonPressedQueue, 8, uint8_t);
 8000200:	4b1f      	ldr	r3, [pc, #124]	@ (8000280 <main+0xcc>)
 8000202:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 8000206:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000208:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  buttonPressedQueueHandle = osMessageCreate(osMessageQ(buttonPressedQueue), NULL);
 800020c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000210:	2100      	movs	r1, #0
 8000212:	4618      	mov	r0, r3
 8000214:	f002 fa58 	bl	80026c8 <osMessageCreate>
 8000218:	4603      	mov	r3, r0
 800021a:	4a1a      	ldr	r2, [pc, #104]	@ (8000284 <main+0xd0>)
 800021c:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of readKeyTask */
  osThreadDef(readKeyTask, StartReadKeyTask, osPriorityAboveNormal, 0, 128);
 800021e:	4b1a      	ldr	r3, [pc, #104]	@ (8000288 <main+0xd4>)
 8000220:	f107 041c 	add.w	r4, r7, #28
 8000224:	461d      	mov	r5, r3
 8000226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800022a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800022e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  readKeyTaskHandle = osThreadCreate(osThread(readKeyTask), NULL);
 8000232:	f107 031c 	add.w	r3, r7, #28
 8000236:	2100      	movs	r1, #0
 8000238:	4618      	mov	r0, r3
 800023a:	f002 f930 	bl	800249e <osThreadCreate>
 800023e:	4603      	mov	r3, r0
 8000240:	4a12      	ldr	r2, [pc, #72]	@ (800028c <main+0xd8>)
 8000242:	6013      	str	r3, [r2, #0]

  /* definition and creation of guiTask */
  osThreadDef(guiTask, StartGuiTask, osPriorityNormal, 0, 128);
 8000244:	4b12      	ldr	r3, [pc, #72]	@ (8000290 <main+0xdc>)
 8000246:	463c      	mov	r4, r7
 8000248:	461d      	mov	r5, r3
 800024a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800024c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800024e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000252:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  guiTaskHandle = osThreadCreate(osThread(guiTask), NULL);
 8000256:	463b      	mov	r3, r7
 8000258:	2100      	movs	r1, #0
 800025a:	4618      	mov	r0, r3
 800025c:	f002 f91f 	bl	800249e <osThreadCreate>
 8000260:	4603      	mov	r3, r0
 8000262:	4a0c      	ldr	r2, [pc, #48]	@ (8000294 <main+0xe0>)
 8000264:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000266:	f002 f913 	bl	8002490 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800026a:	bf00      	nop
 800026c:	e7fd      	b.n	800026a <main+0xb6>
 800026e:	bf00      	nop
 8000270:	20000000 	.word	0x20000000
 8000274:	08005338 	.word	0x08005338
 8000278:	080006b9 	.word	0x080006b9
 800027c:	2000073c 	.word	0x2000073c
 8000280:	08005348 	.word	0x08005348
 8000284:	20000738 	.word	0x20000738
 8000288:	08005364 	.word	0x08005364
 800028c:	20000730 	.word	0x20000730
 8000290:	08005388 	.word	0x08005388
 8000294:	20000734 	.word	0x20000734

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b090      	sub	sp, #64	@ 0x40
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	f107 0318 	add.w	r3, r7, #24
 80002a2:	2228      	movs	r2, #40	@ 0x28
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f005 f800 	bl	80052ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
 80002b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002ba:	2301      	movs	r3, #1
 80002bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002be:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002c4:	2300      	movs	r3, #0
 80002c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c8:	2301      	movs	r3, #1
 80002ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002cc:	2302      	movs	r3, #2
 80002ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002d6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002dc:	f107 0318 	add.w	r3, r7, #24
 80002e0:	4618      	mov	r0, r3
 80002e2:	f001 fcb1 	bl	8001c48 <HAL_RCC_OscConfig>
 80002e6:	4603      	mov	r3, r0
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d001      	beq.n	80002f0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002ec:	f000 f9f6 	bl	80006dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f0:	230f      	movs	r3, #15
 80002f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002f4:	2302      	movs	r3, #2
 80002f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002f8:	2300      	movs	r3, #0
 80002fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000300:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000302:	2300      	movs	r3, #0
 8000304:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000306:	1d3b      	adds	r3, r7, #4
 8000308:	2102      	movs	r1, #2
 800030a:	4618      	mov	r0, r3
 800030c:	f001 ff1e 	bl	800214c <HAL_RCC_ClockConfig>
 8000310:	4603      	mov	r3, r0
 8000312:	2b00      	cmp	r3, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000316:	f000 f9e1 	bl	80006dc <Error_Handler>
  }
}
 800031a:	bf00      	nop
 800031c:	3740      	adds	r7, #64	@ 0x40
 800031e:	46bd      	mov	sp, r7
 8000320:	bd80      	pop	{r7, pc}
	...

08000324 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000328:	4b12      	ldr	r3, [pc, #72]	@ (8000374 <MX_I2C1_Init+0x50>)
 800032a:	4a13      	ldr	r2, [pc, #76]	@ (8000378 <MX_I2C1_Init+0x54>)
 800032c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800032e:	4b11      	ldr	r3, [pc, #68]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000330:	4a12      	ldr	r2, [pc, #72]	@ (800037c <MX_I2C1_Init+0x58>)
 8000332:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000334:	4b0f      	ldr	r3, [pc, #60]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000336:	2200      	movs	r2, #0
 8000338:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800033a:	4b0e      	ldr	r3, [pc, #56]	@ (8000374 <MX_I2C1_Init+0x50>)
 800033c:	2200      	movs	r2, #0
 800033e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000340:	4b0c      	ldr	r3, [pc, #48]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000342:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000346:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000348:	4b0a      	ldr	r3, [pc, #40]	@ (8000374 <MX_I2C1_Init+0x50>)
 800034a:	2200      	movs	r2, #0
 800034c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800034e:	4b09      	ldr	r3, [pc, #36]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000354:	4b07      	ldr	r3, [pc, #28]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800035a:	4b06      	ldr	r3, [pc, #24]	@ (8000374 <MX_I2C1_Init+0x50>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000360:	4804      	ldr	r0, [pc, #16]	@ (8000374 <MX_I2C1_Init+0x50>)
 8000362:	f000 ffc5 	bl	80012f0 <HAL_I2C_Init>
 8000366:	4603      	mov	r3, r0
 8000368:	2b00      	cmp	r3, #0
 800036a:	d001      	beq.n	8000370 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800036c:	f000 f9b6 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000370:	bf00      	nop
 8000372:	bd80      	pop	{r7, pc}
 8000374:	200006dc 	.word	0x200006dc
 8000378:	40005400 	.word	0x40005400
 800037c:	000186a0 	.word	0x000186a0

08000380 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b088      	sub	sp, #32
 8000384:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	f107 0310 	add.w	r3, r7, #16
 800038a:	2200      	movs	r2, #0
 800038c:	601a      	str	r2, [r3, #0]
 800038e:	605a      	str	r2, [r3, #4]
 8000390:	609a      	str	r2, [r3, #8]
 8000392:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000394:	4b29      	ldr	r3, [pc, #164]	@ (800043c <MX_GPIO_Init+0xbc>)
 8000396:	699b      	ldr	r3, [r3, #24]
 8000398:	4a28      	ldr	r2, [pc, #160]	@ (800043c <MX_GPIO_Init+0xbc>)
 800039a:	f043 0320 	orr.w	r3, r3, #32
 800039e:	6193      	str	r3, [r2, #24]
 80003a0:	4b26      	ldr	r3, [pc, #152]	@ (800043c <MX_GPIO_Init+0xbc>)
 80003a2:	699b      	ldr	r3, [r3, #24]
 80003a4:	f003 0320 	and.w	r3, r3, #32
 80003a8:	60fb      	str	r3, [r7, #12]
 80003aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003ac:	4b23      	ldr	r3, [pc, #140]	@ (800043c <MX_GPIO_Init+0xbc>)
 80003ae:	699b      	ldr	r3, [r3, #24]
 80003b0:	4a22      	ldr	r2, [pc, #136]	@ (800043c <MX_GPIO_Init+0xbc>)
 80003b2:	f043 0304 	orr.w	r3, r3, #4
 80003b6:	6193      	str	r3, [r2, #24]
 80003b8:	4b20      	ldr	r3, [pc, #128]	@ (800043c <MX_GPIO_Init+0xbc>)
 80003ba:	699b      	ldr	r3, [r3, #24]
 80003bc:	f003 0304 	and.w	r3, r3, #4
 80003c0:	60bb      	str	r3, [r7, #8]
 80003c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003c4:	4b1d      	ldr	r3, [pc, #116]	@ (800043c <MX_GPIO_Init+0xbc>)
 80003c6:	699b      	ldr	r3, [r3, #24]
 80003c8:	4a1c      	ldr	r2, [pc, #112]	@ (800043c <MX_GPIO_Init+0xbc>)
 80003ca:	f043 0308 	orr.w	r3, r3, #8
 80003ce:	6193      	str	r3, [r2, #24]
 80003d0:	4b1a      	ldr	r3, [pc, #104]	@ (800043c <MX_GPIO_Init+0xbc>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	f003 0308 	and.w	r3, r3, #8
 80003d8:	607b      	str	r3, [r7, #4]
 80003da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 80003dc:	2200      	movs	r2, #0
 80003de:	2110      	movs	r1, #16
 80003e0:	4817      	ldr	r0, [pc, #92]	@ (8000440 <MX_GPIO_Init+0xc0>)
 80003e2:	f000 ff6c 	bl	80012be <HAL_GPIO_WritePin>

  /*Configure GPIO pin : buzzer_Pin */
  GPIO_InitStruct.Pin = buzzer_Pin;
 80003e6:	2310      	movs	r3, #16
 80003e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ea:	2301      	movs	r3, #1
 80003ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003ee:	2300      	movs	r3, #0
 80003f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f2:	2302      	movs	r3, #2
 80003f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 80003f6:	f107 0310 	add.w	r3, r7, #16
 80003fa:	4619      	mov	r1, r3
 80003fc:	4810      	ldr	r0, [pc, #64]	@ (8000440 <MX_GPIO_Init+0xc0>)
 80003fe:	f000 fdcb 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_bottom_Pin */
  GPIO_InitStruct.Pin = btn_bottom_Pin;
 8000402:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000408:	2300      	movs	r3, #0
 800040a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800040c:	2301      	movs	r3, #1
 800040e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(btn_bottom_GPIO_Port, &GPIO_InitStruct);
 8000410:	f107 0310 	add.w	r3, r7, #16
 8000414:	4619      	mov	r1, r3
 8000416:	480a      	ldr	r0, [pc, #40]	@ (8000440 <MX_GPIO_Init+0xc0>)
 8000418:	f000 fdbe 	bl	8000f98 <HAL_GPIO_Init>

  /*Configure GPIO pins : btn_left_Pin btn_ok_Pin btn_right_Pin btn_top_Pin */
  GPIO_InitStruct.Pin = btn_left_Pin|btn_ok_Pin|btn_right_Pin|btn_top_Pin;
 800041c:	23f0      	movs	r3, #240	@ 0xf0
 800041e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000420:	2300      	movs	r3, #0
 8000422:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000424:	2301      	movs	r3, #1
 8000426:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000428:	f107 0310 	add.w	r3, r7, #16
 800042c:	4619      	mov	r1, r3
 800042e:	4805      	ldr	r0, [pc, #20]	@ (8000444 <MX_GPIO_Init+0xc4>)
 8000430:	f000 fdb2 	bl	8000f98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000434:	bf00      	nop
 8000436:	3720      	adds	r7, #32
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	40021000 	.word	0x40021000
 8000440:	40010800 	.word	0x40010800
 8000444:	40010c00 	.word	0x40010c00

08000448 <StartReadKeyTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartReadKeyTask */
void StartReadKeyTask(void const * argument)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b082      	sub	sp, #8
 800044c:	af00      	add	r7, sp, #0
 800044e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

	if (HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0) {
 8000450:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000454:	484c      	ldr	r0, [pc, #304]	@ (8000588 <StartReadKeyTask+0x140>)
 8000456:	f000 ff1b 	bl	8001290 <HAL_GPIO_ReadPin>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d113      	bne.n	8000488 <StartReadKeyTask+0x40>
		osMessagePut(buttonPressedQueueHandle, 0, 100);
 8000460:	4b4a      	ldr	r3, [pc, #296]	@ (800058c <StartReadKeyTask+0x144>)
 8000462:	681b      	ldr	r3, [r3, #0]
 8000464:	2264      	movs	r2, #100	@ 0x64
 8000466:	2100      	movs	r1, #0
 8000468:	4618      	mov	r0, r3
 800046a:	f002 f955 	bl	8002718 <osMessagePut>
		while(HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0)
 800046e:	e002      	b.n	8000476 <StartReadKeyTask+0x2e>
		{
			osDelay(1);
 8000470:	2001      	movs	r0, #1
 8000472:	f002 f860 	bl	8002536 <osDelay>
		while(HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0)
 8000476:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800047a:	4843      	ldr	r0, [pc, #268]	@ (8000588 <StartReadKeyTask+0x140>)
 800047c:	f000 ff08 	bl	8001290 <HAL_GPIO_ReadPin>
 8000480:	4603      	mov	r3, r0
 8000482:	2b00      	cmp	r3, #0
 8000484:	d0f4      	beq.n	8000470 <StartReadKeyTask+0x28>
 8000486:	e07a      	b.n	800057e <StartReadKeyTask+0x136>
		}
	}
	else if (HAL_GPIO_ReadPin(btn_top_GPIO_Port, btn_top_Pin) == 0) {
 8000488:	2180      	movs	r1, #128	@ 0x80
 800048a:	4841      	ldr	r0, [pc, #260]	@ (8000590 <StartReadKeyTask+0x148>)
 800048c:	f000 ff00 	bl	8001290 <HAL_GPIO_ReadPin>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d112      	bne.n	80004bc <StartReadKeyTask+0x74>
		osMessagePut(buttonPressedQueueHandle, 1, 100);
 8000496:	4b3d      	ldr	r3, [pc, #244]	@ (800058c <StartReadKeyTask+0x144>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2264      	movs	r2, #100	@ 0x64
 800049c:	2101      	movs	r1, #1
 800049e:	4618      	mov	r0, r3
 80004a0:	f002 f93a 	bl	8002718 <osMessagePut>
		while(HAL_GPIO_ReadPin(btn_top_GPIO_Port, btn_top_Pin) == 0)
 80004a4:	e002      	b.n	80004ac <StartReadKeyTask+0x64>
		{
			osDelay(1);
 80004a6:	2001      	movs	r0, #1
 80004a8:	f002 f845 	bl	8002536 <osDelay>
		while(HAL_GPIO_ReadPin(btn_top_GPIO_Port, btn_top_Pin) == 0)
 80004ac:	2180      	movs	r1, #128	@ 0x80
 80004ae:	4838      	ldr	r0, [pc, #224]	@ (8000590 <StartReadKeyTask+0x148>)
 80004b0:	f000 feee 	bl	8001290 <HAL_GPIO_ReadPin>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d0f5      	beq.n	80004a6 <StartReadKeyTask+0x5e>
 80004ba:	e060      	b.n	800057e <StartReadKeyTask+0x136>
		}
	}
	else if (HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin) == 0) {
 80004bc:	2110      	movs	r1, #16
 80004be:	4834      	ldr	r0, [pc, #208]	@ (8000590 <StartReadKeyTask+0x148>)
 80004c0:	f000 fee6 	bl	8001290 <HAL_GPIO_ReadPin>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d112      	bne.n	80004f0 <StartReadKeyTask+0xa8>
		osMessagePut(buttonPressedQueueHandle, 2, 100);
 80004ca:	4b30      	ldr	r3, [pc, #192]	@ (800058c <StartReadKeyTask+0x144>)
 80004cc:	681b      	ldr	r3, [r3, #0]
 80004ce:	2264      	movs	r2, #100	@ 0x64
 80004d0:	2102      	movs	r1, #2
 80004d2:	4618      	mov	r0, r3
 80004d4:	f002 f920 	bl	8002718 <osMessagePut>
		while(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin) == 0)
 80004d8:	e002      	b.n	80004e0 <StartReadKeyTask+0x98>
		{
			osDelay(1);
 80004da:	2001      	movs	r0, #1
 80004dc:	f002 f82b 	bl	8002536 <osDelay>
		while(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin) == 0)
 80004e0:	2110      	movs	r1, #16
 80004e2:	482b      	ldr	r0, [pc, #172]	@ (8000590 <StartReadKeyTask+0x148>)
 80004e4:	f000 fed4 	bl	8001290 <HAL_GPIO_ReadPin>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d0f5      	beq.n	80004da <StartReadKeyTask+0x92>
 80004ee:	e046      	b.n	800057e <StartReadKeyTask+0x136>
		}
	}
	else if (HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin) == 0) {
 80004f0:	2140      	movs	r1, #64	@ 0x40
 80004f2:	4827      	ldr	r0, [pc, #156]	@ (8000590 <StartReadKeyTask+0x148>)
 80004f4:	f000 fecc 	bl	8001290 <HAL_GPIO_ReadPin>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d112      	bne.n	8000524 <StartReadKeyTask+0xdc>
		osMessagePut(buttonPressedQueueHandle, 3, 100);
 80004fe:	4b23      	ldr	r3, [pc, #140]	@ (800058c <StartReadKeyTask+0x144>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	2264      	movs	r2, #100	@ 0x64
 8000504:	2103      	movs	r1, #3
 8000506:	4618      	mov	r0, r3
 8000508:	f002 f906 	bl	8002718 <osMessagePut>
		while(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin) == 0)
 800050c:	e002      	b.n	8000514 <StartReadKeyTask+0xcc>
		{
			osDelay(1);
 800050e:	2001      	movs	r0, #1
 8000510:	f002 f811 	bl	8002536 <osDelay>
		while(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin) == 0)
 8000514:	2140      	movs	r1, #64	@ 0x40
 8000516:	481e      	ldr	r0, [pc, #120]	@ (8000590 <StartReadKeyTask+0x148>)
 8000518:	f000 feba 	bl	8001290 <HAL_GPIO_ReadPin>
 800051c:	4603      	mov	r3, r0
 800051e:	2b00      	cmp	r3, #0
 8000520:	d0f5      	beq.n	800050e <StartReadKeyTask+0xc6>
 8000522:	e02c      	b.n	800057e <StartReadKeyTask+0x136>
		}
	}
	else if (HAL_GPIO_ReadPin(btn_ok_GPIO_Port, btn_ok_Pin) == 0) {
 8000524:	2120      	movs	r1, #32
 8000526:	481a      	ldr	r0, [pc, #104]	@ (8000590 <StartReadKeyTask+0x148>)
 8000528:	f000 feb2 	bl	8001290 <HAL_GPIO_ReadPin>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d125      	bne.n	800057e <StartReadKeyTask+0x136>
		osTimerStart(cancelButtonHandle, 1000);
 8000532:	4b18      	ldr	r3, [pc, #96]	@ (8000594 <StartReadKeyTask+0x14c>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800053a:	4618      	mov	r0, r3
 800053c:	f002 f844 	bl	80025c8 <osTimerStart>
		while(HAL_GPIO_ReadPin(btn_ok_GPIO_Port, btn_ok_Pin) == 0)
 8000540:	e002      	b.n	8000548 <StartReadKeyTask+0x100>
		{
			osDelay(1);
 8000542:	2001      	movs	r0, #1
 8000544:	f001 fff7 	bl	8002536 <osDelay>
		while(HAL_GPIO_ReadPin(btn_ok_GPIO_Port, btn_ok_Pin) == 0)
 8000548:	2120      	movs	r1, #32
 800054a:	4811      	ldr	r0, [pc, #68]	@ (8000590 <StartReadKeyTask+0x148>)
 800054c:	f000 fea0 	bl	8001290 <HAL_GPIO_ReadPin>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d0f5      	beq.n	8000542 <StartReadKeyTask+0xfa>
		}
		if (xTimerIsTimerActive(cancelButtonHandle) != pdFALSE) {
 8000556:	4b0f      	ldr	r3, [pc, #60]	@ (8000594 <StartReadKeyTask+0x14c>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	4618      	mov	r0, r3
 800055c:	f004 faac 	bl	8004ab8 <xTimerIsTimerActive>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d006      	beq.n	8000574 <StartReadKeyTask+0x12c>
			osMessagePut(buttonPressedQueueHandle, 4, 100); //short press
 8000566:	4b09      	ldr	r3, [pc, #36]	@ (800058c <StartReadKeyTask+0x144>)
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	2264      	movs	r2, #100	@ 0x64
 800056c:	2104      	movs	r1, #4
 800056e:	4618      	mov	r0, r3
 8000570:	f002 f8d2 	bl	8002718 <osMessagePut>
		}
		osTimerStop(cancelButtonHandle);
 8000574:	4b07      	ldr	r3, [pc, #28]	@ (8000594 <StartReadKeyTask+0x14c>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4618      	mov	r0, r3
 800057a:	f002 f869 	bl	8002650 <osTimerStop>
	}

    osDelay(50);
 800057e:	2032      	movs	r0, #50	@ 0x32
 8000580:	f001 ffd9 	bl	8002536 <osDelay>
	if (HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0) {
 8000584:	e764      	b.n	8000450 <StartReadKeyTask+0x8>
 8000586:	bf00      	nop
 8000588:	40010800 	.word	0x40010800
 800058c:	20000738 	.word	0x20000738
 8000590:	40010c00 	.word	0x40010c00
 8000594:	2000073c 	.word	0x2000073c

08000598 <StartGuiTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGuiTask */
void StartGuiTask(void const * argument)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b086      	sub	sp, #24
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGuiTask */

  osEvent btnEvent;
  uint8_t guiState = 0;
 80005a0:	2300      	movs	r3, #0
 80005a2:	75fb      	strb	r3, [r7, #23]
  /* Infinite loop */
  for(;;)
  {
	switch (guiState) {
 80005a4:	7dfb      	ldrb	r3, [r7, #23]
 80005a6:	2b00      	cmp	r3, #0
			break;

	}


	btnEvent = osMessageGet(buttonPressedQueueHandle, 100);
 80005a8:	4b41      	ldr	r3, [pc, #260]	@ (80006b0 <StartGuiTask+0x118>)
 80005aa:	6819      	ldr	r1, [r3, #0]
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	2264      	movs	r2, #100	@ 0x64
 80005b2:	4618      	mov	r0, r3
 80005b4:	f002 f8f0 	bl	8002798 <osMessageGet>
	if (btnEvent.status == osEventMessage)
 80005b8:	68bb      	ldr	r3, [r7, #8]
 80005ba:	2b10      	cmp	r3, #16
 80005bc:	d174      	bne.n	80006a8 <StartGuiTask+0x110>
	{
		if (btnEvent.value.v == 0) { //bottom
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d10d      	bne.n	80005e0 <StartGuiTask+0x48>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2110      	movs	r1, #16
 80005c8:	483a      	ldr	r0, [pc, #232]	@ (80006b4 <StartGuiTask+0x11c>)
 80005ca:	f000 fe78 	bl	80012be <HAL_GPIO_WritePin>
			osDelay(30);
 80005ce:	201e      	movs	r0, #30
 80005d0:	f001 ffb1 	bl	8002536 <osDelay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2110      	movs	r1, #16
 80005d8:	4836      	ldr	r0, [pc, #216]	@ (80006b4 <StartGuiTask+0x11c>)
 80005da:	f000 fe70 	bl	80012be <HAL_GPIO_WritePin>
 80005de:	e063      	b.n	80006a8 <StartGuiTask+0x110>
		} else if (btnEvent.value.v == 1) { //top
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d10d      	bne.n	8000602 <StartGuiTask+0x6a>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2110      	movs	r1, #16
 80005ea:	4832      	ldr	r0, [pc, #200]	@ (80006b4 <StartGuiTask+0x11c>)
 80005ec:	f000 fe67 	bl	80012be <HAL_GPIO_WritePin>
			osDelay(30);
 80005f0:	201e      	movs	r0, #30
 80005f2:	f001 ffa0 	bl	8002536 <osDelay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2110      	movs	r1, #16
 80005fa:	482e      	ldr	r0, [pc, #184]	@ (80006b4 <StartGuiTask+0x11c>)
 80005fc:	f000 fe5f 	bl	80012be <HAL_GPIO_WritePin>
 8000600:	e052      	b.n	80006a8 <StartGuiTask+0x110>
		} else if (btnEvent.value.v == 2) { //left
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	2b02      	cmp	r3, #2
 8000606:	d10d      	bne.n	8000624 <StartGuiTask+0x8c>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 8000608:	2201      	movs	r2, #1
 800060a:	2110      	movs	r1, #16
 800060c:	4829      	ldr	r0, [pc, #164]	@ (80006b4 <StartGuiTask+0x11c>)
 800060e:	f000 fe56 	bl	80012be <HAL_GPIO_WritePin>
			osDelay(30);
 8000612:	201e      	movs	r0, #30
 8000614:	f001 ff8f 	bl	8002536 <osDelay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 8000618:	2200      	movs	r2, #0
 800061a:	2110      	movs	r1, #16
 800061c:	4825      	ldr	r0, [pc, #148]	@ (80006b4 <StartGuiTask+0x11c>)
 800061e:	f000 fe4e 	bl	80012be <HAL_GPIO_WritePin>
 8000622:	e041      	b.n	80006a8 <StartGuiTask+0x110>
		} else if (btnEvent.value.v == 3) { //right
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	2b03      	cmp	r3, #3
 8000628:	d10d      	bne.n	8000646 <StartGuiTask+0xae>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 800062a:	2201      	movs	r2, #1
 800062c:	2110      	movs	r1, #16
 800062e:	4821      	ldr	r0, [pc, #132]	@ (80006b4 <StartGuiTask+0x11c>)
 8000630:	f000 fe45 	bl	80012be <HAL_GPIO_WritePin>
			osDelay(30);
 8000634:	201e      	movs	r0, #30
 8000636:	f001 ff7e 	bl	8002536 <osDelay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 800063a:	2200      	movs	r2, #0
 800063c:	2110      	movs	r1, #16
 800063e:	481d      	ldr	r0, [pc, #116]	@ (80006b4 <StartGuiTask+0x11c>)
 8000640:	f000 fe3d 	bl	80012be <HAL_GPIO_WritePin>
 8000644:	e030      	b.n	80006a8 <StartGuiTask+0x110>
		} else if (btnEvent.value.v == 4) { //ok
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2b04      	cmp	r3, #4
 800064a:	d11d      	bne.n	8000688 <StartGuiTask+0xf0>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 800064c:	2201      	movs	r2, #1
 800064e:	2110      	movs	r1, #16
 8000650:	4818      	ldr	r0, [pc, #96]	@ (80006b4 <StartGuiTask+0x11c>)
 8000652:	f000 fe34 	bl	80012be <HAL_GPIO_WritePin>
			osDelay(50);
 8000656:	2032      	movs	r0, #50	@ 0x32
 8000658:	f001 ff6d 	bl	8002536 <osDelay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 800065c:	2200      	movs	r2, #0
 800065e:	2110      	movs	r1, #16
 8000660:	4814      	ldr	r0, [pc, #80]	@ (80006b4 <StartGuiTask+0x11c>)
 8000662:	f000 fe2c 	bl	80012be <HAL_GPIO_WritePin>
			osDelay(50);
 8000666:	2032      	movs	r0, #50	@ 0x32
 8000668:	f001 ff65 	bl	8002536 <osDelay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 800066c:	2201      	movs	r2, #1
 800066e:	2110      	movs	r1, #16
 8000670:	4810      	ldr	r0, [pc, #64]	@ (80006b4 <StartGuiTask+0x11c>)
 8000672:	f000 fe24 	bl	80012be <HAL_GPIO_WritePin>
			osDelay(30);
 8000676:	201e      	movs	r0, #30
 8000678:	f001 ff5d 	bl	8002536 <osDelay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 800067c:	2200      	movs	r2, #0
 800067e:	2110      	movs	r1, #16
 8000680:	480c      	ldr	r0, [pc, #48]	@ (80006b4 <StartGuiTask+0x11c>)
 8000682:	f000 fe1c 	bl	80012be <HAL_GPIO_WritePin>
 8000686:	e00f      	b.n	80006a8 <StartGuiTask+0x110>
		} else if (btnEvent.value.v == 5) { //cancel
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	2b05      	cmp	r3, #5
 800068c:	d10c      	bne.n	80006a8 <StartGuiTask+0x110>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 800068e:	2201      	movs	r2, #1
 8000690:	2110      	movs	r1, #16
 8000692:	4808      	ldr	r0, [pc, #32]	@ (80006b4 <StartGuiTask+0x11c>)
 8000694:	f000 fe13 	bl	80012be <HAL_GPIO_WritePin>
			osDelay(250);
 8000698:	20fa      	movs	r0, #250	@ 0xfa
 800069a:	f001 ff4c 	bl	8002536 <osDelay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 800069e:	2200      	movs	r2, #0
 80006a0:	2110      	movs	r1, #16
 80006a2:	4804      	ldr	r0, [pc, #16]	@ (80006b4 <StartGuiTask+0x11c>)
 80006a4:	f000 fe0b 	bl	80012be <HAL_GPIO_WritePin>
		}
	}

	//отрисовывать дисплей здесь!!!
	//ssd1306_UpdateScreen();
	osDelay(30);// подсичтано под нужный FPS
 80006a8:	201e      	movs	r0, #30
 80006aa:	f001 ff44 	bl	8002536 <osDelay>
	switch (guiState) {
 80006ae:	e779      	b.n	80005a4 <StartGuiTask+0xc>
 80006b0:	20000738 	.word	0x20000738
 80006b4:	40010800 	.word	0x40010800

080006b8 <cancelButtonCallback>:
  /* USER CODE END StartGuiTask */
}

/* cancelButtonCallback function */
void cancelButtonCallback(void const * argument)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN cancelButtonCallback */
	osMessagePut(buttonPressedQueueHandle, 5, 100);
 80006c0:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <cancelButtonCallback+0x20>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	2264      	movs	r2, #100	@ 0x64
 80006c6:	2105      	movs	r1, #5
 80006c8:	4618      	mov	r0, r3
 80006ca:	f002 f825 	bl	8002718 <osMessagePut>
  /* USER CODE END cancelButtonCallback */
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000738 	.word	0x20000738

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <Error_Handler+0x8>

080006e8 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80006ec:	bf00      	nop
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr

080006f4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b086      	sub	sp, #24
 80006f8:	af04      	add	r7, sp, #16
 80006fa:	4603      	mov	r3, r0
 80006fc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000702:	9302      	str	r3, [sp, #8]
 8000704:	2301      	movs	r3, #1
 8000706:	9301      	str	r3, [sp, #4]
 8000708:	1dfb      	adds	r3, r7, #7
 800070a:	9300      	str	r3, [sp, #0]
 800070c:	2301      	movs	r3, #1
 800070e:	2200      	movs	r2, #0
 8000710:	2178      	movs	r1, #120	@ 0x78
 8000712:	4803      	ldr	r0, [pc, #12]	@ (8000720 <ssd1306_WriteCommand+0x2c>)
 8000714:	f000 ff30 	bl	8001578 <HAL_I2C_Mem_Write>
}
 8000718:	bf00      	nop
 800071a:	3708      	adds	r7, #8
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200006dc 	.word	0x200006dc

08000724 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af04      	add	r7, sp, #16
 800072a:	6078      	str	r0, [r7, #4]
 800072c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	b29b      	uxth	r3, r3
 8000732:	f04f 32ff 	mov.w	r2, #4294967295
 8000736:	9202      	str	r2, [sp, #8]
 8000738:	9301      	str	r3, [sp, #4]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	9300      	str	r3, [sp, #0]
 800073e:	2301      	movs	r3, #1
 8000740:	2240      	movs	r2, #64	@ 0x40
 8000742:	2178      	movs	r1, #120	@ 0x78
 8000744:	4803      	ldr	r0, [pc, #12]	@ (8000754 <ssd1306_WriteData+0x30>)
 8000746:	f000 ff17 	bl	8001578 <HAL_I2C_Mem_Write>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	200006dc 	.word	0x200006dc

08000758 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 800075c:	f7ff ffc4 	bl	80006e8 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000760:	2064      	movs	r0, #100	@ 0x64
 8000762:	f000 fb11 	bl	8000d88 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000766:	2000      	movs	r0, #0
 8000768:	f000 f9b0 	bl	8000acc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 800076c:	2020      	movs	r0, #32
 800076e:	f7ff ffc1 	bl	80006f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff ffbe 	bl	80006f4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000778:	20b0      	movs	r0, #176	@ 0xb0
 800077a:	f7ff ffbb 	bl	80006f4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 800077e:	20c8      	movs	r0, #200	@ 0xc8
 8000780:	f7ff ffb8 	bl	80006f4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000784:	2000      	movs	r0, #0
 8000786:	f7ff ffb5 	bl	80006f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800078a:	2010      	movs	r0, #16
 800078c:	f7ff ffb2 	bl	80006f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000790:	2040      	movs	r0, #64	@ 0x40
 8000792:	f7ff ffaf 	bl	80006f4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000796:	20ff      	movs	r0, #255	@ 0xff
 8000798:	f000 f984 	bl	8000aa4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 800079c:	20a1      	movs	r0, #161	@ 0xa1
 800079e:	f7ff ffa9 	bl	80006f4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80007a2:	20a6      	movs	r0, #166	@ 0xa6
 80007a4:	f7ff ffa6 	bl	80006f4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80007a8:	20a8      	movs	r0, #168	@ 0xa8
 80007aa:	f7ff ffa3 	bl	80006f4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80007ae:	203f      	movs	r0, #63	@ 0x3f
 80007b0:	f7ff ffa0 	bl	80006f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80007b4:	20a4      	movs	r0, #164	@ 0xa4
 80007b6:	f7ff ff9d 	bl	80006f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80007ba:	20d3      	movs	r0, #211	@ 0xd3
 80007bc:	f7ff ff9a 	bl	80006f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80007c0:	2000      	movs	r0, #0
 80007c2:	f7ff ff97 	bl	80006f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80007c6:	20d5      	movs	r0, #213	@ 0xd5
 80007c8:	f7ff ff94 	bl	80006f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80007cc:	20f0      	movs	r0, #240	@ 0xf0
 80007ce:	f7ff ff91 	bl	80006f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80007d2:	20d9      	movs	r0, #217	@ 0xd9
 80007d4:	f7ff ff8e 	bl	80006f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80007d8:	2022      	movs	r0, #34	@ 0x22
 80007da:	f7ff ff8b 	bl	80006f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80007de:	20da      	movs	r0, #218	@ 0xda
 80007e0:	f7ff ff88 	bl	80006f4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80007e4:	2012      	movs	r0, #18
 80007e6:	f7ff ff85 	bl	80006f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80007ea:	20db      	movs	r0, #219	@ 0xdb
 80007ec:	f7ff ff82 	bl	80006f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80007f0:	2020      	movs	r0, #32
 80007f2:	f7ff ff7f 	bl	80006f4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80007f6:	208d      	movs	r0, #141	@ 0x8d
 80007f8:	f7ff ff7c 	bl	80006f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80007fc:	2014      	movs	r0, #20
 80007fe:	f7ff ff79 	bl	80006f4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000802:	2001      	movs	r0, #1
 8000804:	f000 f962 	bl	8000acc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000808:	2000      	movs	r0, #0
 800080a:	f000 f80f 	bl	800082c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 800080e:	f000 f825 	bl	800085c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000812:	4b05      	ldr	r3, [pc, #20]	@ (8000828 <ssd1306_Init+0xd0>)
 8000814:	2200      	movs	r2, #0
 8000816:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000818:	4b03      	ldr	r3, [pc, #12]	@ (8000828 <ssd1306_Init+0xd0>)
 800081a:	2200      	movs	r2, #0
 800081c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 800081e:	4b02      	ldr	r3, [pc, #8]	@ (8000828 <ssd1306_Init+0xd0>)
 8000820:	2201      	movs	r2, #1
 8000822:	711a      	strb	r2, [r3, #4]
}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000b40 	.word	0x20000b40

0800082c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	4603      	mov	r3, r0
 8000834:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d101      	bne.n	8000840 <ssd1306_Fill+0x14>
 800083c:	2300      	movs	r3, #0
 800083e:	e000      	b.n	8000842 <ssd1306_Fill+0x16>
 8000840:	23ff      	movs	r3, #255	@ 0xff
 8000842:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000846:	4619      	mov	r1, r3
 8000848:	4803      	ldr	r0, [pc, #12]	@ (8000858 <ssd1306_Fill+0x2c>)
 800084a:	f004 fd2f 	bl	80052ac <memset>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	20000740 	.word	0x20000740

0800085c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000862:	2300      	movs	r3, #0
 8000864:	71fb      	strb	r3, [r7, #7]
 8000866:	e016      	b.n	8000896 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000868:	79fb      	ldrb	r3, [r7, #7]
 800086a:	3b50      	subs	r3, #80	@ 0x50
 800086c:	b2db      	uxtb	r3, r3
 800086e:	4618      	mov	r0, r3
 8000870:	f7ff ff40 	bl	80006f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000874:	2000      	movs	r0, #0
 8000876:	f7ff ff3d 	bl	80006f4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800087a:	2010      	movs	r0, #16
 800087c:	f7ff ff3a 	bl	80006f4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	01db      	lsls	r3, r3, #7
 8000884:	4a08      	ldr	r2, [pc, #32]	@ (80008a8 <ssd1306_UpdateScreen+0x4c>)
 8000886:	4413      	add	r3, r2
 8000888:	2180      	movs	r1, #128	@ 0x80
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff ff4a 	bl	8000724 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000890:	79fb      	ldrb	r3, [r7, #7]
 8000892:	3301      	adds	r3, #1
 8000894:	71fb      	strb	r3, [r7, #7]
 8000896:	79fb      	ldrb	r3, [r7, #7]
 8000898:	2b07      	cmp	r3, #7
 800089a:	d9e5      	bls.n	8000868 <ssd1306_UpdateScreen+0xc>
    }
}
 800089c:	bf00      	nop
 800089e:	bf00      	nop
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	20000740 	.word	0x20000740

080008ac <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80008ac:	b480      	push	{r7}
 80008ae:	b083      	sub	sp, #12
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	4603      	mov	r3, r0
 80008b4:	71fb      	strb	r3, [r7, #7]
 80008b6:	460b      	mov	r3, r1
 80008b8:	71bb      	strb	r3, [r7, #6]
 80008ba:	4613      	mov	r3, r2
 80008bc:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	db3d      	blt.n	8000942 <ssd1306_DrawPixel+0x96>
 80008c6:	79bb      	ldrb	r3, [r7, #6]
 80008c8:	2b3f      	cmp	r3, #63	@ 0x3f
 80008ca:	d83a      	bhi.n	8000942 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80008cc:	797b      	ldrb	r3, [r7, #5]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d11a      	bne.n	8000908 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80008d2:	79fa      	ldrb	r2, [r7, #7]
 80008d4:	79bb      	ldrb	r3, [r7, #6]
 80008d6:	08db      	lsrs	r3, r3, #3
 80008d8:	b2d8      	uxtb	r0, r3
 80008da:	4603      	mov	r3, r0
 80008dc:	01db      	lsls	r3, r3, #7
 80008de:	4413      	add	r3, r2
 80008e0:	4a1a      	ldr	r2, [pc, #104]	@ (800094c <ssd1306_DrawPixel+0xa0>)
 80008e2:	5cd3      	ldrb	r3, [r2, r3]
 80008e4:	b25a      	sxtb	r2, r3
 80008e6:	79bb      	ldrb	r3, [r7, #6]
 80008e8:	f003 0307 	and.w	r3, r3, #7
 80008ec:	2101      	movs	r1, #1
 80008ee:	fa01 f303 	lsl.w	r3, r1, r3
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	4313      	orrs	r3, r2
 80008f6:	b259      	sxtb	r1, r3
 80008f8:	79fa      	ldrb	r2, [r7, #7]
 80008fa:	4603      	mov	r3, r0
 80008fc:	01db      	lsls	r3, r3, #7
 80008fe:	4413      	add	r3, r2
 8000900:	b2c9      	uxtb	r1, r1
 8000902:	4a12      	ldr	r2, [pc, #72]	@ (800094c <ssd1306_DrawPixel+0xa0>)
 8000904:	54d1      	strb	r1, [r2, r3]
 8000906:	e01d      	b.n	8000944 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000908:	79fa      	ldrb	r2, [r7, #7]
 800090a:	79bb      	ldrb	r3, [r7, #6]
 800090c:	08db      	lsrs	r3, r3, #3
 800090e:	b2d8      	uxtb	r0, r3
 8000910:	4603      	mov	r3, r0
 8000912:	01db      	lsls	r3, r3, #7
 8000914:	4413      	add	r3, r2
 8000916:	4a0d      	ldr	r2, [pc, #52]	@ (800094c <ssd1306_DrawPixel+0xa0>)
 8000918:	5cd3      	ldrb	r3, [r2, r3]
 800091a:	b25a      	sxtb	r2, r3
 800091c:	79bb      	ldrb	r3, [r7, #6]
 800091e:	f003 0307 	and.w	r3, r3, #7
 8000922:	2101      	movs	r1, #1
 8000924:	fa01 f303 	lsl.w	r3, r1, r3
 8000928:	b25b      	sxtb	r3, r3
 800092a:	43db      	mvns	r3, r3
 800092c:	b25b      	sxtb	r3, r3
 800092e:	4013      	ands	r3, r2
 8000930:	b259      	sxtb	r1, r3
 8000932:	79fa      	ldrb	r2, [r7, #7]
 8000934:	4603      	mov	r3, r0
 8000936:	01db      	lsls	r3, r3, #7
 8000938:	4413      	add	r3, r2
 800093a:	b2c9      	uxtb	r1, r1
 800093c:	4a03      	ldr	r2, [pc, #12]	@ (800094c <ssd1306_DrawPixel+0xa0>)
 800093e:	54d1      	strb	r1, [r2, r3]
 8000940:	e000      	b.n	8000944 <ssd1306_DrawPixel+0x98>
        return;
 8000942:	bf00      	nop
    }
}
 8000944:	370c      	adds	r7, #12
 8000946:	46bd      	mov	sp, r7
 8000948:	bc80      	pop	{r7}
 800094a:	4770      	bx	lr
 800094c:	20000740 	.word	0x20000740

08000950 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b089      	sub	sp, #36	@ 0x24
 8000954:	af00      	add	r7, sp, #0
 8000956:	4604      	mov	r4, r0
 8000958:	1d38      	adds	r0, r7, #4
 800095a:	e880 0006 	stmia.w	r0, {r1, r2}
 800095e:	461a      	mov	r2, r3
 8000960:	4623      	mov	r3, r4
 8000962:	73fb      	strb	r3, [r7, #15]
 8000964:	4613      	mov	r3, r2
 8000966:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 255)
 8000968:	7bfb      	ldrb	r3, [r7, #15]
 800096a:	2b1f      	cmp	r3, #31
 800096c:	d801      	bhi.n	8000972 <ssd1306_WriteChar+0x22>
        return 0;
 800096e:	2300      	movs	r3, #0
 8000970:	e06c      	b.n	8000a4c <ssd1306_WriteChar+0xfc>

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000972:	4b38      	ldr	r3, [pc, #224]	@ (8000a54 <ssd1306_WriteChar+0x104>)
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	461a      	mov	r2, r3
 8000978:	793b      	ldrb	r3, [r7, #4]
 800097a:	4413      	add	r3, r2
 800097c:	2b80      	cmp	r3, #128	@ 0x80
 800097e:	dc06      	bgt.n	800098e <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000980:	4b34      	ldr	r3, [pc, #208]	@ (8000a54 <ssd1306_WriteChar+0x104>)
 8000982:	885b      	ldrh	r3, [r3, #2]
 8000984:	461a      	mov	r2, r3
 8000986:	797b      	ldrb	r3, [r7, #5]
 8000988:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800098a:	2b40      	cmp	r3, #64	@ 0x40
 800098c:	dd01      	ble.n	8000992 <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 800098e:	2300      	movs	r3, #0
 8000990:	e05c      	b.n	8000a4c <ssd1306_WriteChar+0xfc>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000992:	2300      	movs	r3, #0
 8000994:	61fb      	str	r3, [r7, #28]
 8000996:	e04c      	b.n	8000a32 <ssd1306_WriteChar+0xe2>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000998:	68ba      	ldr	r2, [r7, #8]
 800099a:	7bfb      	ldrb	r3, [r7, #15]
 800099c:	3b20      	subs	r3, #32
 800099e:	7979      	ldrb	r1, [r7, #5]
 80009a0:	fb01 f303 	mul.w	r3, r1, r3
 80009a4:	4619      	mov	r1, r3
 80009a6:	69fb      	ldr	r3, [r7, #28]
 80009a8:	440b      	add	r3, r1
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	4413      	add	r3, r2
 80009ae:	881b      	ldrh	r3, [r3, #0]
 80009b0:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
 80009b6:	e034      	b.n	8000a22 <ssd1306_WriteChar+0xd2>
            if((b << j) & 0x8000)  {
 80009b8:	697a      	ldr	r2, [r7, #20]
 80009ba:	69bb      	ldr	r3, [r7, #24]
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d012      	beq.n	80009ee <ssd1306_WriteChar+0x9e>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80009c8:	4b22      	ldr	r3, [pc, #136]	@ (8000a54 <ssd1306_WriteChar+0x104>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	69bb      	ldr	r3, [r7, #24]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	4413      	add	r3, r2
 80009d4:	b2d8      	uxtb	r0, r3
 80009d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000a54 <ssd1306_WriteChar+0x104>)
 80009d8:	885b      	ldrh	r3, [r3, #2]
 80009da:	b2da      	uxtb	r2, r3
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	b2db      	uxtb	r3, r3
 80009e0:	4413      	add	r3, r2
 80009e2:	b2db      	uxtb	r3, r3
 80009e4:	7bba      	ldrb	r2, [r7, #14]
 80009e6:	4619      	mov	r1, r3
 80009e8:	f7ff ff60 	bl	80008ac <ssd1306_DrawPixel>
 80009ec:	e016      	b.n	8000a1c <ssd1306_WriteChar+0xcc>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80009ee:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <ssd1306_WriteChar+0x104>)
 80009f0:	881b      	ldrh	r3, [r3, #0]
 80009f2:	b2da      	uxtb	r2, r3
 80009f4:	69bb      	ldr	r3, [r7, #24]
 80009f6:	b2db      	uxtb	r3, r3
 80009f8:	4413      	add	r3, r2
 80009fa:	b2d8      	uxtb	r0, r3
 80009fc:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <ssd1306_WriteChar+0x104>)
 80009fe:	885b      	ldrh	r3, [r3, #2]
 8000a00:	b2da      	uxtb	r2, r3
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	b2db      	uxtb	r3, r3
 8000a06:	4413      	add	r3, r2
 8000a08:	b2d9      	uxtb	r1, r3
 8000a0a:	7bbb      	ldrb	r3, [r7, #14]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	bf0c      	ite	eq
 8000a10:	2301      	moveq	r3, #1
 8000a12:	2300      	movne	r3, #0
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	461a      	mov	r2, r3
 8000a18:	f7ff ff48 	bl	80008ac <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	61bb      	str	r3, [r7, #24]
 8000a22:	793b      	ldrb	r3, [r7, #4]
 8000a24:	461a      	mov	r2, r3
 8000a26:	69bb      	ldr	r3, [r7, #24]
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d3c5      	bcc.n	80009b8 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.FontHeight; i++) {
 8000a2c:	69fb      	ldr	r3, [r7, #28]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	61fb      	str	r3, [r7, #28]
 8000a32:	797b      	ldrb	r3, [r7, #5]
 8000a34:	461a      	mov	r2, r3
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	4293      	cmp	r3, r2
 8000a3a:	d3ad      	bcc.n	8000998 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000a3c:	4b05      	ldr	r3, [pc, #20]	@ (8000a54 <ssd1306_WriteChar+0x104>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	793a      	ldrb	r2, [r7, #4]
 8000a42:	4413      	add	r3, r2
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	4b03      	ldr	r3, [pc, #12]	@ (8000a54 <ssd1306_WriteChar+0x104>)
 8000a48:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3724      	adds	r7, #36	@ 0x24
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	20000b40 	.word	0x20000b40

08000a58 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	60f8      	str	r0, [r7, #12]
 8000a60:	1d38      	adds	r0, r7, #4
 8000a62:	e880 0006 	stmia.w	r0, {r1, r2}
 8000a66:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000a68:	e012      	b.n	8000a90 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	7818      	ldrb	r0, [r3, #0]
 8000a6e:	78fb      	ldrb	r3, [r7, #3]
 8000a70:	1d3a      	adds	r2, r7, #4
 8000a72:	ca06      	ldmia	r2, {r1, r2}
 8000a74:	f7ff ff6c 	bl	8000950 <ssd1306_WriteChar>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	429a      	cmp	r2, r3
 8000a82:	d002      	beq.n	8000a8a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	e008      	b.n	8000a9c <ssd1306_WriteString+0x44>
        }
        str++;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d1e8      	bne.n	8000a6a <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	781b      	ldrb	r3, [r3, #0]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3710      	adds	r7, #16
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000aae:	2381      	movs	r3, #129	@ 0x81
 8000ab0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f7ff fe1d 	bl	80006f4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000aba:	79fb      	ldrb	r3, [r7, #7]
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fe19 	bl	80006f4 <ssd1306_WriteCommand>
}
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d005      	beq.n	8000ae8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000adc:	23af      	movs	r3, #175	@ 0xaf
 8000ade:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000ae0:	4b08      	ldr	r3, [pc, #32]	@ (8000b04 <ssd1306_SetDisplayOn+0x38>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	715a      	strb	r2, [r3, #5]
 8000ae6:	e004      	b.n	8000af2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000ae8:	23ae      	movs	r3, #174	@ 0xae
 8000aea:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000aec:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <ssd1306_SetDisplayOn+0x38>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000af2:	7bfb      	ldrb	r3, [r7, #15]
 8000af4:	4618      	mov	r0, r3
 8000af6:	f7ff fdfd 	bl	80006f4 <ssd1306_WriteCommand>
}
 8000afa:	bf00      	nop
 8000afc:	3710      	adds	r7, #16
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000b40 	.word	0x20000b40

08000b08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b084      	sub	sp, #16
 8000b0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b0e:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <HAL_MspInit+0x68>)
 8000b10:	699b      	ldr	r3, [r3, #24]
 8000b12:	4a17      	ldr	r2, [pc, #92]	@ (8000b70 <HAL_MspInit+0x68>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6193      	str	r3, [r2, #24]
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <HAL_MspInit+0x68>)
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	4b12      	ldr	r3, [pc, #72]	@ (8000b70 <HAL_MspInit+0x68>)
 8000b28:	69db      	ldr	r3, [r3, #28]
 8000b2a:	4a11      	ldr	r2, [pc, #68]	@ (8000b70 <HAL_MspInit+0x68>)
 8000b2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b30:	61d3      	str	r3, [r2, #28]
 8000b32:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <HAL_MspInit+0x68>)
 8000b34:	69db      	ldr	r3, [r3, #28]
 8000b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b3a:	607b      	str	r3, [r7, #4]
 8000b3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	210f      	movs	r1, #15
 8000b42:	f06f 0001 	mvn.w	r0, #1
 8000b46:	f000 f9fe 	bl	8000f46 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b4a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b74 <HAL_MspInit+0x6c>)
 8000b4c:	685b      	ldr	r3, [r3, #4]
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000b5e:	60fb      	str	r3, [r7, #12]
 8000b60:	4a04      	ldr	r2, [pc, #16]	@ (8000b74 <HAL_MspInit+0x6c>)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b66:	bf00      	nop
 8000b68:	3710      	adds	r7, #16
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40021000 	.word	0x40021000
 8000b74:	40010000 	.word	0x40010000

08000b78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b08a      	sub	sp, #40	@ 0x28
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	f107 0314 	add.w	r3, r7, #20
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a1e      	ldr	r2, [pc, #120]	@ (8000c0c <HAL_I2C_MspInit+0x94>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d134      	bne.n	8000c02 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b98:	4b1d      	ldr	r3, [pc, #116]	@ (8000c10 <HAL_I2C_MspInit+0x98>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	4a1c      	ldr	r2, [pc, #112]	@ (8000c10 <HAL_I2C_MspInit+0x98>)
 8000b9e:	f043 0308 	orr.w	r3, r3, #8
 8000ba2:	6193      	str	r3, [r2, #24]
 8000ba4:	4b1a      	ldr	r3, [pc, #104]	@ (8000c10 <HAL_I2C_MspInit+0x98>)
 8000ba6:	699b      	ldr	r3, [r3, #24]
 8000ba8:	f003 0308 	and.w	r3, r3, #8
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bb0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb6:	2312      	movs	r3, #18
 8000bb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4812      	ldr	r0, [pc, #72]	@ (8000c14 <HAL_I2C_MspInit+0x9c>)
 8000bca:	f000 f9e5 	bl	8000f98 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000bce:	4b12      	ldr	r3, [pc, #72]	@ (8000c18 <HAL_I2C_MspInit+0xa0>)
 8000bd0:	685b      	ldr	r3, [r3, #4]
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bd6:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bde:	f043 0302 	orr.w	r3, r3, #2
 8000be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000be4:	4a0c      	ldr	r2, [pc, #48]	@ (8000c18 <HAL_I2C_MspInit+0xa0>)
 8000be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000be8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bea:	4b09      	ldr	r3, [pc, #36]	@ (8000c10 <HAL_I2C_MspInit+0x98>)
 8000bec:	69db      	ldr	r3, [r3, #28]
 8000bee:	4a08      	ldr	r2, [pc, #32]	@ (8000c10 <HAL_I2C_MspInit+0x98>)
 8000bf0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000bf4:	61d3      	str	r3, [r2, #28]
 8000bf6:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <HAL_I2C_MspInit+0x98>)
 8000bf8:	69db      	ldr	r3, [r3, #28]
 8000bfa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c02:	bf00      	nop
 8000c04:	3728      	adds	r7, #40	@ 0x28
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40005400 	.word	0x40005400
 8000c10:	40021000 	.word	0x40021000
 8000c14:	40010c00 	.word	0x40010c00
 8000c18:	40010000 	.word	0x40010000

08000c1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c20:	bf00      	nop
 8000c22:	e7fd      	b.n	8000c20 <NMI_Handler+0x4>

08000c24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <HardFault_Handler+0x4>

08000c2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <MemManage_Handler+0x4>

08000c34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c54:	f000 f87c 	bl	8000d50 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000c58:	f003 fa8a 	bl	8004170 <xTaskGetSchedulerState>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d001      	beq.n	8000c66 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000c62:	f004 f8c1 	bl	8004de8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}

08000c6a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr
	...

08000c78 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c78:	f7ff fff7 	bl	8000c6a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c7c:	480b      	ldr	r0, [pc, #44]	@ (8000cac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c7e:	490c      	ldr	r1, [pc, #48]	@ (8000cb0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c80:	4a0c      	ldr	r2, [pc, #48]	@ (8000cb4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c84:	e002      	b.n	8000c8c <LoopCopyDataInit>

08000c86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c8a:	3304      	adds	r3, #4

08000c8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c90:	d3f9      	bcc.n	8000c86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c92:	4a09      	ldr	r2, [pc, #36]	@ (8000cb8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000c94:	4c09      	ldr	r4, [pc, #36]	@ (8000cbc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c98:	e001      	b.n	8000c9e <LoopFillZerobss>

08000c9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c9c:	3204      	adds	r2, #4

08000c9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ca0:	d3fb      	bcc.n	8000c9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ca2:	f004 fb0b 	bl	80052bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ca6:	f7ff fa85 	bl	80001b4 <main>
  bx lr
 8000caa:	4770      	bx	lr
  ldr r0, =_sdata
 8000cac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8000cb4:	08006734 	.word	0x08006734
  ldr r2, =_sbss
 8000cb8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000cbc:	200019d4 	.word	0x200019d4

08000cc0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc0:	e7fe      	b.n	8000cc0 <ADC1_2_IRQHandler>
	...

08000cc4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cc8:	4b08      	ldr	r3, [pc, #32]	@ (8000cec <HAL_Init+0x28>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a07      	ldr	r2, [pc, #28]	@ (8000cec <HAL_Init+0x28>)
 8000cce:	f043 0310 	orr.w	r3, r3, #16
 8000cd2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cd4:	2003      	movs	r0, #3
 8000cd6:	f000 f92b 	bl	8000f30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cda:	200f      	movs	r0, #15
 8000cdc:	f000 f808 	bl	8000cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce0:	f7ff ff12 	bl	8000b08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40022000 	.word	0x40022000

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf8:	4b12      	ldr	r3, [pc, #72]	@ (8000d44 <HAL_InitTick+0x54>)
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	4b12      	ldr	r3, [pc, #72]	@ (8000d48 <HAL_InitTick+0x58>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	4619      	mov	r1, r3
 8000d02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d06:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f935 	bl	8000f7e <HAL_SYSTICK_Config>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e00e      	b.n	8000d3c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2b0f      	cmp	r3, #15
 8000d22:	d80a      	bhi.n	8000d3a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d24:	2200      	movs	r2, #0
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	f04f 30ff 	mov.w	r0, #4294967295
 8000d2c:	f000 f90b 	bl	8000f46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d30:	4a06      	ldr	r2, [pc, #24]	@ (8000d4c <HAL_InitTick+0x5c>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d36:	2300      	movs	r3, #0
 8000d38:	e000      	b.n	8000d3c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
}
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	20000008 	.word	0x20000008
 8000d48:	20000010 	.word	0x20000010
 8000d4c:	2000000c 	.word	0x2000000c

08000d50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d54:	4b05      	ldr	r3, [pc, #20]	@ (8000d6c <HAL_IncTick+0x1c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	461a      	mov	r2, r3
 8000d5a:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <HAL_IncTick+0x20>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	4a03      	ldr	r2, [pc, #12]	@ (8000d70 <HAL_IncTick+0x20>)
 8000d62:	6013      	str	r3, [r2, #0]
}
 8000d64:	bf00      	nop
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bc80      	pop	{r7}
 8000d6a:	4770      	bx	lr
 8000d6c:	20000010 	.word	0x20000010
 8000d70:	20000b48 	.word	0x20000b48

08000d74 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b02      	ldr	r3, [pc, #8]	@ (8000d84 <HAL_GetTick+0x10>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	20000b48 	.word	0x20000b48

08000d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d90:	f7ff fff0 	bl	8000d74 <HAL_GetTick>
 8000d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da0:	d005      	beq.n	8000dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dcc <HAL_Delay+0x44>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4413      	add	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dae:	bf00      	nop
 8000db0:	f7ff ffe0 	bl	8000d74 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d8f7      	bhi.n	8000db0 <HAL_Delay+0x28>
  {
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	20000010 	.word	0x20000010

08000dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de0:	4b0c      	ldr	r3, [pc, #48]	@ (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000dec:	4013      	ands	r3, r2
 8000dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e02:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	60d3      	str	r3, [r2, #12]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bc80      	pop	{r7}
 8000e10:	4770      	bx	lr
 8000e12:	bf00      	nop
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e1c:	4b04      	ldr	r3, [pc, #16]	@ (8000e30 <__NVIC_GetPriorityGrouping+0x18>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	f003 0307 	and.w	r3, r3, #7
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bc80      	pop	{r7}
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	6039      	str	r1, [r7, #0]
 8000e3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	db0a      	blt.n	8000e5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	b2da      	uxtb	r2, r3
 8000e4c:	490c      	ldr	r1, [pc, #48]	@ (8000e80 <__NVIC_SetPriority+0x4c>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	0112      	lsls	r2, r2, #4
 8000e54:	b2d2      	uxtb	r2, r2
 8000e56:	440b      	add	r3, r1
 8000e58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e5c:	e00a      	b.n	8000e74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	b2da      	uxtb	r2, r3
 8000e62:	4908      	ldr	r1, [pc, #32]	@ (8000e84 <__NVIC_SetPriority+0x50>)
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	f003 030f 	and.w	r3, r3, #15
 8000e6a:	3b04      	subs	r3, #4
 8000e6c:	0112      	lsls	r2, r2, #4
 8000e6e:	b2d2      	uxtb	r2, r2
 8000e70:	440b      	add	r3, r1
 8000e72:	761a      	strb	r2, [r3, #24]
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bc80      	pop	{r7}
 8000e7c:	4770      	bx	lr
 8000e7e:	bf00      	nop
 8000e80:	e000e100 	.word	0xe000e100
 8000e84:	e000ed00 	.word	0xe000ed00

08000e88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b089      	sub	sp, #36	@ 0x24
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e9c:	69fb      	ldr	r3, [r7, #28]
 8000e9e:	f1c3 0307 	rsb	r3, r3, #7
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	bf28      	it	cs
 8000ea6:	2304      	movcs	r3, #4
 8000ea8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	3304      	adds	r3, #4
 8000eae:	2b06      	cmp	r3, #6
 8000eb0:	d902      	bls.n	8000eb8 <NVIC_EncodePriority+0x30>
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3b03      	subs	r3, #3
 8000eb6:	e000      	b.n	8000eba <NVIC_EncodePriority+0x32>
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ebc:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec0:	69bb      	ldr	r3, [r7, #24]
 8000ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec6:	43da      	mvns	r2, r3
 8000ec8:	68bb      	ldr	r3, [r7, #8]
 8000eca:	401a      	ands	r2, r3
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eda:	43d9      	mvns	r1, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee0:	4313      	orrs	r3, r2
         );
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3724      	adds	r7, #36	@ 0x24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000efc:	d301      	bcc.n	8000f02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000efe:	2301      	movs	r3, #1
 8000f00:	e00f      	b.n	8000f22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f02:	4a0a      	ldr	r2, [pc, #40]	@ (8000f2c <SysTick_Config+0x40>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3b01      	subs	r3, #1
 8000f08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f0a:	210f      	movs	r1, #15
 8000f0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f10:	f7ff ff90 	bl	8000e34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f14:	4b05      	ldr	r3, [pc, #20]	@ (8000f2c <SysTick_Config+0x40>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f1a:	4b04      	ldr	r3, [pc, #16]	@ (8000f2c <SysTick_Config+0x40>)
 8000f1c:	2207      	movs	r2, #7
 8000f1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f20:	2300      	movs	r3, #0
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	e000e010 	.word	0xe000e010

08000f30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f38:	6878      	ldr	r0, [r7, #4]
 8000f3a:	f7ff ff49 	bl	8000dd0 <__NVIC_SetPriorityGrouping>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}

08000f46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f46:	b580      	push	{r7, lr}
 8000f48:	b086      	sub	sp, #24
 8000f4a:	af00      	add	r7, sp, #0
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	60b9      	str	r1, [r7, #8]
 8000f50:	607a      	str	r2, [r7, #4]
 8000f52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f58:	f7ff ff5e 	bl	8000e18 <__NVIC_GetPriorityGrouping>
 8000f5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f5e:	687a      	ldr	r2, [r7, #4]
 8000f60:	68b9      	ldr	r1, [r7, #8]
 8000f62:	6978      	ldr	r0, [r7, #20]
 8000f64:	f7ff ff90 	bl	8000e88 <NVIC_EncodePriority>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f6e:	4611      	mov	r1, r2
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff ff5f 	bl	8000e34 <__NVIC_SetPriority>
}
 8000f76:	bf00      	nop
 8000f78:	3718      	adds	r7, #24
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f86:	6878      	ldr	r0, [r7, #4]
 8000f88:	f7ff ffb0 	bl	8000eec <SysTick_Config>
 8000f8c:	4603      	mov	r3, r0
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b08b      	sub	sp, #44	@ 0x2c
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000faa:	e161      	b.n	8001270 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fac:	2201      	movs	r2, #1
 8000fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	69fa      	ldr	r2, [r7, #28]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	429a      	cmp	r2, r3
 8000fc6:	f040 8150 	bne.w	800126a <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	4a97      	ldr	r2, [pc, #604]	@ (800122c <HAL_GPIO_Init+0x294>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d05e      	beq.n	8001092 <HAL_GPIO_Init+0xfa>
 8000fd4:	4a95      	ldr	r2, [pc, #596]	@ (800122c <HAL_GPIO_Init+0x294>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d875      	bhi.n	80010c6 <HAL_GPIO_Init+0x12e>
 8000fda:	4a95      	ldr	r2, [pc, #596]	@ (8001230 <HAL_GPIO_Init+0x298>)
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d058      	beq.n	8001092 <HAL_GPIO_Init+0xfa>
 8000fe0:	4a93      	ldr	r2, [pc, #588]	@ (8001230 <HAL_GPIO_Init+0x298>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d86f      	bhi.n	80010c6 <HAL_GPIO_Init+0x12e>
 8000fe6:	4a93      	ldr	r2, [pc, #588]	@ (8001234 <HAL_GPIO_Init+0x29c>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d052      	beq.n	8001092 <HAL_GPIO_Init+0xfa>
 8000fec:	4a91      	ldr	r2, [pc, #580]	@ (8001234 <HAL_GPIO_Init+0x29c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d869      	bhi.n	80010c6 <HAL_GPIO_Init+0x12e>
 8000ff2:	4a91      	ldr	r2, [pc, #580]	@ (8001238 <HAL_GPIO_Init+0x2a0>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d04c      	beq.n	8001092 <HAL_GPIO_Init+0xfa>
 8000ff8:	4a8f      	ldr	r2, [pc, #572]	@ (8001238 <HAL_GPIO_Init+0x2a0>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d863      	bhi.n	80010c6 <HAL_GPIO_Init+0x12e>
 8000ffe:	4a8f      	ldr	r2, [pc, #572]	@ (800123c <HAL_GPIO_Init+0x2a4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d046      	beq.n	8001092 <HAL_GPIO_Init+0xfa>
 8001004:	4a8d      	ldr	r2, [pc, #564]	@ (800123c <HAL_GPIO_Init+0x2a4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d85d      	bhi.n	80010c6 <HAL_GPIO_Init+0x12e>
 800100a:	2b12      	cmp	r3, #18
 800100c:	d82a      	bhi.n	8001064 <HAL_GPIO_Init+0xcc>
 800100e:	2b12      	cmp	r3, #18
 8001010:	d859      	bhi.n	80010c6 <HAL_GPIO_Init+0x12e>
 8001012:	a201      	add	r2, pc, #4	@ (adr r2, 8001018 <HAL_GPIO_Init+0x80>)
 8001014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001018:	08001093 	.word	0x08001093
 800101c:	0800106d 	.word	0x0800106d
 8001020:	0800107f 	.word	0x0800107f
 8001024:	080010c1 	.word	0x080010c1
 8001028:	080010c7 	.word	0x080010c7
 800102c:	080010c7 	.word	0x080010c7
 8001030:	080010c7 	.word	0x080010c7
 8001034:	080010c7 	.word	0x080010c7
 8001038:	080010c7 	.word	0x080010c7
 800103c:	080010c7 	.word	0x080010c7
 8001040:	080010c7 	.word	0x080010c7
 8001044:	080010c7 	.word	0x080010c7
 8001048:	080010c7 	.word	0x080010c7
 800104c:	080010c7 	.word	0x080010c7
 8001050:	080010c7 	.word	0x080010c7
 8001054:	080010c7 	.word	0x080010c7
 8001058:	080010c7 	.word	0x080010c7
 800105c:	08001075 	.word	0x08001075
 8001060:	08001089 	.word	0x08001089
 8001064:	4a76      	ldr	r2, [pc, #472]	@ (8001240 <HAL_GPIO_Init+0x2a8>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d013      	beq.n	8001092 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800106a:	e02c      	b.n	80010c6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	623b      	str	r3, [r7, #32]
          break;
 8001072:	e029      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	68db      	ldr	r3, [r3, #12]
 8001078:	3304      	adds	r3, #4
 800107a:	623b      	str	r3, [r7, #32]
          break;
 800107c:	e024      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	68db      	ldr	r3, [r3, #12]
 8001082:	3308      	adds	r3, #8
 8001084:	623b      	str	r3, [r7, #32]
          break;
 8001086:	e01f      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	330c      	adds	r3, #12
 800108e:	623b      	str	r3, [r7, #32]
          break;
 8001090:	e01a      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d102      	bne.n	80010a0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800109a:	2304      	movs	r3, #4
 800109c:	623b      	str	r3, [r7, #32]
          break;
 800109e:	e013      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d105      	bne.n	80010b4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010a8:	2308      	movs	r3, #8
 80010aa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69fa      	ldr	r2, [r7, #28]
 80010b0:	611a      	str	r2, [r3, #16]
          break;
 80010b2:	e009      	b.n	80010c8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010b4:	2308      	movs	r3, #8
 80010b6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69fa      	ldr	r2, [r7, #28]
 80010bc:	615a      	str	r2, [r3, #20]
          break;
 80010be:	e003      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010c0:	2300      	movs	r3, #0
 80010c2:	623b      	str	r3, [r7, #32]
          break;
 80010c4:	e000      	b.n	80010c8 <HAL_GPIO_Init+0x130>
          break;
 80010c6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	2bff      	cmp	r3, #255	@ 0xff
 80010cc:	d801      	bhi.n	80010d2 <HAL_GPIO_Init+0x13a>
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	e001      	b.n	80010d6 <HAL_GPIO_Init+0x13e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	3304      	adds	r3, #4
 80010d6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	2bff      	cmp	r3, #255	@ 0xff
 80010dc:	d802      	bhi.n	80010e4 <HAL_GPIO_Init+0x14c>
 80010de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	e002      	b.n	80010ea <HAL_GPIO_Init+0x152>
 80010e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010e6:	3b08      	subs	r3, #8
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	681a      	ldr	r2, [r3, #0]
 80010f0:	210f      	movs	r1, #15
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	fa01 f303 	lsl.w	r3, r1, r3
 80010f8:	43db      	mvns	r3, r3
 80010fa:	401a      	ands	r2, r3
 80010fc:	6a39      	ldr	r1, [r7, #32]
 80010fe:	693b      	ldr	r3, [r7, #16]
 8001100:	fa01 f303 	lsl.w	r3, r1, r3
 8001104:	431a      	orrs	r2, r3
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 80a9 	beq.w	800126a <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001118:	4b4a      	ldr	r3, [pc, #296]	@ (8001244 <HAL_GPIO_Init+0x2ac>)
 800111a:	699b      	ldr	r3, [r3, #24]
 800111c:	4a49      	ldr	r2, [pc, #292]	@ (8001244 <HAL_GPIO_Init+0x2ac>)
 800111e:	f043 0301 	orr.w	r3, r3, #1
 8001122:	6193      	str	r3, [r2, #24]
 8001124:	4b47      	ldr	r3, [pc, #284]	@ (8001244 <HAL_GPIO_Init+0x2ac>)
 8001126:	699b      	ldr	r3, [r3, #24]
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	60bb      	str	r3, [r7, #8]
 800112e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001130:	4a45      	ldr	r2, [pc, #276]	@ (8001248 <HAL_GPIO_Init+0x2b0>)
 8001132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800113c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800113e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001140:	f003 0303 	and.w	r3, r3, #3
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	220f      	movs	r2, #15
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	4013      	ands	r3, r2
 8001152:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a3d      	ldr	r2, [pc, #244]	@ (800124c <HAL_GPIO_Init+0x2b4>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d00d      	beq.n	8001178 <HAL_GPIO_Init+0x1e0>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	4a3c      	ldr	r2, [pc, #240]	@ (8001250 <HAL_GPIO_Init+0x2b8>)
 8001160:	4293      	cmp	r3, r2
 8001162:	d007      	beq.n	8001174 <HAL_GPIO_Init+0x1dc>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a3b      	ldr	r2, [pc, #236]	@ (8001254 <HAL_GPIO_Init+0x2bc>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d101      	bne.n	8001170 <HAL_GPIO_Init+0x1d8>
 800116c:	2302      	movs	r3, #2
 800116e:	e004      	b.n	800117a <HAL_GPIO_Init+0x1e2>
 8001170:	2303      	movs	r3, #3
 8001172:	e002      	b.n	800117a <HAL_GPIO_Init+0x1e2>
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <HAL_GPIO_Init+0x1e2>
 8001178:	2300      	movs	r3, #0
 800117a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800117c:	f002 0203 	and.w	r2, r2, #3
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	4093      	lsls	r3, r2
 8001184:	68fa      	ldr	r2, [r7, #12]
 8001186:	4313      	orrs	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800118a:	492f      	ldr	r1, [pc, #188]	@ (8001248 <HAL_GPIO_Init+0x2b0>)
 800118c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3302      	adds	r3, #2
 8001192:	68fa      	ldr	r2, [r7, #12]
 8001194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	492b      	ldr	r1, [pc, #172]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	608b      	str	r3, [r1, #8]
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011b2:	4b29      	ldr	r3, [pc, #164]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	4927      	ldr	r1, [pc, #156]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 80011bc:	4013      	ands	r3, r2
 80011be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d006      	beq.n	80011da <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011cc:	4b22      	ldr	r3, [pc, #136]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	4921      	ldr	r1, [pc, #132]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	60cb      	str	r3, [r1, #12]
 80011d8:	e006      	b.n	80011e8 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011da:	4b1f      	ldr	r3, [pc, #124]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	43db      	mvns	r3, r3
 80011e2:	491d      	ldr	r1, [pc, #116]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 80011e4:	4013      	ands	r3, r2
 80011e6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d006      	beq.n	8001202 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011f4:	4b18      	ldr	r3, [pc, #96]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4917      	ldr	r1, [pc, #92]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 80011fa:	69bb      	ldr	r3, [r7, #24]
 80011fc:	4313      	orrs	r3, r2
 80011fe:	604b      	str	r3, [r1, #4]
 8001200:	e006      	b.n	8001210 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001202:	4b15      	ldr	r3, [pc, #84]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 8001204:	685a      	ldr	r2, [r3, #4]
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	43db      	mvns	r3, r3
 800120a:	4913      	ldr	r1, [pc, #76]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 800120c:	4013      	ands	r3, r2
 800120e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001218:	2b00      	cmp	r3, #0
 800121a:	d01f      	beq.n	800125c <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800121c:	4b0e      	ldr	r3, [pc, #56]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	490d      	ldr	r1, [pc, #52]	@ (8001258 <HAL_GPIO_Init+0x2c0>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	4313      	orrs	r3, r2
 8001226:	600b      	str	r3, [r1, #0]
 8001228:	e01f      	b.n	800126a <HAL_GPIO_Init+0x2d2>
 800122a:	bf00      	nop
 800122c:	10320000 	.word	0x10320000
 8001230:	10310000 	.word	0x10310000
 8001234:	10220000 	.word	0x10220000
 8001238:	10210000 	.word	0x10210000
 800123c:	10120000 	.word	0x10120000
 8001240:	10110000 	.word	0x10110000
 8001244:	40021000 	.word	0x40021000
 8001248:	40010000 	.word	0x40010000
 800124c:	40010800 	.word	0x40010800
 8001250:	40010c00 	.word	0x40010c00
 8001254:	40011000 	.word	0x40011000
 8001258:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800125c:	4b0b      	ldr	r3, [pc, #44]	@ (800128c <HAL_GPIO_Init+0x2f4>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	43db      	mvns	r3, r3
 8001264:	4909      	ldr	r1, [pc, #36]	@ (800128c <HAL_GPIO_Init+0x2f4>)
 8001266:	4013      	ands	r3, r2
 8001268:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800126a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800126c:	3301      	adds	r3, #1
 800126e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001276:	fa22 f303 	lsr.w	r3, r2, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	f47f ae96 	bne.w	8000fac <HAL_GPIO_Init+0x14>
  }
}
 8001280:	bf00      	nop
 8001282:	bf00      	nop
 8001284:	372c      	adds	r7, #44	@ 0x2c
 8001286:	46bd      	mov	sp, r7
 8001288:	bc80      	pop	{r7}
 800128a:	4770      	bx	lr
 800128c:	40010400 	.word	0x40010400

08001290 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	460b      	mov	r3, r1
 800129a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	887b      	ldrh	r3, [r7, #2]
 80012a2:	4013      	ands	r3, r2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d002      	beq.n	80012ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012a8:	2301      	movs	r3, #1
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e001      	b.n	80012b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012ae:	2300      	movs	r3, #0
 80012b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr

080012be <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
 80012c6:	460b      	mov	r3, r1
 80012c8:	807b      	strh	r3, [r7, #2]
 80012ca:	4613      	mov	r3, r2
 80012cc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012ce:	787b      	ldrb	r3, [r7, #1]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d4:	887a      	ldrh	r2, [r7, #2]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012da:	e003      	b.n	80012e4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012dc:	887b      	ldrh	r3, [r7, #2]
 80012de:	041a      	lsls	r2, r3, #16
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	611a      	str	r2, [r3, #16]
}
 80012e4:	bf00      	nop
 80012e6:	370c      	adds	r7, #12
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bc80      	pop	{r7}
 80012ec:	4770      	bx	lr
	...

080012f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e12b      	b.n	800155a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001308:	b2db      	uxtb	r3, r3
 800130a:	2b00      	cmp	r3, #0
 800130c:	d106      	bne.n	800131c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f7ff fc2e 	bl	8000b78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2224      	movs	r2, #36	@ 0x24
 8001320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0201 	bic.w	r2, r2, #1
 8001332:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001342:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001352:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001354:	f001 f842 	bl	80023dc <HAL_RCC_GetPCLK1Freq>
 8001358:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4a81      	ldr	r2, [pc, #516]	@ (8001564 <HAL_I2C_Init+0x274>)
 8001360:	4293      	cmp	r3, r2
 8001362:	d807      	bhi.n	8001374 <HAL_I2C_Init+0x84>
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4a80      	ldr	r2, [pc, #512]	@ (8001568 <HAL_I2C_Init+0x278>)
 8001368:	4293      	cmp	r3, r2
 800136a:	bf94      	ite	ls
 800136c:	2301      	movls	r3, #1
 800136e:	2300      	movhi	r3, #0
 8001370:	b2db      	uxtb	r3, r3
 8001372:	e006      	b.n	8001382 <HAL_I2C_Init+0x92>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	4a7d      	ldr	r2, [pc, #500]	@ (800156c <HAL_I2C_Init+0x27c>)
 8001378:	4293      	cmp	r3, r2
 800137a:	bf94      	ite	ls
 800137c:	2301      	movls	r3, #1
 800137e:	2300      	movhi	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e0e7      	b.n	800155a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	4a78      	ldr	r2, [pc, #480]	@ (8001570 <HAL_I2C_Init+0x280>)
 800138e:	fba2 2303 	umull	r2, r3, r2, r3
 8001392:	0c9b      	lsrs	r3, r3, #18
 8001394:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	68ba      	ldr	r2, [r7, #8]
 80013a6:	430a      	orrs	r2, r1
 80013a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	6a1b      	ldr	r3, [r3, #32]
 80013b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	4a6a      	ldr	r2, [pc, #424]	@ (8001564 <HAL_I2C_Init+0x274>)
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d802      	bhi.n	80013c4 <HAL_I2C_Init+0xd4>
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	3301      	adds	r3, #1
 80013c2:	e009      	b.n	80013d8 <HAL_I2C_Init+0xe8>
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80013ca:	fb02 f303 	mul.w	r3, r2, r3
 80013ce:	4a69      	ldr	r2, [pc, #420]	@ (8001574 <HAL_I2C_Init+0x284>)
 80013d0:	fba2 2303 	umull	r2, r3, r2, r3
 80013d4:	099b      	lsrs	r3, r3, #6
 80013d6:	3301      	adds	r3, #1
 80013d8:	687a      	ldr	r2, [r7, #4]
 80013da:	6812      	ldr	r2, [r2, #0]
 80013dc:	430b      	orrs	r3, r1
 80013de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	69db      	ldr	r3, [r3, #28]
 80013e6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80013ea:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	495c      	ldr	r1, [pc, #368]	@ (8001564 <HAL_I2C_Init+0x274>)
 80013f4:	428b      	cmp	r3, r1
 80013f6:	d819      	bhi.n	800142c <HAL_I2C_Init+0x13c>
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	1e59      	subs	r1, r3, #1
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	005b      	lsls	r3, r3, #1
 8001402:	fbb1 f3f3 	udiv	r3, r1, r3
 8001406:	1c59      	adds	r1, r3, #1
 8001408:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800140c:	400b      	ands	r3, r1
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00a      	beq.n	8001428 <HAL_I2C_Init+0x138>
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1e59      	subs	r1, r3, #1
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001420:	3301      	adds	r3, #1
 8001422:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001426:	e051      	b.n	80014cc <HAL_I2C_Init+0x1dc>
 8001428:	2304      	movs	r3, #4
 800142a:	e04f      	b.n	80014cc <HAL_I2C_Init+0x1dc>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	689b      	ldr	r3, [r3, #8]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d111      	bne.n	8001458 <HAL_I2C_Init+0x168>
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	1e58      	subs	r0, r3, #1
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6859      	ldr	r1, [r3, #4]
 800143c:	460b      	mov	r3, r1
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	440b      	add	r3, r1
 8001442:	fbb0 f3f3 	udiv	r3, r0, r3
 8001446:	3301      	adds	r3, #1
 8001448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800144c:	2b00      	cmp	r3, #0
 800144e:	bf0c      	ite	eq
 8001450:	2301      	moveq	r3, #1
 8001452:	2300      	movne	r3, #0
 8001454:	b2db      	uxtb	r3, r3
 8001456:	e012      	b.n	800147e <HAL_I2C_Init+0x18e>
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	1e58      	subs	r0, r3, #1
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6859      	ldr	r1, [r3, #4]
 8001460:	460b      	mov	r3, r1
 8001462:	009b      	lsls	r3, r3, #2
 8001464:	440b      	add	r3, r1
 8001466:	0099      	lsls	r1, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	fbb0 f3f3 	udiv	r3, r0, r3
 800146e:	3301      	adds	r3, #1
 8001470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001474:	2b00      	cmp	r3, #0
 8001476:	bf0c      	ite	eq
 8001478:	2301      	moveq	r3, #1
 800147a:	2300      	movne	r3, #0
 800147c:	b2db      	uxtb	r3, r3
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_I2C_Init+0x196>
 8001482:	2301      	movs	r3, #1
 8001484:	e022      	b.n	80014cc <HAL_I2C_Init+0x1dc>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10e      	bne.n	80014ac <HAL_I2C_Init+0x1bc>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1e58      	subs	r0, r3, #1
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6859      	ldr	r1, [r3, #4]
 8001496:	460b      	mov	r3, r1
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	440b      	add	r3, r1
 800149c:	fbb0 f3f3 	udiv	r3, r0, r3
 80014a0:	3301      	adds	r3, #1
 80014a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014aa:	e00f      	b.n	80014cc <HAL_I2C_Init+0x1dc>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	1e58      	subs	r0, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6859      	ldr	r1, [r3, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	440b      	add	r3, r1
 80014ba:	0099      	lsls	r1, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c2:	3301      	adds	r3, #1
 80014c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80014cc:	6879      	ldr	r1, [r7, #4]
 80014ce:	6809      	ldr	r1, [r1, #0]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	69da      	ldr	r2, [r3, #28]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	431a      	orrs	r2, r3
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	430a      	orrs	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80014fa:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80014fe:	687a      	ldr	r2, [r7, #4]
 8001500:	6911      	ldr	r1, [r2, #16]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68d2      	ldr	r2, [r2, #12]
 8001506:	4311      	orrs	r1, r2
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	6812      	ldr	r2, [r2, #0]
 800150c:	430b      	orrs	r3, r1
 800150e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	695a      	ldr	r2, [r3, #20]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	431a      	orrs	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 0201 	orr.w	r2, r2, #1
 800153a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2220      	movs	r2, #32
 8001546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2200      	movs	r2, #0
 800154e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3710      	adds	r7, #16
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	000186a0 	.word	0x000186a0
 8001568:	001e847f 	.word	0x001e847f
 800156c:	003d08ff 	.word	0x003d08ff
 8001570:	431bde83 	.word	0x431bde83
 8001574:	10624dd3 	.word	0x10624dd3

08001578 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b088      	sub	sp, #32
 800157c:	af02      	add	r7, sp, #8
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	4608      	mov	r0, r1
 8001582:	4611      	mov	r1, r2
 8001584:	461a      	mov	r2, r3
 8001586:	4603      	mov	r3, r0
 8001588:	817b      	strh	r3, [r7, #10]
 800158a:	460b      	mov	r3, r1
 800158c:	813b      	strh	r3, [r7, #8]
 800158e:	4613      	mov	r3, r2
 8001590:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001592:	f7ff fbef 	bl	8000d74 <HAL_GetTick>
 8001596:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	2b20      	cmp	r3, #32
 80015a2:	f040 80d9 	bne.w	8001758 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	9300      	str	r3, [sp, #0]
 80015aa:	2319      	movs	r3, #25
 80015ac:	2201      	movs	r2, #1
 80015ae:	496d      	ldr	r1, [pc, #436]	@ (8001764 <HAL_I2C_Mem_Write+0x1ec>)
 80015b0:	68f8      	ldr	r0, [r7, #12]
 80015b2:	f000 f971 	bl	8001898 <I2C_WaitOnFlagUntilTimeout>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80015bc:	2302      	movs	r3, #2
 80015be:	e0cc      	b.n	800175a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d101      	bne.n	80015ce <HAL_I2C_Mem_Write+0x56>
 80015ca:	2302      	movs	r3, #2
 80015cc:	e0c5      	b.n	800175a <HAL_I2C_Mem_Write+0x1e2>
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	2201      	movs	r2, #1
 80015d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0301 	and.w	r3, r3, #1
 80015e0:	2b01      	cmp	r3, #1
 80015e2:	d007      	beq.n	80015f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f042 0201 	orr.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001602:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	2221      	movs	r2, #33	@ 0x21
 8001608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	2240      	movs	r2, #64	@ 0x40
 8001610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	2200      	movs	r2, #0
 8001618:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6a3a      	ldr	r2, [r7, #32]
 800161e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001624:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800162a:	b29a      	uxth	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	4a4d      	ldr	r2, [pc, #308]	@ (8001768 <HAL_I2C_Mem_Write+0x1f0>)
 8001634:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001636:	88f8      	ldrh	r0, [r7, #6]
 8001638:	893a      	ldrh	r2, [r7, #8]
 800163a:	8979      	ldrh	r1, [r7, #10]
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	4603      	mov	r3, r0
 8001646:	68f8      	ldr	r0, [r7, #12]
 8001648:	f000 f890 	bl	800176c <I2C_RequestMemoryWrite>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d052      	beq.n	80016f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e081      	b.n	800175a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 fa36 	bl	8001acc <I2C_WaitOnTXEFlagUntilTimeout>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00d      	beq.n	8001682 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800166a:	2b04      	cmp	r3, #4
 800166c:	d107      	bne.n	800167e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800167c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e06b      	b.n	800175a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001686:	781a      	ldrb	r2, [r3, #0]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001692:	1c5a      	adds	r2, r3, #1
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800169c:	3b01      	subs	r3, #1
 800169e:	b29a      	uxth	r2, r3
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	3b01      	subs	r3, #1
 80016ac:	b29a      	uxth	r2, r3
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	695b      	ldr	r3, [r3, #20]
 80016b8:	f003 0304 	and.w	r3, r3, #4
 80016bc:	2b04      	cmp	r3, #4
 80016be:	d11b      	bne.n	80016f8 <HAL_I2C_Mem_Write+0x180>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d017      	beq.n	80016f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016cc:	781a      	ldrb	r2, [r3, #0]
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d8:	1c5a      	adds	r2, r3, #1
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016e2:	3b01      	subs	r3, #1
 80016e4:	b29a      	uxth	r2, r3
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3b01      	subs	r3, #1
 80016f2:	b29a      	uxth	r2, r3
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d1aa      	bne.n	8001656 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001700:	697a      	ldr	r2, [r7, #20]
 8001702:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001704:	68f8      	ldr	r0, [r7, #12]
 8001706:	f000 fa29 	bl	8001b5c <I2C_WaitOnBTFFlagUntilTimeout>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d00d      	beq.n	800172c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001714:	2b04      	cmp	r3, #4
 8001716:	d107      	bne.n	8001728 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001726:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e016      	b.n	800175a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800173a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	2220      	movs	r2, #32
 8001740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2200      	movs	r2, #0
 8001748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	2200      	movs	r2, #0
 8001750:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	e000      	b.n	800175a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001758:	2302      	movs	r3, #2
  }
}
 800175a:	4618      	mov	r0, r3
 800175c:	3718      	adds	r7, #24
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	00100002 	.word	0x00100002
 8001768:	ffff0000 	.word	0xffff0000

0800176c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b088      	sub	sp, #32
 8001770:	af02      	add	r7, sp, #8
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	4608      	mov	r0, r1
 8001776:	4611      	mov	r1, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4603      	mov	r3, r0
 800177c:	817b      	strh	r3, [r7, #10]
 800177e:	460b      	mov	r3, r1
 8001780:	813b      	strh	r3, [r7, #8]
 8001782:	4613      	mov	r3, r2
 8001784:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001794:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001798:	9300      	str	r3, [sp, #0]
 800179a:	6a3b      	ldr	r3, [r7, #32]
 800179c:	2200      	movs	r2, #0
 800179e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80017a2:	68f8      	ldr	r0, [r7, #12]
 80017a4:	f000 f878 	bl	8001898 <I2C_WaitOnFlagUntilTimeout>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d00d      	beq.n	80017ca <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80017bc:	d103      	bne.n	80017c6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80017c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e05f      	b.n	800188a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80017ca:	897b      	ldrh	r3, [r7, #10]
 80017cc:	b2db      	uxtb	r3, r3
 80017ce:	461a      	mov	r2, r3
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80017d8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80017da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017dc:	6a3a      	ldr	r2, [r7, #32]
 80017de:	492d      	ldr	r1, [pc, #180]	@ (8001894 <I2C_RequestMemoryWrite+0x128>)
 80017e0:	68f8      	ldr	r0, [r7, #12]
 80017e2:	f000 f8d3 	bl	800198c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e04c      	b.n	800188a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017f0:	2300      	movs	r3, #0
 80017f2:	617b      	str	r3, [r7, #20]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	695b      	ldr	r3, [r3, #20]
 80017fa:	617b      	str	r3, [r7, #20]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	699b      	ldr	r3, [r3, #24]
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001806:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001808:	6a39      	ldr	r1, [r7, #32]
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f000 f95e 	bl	8001acc <I2C_WaitOnTXEFlagUntilTimeout>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00d      	beq.n	8001832 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800181a:	2b04      	cmp	r3, #4
 800181c:	d107      	bne.n	800182e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800182c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e02b      	b.n	800188a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001832:	88fb      	ldrh	r3, [r7, #6]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d105      	bne.n	8001844 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001838:	893b      	ldrh	r3, [r7, #8]
 800183a:	b2da      	uxtb	r2, r3
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	611a      	str	r2, [r3, #16]
 8001842:	e021      	b.n	8001888 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001844:	893b      	ldrh	r3, [r7, #8]
 8001846:	0a1b      	lsrs	r3, r3, #8
 8001848:	b29b      	uxth	r3, r3
 800184a:	b2da      	uxtb	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001854:	6a39      	ldr	r1, [r7, #32]
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 f938 	bl	8001acc <I2C_WaitOnTXEFlagUntilTimeout>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d00d      	beq.n	800187e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	2b04      	cmp	r3, #4
 8001868:	d107      	bne.n	800187a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001878:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e005      	b.n	800188a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800187e:	893b      	ldrh	r3, [r7, #8]
 8001880:	b2da      	uxtb	r2, r3
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	00010002 	.word	0x00010002

08001898 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	60b9      	str	r1, [r7, #8]
 80018a2:	603b      	str	r3, [r7, #0]
 80018a4:	4613      	mov	r3, r2
 80018a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018a8:	e048      	b.n	800193c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018b0:	d044      	beq.n	800193c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80018b2:	f7ff fa5f 	bl	8000d74 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	429a      	cmp	r2, r3
 80018c0:	d302      	bcc.n	80018c8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d139      	bne.n	800193c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	0c1b      	lsrs	r3, r3, #16
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d10d      	bne.n	80018ee <I2C_WaitOnFlagUntilTimeout+0x56>
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	43da      	mvns	r2, r3
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	4013      	ands	r3, r2
 80018de:	b29b      	uxth	r3, r3
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	bf0c      	ite	eq
 80018e4:	2301      	moveq	r3, #1
 80018e6:	2300      	movne	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	e00c      	b.n	8001908 <I2C_WaitOnFlagUntilTimeout+0x70>
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	43da      	mvns	r2, r3
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	4013      	ands	r3, r2
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	bf0c      	ite	eq
 8001900:	2301      	moveq	r3, #1
 8001902:	2300      	movne	r3, #0
 8001904:	b2db      	uxtb	r3, r3
 8001906:	461a      	mov	r2, r3
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	429a      	cmp	r2, r3
 800190c:	d116      	bne.n	800193c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2220      	movs	r2, #32
 8001918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001928:	f043 0220 	orr.w	r2, r3, #32
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2200      	movs	r2, #0
 8001934:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e023      	b.n	8001984 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800193c:	68bb      	ldr	r3, [r7, #8]
 800193e:	0c1b      	lsrs	r3, r3, #16
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b01      	cmp	r3, #1
 8001944:	d10d      	bne.n	8001962 <I2C_WaitOnFlagUntilTimeout+0xca>
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	695b      	ldr	r3, [r3, #20]
 800194c:	43da      	mvns	r2, r3
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	4013      	ands	r3, r2
 8001952:	b29b      	uxth	r3, r3
 8001954:	2b00      	cmp	r3, #0
 8001956:	bf0c      	ite	eq
 8001958:	2301      	moveq	r3, #1
 800195a:	2300      	movne	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	461a      	mov	r2, r3
 8001960:	e00c      	b.n	800197c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	43da      	mvns	r2, r3
 800196a:	68bb      	ldr	r3, [r7, #8]
 800196c:	4013      	ands	r3, r2
 800196e:	b29b      	uxth	r3, r3
 8001970:	2b00      	cmp	r3, #0
 8001972:	bf0c      	ite	eq
 8001974:	2301      	moveq	r3, #1
 8001976:	2300      	movne	r3, #0
 8001978:	b2db      	uxtb	r3, r3
 800197a:	461a      	mov	r2, r3
 800197c:	79fb      	ldrb	r3, [r7, #7]
 800197e:	429a      	cmp	r2, r3
 8001980:	d093      	beq.n	80018aa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3710      	adds	r7, #16
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	60b9      	str	r1, [r7, #8]
 8001996:	607a      	str	r2, [r7, #4]
 8001998:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800199a:	e071      	b.n	8001a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80019aa:	d123      	bne.n	80019f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80019ba:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80019c4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	2200      	movs	r2, #0
 80019ca:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	2220      	movs	r2, #32
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	f043 0204 	orr.w	r2, r3, #4
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e067      	b.n	8001ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019fa:	d041      	beq.n	8001a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019fc:	f7ff f9ba 	bl	8000d74 <HAL_GetTick>
 8001a00:	4602      	mov	r2, r0
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	1ad3      	subs	r3, r2, r3
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	d302      	bcc.n	8001a12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d136      	bne.n	8001a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8001a12:	68bb      	ldr	r3, [r7, #8]
 8001a14:	0c1b      	lsrs	r3, r3, #16
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d10c      	bne.n	8001a36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	43da      	mvns	r2, r3
 8001a24:	68bb      	ldr	r3, [r7, #8]
 8001a26:	4013      	ands	r3, r2
 8001a28:	b29b      	uxth	r3, r3
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	bf14      	ite	ne
 8001a2e:	2301      	movne	r3, #1
 8001a30:	2300      	moveq	r3, #0
 8001a32:	b2db      	uxtb	r3, r3
 8001a34:	e00b      	b.n	8001a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	43da      	mvns	r2, r3
 8001a3e:	68bb      	ldr	r3, [r7, #8]
 8001a40:	4013      	ands	r3, r2
 8001a42:	b29b      	uxth	r3, r3
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	bf14      	ite	ne
 8001a48:	2301      	movne	r3, #1
 8001a4a:	2300      	moveq	r3, #0
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d016      	beq.n	8001a80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2220      	movs	r2, #32
 8001a5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6c:	f043 0220 	orr.w	r2, r3, #32
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e021      	b.n	8001ac4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	0c1b      	lsrs	r3, r3, #16
 8001a84:	b2db      	uxtb	r3, r3
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d10c      	bne.n	8001aa4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	695b      	ldr	r3, [r3, #20]
 8001a90:	43da      	mvns	r2, r3
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	4013      	ands	r3, r2
 8001a96:	b29b      	uxth	r3, r3
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf14      	ite	ne
 8001a9c:	2301      	movne	r3, #1
 8001a9e:	2300      	moveq	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	e00b      	b.n	8001abc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	43da      	mvns	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	4013      	ands	r3, r2
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	bf14      	ite	ne
 8001ab6:	2301      	movne	r3, #1
 8001ab8:	2300      	moveq	r3, #0
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	f47f af6d 	bne.w	800199c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3710      	adds	r7, #16
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}

08001acc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af00      	add	r7, sp, #0
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001ad8:	e034      	b.n	8001b44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001ada:	68f8      	ldr	r0, [r7, #12]
 8001adc:	f000 f886 	bl	8001bec <I2C_IsAcknowledgeFailed>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e034      	b.n	8001b54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af0:	d028      	beq.n	8001b44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001af2:	f7ff f93f 	bl	8000d74 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	68ba      	ldr	r2, [r7, #8]
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d302      	bcc.n	8001b08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001b02:	68bb      	ldr	r3, [r7, #8]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d11d      	bne.n	8001b44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b12:	2b80      	cmp	r3, #128	@ 0x80
 8001b14:	d016      	beq.n	8001b44 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2200      	movs	r2, #0
 8001b1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2220      	movs	r2, #32
 8001b20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b30:	f043 0220 	orr.w	r2, r3, #32
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001b40:	2301      	movs	r3, #1
 8001b42:	e007      	b.n	8001b54 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	695b      	ldr	r3, [r3, #20]
 8001b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b4e:	2b80      	cmp	r3, #128	@ 0x80
 8001b50:	d1c3      	bne.n	8001ada <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001b52:	2300      	movs	r3, #0
}
 8001b54:	4618      	mov	r0, r3
 8001b56:	3710      	adds	r7, #16
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}

08001b5c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	60f8      	str	r0, [r7, #12]
 8001b64:	60b9      	str	r1, [r7, #8]
 8001b66:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001b68:	e034      	b.n	8001bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001b6a:	68f8      	ldr	r0, [r7, #12]
 8001b6c:	f000 f83e 	bl	8001bec <I2C_IsAcknowledgeFailed>
 8001b70:	4603      	mov	r3, r0
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d001      	beq.n	8001b7a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e034      	b.n	8001be4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b80:	d028      	beq.n	8001bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b82:	f7ff f8f7 	bl	8000d74 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	68ba      	ldr	r2, [r7, #8]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d302      	bcc.n	8001b98 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001b92:	68bb      	ldr	r3, [r7, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d11d      	bne.n	8001bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	695b      	ldr	r3, [r3, #20]
 8001b9e:	f003 0304 	and.w	r3, r3, #4
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	d016      	beq.n	8001bd4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2220      	movs	r2, #32
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bc0:	f043 0220 	orr.w	r2, r3, #32
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e007      	b.n	8001be4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	695b      	ldr	r3, [r3, #20]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d1c3      	bne.n	8001b6a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}

08001bec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c02:	d11b      	bne.n	8001c3c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8001c0c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2200      	movs	r2, #0
 8001c12:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2220      	movs	r2, #32
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2200      	movs	r2, #0
 8001c20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c28:	f043 0204 	orr.w	r2, r3, #4
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001c3c:	2300      	movs	r3, #0
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bc80      	pop	{r7}
 8001c46:	4770      	bx	lr

08001c48 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b086      	sub	sp, #24
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e272      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0301 	and.w	r3, r3, #1
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8087 	beq.w	8001d76 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c68:	4b92      	ldr	r3, [pc, #584]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	2b04      	cmp	r3, #4
 8001c72:	d00c      	beq.n	8001c8e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c74:	4b8f      	ldr	r3, [pc, #572]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 030c 	and.w	r3, r3, #12
 8001c7c:	2b08      	cmp	r3, #8
 8001c7e:	d112      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x5e>
 8001c80:	4b8c      	ldr	r3, [pc, #560]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001c8c:	d10b      	bne.n	8001ca6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c8e:	4b89      	ldr	r3, [pc, #548]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d06c      	beq.n	8001d74 <HAL_RCC_OscConfig+0x12c>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d168      	bne.n	8001d74 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e24c      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cae:	d106      	bne.n	8001cbe <HAL_RCC_OscConfig+0x76>
 8001cb0:	4b80      	ldr	r3, [pc, #512]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a7f      	ldr	r2, [pc, #508]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cba:	6013      	str	r3, [r2, #0]
 8001cbc:	e02e      	b.n	8001d1c <HAL_RCC_OscConfig+0xd4>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d10c      	bne.n	8001ce0 <HAL_RCC_OscConfig+0x98>
 8001cc6:	4b7b      	ldr	r3, [pc, #492]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a7a      	ldr	r2, [pc, #488]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b78      	ldr	r3, [pc, #480]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a77      	ldr	r2, [pc, #476]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	e01d      	b.n	8001d1c <HAL_RCC_OscConfig+0xd4>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ce8:	d10c      	bne.n	8001d04 <HAL_RCC_OscConfig+0xbc>
 8001cea:	4b72      	ldr	r3, [pc, #456]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a71      	ldr	r2, [pc, #452]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cf0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001cf4:	6013      	str	r3, [r2, #0]
 8001cf6:	4b6f      	ldr	r3, [pc, #444]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a6e      	ldr	r2, [pc, #440]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001cfc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	e00b      	b.n	8001d1c <HAL_RCC_OscConfig+0xd4>
 8001d04:	4b6b      	ldr	r3, [pc, #428]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a6a      	ldr	r2, [pc, #424]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	4b68      	ldr	r3, [pc, #416]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a67      	ldr	r2, [pc, #412]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d1a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d013      	beq.n	8001d4c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d24:	f7ff f826 	bl	8000d74 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d2c:	f7ff f822 	bl	8000d74 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b64      	cmp	r3, #100	@ 0x64
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e200      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3e:	4b5d      	ldr	r3, [pc, #372]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0xe4>
 8001d4a:	e014      	b.n	8001d76 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d4c:	f7ff f812 	bl	8000d74 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d54:	f7ff f80e 	bl	8000d74 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b64      	cmp	r3, #100	@ 0x64
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e1ec      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d66:	4b53      	ldr	r3, [pc, #332]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1f0      	bne.n	8001d54 <HAL_RCC_OscConfig+0x10c>
 8001d72:	e000      	b.n	8001d76 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d063      	beq.n	8001e4a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d82:	4b4c      	ldr	r3, [pc, #304]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f003 030c 	and.w	r3, r3, #12
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00b      	beq.n	8001da6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d8e:	4b49      	ldr	r3, [pc, #292]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b08      	cmp	r3, #8
 8001d98:	d11c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x18c>
 8001d9a:	4b46      	ldr	r3, [pc, #280]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d116      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da6:	4b43      	ldr	r3, [pc, #268]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d005      	beq.n	8001dbe <HAL_RCC_OscConfig+0x176>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	691b      	ldr	r3, [r3, #16]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d001      	beq.n	8001dbe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e1c0      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4939      	ldr	r1, [pc, #228]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dd2:	e03a      	b.n	8001e4a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d020      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ddc:	4b36      	ldr	r3, [pc, #216]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7fe ffc7 	bl	8000d74 <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dea:	f7fe ffc3 	bl	8000d74 <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e1a1      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfc:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0302 	and.w	r3, r3, #2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e08:	4b2a      	ldr	r3, [pc, #168]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	695b      	ldr	r3, [r3, #20]
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4927      	ldr	r1, [pc, #156]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	600b      	str	r3, [r1, #0]
 8001e1c:	e015      	b.n	8001e4a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1e:	4b26      	ldr	r3, [pc, #152]	@ (8001eb8 <HAL_RCC_OscConfig+0x270>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e24:	f7fe ffa6 	bl	8000d74 <HAL_GetTick>
 8001e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2a:	e008      	b.n	8001e3e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2c:	f7fe ffa2 	bl	8000d74 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	693b      	ldr	r3, [r7, #16]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d901      	bls.n	8001e3e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e180      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0302 	and.w	r3, r3, #2
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d1f0      	bne.n	8001e2c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0308 	and.w	r3, r3, #8
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d03a      	beq.n	8001ecc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d019      	beq.n	8001e92 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e5e:	4b17      	ldr	r3, [pc, #92]	@ (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e64:	f7fe ff86 	bl	8000d74 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e6c:	f7fe ff82 	bl	8000d74 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e160      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001eb4 <HAL_RCC_OscConfig+0x26c>)
 8001e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d0f0      	beq.n	8001e6c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e8a:	2001      	movs	r0, #1
 8001e8c:	f000 faba 	bl	8002404 <RCC_Delay>
 8001e90:	e01c      	b.n	8001ecc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e92:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <HAL_RCC_OscConfig+0x274>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e98:	f7fe ff6c 	bl	8000d74 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9e:	e00f      	b.n	8001ec0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea0:	f7fe ff68 	bl	8000d74 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d908      	bls.n	8001ec0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e146      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
 8001eb2:	bf00      	nop
 8001eb4:	40021000 	.word	0x40021000
 8001eb8:	42420000 	.word	0x42420000
 8001ebc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ec0:	4b92      	ldr	r3, [pc, #584]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d1e9      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	f000 80a6 	beq.w	8002026 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eda:	2300      	movs	r3, #0
 8001edc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ede:	4b8b      	ldr	r3, [pc, #556]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d10d      	bne.n	8001f06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	4b88      	ldr	r3, [pc, #544]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	4a87      	ldr	r2, [pc, #540]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001ef0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ef4:	61d3      	str	r3, [r2, #28]
 8001ef6:	4b85      	ldr	r3, [pc, #532]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001ef8:	69db      	ldr	r3, [r3, #28]
 8001efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001efe:	60bb      	str	r3, [r7, #8]
 8001f00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f02:	2301      	movs	r3, #1
 8001f04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f06:	4b82      	ldr	r3, [pc, #520]	@ (8002110 <HAL_RCC_OscConfig+0x4c8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d118      	bne.n	8001f44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f12:	4b7f      	ldr	r3, [pc, #508]	@ (8002110 <HAL_RCC_OscConfig+0x4c8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a7e      	ldr	r2, [pc, #504]	@ (8002110 <HAL_RCC_OscConfig+0x4c8>)
 8001f18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f1e:	f7fe ff29 	bl	8000d74 <HAL_GetTick>
 8001f22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f26:	f7fe ff25 	bl	8000d74 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b64      	cmp	r3, #100	@ 0x64
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e103      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f38:	4b75      	ldr	r3, [pc, #468]	@ (8002110 <HAL_RCC_OscConfig+0x4c8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f0      	beq.n	8001f26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d106      	bne.n	8001f5a <HAL_RCC_OscConfig+0x312>
 8001f4c:	4b6f      	ldr	r3, [pc, #444]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	4a6e      	ldr	r2, [pc, #440]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001f52:	f043 0301 	orr.w	r3, r3, #1
 8001f56:	6213      	str	r3, [r2, #32]
 8001f58:	e02d      	b.n	8001fb6 <HAL_RCC_OscConfig+0x36e>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	68db      	ldr	r3, [r3, #12]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d10c      	bne.n	8001f7c <HAL_RCC_OscConfig+0x334>
 8001f62:	4b6a      	ldr	r3, [pc, #424]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001f64:	6a1b      	ldr	r3, [r3, #32]
 8001f66:	4a69      	ldr	r2, [pc, #420]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001f68:	f023 0301 	bic.w	r3, r3, #1
 8001f6c:	6213      	str	r3, [r2, #32]
 8001f6e:	4b67      	ldr	r3, [pc, #412]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	4a66      	ldr	r2, [pc, #408]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001f74:	f023 0304 	bic.w	r3, r3, #4
 8001f78:	6213      	str	r3, [r2, #32]
 8001f7a:	e01c      	b.n	8001fb6 <HAL_RCC_OscConfig+0x36e>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	d10c      	bne.n	8001f9e <HAL_RCC_OscConfig+0x356>
 8001f84:	4b61      	ldr	r3, [pc, #388]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4a60      	ldr	r2, [pc, #384]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001f8a:	f043 0304 	orr.w	r3, r3, #4
 8001f8e:	6213      	str	r3, [r2, #32]
 8001f90:	4b5e      	ldr	r3, [pc, #376]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	4a5d      	ldr	r2, [pc, #372]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001f96:	f043 0301 	orr.w	r3, r3, #1
 8001f9a:	6213      	str	r3, [r2, #32]
 8001f9c:	e00b      	b.n	8001fb6 <HAL_RCC_OscConfig+0x36e>
 8001f9e:	4b5b      	ldr	r3, [pc, #364]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	4a5a      	ldr	r2, [pc, #360]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001fa4:	f023 0301 	bic.w	r3, r3, #1
 8001fa8:	6213      	str	r3, [r2, #32]
 8001faa:	4b58      	ldr	r3, [pc, #352]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	4a57      	ldr	r2, [pc, #348]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001fb0:	f023 0304 	bic.w	r3, r3, #4
 8001fb4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d015      	beq.n	8001fea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fbe:	f7fe fed9 	bl	8000d74 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc6:	f7fe fed5 	bl	8000d74 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d901      	bls.n	8001fdc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	e0b1      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fdc:	4b4b      	ldr	r3, [pc, #300]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8001fde:	6a1b      	ldr	r3, [r3, #32]
 8001fe0:	f003 0302 	and.w	r3, r3, #2
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d0ee      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x37e>
 8001fe8:	e014      	b.n	8002014 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fea:	f7fe fec3 	bl	8000d74 <HAL_GetTick>
 8001fee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ff0:	e00a      	b.n	8002008 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff2:	f7fe febf 	bl	8000d74 <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002000:	4293      	cmp	r3, r2
 8002002:	d901      	bls.n	8002008 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002004:	2303      	movs	r3, #3
 8002006:	e09b      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002008:	4b40      	ldr	r3, [pc, #256]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 800200a:	6a1b      	ldr	r3, [r3, #32]
 800200c:	f003 0302 	and.w	r3, r3, #2
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1ee      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002014:	7dfb      	ldrb	r3, [r7, #23]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d105      	bne.n	8002026 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800201a:	4b3c      	ldr	r3, [pc, #240]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 800201c:	69db      	ldr	r3, [r3, #28]
 800201e:	4a3b      	ldr	r2, [pc, #236]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8002020:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002024:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	2b00      	cmp	r3, #0
 800202c:	f000 8087 	beq.w	800213e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002030:	4b36      	ldr	r3, [pc, #216]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	2b08      	cmp	r3, #8
 800203a:	d061      	beq.n	8002100 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d146      	bne.n	80020d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002044:	4b33      	ldr	r3, [pc, #204]	@ (8002114 <HAL_RCC_OscConfig+0x4cc>)
 8002046:	2200      	movs	r2, #0
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7fe fe93 	bl	8000d74 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002052:	f7fe fe8f 	bl	8000d74 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e06d      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002064:	4b29      	ldr	r3, [pc, #164]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800206c:	2b00      	cmp	r3, #0
 800206e:	d1f0      	bne.n	8002052 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002078:	d108      	bne.n	800208c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800207a:	4b24      	ldr	r3, [pc, #144]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	4921      	ldr	r1, [pc, #132]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 8002088:	4313      	orrs	r3, r2
 800208a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800208c:	4b1f      	ldr	r3, [pc, #124]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a19      	ldr	r1, [r3, #32]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800209c:	430b      	orrs	r3, r1
 800209e:	491b      	ldr	r1, [pc, #108]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <HAL_RCC_OscConfig+0x4cc>)
 80020a6:	2201      	movs	r2, #1
 80020a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020aa:	f7fe fe63 	bl	8000d74 <HAL_GetTick>
 80020ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b2:	f7fe fe5f 	bl	8000d74 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e03d      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80020c4:	4b11      	ldr	r3, [pc, #68]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x46a>
 80020d0:	e035      	b.n	800213e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020d2:	4b10      	ldr	r3, [pc, #64]	@ (8002114 <HAL_RCC_OscConfig+0x4cc>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d8:	f7fe fe4c 	bl	8000d74 <HAL_GetTick>
 80020dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020de:	e008      	b.n	80020f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7fe fe48 	bl	8000d74 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e026      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020f2:	4b06      	ldr	r3, [pc, #24]	@ (800210c <HAL_RCC_OscConfig+0x4c4>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1f0      	bne.n	80020e0 <HAL_RCC_OscConfig+0x498>
 80020fe:	e01e      	b.n	800213e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69db      	ldr	r3, [r3, #28]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d107      	bne.n	8002118 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e019      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
 800210c:	40021000 	.word	0x40021000
 8002110:	40007000 	.word	0x40007000
 8002114:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002118:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <HAL_RCC_OscConfig+0x500>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6a1b      	ldr	r3, [r3, #32]
 8002128:	429a      	cmp	r2, r3
 800212a:	d106      	bne.n	800213a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002136:	429a      	cmp	r2, r3
 8002138:	d001      	beq.n	800213e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e000      	b.n	8002140 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3718      	adds	r7, #24
 8002144:	46bd      	mov	sp, r7
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40021000 	.word	0x40021000

0800214c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b084      	sub	sp, #16
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d101      	bne.n	8002160 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e0d0      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002160:	4b6a      	ldr	r3, [pc, #424]	@ (800230c <HAL_RCC_ClockConfig+0x1c0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 0307 	and.w	r3, r3, #7
 8002168:	683a      	ldr	r2, [r7, #0]
 800216a:	429a      	cmp	r2, r3
 800216c:	d910      	bls.n	8002190 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800216e:	4b67      	ldr	r3, [pc, #412]	@ (800230c <HAL_RCC_ClockConfig+0x1c0>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f023 0207 	bic.w	r2, r3, #7
 8002176:	4965      	ldr	r1, [pc, #404]	@ (800230c <HAL_RCC_ClockConfig+0x1c0>)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	4313      	orrs	r3, r2
 800217c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800217e:	4b63      	ldr	r3, [pc, #396]	@ (800230c <HAL_RCC_ClockConfig+0x1c0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0307 	and.w	r3, r3, #7
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	429a      	cmp	r2, r3
 800218a:	d001      	beq.n	8002190 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e0b8      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0302 	and.w	r3, r3, #2
 8002198:	2b00      	cmp	r3, #0
 800219a:	d020      	beq.n	80021de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80021a8:	4b59      	ldr	r3, [pc, #356]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	4a58      	ldr	r2, [pc, #352]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021ae:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80021b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0308 	and.w	r3, r3, #8
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d005      	beq.n	80021cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021c0:	4b53      	ldr	r3, [pc, #332]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	4a52      	ldr	r2, [pc, #328]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021c6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80021ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021cc:	4b50      	ldr	r3, [pc, #320]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	494d      	ldr	r1, [pc, #308]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0301 	and.w	r3, r3, #1
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d040      	beq.n	800226c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b01      	cmp	r3, #1
 80021f0:	d107      	bne.n	8002202 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021f2:	4b47      	ldr	r3, [pc, #284]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d115      	bne.n	800222a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e07f      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d107      	bne.n	800221a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220a:	4b41      	ldr	r3, [pc, #260]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d109      	bne.n	800222a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e073      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800221a:	4b3d      	ldr	r3, [pc, #244]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d101      	bne.n	800222a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e06b      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800222a:	4b39      	ldr	r3, [pc, #228]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f023 0203 	bic.w	r2, r3, #3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	4936      	ldr	r1, [pc, #216]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800223c:	f7fe fd9a 	bl	8000d74 <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002242:	e00a      	b.n	800225a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002244:	f7fe fd96 	bl	8000d74 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002252:	4293      	cmp	r3, r2
 8002254:	d901      	bls.n	800225a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002256:	2303      	movs	r3, #3
 8002258:	e053      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800225a:	4b2d      	ldr	r3, [pc, #180]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	f003 020c 	and.w	r2, r3, #12
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	009b      	lsls	r3, r3, #2
 8002268:	429a      	cmp	r2, r3
 800226a:	d1eb      	bne.n	8002244 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800226c:	4b27      	ldr	r3, [pc, #156]	@ (800230c <HAL_RCC_ClockConfig+0x1c0>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0307 	and.w	r3, r3, #7
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d210      	bcs.n	800229c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227a:	4b24      	ldr	r3, [pc, #144]	@ (800230c <HAL_RCC_ClockConfig+0x1c0>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f023 0207 	bic.w	r2, r3, #7
 8002282:	4922      	ldr	r1, [pc, #136]	@ (800230c <HAL_RCC_ClockConfig+0x1c0>)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	4b20      	ldr	r3, [pc, #128]	@ (800230c <HAL_RCC_ClockConfig+0x1c0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0307 	and.w	r3, r3, #7
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e032      	b.n	8002302 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d008      	beq.n	80022ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80022a8:	4b19      	ldr	r3, [pc, #100]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	4916      	ldr	r1, [pc, #88]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d009      	beq.n	80022da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80022c6:	4b12      	ldr	r3, [pc, #72]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	490e      	ldr	r1, [pc, #56]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022d6:	4313      	orrs	r3, r2
 80022d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022da:	f000 f821 	bl	8002320 <HAL_RCC_GetSysClockFreq>
 80022de:	4602      	mov	r2, r0
 80022e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002310 <HAL_RCC_ClockConfig+0x1c4>)
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f003 030f 	and.w	r3, r3, #15
 80022ea:	490a      	ldr	r1, [pc, #40]	@ (8002314 <HAL_RCC_ClockConfig+0x1c8>)
 80022ec:	5ccb      	ldrb	r3, [r1, r3]
 80022ee:	fa22 f303 	lsr.w	r3, r2, r3
 80022f2:	4a09      	ldr	r2, [pc, #36]	@ (8002318 <HAL_RCC_ClockConfig+0x1cc>)
 80022f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022f6:	4b09      	ldr	r3, [pc, #36]	@ (800231c <HAL_RCC_ClockConfig+0x1d0>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7fe fcf8 	bl	8000cf0 <HAL_InitTick>

  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3710      	adds	r7, #16
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	40022000 	.word	0x40022000
 8002310:	40021000 	.word	0x40021000
 8002314:	08006700 	.word	0x08006700
 8002318:	20000008 	.word	0x20000008
 800231c:	2000000c 	.word	0x2000000c

08002320 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
 800232a:	2300      	movs	r3, #0
 800232c:	60bb      	str	r3, [r7, #8]
 800232e:	2300      	movs	r3, #0
 8002330:	617b      	str	r3, [r7, #20]
 8002332:	2300      	movs	r3, #0
 8002334:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002336:	2300      	movs	r3, #0
 8002338:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800233a:	4b1e      	ldr	r3, [pc, #120]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x94>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f003 030c 	and.w	r3, r3, #12
 8002346:	2b04      	cmp	r3, #4
 8002348:	d002      	beq.n	8002350 <HAL_RCC_GetSysClockFreq+0x30>
 800234a:	2b08      	cmp	r3, #8
 800234c:	d003      	beq.n	8002356 <HAL_RCC_GetSysClockFreq+0x36>
 800234e:	e027      	b.n	80023a0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002350:	4b19      	ldr	r3, [pc, #100]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002352:	613b      	str	r3, [r7, #16]
      break;
 8002354:	e027      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	0c9b      	lsrs	r3, r3, #18
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	4a17      	ldr	r2, [pc, #92]	@ (80023bc <HAL_RCC_GetSysClockFreq+0x9c>)
 8002360:	5cd3      	ldrb	r3, [r2, r3]
 8002362:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d010      	beq.n	8002390 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800236e:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <HAL_RCC_GetSysClockFreq+0x94>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	0c5b      	lsrs	r3, r3, #17
 8002374:	f003 0301 	and.w	r3, r3, #1
 8002378:	4a11      	ldr	r2, [pc, #68]	@ (80023c0 <HAL_RCC_GetSysClockFreq+0xa0>)
 800237a:	5cd3      	ldrb	r3, [r2, r3]
 800237c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	4a0d      	ldr	r2, [pc, #52]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x98>)
 8002382:	fb03 f202 	mul.w	r2, r3, r2
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	fbb2 f3f3 	udiv	r3, r2, r3
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	e004      	b.n	800239a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	4a0c      	ldr	r2, [pc, #48]	@ (80023c4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002394:	fb02 f303 	mul.w	r3, r2, r3
 8002398:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800239a:	697b      	ldr	r3, [r7, #20]
 800239c:	613b      	str	r3, [r7, #16]
      break;
 800239e:	e002      	b.n	80023a6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80023a0:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <HAL_RCC_GetSysClockFreq+0x98>)
 80023a2:	613b      	str	r3, [r7, #16]
      break;
 80023a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023a6:	693b      	ldr	r3, [r7, #16]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	371c      	adds	r7, #28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr
 80023b2:	bf00      	nop
 80023b4:	40021000 	.word	0x40021000
 80023b8:	007a1200 	.word	0x007a1200
 80023bc:	08006718 	.word	0x08006718
 80023c0:	08006728 	.word	0x08006728
 80023c4:	003d0900 	.word	0x003d0900

080023c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023c8:	b480      	push	{r7}
 80023ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023cc:	4b02      	ldr	r3, [pc, #8]	@ (80023d8 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ce:	681b      	ldr	r3, [r3, #0]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bc80      	pop	{r7}
 80023d6:	4770      	bx	lr
 80023d8:	20000008 	.word	0x20000008

080023dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023e0:	f7ff fff2 	bl	80023c8 <HAL_RCC_GetHCLKFreq>
 80023e4:	4602      	mov	r2, r0
 80023e6:	4b05      	ldr	r3, [pc, #20]	@ (80023fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	0a1b      	lsrs	r3, r3, #8
 80023ec:	f003 0307 	and.w	r3, r3, #7
 80023f0:	4903      	ldr	r1, [pc, #12]	@ (8002400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023f2:	5ccb      	ldrb	r3, [r1, r3]
 80023f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	bd80      	pop	{r7, pc}
 80023fc:	40021000 	.word	0x40021000
 8002400:	08006710 	.word	0x08006710

08002404 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002404:	b480      	push	{r7}
 8002406:	b085      	sub	sp, #20
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800240c:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <RCC_Delay+0x34>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a0a      	ldr	r2, [pc, #40]	@ (800243c <RCC_Delay+0x38>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0a5b      	lsrs	r3, r3, #9
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	fb02 f303 	mul.w	r3, r2, r3
 800241e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002420:	bf00      	nop
  }
  while (Delay --);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	1e5a      	subs	r2, r3, #1
 8002426:	60fa      	str	r2, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f9      	bne.n	8002420 <RCC_Delay+0x1c>
}
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	bc80      	pop	{r7}
 8002436:	4770      	bx	lr
 8002438:	20000008 	.word	0x20000008
 800243c:	10624dd3 	.word	0x10624dd3

08002440 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8002440:	b480      	push	{r7}
 8002442:	b085      	sub	sp, #20
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800244e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002452:	2b84      	cmp	r3, #132	@ 0x84
 8002454:	d005      	beq.n	8002462 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8002456:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	4413      	add	r3, r2
 800245e:	3303      	adds	r3, #3
 8002460:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002462:	68fb      	ldr	r3, [r7, #12]
}
 8002464:	4618      	mov	r0, r3
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	bc80      	pop	{r7}
 800246c:	4770      	bx	lr

0800246e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002474:	f3ef 8305 	mrs	r3, IPSR
 8002478:	607b      	str	r3, [r7, #4]
  return(result);
 800247a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf14      	ite	ne
 8002480:	2301      	movne	r3, #1
 8002482:	2300      	moveq	r3, #0
 8002484:	b2db      	uxtb	r3, r3
}
 8002486:	4618      	mov	r0, r3
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	bc80      	pop	{r7}
 800248e:	4770      	bx	lr

08002490 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002494:	f001 fa1a 	bl	80038cc <vTaskStartScheduler>
  
  return osOK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	bd80      	pop	{r7, pc}

0800249e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800249e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024a0:	b089      	sub	sp, #36	@ 0x24
 80024a2:	af04      	add	r7, sp, #16
 80024a4:	6078      	str	r0, [r7, #4]
 80024a6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	695b      	ldr	r3, [r3, #20]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d020      	beq.n	80024f2 <osThreadCreate+0x54>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01c      	beq.n	80024f2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685c      	ldr	r4, [r3, #4]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	691e      	ldr	r6, [r3, #16]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7ff ffb8 	bl	8002440 <makeFreeRtosPriority>
 80024d0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024da:	9202      	str	r2, [sp, #8]
 80024dc:	9301      	str	r3, [sp, #4]
 80024de:	9100      	str	r1, [sp, #0]
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	4632      	mov	r2, r6
 80024e4:	4629      	mov	r1, r5
 80024e6:	4620      	mov	r0, r4
 80024e8:	f001 f82c 	bl	8003544 <xTaskCreateStatic>
 80024ec:	4603      	mov	r3, r0
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	e01c      	b.n	800252c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685c      	ldr	r4, [r3, #4]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80024fe:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff ff9a 	bl	8002440 <makeFreeRtosPriority>
 800250c:	4602      	mov	r2, r0
 800250e:	f107 030c 	add.w	r3, r7, #12
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	9200      	str	r2, [sp, #0]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	4632      	mov	r2, r6
 800251a:	4629      	mov	r1, r5
 800251c:	4620      	mov	r0, r4
 800251e:	f001 f870 	bl	8003602 <xTaskCreate>
 8002522:	4603      	mov	r3, r0
 8002524:	2b01      	cmp	r3, #1
 8002526:	d001      	beq.n	800252c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8002528:	2300      	movs	r3, #0
 800252a:	e000      	b.n	800252e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800252c:	68fb      	ldr	r3, [r7, #12]
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002536 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b084      	sub	sp, #16
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <osDelay+0x16>
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	e000      	b.n	800254e <osDelay+0x18>
 800254c:	2301      	movs	r3, #1
 800254e:	4618      	mov	r0, r3
 8002550:	f001 f986 	bl	8003860 <vTaskDelay>
  
  return osOK;
 8002554:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8002556:	4618      	mov	r0, r3
 8002558:	3710      	adds	r7, #16
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
	...

08002560 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b086      	sub	sp, #24
 8002564:	af02      	add	r7, sp, #8
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	460b      	mov	r3, r1
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	72fb      	strb	r3, [r7, #11]
#if (configUSE_TIMERS == 1)

#if( ( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) 
  if(timer_def->controlblock != NULL) {
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d013      	beq.n	800259e <osTimerCreate+0x3e>
    return xTimerCreateStatic((const char *)"",
 8002576:	7afb      	ldrb	r3, [r7, #11]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <osTimerCreate+0x20>
 800257c:	2101      	movs	r1, #1
 800257e:	e000      	b.n	8002582 <osTimerCreate+0x22>
 8002580:	2100      	movs	r1, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
                      (StaticTimer_t *)timer_def->controlblock);
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	6852      	ldr	r2, [r2, #4]
    return xTimerCreateStatic((const char *)"",
 800258a:	9201      	str	r2, [sp, #4]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	460a      	mov	r2, r1
 8002592:	2101      	movs	r1, #1
 8002594:	480b      	ldr	r0, [pc, #44]	@ (80025c4 <osTimerCreate+0x64>)
 8002596:	f001 ff62 	bl	800445e <xTimerCreateStatic>
 800259a:	4603      	mov	r3, r0
 800259c:	e00e      	b.n	80025bc <osTimerCreate+0x5c>
  }
  else {
    return xTimerCreate((const char *)"",
 800259e:	7afb      	ldrb	r3, [r7, #11]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <osTimerCreate+0x48>
 80025a4:	2201      	movs	r2, #1
 80025a6:	e000      	b.n	80025aa <osTimerCreate+0x4a>
 80025a8:	2200      	movs	r2, #0
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
    return xTimerCreate((const char *)"",
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2101      	movs	r1, #1
 80025b4:	4803      	ldr	r0, [pc, #12]	@ (80025c4 <osTimerCreate+0x64>)
 80025b6:	f001 ff31 	bl	800441c <xTimerCreate>
 80025ba:	4603      	mov	r3, r0
#endif

#else 
	return NULL;
#endif
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	080053a4 	.word	0x080053a4

080025c8 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b088      	sub	sp, #32
 80025cc:	af02      	add	r7, sp, #8
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
  osStatus result = osOK;
 80025d2:	2300      	movs	r3, #0
 80025d4:	617b      	str	r3, [r7, #20]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 80025d6:	2300      	movs	r3, #0
 80025d8:	60fb      	str	r3, [r7, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	613b      	str	r3, [r7, #16]

  if (ticks == 0)
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d101      	bne.n	80025e8 <osTimerStart+0x20>
    ticks = 1;
 80025e4:	2301      	movs	r3, #1
 80025e6:	613b      	str	r3, [r7, #16]
    
  if (inHandlerMode()) 
 80025e8:	f7ff ff41 	bl	800246e <inHandlerMode>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d01a      	beq.n	8002628 <osTimerStart+0x60>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 80025f2:	f107 030c 	add.w	r3, r7, #12
 80025f6:	2200      	movs	r2, #0
 80025f8:	9200      	str	r2, [sp, #0]
 80025fa:	693a      	ldr	r2, [r7, #16]
 80025fc:	2109      	movs	r1, #9
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f001 ffa0 	bl	8004544 <xTimerGenericCommand>
 8002604:	4603      	mov	r3, r0
 8002606:	2b01      	cmp	r3, #1
 8002608:	d002      	beq.n	8002610 <osTimerStart+0x48>
    {
      result = osErrorOS;
 800260a:	23ff      	movs	r3, #255	@ 0xff
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	e018      	b.n	8002642 <osTimerStart+0x7a>
    }
    else
    {
      portEND_SWITCHING_ISR(taskWoken);     
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d015      	beq.n	8002642 <osTimerStart+0x7a>
 8002616:	4b0d      	ldr	r3, [pc, #52]	@ (800264c <osTimerStart+0x84>)
 8002618:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	f3bf 8f4f 	dsb	sy
 8002622:	f3bf 8f6f 	isb	sy
 8002626:	e00c      	b.n	8002642 <osTimerStart+0x7a>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8002628:	2300      	movs	r3, #0
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2300      	movs	r3, #0
 800262e:	693a      	ldr	r2, [r7, #16]
 8002630:	2104      	movs	r1, #4
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f001 ff86 	bl	8004544 <xTimerGenericCommand>
 8002638:	4603      	mov	r3, r0
 800263a:	2b01      	cmp	r3, #1
 800263c:	d001      	beq.n	8002642 <osTimerStart+0x7a>
      result = osErrorOS;
 800263e:	23ff      	movs	r3, #255	@ 0xff
 8002640:	617b      	str	r3, [r7, #20]
  }

#else 
  result = osErrorOS;
#endif
  return result;
 8002642:	697b      	ldr	r3, [r7, #20]
}
 8002644:	4618      	mov	r0, r3
 8002646:	3718      	adds	r7, #24
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	e000ed04 	.word	0xe000ed04

08002650 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b086      	sub	sp, #24
 8002654:	af02      	add	r7, sp, #8
 8002656:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8002658:	2300      	movs	r3, #0
 800265a:	60fb      	str	r3, [r7, #12]
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]

  if (inHandlerMode()) {
 8002660:	f7ff ff05 	bl	800246e <inHandlerMode>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d019      	beq.n	800269e <osTimerStop+0x4e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 800266a:	f107 0308 	add.w	r3, r7, #8
 800266e:	2200      	movs	r2, #0
 8002670:	9200      	str	r2, [sp, #0]
 8002672:	2200      	movs	r2, #0
 8002674:	2108      	movs	r1, #8
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f001 ff64 	bl	8004544 <xTimerGenericCommand>
 800267c:	4603      	mov	r3, r0
 800267e:	2b01      	cmp	r3, #1
 8002680:	d001      	beq.n	8002686 <osTimerStop+0x36>
      return osErrorOS;
 8002682:	23ff      	movs	r3, #255	@ 0xff
 8002684:	e019      	b.n	80026ba <osTimerStop+0x6a>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d015      	beq.n	80026b8 <osTimerStop+0x68>
 800268c:	4b0d      	ldr	r3, [pc, #52]	@ (80026c4 <osTimerStop+0x74>)
 800268e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002692:	601a      	str	r2, [r3, #0]
 8002694:	f3bf 8f4f 	dsb	sy
 8002698:	f3bf 8f6f 	isb	sy
 800269c:	e00c      	b.n	80026b8 <osTimerStop+0x68>
  }
  else {
    if (xTimerStop(timer_id, 0) != pdPASS) {
 800269e:	2300      	movs	r3, #0
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	2300      	movs	r3, #0
 80026a4:	2200      	movs	r2, #0
 80026a6:	2103      	movs	r1, #3
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f001 ff4b 	bl	8004544 <xTimerGenericCommand>
 80026ae:	4603      	mov	r3, r0
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d001      	beq.n	80026b8 <osTimerStop+0x68>
      result = osErrorOS;
 80026b4:	23ff      	movs	r3, #255	@ 0xff
 80026b6:	60fb      	str	r3, [r7, #12]
    }
  }
#else 
  result = osErrorOS;
#endif 
  return result;
 80026b8:	68fb      	ldr	r3, [r7, #12]
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	3710      	adds	r7, #16
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}
 80026c2:	bf00      	nop
 80026c4:	e000ed04 	.word	0xe000ed04

080026c8 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80026c8:	b590      	push	{r4, r7, lr}
 80026ca:	b085      	sub	sp, #20
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d011      	beq.n	80026fe <osMessageCreate+0x36>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00d      	beq.n	80026fe <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6818      	ldr	r0, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6859      	ldr	r1, [r3, #4]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689a      	ldr	r2, [r3, #8]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2400      	movs	r4, #0
 80026f4:	9400      	str	r4, [sp, #0]
 80026f6:	f000 f9dd 	bl	8002ab4 <xQueueGenericCreateStatic>
 80026fa:	4603      	mov	r3, r0
 80026fc:	e008      	b.n	8002710 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6818      	ldr	r0, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	4619      	mov	r1, r3
 800270a:	f000 fa4f 	bl	8002bac <xQueueGenericCreate>
 800270e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8002710:	4618      	mov	r0, r3
 8002712:	370c      	adds	r7, #12
 8002714:	46bd      	mov	sp, r7
 8002716:	bd90      	pop	{r4, r7, pc}

08002718 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	60b9      	str	r1, [r7, #8]
 8002722:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8002724:	2300      	movs	r3, #0
 8002726:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d101      	bne.n	8002736 <osMessagePut+0x1e>
    ticks = 1;
 8002732:	2301      	movs	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8002736:	f7ff fe9a 	bl	800246e <inHandlerMode>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d018      	beq.n	8002772 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8002740:	f107 0210 	add.w	r2, r7, #16
 8002744:	f107 0108 	add.w	r1, r7, #8
 8002748:	2300      	movs	r3, #0
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 fb8e 	bl	8002e6c <xQueueGenericSendFromISR>
 8002750:	4603      	mov	r3, r0
 8002752:	2b01      	cmp	r3, #1
 8002754:	d001      	beq.n	800275a <osMessagePut+0x42>
      return osErrorOS;
 8002756:	23ff      	movs	r3, #255	@ 0xff
 8002758:	e018      	b.n	800278c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d014      	beq.n	800278a <osMessagePut+0x72>
 8002760:	4b0c      	ldr	r3, [pc, #48]	@ (8002794 <osMessagePut+0x7c>)
 8002762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002766:	601a      	str	r2, [r3, #0]
 8002768:	f3bf 8f4f 	dsb	sy
 800276c:	f3bf 8f6f 	isb	sy
 8002770:	e00b      	b.n	800278a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8002772:	f107 0108 	add.w	r1, r7, #8
 8002776:	2300      	movs	r3, #0
 8002778:	697a      	ldr	r2, [r7, #20]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fa74 	bl	8002c68 <xQueueGenericSend>
 8002780:	4603      	mov	r3, r0
 8002782:	2b01      	cmp	r3, #1
 8002784:	d001      	beq.n	800278a <osMessagePut+0x72>
      return osErrorOS;
 8002786:	23ff      	movs	r3, #255	@ 0xff
 8002788:	e000      	b.n	800278c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3718      	adds	r7, #24
 8002790:	46bd      	mov	sp, r7
 8002792:	bd80      	pop	{r7, pc}
 8002794:	e000ed04 	.word	0xe000ed04

08002798 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8002798:	b590      	push	{r4, r7, lr}
 800279a:	b08b      	sub	sp, #44	@ 0x2c
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d10a      	bne.n	80027c8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80027b2:	2380      	movs	r3, #128	@ 0x80
 80027b4:	617b      	str	r3, [r7, #20]
    return event;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	461c      	mov	r4, r3
 80027ba:	f107 0314 	add.w	r3, r7, #20
 80027be:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80027c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80027c6:	e054      	b.n	8002872 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d6:	d103      	bne.n	80027e0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80027d8:	f04f 33ff 	mov.w	r3, #4294967295
 80027dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80027de:	e009      	b.n	80027f4 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d006      	beq.n	80027f4 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 80027ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <osMessageGet+0x5c>
      ticks = 1;
 80027f0:	2301      	movs	r3, #1
 80027f2:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 80027f4:	f7ff fe3b 	bl	800246e <inHandlerMode>
 80027f8:	4603      	mov	r3, r0
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d01c      	beq.n	8002838 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80027fe:	f107 0220 	add.w	r2, r7, #32
 8002802:	f107 0314 	add.w	r3, r7, #20
 8002806:	3304      	adds	r3, #4
 8002808:	4619      	mov	r1, r3
 800280a:	68b8      	ldr	r0, [r7, #8]
 800280c:	f000 fcac 	bl	8003168 <xQueueReceiveFromISR>
 8002810:	4603      	mov	r3, r0
 8002812:	2b01      	cmp	r3, #1
 8002814:	d102      	bne.n	800281c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8002816:	2310      	movs	r3, #16
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	e001      	b.n	8002820 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800281c:	2300      	movs	r3, #0
 800281e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8002820:	6a3b      	ldr	r3, [r7, #32]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d01d      	beq.n	8002862 <osMessageGet+0xca>
 8002826:	4b15      	ldr	r3, [pc, #84]	@ (800287c <osMessageGet+0xe4>)
 8002828:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	f3bf 8f4f 	dsb	sy
 8002832:	f3bf 8f6f 	isb	sy
 8002836:	e014      	b.n	8002862 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8002838:	f107 0314 	add.w	r3, r7, #20
 800283c:	3304      	adds	r3, #4
 800283e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002840:	4619      	mov	r1, r3
 8002842:	68b8      	ldr	r0, [r7, #8]
 8002844:	f000 fbae 	bl	8002fa4 <xQueueReceive>
 8002848:	4603      	mov	r3, r0
 800284a:	2b01      	cmp	r3, #1
 800284c:	d102      	bne.n	8002854 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800284e:	2310      	movs	r3, #16
 8002850:	617b      	str	r3, [r7, #20]
 8002852:	e006      	b.n	8002862 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8002854:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <osMessageGet+0xc6>
 800285a:	2300      	movs	r3, #0
 800285c:	e000      	b.n	8002860 <osMessageGet+0xc8>
 800285e:	2340      	movs	r3, #64	@ 0x40
 8002860:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	461c      	mov	r4, r3
 8002866:	f107 0314 	add.w	r3, r7, #20
 800286a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800286e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8002872:	68f8      	ldr	r0, [r7, #12]
 8002874:	372c      	adds	r7, #44	@ 0x2c
 8002876:	46bd      	mov	sp, r7
 8002878:	bd90      	pop	{r4, r7, pc}
 800287a:	bf00      	nop
 800287c:	e000ed04 	.word	0xe000ed04

08002880 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	f103 0208 	add.w	r2, r3, #8
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	f04f 32ff 	mov.w	r2, #4294967295
 8002898:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	f103 0208 	add.w	r2, r3, #8
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f103 0208 	add.w	r2, r3, #8
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bc80      	pop	{r7}
 80028d4:	4770      	bx	lr

080028d6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028d6:	b480      	push	{r7}
 80028d8:	b085      	sub	sp, #20
 80028da:	af00      	add	r7, sp, #0
 80028dc:	6078      	str	r0, [r7, #4]
 80028de:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	683a      	ldr	r2, [r7, #0]
 80028fa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	683a      	ldr	r2, [r7, #0]
 8002900:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	1c5a      	adds	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	601a      	str	r2, [r3, #0]
}
 8002912:	bf00      	nop
 8002914:	3714      	adds	r7, #20
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr

0800291c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800291c:	b480      	push	{r7}
 800291e:	b085      	sub	sp, #20
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002932:	d103      	bne.n	800293c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	e00c      	b.n	8002956 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	3308      	adds	r3, #8
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	e002      	b.n	800294a <vListInsert+0x2e>
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	68ba      	ldr	r2, [r7, #8]
 8002952:	429a      	cmp	r2, r3
 8002954:	d2f6      	bcs.n	8002944 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	685a      	ldr	r2, [r3, #4]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	685b      	ldr	r3, [r3, #4]
 8002962:	683a      	ldr	r2, [r7, #0]
 8002964:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	1c5a      	adds	r2, r3, #1
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	601a      	str	r2, [r3, #0]
}
 8002982:	bf00      	nop
 8002984:	3714      	adds	r7, #20
 8002986:	46bd      	mov	sp, r7
 8002988:	bc80      	pop	{r7}
 800298a:	4770      	bx	lr

0800298c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	6892      	ldr	r2, [r2, #8]
 80029a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6852      	ldr	r2, [r2, #4]
 80029ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d103      	bne.n	80029c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	1e5a      	subs	r2, r3, #1
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3714      	adds	r7, #20
 80029d8:	46bd      	mov	sp, r7
 80029da:	bc80      	pop	{r7}
 80029dc:	4770      	bx	lr
	...

080029e0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10b      	bne.n	8002a0c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80029f8:	f383 8811 	msr	BASEPRI, r3
 80029fc:	f3bf 8f6f 	isb	sy
 8002a00:	f3bf 8f4f 	dsb	sy
 8002a04:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002a06:	bf00      	nop
 8002a08:	bf00      	nop
 8002a0a:	e7fd      	b.n	8002a08 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002a0c:	f002 f96e 	bl	8004cec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a18:	68f9      	ldr	r1, [r7, #12]
 8002a1a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a1c:	fb01 f303 	mul.w	r3, r1, r3
 8002a20:	441a      	add	r2, r3
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	68f9      	ldr	r1, [r7, #12]
 8002a40:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a42:	fb01 f303 	mul.w	r3, r1, r3
 8002a46:	441a      	add	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	22ff      	movs	r2, #255	@ 0xff
 8002a50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	22ff      	movs	r2, #255	@ 0xff
 8002a58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d114      	bne.n	8002a8c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d01a      	beq.n	8002aa0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	3310      	adds	r3, #16
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f001 f9ba 	bl	8003de8 <xTaskRemoveFromEventList>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d012      	beq.n	8002aa0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab0 <xQueueGenericReset+0xd0>)
 8002a7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	f3bf 8f4f 	dsb	sy
 8002a86:	f3bf 8f6f 	isb	sy
 8002a8a:	e009      	b.n	8002aa0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	3310      	adds	r3, #16
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff fef5 	bl	8002880 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3324      	adds	r3, #36	@ 0x24
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7ff fef0 	bl	8002880 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002aa0:	f002 f954 	bl	8004d4c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002aa4:	2301      	movs	r3, #1
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	e000ed04 	.word	0xe000ed04

08002ab4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b08e      	sub	sp, #56	@ 0x38
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	60b9      	str	r1, [r7, #8]
 8002abe:	607a      	str	r2, [r7, #4]
 8002ac0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d10b      	bne.n	8002ae0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002acc:	f383 8811 	msr	BASEPRI, r3
 8002ad0:	f3bf 8f6f 	isb	sy
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002ada:	bf00      	nop
 8002adc:	bf00      	nop
 8002ade:	e7fd      	b.n	8002adc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10b      	bne.n	8002afe <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	e7fd      	b.n	8002afa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <xQueueGenericCreateStatic+0x56>
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <xQueueGenericCreateStatic+0x5a>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <xQueueGenericCreateStatic+0x5c>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10b      	bne.n	8002b2c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	623b      	str	r3, [r7, #32]
}
 8002b26:	bf00      	nop
 8002b28:	bf00      	nop
 8002b2a:	e7fd      	b.n	8002b28 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d102      	bne.n	8002b38 <xQueueGenericCreateStatic+0x84>
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <xQueueGenericCreateStatic+0x88>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <xQueueGenericCreateStatic+0x8a>
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10b      	bne.n	8002b5a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b46:	f383 8811 	msr	BASEPRI, r3
 8002b4a:	f3bf 8f6f 	isb	sy
 8002b4e:	f3bf 8f4f 	dsb	sy
 8002b52:	61fb      	str	r3, [r7, #28]
}
 8002b54:	bf00      	nop
 8002b56:	bf00      	nop
 8002b58:	e7fd      	b.n	8002b56 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b5a:	2348      	movs	r3, #72	@ 0x48
 8002b5c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b48      	cmp	r3, #72	@ 0x48
 8002b62:	d00b      	beq.n	8002b7c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	61bb      	str	r3, [r7, #24]
}
 8002b76:	bf00      	nop
 8002b78:	bf00      	nop
 8002b7a:	e7fd      	b.n	8002b78 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002b80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00d      	beq.n	8002ba2 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b8e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	4613      	mov	r3, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 f844 	bl	8002c2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3730      	adds	r7, #48	@ 0x30
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	@ 0x28
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10b      	bne.n	8002bd8 <xQueueGenericCreate+0x2c>
	__asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	613b      	str	r3, [r7, #16]
}
 8002bd2:	bf00      	nop
 8002bd4:	bf00      	nop
 8002bd6:	e7fd      	b.n	8002bd4 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d102      	bne.n	8002be4 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	61fb      	str	r3, [r7, #28]
 8002be2:	e004      	b.n	8002bee <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	fb02 f303 	mul.w	r3, r2, r3
 8002bec:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	3348      	adds	r3, #72	@ 0x48
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f002 f97c 	bl	8004ef0 <pvPortMalloc>
 8002bf8:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002bfa:	69bb      	ldr	r3, [r7, #24]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00f      	beq.n	8002c20 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	3348      	adds	r3, #72	@ 0x48
 8002c04:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c0e:	79fa      	ldrb	r2, [r7, #7]
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	4613      	mov	r3, r2
 8002c16:	697a      	ldr	r2, [r7, #20]
 8002c18:	68b9      	ldr	r1, [r7, #8]
 8002c1a:	68f8      	ldr	r0, [r7, #12]
 8002c1c:	f000 f805 	bl	8002c2a <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002c20:	69bb      	ldr	r3, [r7, #24]
	}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3720      	adds	r7, #32
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b084      	sub	sp, #16
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d103      	bne.n	8002c46 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c3e:	69bb      	ldr	r3, [r7, #24]
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	e002      	b.n	8002c4c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	68ba      	ldr	r2, [r7, #8]
 8002c56:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c58:	2101      	movs	r1, #1
 8002c5a:	69b8      	ldr	r0, [r7, #24]
 8002c5c:	f7ff fec0 	bl	80029e0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c60:	bf00      	nop
 8002c62:	3710      	adds	r7, #16
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}

08002c68 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b08e      	sub	sp, #56	@ 0x38
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002c76:	2300      	movs	r3, #0
 8002c78:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10b      	bne.n	8002c9c <xQueueGenericSend+0x34>
	__asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002c96:	bf00      	nop
 8002c98:	bf00      	nop
 8002c9a:	e7fd      	b.n	8002c98 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d103      	bne.n	8002caa <xQueueGenericSend+0x42>
 8002ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d101      	bne.n	8002cae <xQueueGenericSend+0x46>
 8002caa:	2301      	movs	r3, #1
 8002cac:	e000      	b.n	8002cb0 <xQueueGenericSend+0x48>
 8002cae:	2300      	movs	r3, #0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d10b      	bne.n	8002ccc <xQueueGenericSend+0x64>
	__asm volatile
 8002cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cb8:	f383 8811 	msr	BASEPRI, r3
 8002cbc:	f3bf 8f6f 	isb	sy
 8002cc0:	f3bf 8f4f 	dsb	sy
 8002cc4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002cc6:	bf00      	nop
 8002cc8:	bf00      	nop
 8002cca:	e7fd      	b.n	8002cc8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	2b02      	cmp	r3, #2
 8002cd0:	d103      	bne.n	8002cda <xQueueGenericSend+0x72>
 8002cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d101      	bne.n	8002cde <xQueueGenericSend+0x76>
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <xQueueGenericSend+0x78>
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10b      	bne.n	8002cfc <xQueueGenericSend+0x94>
	__asm volatile
 8002ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	623b      	str	r3, [r7, #32]
}
 8002cf6:	bf00      	nop
 8002cf8:	bf00      	nop
 8002cfa:	e7fd      	b.n	8002cf8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cfc:	f001 fa38 	bl	8004170 <xTaskGetSchedulerState>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d102      	bne.n	8002d0c <xQueueGenericSend+0xa4>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d101      	bne.n	8002d10 <xQueueGenericSend+0xa8>
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e000      	b.n	8002d12 <xQueueGenericSend+0xaa>
 8002d10:	2300      	movs	r3, #0
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d10b      	bne.n	8002d2e <xQueueGenericSend+0xc6>
	__asm volatile
 8002d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d1a:	f383 8811 	msr	BASEPRI, r3
 8002d1e:	f3bf 8f6f 	isb	sy
 8002d22:	f3bf 8f4f 	dsb	sy
 8002d26:	61fb      	str	r3, [r7, #28]
}
 8002d28:	bf00      	nop
 8002d2a:	bf00      	nop
 8002d2c:	e7fd      	b.n	8002d2a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d2e:	f001 ffdd 	bl	8004cec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d302      	bcc.n	8002d44 <xQueueGenericSend+0xdc>
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d129      	bne.n	8002d98 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	68b9      	ldr	r1, [r7, #8]
 8002d48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002d4a:	f000 fa8f 	bl	800326c <prvCopyDataToQueue>
 8002d4e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d010      	beq.n	8002d7a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d5a:	3324      	adds	r3, #36	@ 0x24
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f001 f843 	bl	8003de8 <xTaskRemoveFromEventList>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d013      	beq.n	8002d90 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002d68:	4b3f      	ldr	r3, [pc, #252]	@ (8002e68 <xQueueGenericSend+0x200>)
 8002d6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	f3bf 8f4f 	dsb	sy
 8002d74:	f3bf 8f6f 	isb	sy
 8002d78:	e00a      	b.n	8002d90 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002d7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d007      	beq.n	8002d90 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002d80:	4b39      	ldr	r3, [pc, #228]	@ (8002e68 <xQueueGenericSend+0x200>)
 8002d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002d90:	f001 ffdc 	bl	8004d4c <vPortExitCritical>
				return pdPASS;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e063      	b.n	8002e60 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d103      	bne.n	8002da6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d9e:	f001 ffd5 	bl	8004d4c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002da2:	2300      	movs	r3, #0
 8002da4:	e05c      	b.n	8002e60 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002da6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d106      	bne.n	8002dba <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002dac:	f107 0314 	add.w	r3, r7, #20
 8002db0:	4618      	mov	r0, r3
 8002db2:	f001 f87d 	bl	8003eb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002db6:	2301      	movs	r3, #1
 8002db8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002dba:	f001 ffc7 	bl	8004d4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002dbe:	f000 fded 	bl	800399c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002dc2:	f001 ff93 	bl	8004cec <vPortEnterCritical>
 8002dc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dc8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002dcc:	b25b      	sxtb	r3, r3
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd2:	d103      	bne.n	8002ddc <xQueueGenericSend+0x174>
 8002dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dde:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002de2:	b25b      	sxtb	r3, r3
 8002de4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de8:	d103      	bne.n	8002df2 <xQueueGenericSend+0x18a>
 8002dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002dec:	2200      	movs	r2, #0
 8002dee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002df2:	f001 ffab 	bl	8004d4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002df6:	1d3a      	adds	r2, r7, #4
 8002df8:	f107 0314 	add.w	r3, r7, #20
 8002dfc:	4611      	mov	r1, r2
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f001 f86c 	bl	8003edc <xTaskCheckForTimeOut>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d124      	bne.n	8002e54 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e0a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e0c:	f000 fb26 	bl	800345c <prvIsQueueFull>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d018      	beq.n	8002e48 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e18:	3310      	adds	r3, #16
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	4611      	mov	r1, r2
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f000 ff90 	bl	8003d44 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002e24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e26:	f000 fab1 	bl	800338c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002e2a:	f000 fdc5 	bl	80039b8 <xTaskResumeAll>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f47f af7c 	bne.w	8002d2e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8002e36:	4b0c      	ldr	r3, [pc, #48]	@ (8002e68 <xQueueGenericSend+0x200>)
 8002e38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e3c:	601a      	str	r2, [r3, #0]
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	e772      	b.n	8002d2e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002e48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e4a:	f000 fa9f 	bl	800338c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e4e:	f000 fdb3 	bl	80039b8 <xTaskResumeAll>
 8002e52:	e76c      	b.n	8002d2e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002e54:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002e56:	f000 fa99 	bl	800338c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e5a:	f000 fdad 	bl	80039b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002e5e:	2300      	movs	r3, #0
		}
	}
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3738      	adds	r7, #56	@ 0x38
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	e000ed04 	.word	0xe000ed04

08002e6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b08e      	sub	sp, #56	@ 0x38
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	607a      	str	r2, [r7, #4]
 8002e78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10b      	bne.n	8002e9c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002e96:	bf00      	nop
 8002e98:	bf00      	nop
 8002e9a:	e7fd      	b.n	8002e98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d103      	bne.n	8002eaa <xQueueGenericSendFromISR+0x3e>
 8002ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d101      	bne.n	8002eae <xQueueGenericSendFromISR+0x42>
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e000      	b.n	8002eb0 <xQueueGenericSendFromISR+0x44>
 8002eae:	2300      	movs	r3, #0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10b      	bne.n	8002ecc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8002eb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	623b      	str	r3, [r7, #32]
}
 8002ec6:	bf00      	nop
 8002ec8:	bf00      	nop
 8002eca:	e7fd      	b.n	8002ec8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d103      	bne.n	8002eda <xQueueGenericSendFromISR+0x6e>
 8002ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ed6:	2b01      	cmp	r3, #1
 8002ed8:	d101      	bne.n	8002ede <xQueueGenericSendFromISR+0x72>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <xQueueGenericSendFromISR+0x74>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d10b      	bne.n	8002efc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8002ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee8:	f383 8811 	msr	BASEPRI, r3
 8002eec:	f3bf 8f6f 	isb	sy
 8002ef0:	f3bf 8f4f 	dsb	sy
 8002ef4:	61fb      	str	r3, [r7, #28]
}
 8002ef6:	bf00      	nop
 8002ef8:	bf00      	nop
 8002efa:	e7fd      	b.n	8002ef8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002efc:	f001 ffb8 	bl	8004e70 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002f00:	f3ef 8211 	mrs	r2, BASEPRI
 8002f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f08:	f383 8811 	msr	BASEPRI, r3
 8002f0c:	f3bf 8f6f 	isb	sy
 8002f10:	f3bf 8f4f 	dsb	sy
 8002f14:	61ba      	str	r2, [r7, #24]
 8002f16:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002f18:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f1e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d302      	bcc.n	8002f2e <xQueueGenericSendFromISR+0xc2>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	2b02      	cmp	r3, #2
 8002f2c:	d12c      	bne.n	8002f88 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f34:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f38:	683a      	ldr	r2, [r7, #0]
 8002f3a:	68b9      	ldr	r1, [r7, #8]
 8002f3c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f3e:	f000 f995 	bl	800326c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002f42:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4a:	d112      	bne.n	8002f72 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d016      	beq.n	8002f82 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f56:	3324      	adds	r3, #36	@ 0x24
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 ff45 	bl	8003de8 <xTaskRemoveFromEventList>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d00e      	beq.n	8002f82 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00b      	beq.n	8002f82 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2201      	movs	r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	e007      	b.n	8002f82 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002f72:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002f76:	3301      	adds	r3, #1
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	b25a      	sxtb	r2, r3
 8002f7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002f82:	2301      	movs	r3, #1
 8002f84:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8002f86:	e001      	b.n	8002f8c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8002f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f8e:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002f96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3738      	adds	r7, #56	@ 0x38
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
	...

08002fa4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b08c      	sub	sp, #48	@ 0x30
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10b      	bne.n	8002fd6 <xQueueReceive+0x32>
	__asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	623b      	str	r3, [r7, #32]
}
 8002fd0:	bf00      	nop
 8002fd2:	bf00      	nop
 8002fd4:	e7fd      	b.n	8002fd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d103      	bne.n	8002fe4 <xQueueReceive+0x40>
 8002fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <xQueueReceive+0x44>
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e000      	b.n	8002fea <xQueueReceive+0x46>
 8002fe8:	2300      	movs	r3, #0
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d10b      	bne.n	8003006 <xQueueReceive+0x62>
	__asm volatile
 8002fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff2:	f383 8811 	msr	BASEPRI, r3
 8002ff6:	f3bf 8f6f 	isb	sy
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	61fb      	str	r3, [r7, #28]
}
 8003000:	bf00      	nop
 8003002:	bf00      	nop
 8003004:	e7fd      	b.n	8003002 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003006:	f001 f8b3 	bl	8004170 <xTaskGetSchedulerState>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d102      	bne.n	8003016 <xQueueReceive+0x72>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d101      	bne.n	800301a <xQueueReceive+0x76>
 8003016:	2301      	movs	r3, #1
 8003018:	e000      	b.n	800301c <xQueueReceive+0x78>
 800301a:	2300      	movs	r3, #0
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10b      	bne.n	8003038 <xQueueReceive+0x94>
	__asm volatile
 8003020:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003024:	f383 8811 	msr	BASEPRI, r3
 8003028:	f3bf 8f6f 	isb	sy
 800302c:	f3bf 8f4f 	dsb	sy
 8003030:	61bb      	str	r3, [r7, #24]
}
 8003032:	bf00      	nop
 8003034:	bf00      	nop
 8003036:	e7fd      	b.n	8003034 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003038:	f001 fe58 	bl	8004cec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800303c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800303e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003040:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003044:	2b00      	cmp	r3, #0
 8003046:	d01f      	beq.n	8003088 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003048:	68b9      	ldr	r1, [r7, #8]
 800304a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800304c:	f000 f978 	bl	8003340 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003052:	1e5a      	subs	r2, r3, #1
 8003054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003056:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00f      	beq.n	8003080 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003062:	3310      	adds	r3, #16
 8003064:	4618      	mov	r0, r3
 8003066:	f000 febf 	bl	8003de8 <xTaskRemoveFromEventList>
 800306a:	4603      	mov	r3, r0
 800306c:	2b00      	cmp	r3, #0
 800306e:	d007      	beq.n	8003080 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003070:	4b3c      	ldr	r3, [pc, #240]	@ (8003164 <xQueueReceive+0x1c0>)
 8003072:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	f3bf 8f4f 	dsb	sy
 800307c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003080:	f001 fe64 	bl	8004d4c <vPortExitCritical>
				return pdPASS;
 8003084:	2301      	movs	r3, #1
 8003086:	e069      	b.n	800315c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d103      	bne.n	8003096 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800308e:	f001 fe5d 	bl	8004d4c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003092:	2300      	movs	r3, #0
 8003094:	e062      	b.n	800315c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003096:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003098:	2b00      	cmp	r3, #0
 800309a:	d106      	bne.n	80030aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800309c:	f107 0310 	add.w	r3, r7, #16
 80030a0:	4618      	mov	r0, r3
 80030a2:	f000 ff05 	bl	8003eb0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030a6:	2301      	movs	r3, #1
 80030a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030aa:	f001 fe4f 	bl	8004d4c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030ae:	f000 fc75 	bl	800399c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030b2:	f001 fe1b 	bl	8004cec <vPortEnterCritical>
 80030b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80030bc:	b25b      	sxtb	r3, r3
 80030be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c2:	d103      	bne.n	80030cc <xQueueReceive+0x128>
 80030c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80030d2:	b25b      	sxtb	r3, r3
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d103      	bne.n	80030e2 <xQueueReceive+0x13e>
 80030da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030dc:	2200      	movs	r2, #0
 80030de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030e2:	f001 fe33 	bl	8004d4c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80030e6:	1d3a      	adds	r2, r7, #4
 80030e8:	f107 0310 	add.w	r3, r7, #16
 80030ec:	4611      	mov	r1, r2
 80030ee:	4618      	mov	r0, r3
 80030f0:	f000 fef4 	bl	8003edc <xTaskCheckForTimeOut>
 80030f4:	4603      	mov	r3, r0
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d123      	bne.n	8003142 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80030fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80030fc:	f000 f998 	bl	8003430 <prvIsQueueEmpty>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d017      	beq.n	8003136 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003108:	3324      	adds	r3, #36	@ 0x24
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	4611      	mov	r1, r2
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fe18 	bl	8003d44 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003114:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003116:	f000 f939 	bl	800338c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800311a:	f000 fc4d 	bl	80039b8 <xTaskResumeAll>
 800311e:	4603      	mov	r3, r0
 8003120:	2b00      	cmp	r3, #0
 8003122:	d189      	bne.n	8003038 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003124:	4b0f      	ldr	r3, [pc, #60]	@ (8003164 <xQueueReceive+0x1c0>)
 8003126:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	f3bf 8f6f 	isb	sy
 8003134:	e780      	b.n	8003038 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003136:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003138:	f000 f928 	bl	800338c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800313c:	f000 fc3c 	bl	80039b8 <xTaskResumeAll>
 8003140:	e77a      	b.n	8003038 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003142:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003144:	f000 f922 	bl	800338c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003148:	f000 fc36 	bl	80039b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800314c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800314e:	f000 f96f 	bl	8003430 <prvIsQueueEmpty>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	f43f af6f 	beq.w	8003038 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800315a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800315c:	4618      	mov	r0, r3
 800315e:	3730      	adds	r7, #48	@ 0x30
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}
 8003164:	e000ed04 	.word	0xe000ed04

08003168 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b08e      	sub	sp, #56	@ 0x38
 800316c:	af00      	add	r7, sp, #0
 800316e:	60f8      	str	r0, [r7, #12]
 8003170:	60b9      	str	r1, [r7, #8]
 8003172:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003178:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800317a:	2b00      	cmp	r3, #0
 800317c:	d10b      	bne.n	8003196 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800317e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003182:	f383 8811 	msr	BASEPRI, r3
 8003186:	f3bf 8f6f 	isb	sy
 800318a:	f3bf 8f4f 	dsb	sy
 800318e:	623b      	str	r3, [r7, #32]
}
 8003190:	bf00      	nop
 8003192:	bf00      	nop
 8003194:	e7fd      	b.n	8003192 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d103      	bne.n	80031a4 <xQueueReceiveFromISR+0x3c>
 800319c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800319e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d101      	bne.n	80031a8 <xQueueReceiveFromISR+0x40>
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <xQueueReceiveFromISR+0x42>
 80031a8:	2300      	movs	r3, #0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d10b      	bne.n	80031c6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80031ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b2:	f383 8811 	msr	BASEPRI, r3
 80031b6:	f3bf 8f6f 	isb	sy
 80031ba:	f3bf 8f4f 	dsb	sy
 80031be:	61fb      	str	r3, [r7, #28]
}
 80031c0:	bf00      	nop
 80031c2:	bf00      	nop
 80031c4:	e7fd      	b.n	80031c2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80031c6:	f001 fe53 	bl	8004e70 <vPortValidateInterruptPriority>
	__asm volatile
 80031ca:	f3ef 8211 	mrs	r2, BASEPRI
 80031ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	61ba      	str	r2, [r7, #24]
 80031e0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80031e2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80031e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031ea:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80031ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d02f      	beq.n	8003252 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80031f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80031f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80031f8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003200:	f000 f89e 	bl	8003340 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003204:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003206:	1e5a      	subs	r2, r3, #1
 8003208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800320a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800320c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8003210:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003214:	d112      	bne.n	800323c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003216:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d016      	beq.n	800324c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800321e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003220:	3310      	adds	r3, #16
 8003222:	4618      	mov	r0, r3
 8003224:	f000 fde0 	bl	8003de8 <xTaskRemoveFromEventList>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00e      	beq.n	800324c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d00b      	beq.n	800324c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	601a      	str	r2, [r3, #0]
 800323a:	e007      	b.n	800324c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800323c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003240:	3301      	adds	r3, #1
 8003242:	b2db      	uxtb	r3, r3
 8003244:	b25a      	sxtb	r2, r3
 8003246:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003248:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800324c:	2301      	movs	r3, #1
 800324e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003250:	e001      	b.n	8003256 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8003252:	2300      	movs	r3, #0
 8003254:	637b      	str	r3, [r7, #52]	@ 0x34
 8003256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003258:	613b      	str	r3, [r7, #16]
	__asm volatile
 800325a:	693b      	ldr	r3, [r7, #16]
 800325c:	f383 8811 	msr	BASEPRI, r3
}
 8003260:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003262:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8003264:	4618      	mov	r0, r3
 8003266:	3738      	adds	r7, #56	@ 0x38
 8003268:	46bd      	mov	sp, r7
 800326a:	bd80      	pop	{r7, pc}

0800326c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003278:	2300      	movs	r3, #0
 800327a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003280:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10d      	bne.n	80032a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d14d      	bne.n	800332e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	4618      	mov	r0, r3
 8003298:	f000 ff88 	bl	80041ac <xTaskPriorityDisinherit>
 800329c:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	605a      	str	r2, [r3, #4]
 80032a4:	e043      	b.n	800332e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d119      	bne.n	80032e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6898      	ldr	r0, [r3, #8]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b4:	461a      	mov	r2, r3
 80032b6:	68b9      	ldr	r1, [r7, #8]
 80032b8:	f002 f824 	bl	8005304 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c4:	441a      	add	r2, r3
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	689a      	ldr	r2, [r3, #8]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d32b      	bcc.n	800332e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	609a      	str	r2, [r3, #8]
 80032de:	e026      	b.n	800332e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	68d8      	ldr	r0, [r3, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e8:	461a      	mov	r2, r3
 80032ea:	68b9      	ldr	r1, [r7, #8]
 80032ec:	f002 f80a 	bl	8005304 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	68da      	ldr	r2, [r3, #12]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f8:	425b      	negs	r3, r3
 80032fa:	441a      	add	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	68da      	ldr	r2, [r3, #12]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	429a      	cmp	r2, r3
 800330a:	d207      	bcs.n	800331c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003314:	425b      	negs	r3, r3
 8003316:	441a      	add	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b02      	cmp	r3, #2
 8003320:	d105      	bne.n	800332e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d002      	beq.n	800332e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	3b01      	subs	r3, #1
 800332c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1c5a      	adds	r2, r3, #1
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003336:	697b      	ldr	r3, [r7, #20]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3718      	adds	r7, #24
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800334e:	2b00      	cmp	r3, #0
 8003350:	d018      	beq.n	8003384 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335a:	441a      	add	r2, r3
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68da      	ldr	r2, [r3, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	429a      	cmp	r2, r3
 800336a:	d303      	bcc.n	8003374 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681a      	ldr	r2, [r3, #0]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68d9      	ldr	r1, [r3, #12]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	461a      	mov	r2, r3
 800337e:	6838      	ldr	r0, [r7, #0]
 8003380:	f001 ffc0 	bl	8005304 <memcpy>
	}
}
 8003384:	bf00      	nop
 8003386:	3708      	adds	r7, #8
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003394:	f001 fcaa 	bl	8004cec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800339e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033a0:	e011      	b.n	80033c6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d012      	beq.n	80033d0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	3324      	adds	r3, #36	@ 0x24
 80033ae:	4618      	mov	r0, r3
 80033b0:	f000 fd1a 	bl	8003de8 <xTaskRemoveFromEventList>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d001      	beq.n	80033be <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80033ba:	f000 fdf3 	bl	8003fa4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80033be:	7bfb      	ldrb	r3, [r7, #15]
 80033c0:	3b01      	subs	r3, #1
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80033c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	dce9      	bgt.n	80033a2 <prvUnlockQueue+0x16>
 80033ce:	e000      	b.n	80033d2 <prvUnlockQueue+0x46>
					break;
 80033d0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	22ff      	movs	r2, #255	@ 0xff
 80033d6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80033da:	f001 fcb7 	bl	8004d4c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80033de:	f001 fc85 	bl	8004cec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80033e8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80033ea:	e011      	b.n	8003410 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d012      	beq.n	800341a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	3310      	adds	r3, #16
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fcf5 	bl	8003de8 <xTaskRemoveFromEventList>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d001      	beq.n	8003408 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003404:	f000 fdce 	bl	8003fa4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003408:	7bbb      	ldrb	r3, [r7, #14]
 800340a:	3b01      	subs	r3, #1
 800340c:	b2db      	uxtb	r3, r3
 800340e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003410:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003414:	2b00      	cmp	r3, #0
 8003416:	dce9      	bgt.n	80033ec <prvUnlockQueue+0x60>
 8003418:	e000      	b.n	800341c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800341a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	22ff      	movs	r2, #255	@ 0xff
 8003420:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003424:	f001 fc92 	bl	8004d4c <vPortExitCritical>
}
 8003428:	bf00      	nop
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003438:	f001 fc58 	bl	8004cec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003440:	2b00      	cmp	r3, #0
 8003442:	d102      	bne.n	800344a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003444:	2301      	movs	r3, #1
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	e001      	b.n	800344e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800344a:	2300      	movs	r3, #0
 800344c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800344e:	f001 fc7d 	bl	8004d4c <vPortExitCritical>

	return xReturn;
 8003452:	68fb      	ldr	r3, [r7, #12]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003464:	f001 fc42 	bl	8004cec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003470:	429a      	cmp	r2, r3
 8003472:	d102      	bne.n	800347a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003474:	2301      	movs	r3, #1
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	e001      	b.n	800347e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800347a:	2300      	movs	r3, #0
 800347c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800347e:	f001 fc65 	bl	8004d4c <vPortExitCritical>

	return xReturn;
 8003482:	68fb      	ldr	r3, [r7, #12]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}

0800348c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003496:	2300      	movs	r3, #0
 8003498:	60fb      	str	r3, [r7, #12]
 800349a:	e014      	b.n	80034c6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800349c:	4a0e      	ldr	r2, [pc, #56]	@ (80034d8 <vQueueAddToRegistry+0x4c>)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d10b      	bne.n	80034c0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80034a8:	490b      	ldr	r1, [pc, #44]	@ (80034d8 <vQueueAddToRegistry+0x4c>)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	683a      	ldr	r2, [r7, #0]
 80034ae:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80034b2:	4a09      	ldr	r2, [pc, #36]	@ (80034d8 <vQueueAddToRegistry+0x4c>)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	00db      	lsls	r3, r3, #3
 80034b8:	4413      	add	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80034be:	e006      	b.n	80034ce <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	3301      	adds	r3, #1
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	2b07      	cmp	r3, #7
 80034ca:	d9e7      	bls.n	800349c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80034cc:	bf00      	nop
 80034ce:	bf00      	nop
 80034d0:	3714      	adds	r7, #20
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bc80      	pop	{r7}
 80034d6:	4770      	bx	lr
 80034d8:	20000b4c 	.word	0x20000b4c

080034dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80034ec:	f001 fbfe 	bl	8004cec <vPortEnterCritical>
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80034f6:	b25b      	sxtb	r3, r3
 80034f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034fc:	d103      	bne.n	8003506 <vQueueWaitForMessageRestricted+0x2a>
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	2200      	movs	r2, #0
 8003502:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800350c:	b25b      	sxtb	r3, r3
 800350e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003512:	d103      	bne.n	800351c <vQueueWaitForMessageRestricted+0x40>
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800351c:	f001 fc16 	bl	8004d4c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003524:	2b00      	cmp	r3, #0
 8003526:	d106      	bne.n	8003536 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	3324      	adds	r3, #36	@ 0x24
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	68b9      	ldr	r1, [r7, #8]
 8003530:	4618      	mov	r0, r3
 8003532:	f000 fc2d 	bl	8003d90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003536:	6978      	ldr	r0, [r7, #20]
 8003538:	f7ff ff28 	bl	800338c <prvUnlockQueue>
	}
 800353c:	bf00      	nop
 800353e:	3718      	adds	r7, #24
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003544:	b580      	push	{r7, lr}
 8003546:	b08e      	sub	sp, #56	@ 0x38
 8003548:	af04      	add	r7, sp, #16
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10b      	bne.n	8003570 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	623b      	str	r3, [r7, #32]
}
 800356a:	bf00      	nop
 800356c:	bf00      	nop
 800356e:	e7fd      	b.n	800356c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10b      	bne.n	800358e <xTaskCreateStatic+0x4a>
	__asm volatile
 8003576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800357a:	f383 8811 	msr	BASEPRI, r3
 800357e:	f3bf 8f6f 	isb	sy
 8003582:	f3bf 8f4f 	dsb	sy
 8003586:	61fb      	str	r3, [r7, #28]
}
 8003588:	bf00      	nop
 800358a:	bf00      	nop
 800358c:	e7fd      	b.n	800358a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800358e:	2354      	movs	r3, #84	@ 0x54
 8003590:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	2b54      	cmp	r3, #84	@ 0x54
 8003596:	d00b      	beq.n	80035b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800359c:	f383 8811 	msr	BASEPRI, r3
 80035a0:	f3bf 8f6f 	isb	sy
 80035a4:	f3bf 8f4f 	dsb	sy
 80035a8:	61bb      	str	r3, [r7, #24]
}
 80035aa:	bf00      	nop
 80035ac:	bf00      	nop
 80035ae:	e7fd      	b.n	80035ac <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80035b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d01e      	beq.n	80035f4 <xTaskCreateStatic+0xb0>
 80035b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d01b      	beq.n	80035f4 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035be:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035c4:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80035c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c8:	2202      	movs	r2, #2
 80035ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80035ce:	2300      	movs	r3, #0
 80035d0:	9303      	str	r3, [sp, #12]
 80035d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035d4:	9302      	str	r3, [sp, #8]
 80035d6:	f107 0314 	add.w	r3, r7, #20
 80035da:	9301      	str	r3, [sp, #4]
 80035dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035de:	9300      	str	r3, [sp, #0]
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	68b9      	ldr	r1, [r7, #8]
 80035e6:	68f8      	ldr	r0, [r7, #12]
 80035e8:	f000 f850 	bl	800368c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80035ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80035ee:	f000 f8cd 	bl	800378c <prvAddNewTaskToReadyList>
 80035f2:	e001      	b.n	80035f8 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 80035f4:	2300      	movs	r3, #0
 80035f6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80035f8:	697b      	ldr	r3, [r7, #20]
	}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3728      	adds	r7, #40	@ 0x28
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}

08003602 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003602:	b580      	push	{r7, lr}
 8003604:	b08c      	sub	sp, #48	@ 0x30
 8003606:	af04      	add	r7, sp, #16
 8003608:	60f8      	str	r0, [r7, #12]
 800360a:	60b9      	str	r1, [r7, #8]
 800360c:	603b      	str	r3, [r7, #0]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003612:	88fb      	ldrh	r3, [r7, #6]
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4618      	mov	r0, r3
 8003618:	f001 fc6a 	bl	8004ef0 <pvPortMalloc>
 800361c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00e      	beq.n	8003642 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003624:	2054      	movs	r0, #84	@ 0x54
 8003626:	f001 fc63 	bl	8004ef0 <pvPortMalloc>
 800362a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d003      	beq.n	800363a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	631a      	str	r2, [r3, #48]	@ 0x30
 8003638:	e005      	b.n	8003646 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800363a:	6978      	ldr	r0, [r7, #20]
 800363c:	f001 fd20 	bl	8005080 <vPortFree>
 8003640:	e001      	b.n	8003646 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003642:	2300      	movs	r3, #0
 8003644:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d017      	beq.n	800367c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003654:	88fa      	ldrh	r2, [r7, #6]
 8003656:	2300      	movs	r3, #0
 8003658:	9303      	str	r3, [sp, #12]
 800365a:	69fb      	ldr	r3, [r7, #28]
 800365c:	9302      	str	r3, [sp, #8]
 800365e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003660:	9301      	str	r3, [sp, #4]
 8003662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	68b9      	ldr	r1, [r7, #8]
 800366a:	68f8      	ldr	r0, [r7, #12]
 800366c:	f000 f80e 	bl	800368c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003670:	69f8      	ldr	r0, [r7, #28]
 8003672:	f000 f88b 	bl	800378c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003676:	2301      	movs	r3, #1
 8003678:	61bb      	str	r3, [r7, #24]
 800367a:	e002      	b.n	8003682 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800367c:	f04f 33ff 	mov.w	r3, #4294967295
 8003680:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003682:	69bb      	ldr	r3, [r7, #24]
	}
 8003684:	4618      	mov	r0, r3
 8003686:	3720      	adds	r7, #32
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}

0800368c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	60b9      	str	r1, [r7, #8]
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800369a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80036a4:	3b01      	subs	r3, #1
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	f023 0307 	bic.w	r3, r3, #7
 80036b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	f003 0307 	and.w	r3, r3, #7
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d00b      	beq.n	80036d6 <prvInitialiseNewTask+0x4a>
	__asm volatile
 80036be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c2:	f383 8811 	msr	BASEPRI, r3
 80036c6:	f3bf 8f6f 	isb	sy
 80036ca:	f3bf 8f4f 	dsb	sy
 80036ce:	617b      	str	r3, [r7, #20]
}
 80036d0:	bf00      	nop
 80036d2:	bf00      	nop
 80036d4:	e7fd      	b.n	80036d2 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036d6:	2300      	movs	r3, #0
 80036d8:	61fb      	str	r3, [r7, #28]
 80036da:	e012      	b.n	8003702 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	69fb      	ldr	r3, [r7, #28]
 80036e0:	4413      	add	r3, r2
 80036e2:	7819      	ldrb	r1, [r3, #0]
 80036e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	4413      	add	r3, r2
 80036ea:	3334      	adds	r3, #52	@ 0x34
 80036ec:	460a      	mov	r2, r1
 80036ee:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	69fb      	ldr	r3, [r7, #28]
 80036f4:	4413      	add	r3, r2
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d006      	beq.n	800370a <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	3301      	adds	r3, #1
 8003700:	61fb      	str	r3, [r7, #28]
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	2b0f      	cmp	r3, #15
 8003706:	d9e9      	bls.n	80036dc <prvInitialiseNewTask+0x50>
 8003708:	e000      	b.n	800370c <prvInitialiseNewTask+0x80>
		{
			break;
 800370a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800370c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370e:	2200      	movs	r2, #0
 8003710:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003716:	2b06      	cmp	r3, #6
 8003718:	d901      	bls.n	800371e <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800371a:	2306      	movs	r3, #6
 800371c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800371e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003720:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003722:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003726:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003728:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800372a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372c:	2200      	movs	r2, #0
 800372e:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003732:	3304      	adds	r3, #4
 8003734:	4618      	mov	r0, r3
 8003736:	f7ff f8c2 	bl	80028be <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800373a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800373c:	3318      	adds	r3, #24
 800373e:	4618      	mov	r0, r3
 8003740:	f7ff f8bd 	bl	80028be <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003748:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800374a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374c:	f1c3 0207 	rsb	r2, r3, #7
 8003750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003752:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003758:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800375a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375c:	2200      	movs	r2, #0
 800375e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003762:	2200      	movs	r2, #0
 8003764:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003768:	683a      	ldr	r2, [r7, #0]
 800376a:	68f9      	ldr	r1, [r7, #12]
 800376c:	69b8      	ldr	r0, [r7, #24]
 800376e:	f001 f9c9 	bl	8004b04 <pxPortInitialiseStack>
 8003772:	4602      	mov	r2, r0
 8003774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003776:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800377e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003780:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003782:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003784:	bf00      	nop
 8003786:	3720      	adds	r7, #32
 8003788:	46bd      	mov	sp, r7
 800378a:	bd80      	pop	{r7, pc}

0800378c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003794:	f001 faaa 	bl	8004cec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003798:	4b2a      	ldr	r3, [pc, #168]	@ (8003844 <prvAddNewTaskToReadyList+0xb8>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	3301      	adds	r3, #1
 800379e:	4a29      	ldr	r2, [pc, #164]	@ (8003844 <prvAddNewTaskToReadyList+0xb8>)
 80037a0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80037a2:	4b29      	ldr	r3, [pc, #164]	@ (8003848 <prvAddNewTaskToReadyList+0xbc>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d109      	bne.n	80037be <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80037aa:	4a27      	ldr	r2, [pc, #156]	@ (8003848 <prvAddNewTaskToReadyList+0xbc>)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037b0:	4b24      	ldr	r3, [pc, #144]	@ (8003844 <prvAddNewTaskToReadyList+0xb8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d110      	bne.n	80037da <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037b8:	f000 fc18 	bl	8003fec <prvInitialiseTaskLists>
 80037bc:	e00d      	b.n	80037da <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037be:	4b23      	ldr	r3, [pc, #140]	@ (800384c <prvAddNewTaskToReadyList+0xc0>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d109      	bne.n	80037da <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037c6:	4b20      	ldr	r3, [pc, #128]	@ (8003848 <prvAddNewTaskToReadyList+0xbc>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d802      	bhi.n	80037da <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037d4:	4a1c      	ldr	r2, [pc, #112]	@ (8003848 <prvAddNewTaskToReadyList+0xbc>)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037da:	4b1d      	ldr	r3, [pc, #116]	@ (8003850 <prvAddNewTaskToReadyList+0xc4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3301      	adds	r3, #1
 80037e0:	4a1b      	ldr	r2, [pc, #108]	@ (8003850 <prvAddNewTaskToReadyList+0xc4>)
 80037e2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e8:	2201      	movs	r2, #1
 80037ea:	409a      	lsls	r2, r3
 80037ec:	4b19      	ldr	r3, [pc, #100]	@ (8003854 <prvAddNewTaskToReadyList+0xc8>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	4a18      	ldr	r2, [pc, #96]	@ (8003854 <prvAddNewTaskToReadyList+0xc8>)
 80037f4:	6013      	str	r3, [r2, #0]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	4a15      	ldr	r2, [pc, #84]	@ (8003858 <prvAddNewTaskToReadyList+0xcc>)
 8003804:	441a      	add	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	3304      	adds	r3, #4
 800380a:	4619      	mov	r1, r3
 800380c:	4610      	mov	r0, r2
 800380e:	f7ff f862 	bl	80028d6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003812:	f001 fa9b 	bl	8004d4c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003816:	4b0d      	ldr	r3, [pc, #52]	@ (800384c <prvAddNewTaskToReadyList+0xc0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00e      	beq.n	800383c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800381e:	4b0a      	ldr	r3, [pc, #40]	@ (8003848 <prvAddNewTaskToReadyList+0xbc>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003828:	429a      	cmp	r2, r3
 800382a:	d207      	bcs.n	800383c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800382c:	4b0b      	ldr	r3, [pc, #44]	@ (800385c <prvAddNewTaskToReadyList+0xd0>)
 800382e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003832:	601a      	str	r2, [r3, #0]
 8003834:	f3bf 8f4f 	dsb	sy
 8003838:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}
 8003844:	20000c8c 	.word	0x20000c8c
 8003848:	20000b8c 	.word	0x20000b8c
 800384c:	20000c98 	.word	0x20000c98
 8003850:	20000ca8 	.word	0x20000ca8
 8003854:	20000c94 	.word	0x20000c94
 8003858:	20000b90 	.word	0x20000b90
 800385c:	e000ed04 	.word	0xe000ed04

08003860 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003860:	b580      	push	{r7, lr}
 8003862:	b084      	sub	sp, #16
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d018      	beq.n	80038a4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003872:	4b14      	ldr	r3, [pc, #80]	@ (80038c4 <vTaskDelay+0x64>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00b      	beq.n	8003892 <vTaskDelay+0x32>
	__asm volatile
 800387a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800387e:	f383 8811 	msr	BASEPRI, r3
 8003882:	f3bf 8f6f 	isb	sy
 8003886:	f3bf 8f4f 	dsb	sy
 800388a:	60bb      	str	r3, [r7, #8]
}
 800388c:	bf00      	nop
 800388e:	bf00      	nop
 8003890:	e7fd      	b.n	800388e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003892:	f000 f883 	bl	800399c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003896:	2100      	movs	r1, #0
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f000 fd0f 	bl	80042bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800389e:	f000 f88b 	bl	80039b8 <xTaskResumeAll>
 80038a2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d107      	bne.n	80038ba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80038aa:	4b07      	ldr	r3, [pc, #28]	@ (80038c8 <vTaskDelay+0x68>)
 80038ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038ba:	bf00      	nop
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
 80038c2:	bf00      	nop
 80038c4:	20000cb4 	.word	0x20000cb4
 80038c8:	e000ed04 	.word	0xe000ed04

080038cc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b08a      	sub	sp, #40	@ 0x28
 80038d0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038da:	463a      	mov	r2, r7
 80038dc:	1d39      	adds	r1, r7, #4
 80038de:	f107 0308 	add.w	r3, r7, #8
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7fc fc34 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038e8:	6839      	ldr	r1, [r7, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	9202      	str	r2, [sp, #8]
 80038f0:	9301      	str	r3, [sp, #4]
 80038f2:	2300      	movs	r3, #0
 80038f4:	9300      	str	r3, [sp, #0]
 80038f6:	2300      	movs	r3, #0
 80038f8:	460a      	mov	r2, r1
 80038fa:	4922      	ldr	r1, [pc, #136]	@ (8003984 <vTaskStartScheduler+0xb8>)
 80038fc:	4822      	ldr	r0, [pc, #136]	@ (8003988 <vTaskStartScheduler+0xbc>)
 80038fe:	f7ff fe21 	bl	8003544 <xTaskCreateStatic>
 8003902:	4603      	mov	r3, r0
 8003904:	4a21      	ldr	r2, [pc, #132]	@ (800398c <vTaskStartScheduler+0xc0>)
 8003906:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003908:	4b20      	ldr	r3, [pc, #128]	@ (800398c <vTaskStartScheduler+0xc0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d002      	beq.n	8003916 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003910:	2301      	movs	r3, #1
 8003912:	617b      	str	r3, [r7, #20]
 8003914:	e001      	b.n	800391a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003916:	2300      	movs	r3, #0
 8003918:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	2b01      	cmp	r3, #1
 800391e:	d102      	bne.n	8003926 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003920:	f000 fd32 	bl	8004388 <xTimerCreateTimerTask>
 8003924:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d116      	bne.n	800395a <vTaskStartScheduler+0x8e>
	__asm volatile
 800392c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003930:	f383 8811 	msr	BASEPRI, r3
 8003934:	f3bf 8f6f 	isb	sy
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	613b      	str	r3, [r7, #16]
}
 800393e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003940:	4b13      	ldr	r3, [pc, #76]	@ (8003990 <vTaskStartScheduler+0xc4>)
 8003942:	f04f 32ff 	mov.w	r2, #4294967295
 8003946:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003948:	4b12      	ldr	r3, [pc, #72]	@ (8003994 <vTaskStartScheduler+0xc8>)
 800394a:	2201      	movs	r2, #1
 800394c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 800394e:	4b12      	ldr	r3, [pc, #72]	@ (8003998 <vTaskStartScheduler+0xcc>)
 8003950:	2200      	movs	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003954:	f001 f958 	bl	8004c08 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003958:	e00f      	b.n	800397a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003960:	d10b      	bne.n	800397a <vTaskStartScheduler+0xae>
	__asm volatile
 8003962:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003966:	f383 8811 	msr	BASEPRI, r3
 800396a:	f3bf 8f6f 	isb	sy
 800396e:	f3bf 8f4f 	dsb	sy
 8003972:	60fb      	str	r3, [r7, #12]
}
 8003974:	bf00      	nop
 8003976:	bf00      	nop
 8003978:	e7fd      	b.n	8003976 <vTaskStartScheduler+0xaa>
}
 800397a:	bf00      	nop
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	080053a8 	.word	0x080053a8
 8003988:	08003fbd 	.word	0x08003fbd
 800398c:	20000cb0 	.word	0x20000cb0
 8003990:	20000cac 	.word	0x20000cac
 8003994:	20000c98 	.word	0x20000c98
 8003998:	20000c90 	.word	0x20000c90

0800399c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80039a0:	4b04      	ldr	r3, [pc, #16]	@ (80039b4 <vTaskSuspendAll+0x18>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3301      	adds	r3, #1
 80039a6:	4a03      	ldr	r2, [pc, #12]	@ (80039b4 <vTaskSuspendAll+0x18>)
 80039a8:	6013      	str	r3, [r2, #0]
}
 80039aa:	bf00      	nop
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bc80      	pop	{r7}
 80039b0:	4770      	bx	lr
 80039b2:	bf00      	nop
 80039b4:	20000cb4 	.word	0x20000cb4

080039b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80039c6:	4b42      	ldr	r3, [pc, #264]	@ (8003ad0 <xTaskResumeAll+0x118>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10b      	bne.n	80039e6 <xTaskResumeAll+0x2e>
	__asm volatile
 80039ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	603b      	str	r3, [r7, #0]
}
 80039e0:	bf00      	nop
 80039e2:	bf00      	nop
 80039e4:	e7fd      	b.n	80039e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039e6:	f001 f981 	bl	8004cec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039ea:	4b39      	ldr	r3, [pc, #228]	@ (8003ad0 <xTaskResumeAll+0x118>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	3b01      	subs	r3, #1
 80039f0:	4a37      	ldr	r2, [pc, #220]	@ (8003ad0 <xTaskResumeAll+0x118>)
 80039f2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039f4:	4b36      	ldr	r3, [pc, #216]	@ (8003ad0 <xTaskResumeAll+0x118>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d161      	bne.n	8003ac0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039fc:	4b35      	ldr	r3, [pc, #212]	@ (8003ad4 <xTaskResumeAll+0x11c>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d05d      	beq.n	8003ac0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a04:	e02e      	b.n	8003a64 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003a06:	4b34      	ldr	r3, [pc, #208]	@ (8003ad8 <xTaskResumeAll+0x120>)
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	3318      	adds	r3, #24
 8003a12:	4618      	mov	r0, r3
 8003a14:	f7fe ffba 	bl	800298c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7fe ffb5 	bl	800298c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a26:	2201      	movs	r2, #1
 8003a28:	409a      	lsls	r2, r3
 8003a2a:	4b2c      	ldr	r3, [pc, #176]	@ (8003adc <xTaskResumeAll+0x124>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	4a2a      	ldr	r2, [pc, #168]	@ (8003adc <xTaskResumeAll+0x124>)
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4a27      	ldr	r2, [pc, #156]	@ (8003ae0 <xTaskResumeAll+0x128>)
 8003a42:	441a      	add	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	3304      	adds	r3, #4
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f7fe ff43 	bl	80028d6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a54:	4b23      	ldr	r3, [pc, #140]	@ (8003ae4 <xTaskResumeAll+0x12c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d302      	bcc.n	8003a64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a5e:	4b22      	ldr	r3, [pc, #136]	@ (8003ae8 <xTaskResumeAll+0x130>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a64:	4b1c      	ldr	r3, [pc, #112]	@ (8003ad8 <xTaskResumeAll+0x120>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1cc      	bne.n	8003a06 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a72:	f000 fb59 	bl	8004128 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003a76:	4b1d      	ldr	r3, [pc, #116]	@ (8003aec <xTaskResumeAll+0x134>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d010      	beq.n	8003aa4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a82:	f000 f845 	bl	8003b10 <xTaskIncrementTick>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003a8c:	4b16      	ldr	r3, [pc, #88]	@ (8003ae8 <xTaskResumeAll+0x130>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f1      	bne.n	8003a82 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8003a9e:	4b13      	ldr	r3, [pc, #76]	@ (8003aec <xTaskResumeAll+0x134>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003aa4:	4b10      	ldr	r3, [pc, #64]	@ (8003ae8 <xTaskResumeAll+0x130>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d009      	beq.n	8003ac0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003aac:	2301      	movs	r3, #1
 8003aae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8003af0 <xTaskResumeAll+0x138>)
 8003ab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ac0:	f001 f944 	bl	8004d4c <vPortExitCritical>

	return xAlreadyYielded;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20000cb4 	.word	0x20000cb4
 8003ad4:	20000c8c 	.word	0x20000c8c
 8003ad8:	20000c4c 	.word	0x20000c4c
 8003adc:	20000c94 	.word	0x20000c94
 8003ae0:	20000b90 	.word	0x20000b90
 8003ae4:	20000b8c 	.word	0x20000b8c
 8003ae8:	20000ca0 	.word	0x20000ca0
 8003aec:	20000c9c 	.word	0x20000c9c
 8003af0:	e000ed04 	.word	0xe000ed04

08003af4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003afa:	4b04      	ldr	r3, [pc, #16]	@ (8003b0c <xTaskGetTickCount+0x18>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b00:	687b      	ldr	r3, [r7, #4]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bc80      	pop	{r7}
 8003b0a:	4770      	bx	lr
 8003b0c:	20000c90 	.word	0x20000c90

08003b10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b16:	2300      	movs	r3, #0
 8003b18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b1a:	4b51      	ldr	r3, [pc, #324]	@ (8003c60 <xTaskIncrementTick+0x150>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f040 808e 	bne.w	8003c40 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b24:	4b4f      	ldr	r3, [pc, #316]	@ (8003c64 <xTaskIncrementTick+0x154>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3301      	adds	r3, #1
 8003b2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b2c:	4a4d      	ldr	r2, [pc, #308]	@ (8003c64 <xTaskIncrementTick+0x154>)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d121      	bne.n	8003b7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b38:	4b4b      	ldr	r3, [pc, #300]	@ (8003c68 <xTaskIncrementTick+0x158>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00b      	beq.n	8003b5a <xTaskIncrementTick+0x4a>
	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	603b      	str	r3, [r7, #0]
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	e7fd      	b.n	8003b56 <xTaskIncrementTick+0x46>
 8003b5a:	4b43      	ldr	r3, [pc, #268]	@ (8003c68 <xTaskIncrementTick+0x158>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	4b42      	ldr	r3, [pc, #264]	@ (8003c6c <xTaskIncrementTick+0x15c>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a40      	ldr	r2, [pc, #256]	@ (8003c68 <xTaskIncrementTick+0x158>)
 8003b66:	6013      	str	r3, [r2, #0]
 8003b68:	4a40      	ldr	r2, [pc, #256]	@ (8003c6c <xTaskIncrementTick+0x15c>)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6013      	str	r3, [r2, #0]
 8003b6e:	4b40      	ldr	r3, [pc, #256]	@ (8003c70 <xTaskIncrementTick+0x160>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	3301      	adds	r3, #1
 8003b74:	4a3e      	ldr	r2, [pc, #248]	@ (8003c70 <xTaskIncrementTick+0x160>)
 8003b76:	6013      	str	r3, [r2, #0]
 8003b78:	f000 fad6 	bl	8004128 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b7c:	4b3d      	ldr	r3, [pc, #244]	@ (8003c74 <xTaskIncrementTick+0x164>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	693a      	ldr	r2, [r7, #16]
 8003b82:	429a      	cmp	r2, r3
 8003b84:	d34d      	bcc.n	8003c22 <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b86:	4b38      	ldr	r3, [pc, #224]	@ (8003c68 <xTaskIncrementTick+0x158>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d101      	bne.n	8003b94 <xTaskIncrementTick+0x84>
 8003b90:	2301      	movs	r3, #1
 8003b92:	e000      	b.n	8003b96 <xTaskIncrementTick+0x86>
 8003b94:	2300      	movs	r3, #0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d004      	beq.n	8003ba4 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b9a:	4b36      	ldr	r3, [pc, #216]	@ (8003c74 <xTaskIncrementTick+0x164>)
 8003b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba0:	601a      	str	r2, [r3, #0]
					break;
 8003ba2:	e03e      	b.n	8003c22 <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003ba4:	4b30      	ldr	r3, [pc, #192]	@ (8003c68 <xTaskIncrementTick+0x158>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d203      	bcs.n	8003bc4 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003bbc:	4a2d      	ldr	r2, [pc, #180]	@ (8003c74 <xTaskIncrementTick+0x164>)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6013      	str	r3, [r2, #0]
						break;
 8003bc2:	e02e      	b.n	8003c22 <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	3304      	adds	r3, #4
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fe fedf 	bl	800298c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d004      	beq.n	8003be0 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	3318      	adds	r3, #24
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f7fe fed6 	bl	800298c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be4:	2201      	movs	r2, #1
 8003be6:	409a      	lsls	r2, r3
 8003be8:	4b23      	ldr	r3, [pc, #140]	@ (8003c78 <xTaskIncrementTick+0x168>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	4a22      	ldr	r2, [pc, #136]	@ (8003c78 <xTaskIncrementTick+0x168>)
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8003c7c <xTaskIncrementTick+0x16c>)
 8003c00:	441a      	add	r2, r3
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	3304      	adds	r3, #4
 8003c06:	4619      	mov	r1, r3
 8003c08:	4610      	mov	r0, r2
 8003c0a:	f7fe fe64 	bl	80028d6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c12:	4b1b      	ldr	r3, [pc, #108]	@ (8003c80 <xTaskIncrementTick+0x170>)
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d3b4      	bcc.n	8003b86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c20:	e7b1      	b.n	8003b86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c22:	4b17      	ldr	r3, [pc, #92]	@ (8003c80 <xTaskIncrementTick+0x170>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c28:	4914      	ldr	r1, [pc, #80]	@ (8003c7c <xTaskIncrementTick+0x16c>)
 8003c2a:	4613      	mov	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	4413      	add	r3, r2
 8003c30:	009b      	lsls	r3, r3, #2
 8003c32:	440b      	add	r3, r1
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d907      	bls.n	8003c4a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e004      	b.n	8003c4a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003c40:	4b10      	ldr	r3, [pc, #64]	@ (8003c84 <xTaskIncrementTick+0x174>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	3301      	adds	r3, #1
 8003c46:	4a0f      	ldr	r2, [pc, #60]	@ (8003c84 <xTaskIncrementTick+0x174>)
 8003c48:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003c4a:	4b0f      	ldr	r3, [pc, #60]	@ (8003c88 <xTaskIncrementTick+0x178>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d001      	beq.n	8003c56 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8003c52:	2301      	movs	r3, #1
 8003c54:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003c56:	697b      	ldr	r3, [r7, #20]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	3718      	adds	r7, #24
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bd80      	pop	{r7, pc}
 8003c60:	20000cb4 	.word	0x20000cb4
 8003c64:	20000c90 	.word	0x20000c90
 8003c68:	20000c44 	.word	0x20000c44
 8003c6c:	20000c48 	.word	0x20000c48
 8003c70:	20000ca4 	.word	0x20000ca4
 8003c74:	20000cac 	.word	0x20000cac
 8003c78:	20000c94 	.word	0x20000c94
 8003c7c:	20000b90 	.word	0x20000b90
 8003c80:	20000b8c 	.word	0x20000b8c
 8003c84:	20000c9c 	.word	0x20000c9c
 8003c88:	20000ca0 	.word	0x20000ca0

08003c8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b087      	sub	sp, #28
 8003c90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c92:	4b27      	ldr	r3, [pc, #156]	@ (8003d30 <vTaskSwitchContext+0xa4>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d003      	beq.n	8003ca2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c9a:	4b26      	ldr	r3, [pc, #152]	@ (8003d34 <vTaskSwitchContext+0xa8>)
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003ca0:	e040      	b.n	8003d24 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003ca2:	4b24      	ldr	r3, [pc, #144]	@ (8003d34 <vTaskSwitchContext+0xa8>)
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003ca8:	4b23      	ldr	r3, [pc, #140]	@ (8003d38 <vTaskSwitchContext+0xac>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	fab3 f383 	clz	r3, r3
 8003cb4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003cb6:	7afb      	ldrb	r3, [r7, #11]
 8003cb8:	f1c3 031f 	rsb	r3, r3, #31
 8003cbc:	617b      	str	r3, [r7, #20]
 8003cbe:	491f      	ldr	r1, [pc, #124]	@ (8003d3c <vTaskSwitchContext+0xb0>)
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	4413      	add	r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d10b      	bne.n	8003cea <vTaskSwitchContext+0x5e>
	__asm volatile
 8003cd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd6:	f383 8811 	msr	BASEPRI, r3
 8003cda:	f3bf 8f6f 	isb	sy
 8003cde:	f3bf 8f4f 	dsb	sy
 8003ce2:	607b      	str	r3, [r7, #4]
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop
 8003ce8:	e7fd      	b.n	8003ce6 <vTaskSwitchContext+0x5a>
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4613      	mov	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4a11      	ldr	r2, [pc, #68]	@ (8003d3c <vTaskSwitchContext+0xb0>)
 8003cf6:	4413      	add	r3, r2
 8003cf8:	613b      	str	r3, [r7, #16]
 8003cfa:	693b      	ldr	r3, [r7, #16]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	605a      	str	r2, [r3, #4]
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	3308      	adds	r3, #8
 8003d0c:	429a      	cmp	r2, r3
 8003d0e:	d104      	bne.n	8003d1a <vTaskSwitchContext+0x8e>
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	605a      	str	r2, [r3, #4]
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	4a07      	ldr	r2, [pc, #28]	@ (8003d40 <vTaskSwitchContext+0xb4>)
 8003d22:	6013      	str	r3, [r2, #0]
}
 8003d24:	bf00      	nop
 8003d26:	371c      	adds	r7, #28
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bc80      	pop	{r7}
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	20000cb4 	.word	0x20000cb4
 8003d34:	20000ca0 	.word	0x20000ca0
 8003d38:	20000c94 	.word	0x20000c94
 8003d3c:	20000b90 	.word	0x20000b90
 8003d40:	20000b8c 	.word	0x20000b8c

08003d44 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
 8003d4c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d10b      	bne.n	8003d6c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	60fb      	str	r3, [r7, #12]
}
 8003d66:	bf00      	nop
 8003d68:	bf00      	nop
 8003d6a:	e7fd      	b.n	8003d68 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d6c:	4b07      	ldr	r3, [pc, #28]	@ (8003d8c <vTaskPlaceOnEventList+0x48>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	3318      	adds	r3, #24
 8003d72:	4619      	mov	r1, r3
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7fe fdd1 	bl	800291c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d7a:	2101      	movs	r1, #1
 8003d7c:	6838      	ldr	r0, [r7, #0]
 8003d7e:	f000 fa9d 	bl	80042bc <prvAddCurrentTaskToDelayedList>
}
 8003d82:	bf00      	nop
 8003d84:	3710      	adds	r7, #16
 8003d86:	46bd      	mov	sp, r7
 8003d88:	bd80      	pop	{r7, pc}
 8003d8a:	bf00      	nop
 8003d8c:	20000b8c 	.word	0x20000b8c

08003d90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b086      	sub	sp, #24
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	60f8      	str	r0, [r7, #12]
 8003d98:	60b9      	str	r1, [r7, #8]
 8003d9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10b      	bne.n	8003dba <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	617b      	str	r3, [r7, #20]
}
 8003db4:	bf00      	nop
 8003db6:	bf00      	nop
 8003db8:	e7fd      	b.n	8003db6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dba:	4b0a      	ldr	r3, [pc, #40]	@ (8003de4 <vTaskPlaceOnEventListRestricted+0x54>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3318      	adds	r3, #24
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f7fe fd87 	bl	80028d6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d002      	beq.n	8003dd4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003dce:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003dd4:	6879      	ldr	r1, [r7, #4]
 8003dd6:	68b8      	ldr	r0, [r7, #8]
 8003dd8:	f000 fa70 	bl	80042bc <prvAddCurrentTaskToDelayedList>
	}
 8003ddc:	bf00      	nop
 8003dde:	3718      	adds	r7, #24
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	20000b8c 	.word	0x20000b8c

08003de8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b086      	sub	sp, #24
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	68db      	ldr	r3, [r3, #12]
 8003df6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10b      	bne.n	8003e16 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	60fb      	str	r3, [r7, #12]
}
 8003e10:	bf00      	nop
 8003e12:	bf00      	nop
 8003e14:	e7fd      	b.n	8003e12 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	3318      	adds	r3, #24
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fe fdb6 	bl	800298c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e20:	4b1d      	ldr	r3, [pc, #116]	@ (8003e98 <xTaskRemoveFromEventList+0xb0>)
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d11c      	bne.n	8003e62 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fe fdad 	bl	800298c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e36:	2201      	movs	r2, #1
 8003e38:	409a      	lsls	r2, r3
 8003e3a:	4b18      	ldr	r3, [pc, #96]	@ (8003e9c <xTaskRemoveFromEventList+0xb4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	4a16      	ldr	r2, [pc, #88]	@ (8003e9c <xTaskRemoveFromEventList+0xb4>)
 8003e42:	6013      	str	r3, [r2, #0]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e48:	4613      	mov	r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	4a13      	ldr	r2, [pc, #76]	@ (8003ea0 <xTaskRemoveFromEventList+0xb8>)
 8003e52:	441a      	add	r2, r3
 8003e54:	693b      	ldr	r3, [r7, #16]
 8003e56:	3304      	adds	r3, #4
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4610      	mov	r0, r2
 8003e5c:	f7fe fd3b 	bl	80028d6 <vListInsertEnd>
 8003e60:	e005      	b.n	8003e6e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	3318      	adds	r3, #24
 8003e66:	4619      	mov	r1, r3
 8003e68:	480e      	ldr	r0, [pc, #56]	@ (8003ea4 <xTaskRemoveFromEventList+0xbc>)
 8003e6a:	f7fe fd34 	bl	80028d6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea8 <xTaskRemoveFromEventList+0xc0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d905      	bls.n	8003e88 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e80:	4b0a      	ldr	r3, [pc, #40]	@ (8003eac <xTaskRemoveFromEventList+0xc4>)
 8003e82:	2201      	movs	r2, #1
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	e001      	b.n	8003e8c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8003e8c:	697b      	ldr	r3, [r7, #20]
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3718      	adds	r7, #24
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	20000cb4 	.word	0x20000cb4
 8003e9c:	20000c94 	.word	0x20000c94
 8003ea0:	20000b90 	.word	0x20000b90
 8003ea4:	20000c4c 	.word	0x20000c4c
 8003ea8:	20000b8c 	.word	0x20000b8c
 8003eac:	20000ca0 	.word	0x20000ca0

08003eb0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	b083      	sub	sp, #12
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003eb8:	4b06      	ldr	r3, [pc, #24]	@ (8003ed4 <vTaskInternalSetTimeOutState+0x24>)
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ec0:	4b05      	ldr	r3, [pc, #20]	@ (8003ed8 <vTaskInternalSetTimeOutState+0x28>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	605a      	str	r2, [r3, #4]
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bc80      	pop	{r7}
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	20000ca4 	.word	0x20000ca4
 8003ed8:	20000c90 	.word	0x20000c90

08003edc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b088      	sub	sp, #32
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10b      	bne.n	8003f04 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8003eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef0:	f383 8811 	msr	BASEPRI, r3
 8003ef4:	f3bf 8f6f 	isb	sy
 8003ef8:	f3bf 8f4f 	dsb	sy
 8003efc:	613b      	str	r3, [r7, #16]
}
 8003efe:	bf00      	nop
 8003f00:	bf00      	nop
 8003f02:	e7fd      	b.n	8003f00 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10b      	bne.n	8003f22 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8003f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	60fb      	str	r3, [r7, #12]
}
 8003f1c:	bf00      	nop
 8003f1e:	bf00      	nop
 8003f20:	e7fd      	b.n	8003f1e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003f22:	f000 fee3 	bl	8004cec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f26:	4b1d      	ldr	r3, [pc, #116]	@ (8003f9c <xTaskCheckForTimeOut+0xc0>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f3e:	d102      	bne.n	8003f46 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f40:	2300      	movs	r3, #0
 8003f42:	61fb      	str	r3, [r7, #28]
 8003f44:	e023      	b.n	8003f8e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	4b15      	ldr	r3, [pc, #84]	@ (8003fa0 <xTaskCheckForTimeOut+0xc4>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d007      	beq.n	8003f62 <xTaskCheckForTimeOut+0x86>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d302      	bcc.n	8003f62 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	61fb      	str	r3, [r7, #28]
 8003f60:	e015      	b.n	8003f8e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d20b      	bcs.n	8003f84 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	1ad2      	subs	r2, r2, r3
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff ff99 	bl	8003eb0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	e004      	b.n	8003f8e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2200      	movs	r2, #0
 8003f88:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f8a:	2301      	movs	r3, #1
 8003f8c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f8e:	f000 fedd 	bl	8004d4c <vPortExitCritical>

	return xReturn;
 8003f92:	69fb      	ldr	r3, [r7, #28]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3720      	adds	r7, #32
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20000c90 	.word	0x20000c90
 8003fa0:	20000ca4 	.word	0x20000ca4

08003fa4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003fa8:	4b03      	ldr	r3, [pc, #12]	@ (8003fb8 <vTaskMissedYield+0x14>)
 8003faa:	2201      	movs	r2, #1
 8003fac:	601a      	str	r2, [r3, #0]
}
 8003fae:	bf00      	nop
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bc80      	pop	{r7}
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	20000ca0 	.word	0x20000ca0

08003fbc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b082      	sub	sp, #8
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fc4:	f000 f852 	bl	800406c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fc8:	4b06      	ldr	r3, [pc, #24]	@ (8003fe4 <prvIdleTask+0x28>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b01      	cmp	r3, #1
 8003fce:	d9f9      	bls.n	8003fc4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003fd0:	4b05      	ldr	r3, [pc, #20]	@ (8003fe8 <prvIdleTask+0x2c>)
 8003fd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003fe0:	e7f0      	b.n	8003fc4 <prvIdleTask+0x8>
 8003fe2:	bf00      	nop
 8003fe4:	20000b90 	.word	0x20000b90
 8003fe8:	e000ed04 	.word	0xe000ed04

08003fec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	607b      	str	r3, [r7, #4]
 8003ff6:	e00c      	b.n	8004012 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ff8:	687a      	ldr	r2, [r7, #4]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4a12      	ldr	r2, [pc, #72]	@ (800404c <prvInitialiseTaskLists+0x60>)
 8004004:	4413      	add	r3, r2
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe fc3a 	bl	8002880 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	3301      	adds	r3, #1
 8004010:	607b      	str	r3, [r7, #4]
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2b06      	cmp	r3, #6
 8004016:	d9ef      	bls.n	8003ff8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004018:	480d      	ldr	r0, [pc, #52]	@ (8004050 <prvInitialiseTaskLists+0x64>)
 800401a:	f7fe fc31 	bl	8002880 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800401e:	480d      	ldr	r0, [pc, #52]	@ (8004054 <prvInitialiseTaskLists+0x68>)
 8004020:	f7fe fc2e 	bl	8002880 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004024:	480c      	ldr	r0, [pc, #48]	@ (8004058 <prvInitialiseTaskLists+0x6c>)
 8004026:	f7fe fc2b 	bl	8002880 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800402a:	480c      	ldr	r0, [pc, #48]	@ (800405c <prvInitialiseTaskLists+0x70>)
 800402c:	f7fe fc28 	bl	8002880 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004030:	480b      	ldr	r0, [pc, #44]	@ (8004060 <prvInitialiseTaskLists+0x74>)
 8004032:	f7fe fc25 	bl	8002880 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004036:	4b0b      	ldr	r3, [pc, #44]	@ (8004064 <prvInitialiseTaskLists+0x78>)
 8004038:	4a05      	ldr	r2, [pc, #20]	@ (8004050 <prvInitialiseTaskLists+0x64>)
 800403a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800403c:	4b0a      	ldr	r3, [pc, #40]	@ (8004068 <prvInitialiseTaskLists+0x7c>)
 800403e:	4a05      	ldr	r2, [pc, #20]	@ (8004054 <prvInitialiseTaskLists+0x68>)
 8004040:	601a      	str	r2, [r3, #0]
}
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	20000b90 	.word	0x20000b90
 8004050:	20000c1c 	.word	0x20000c1c
 8004054:	20000c30 	.word	0x20000c30
 8004058:	20000c4c 	.word	0x20000c4c
 800405c:	20000c60 	.word	0x20000c60
 8004060:	20000c78 	.word	0x20000c78
 8004064:	20000c44 	.word	0x20000c44
 8004068:	20000c48 	.word	0x20000c48

0800406c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004072:	e019      	b.n	80040a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004074:	f000 fe3a 	bl	8004cec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004078:	4b10      	ldr	r3, [pc, #64]	@ (80040bc <prvCheckTasksWaitingTermination+0x50>)
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	3304      	adds	r3, #4
 8004084:	4618      	mov	r0, r3
 8004086:	f7fe fc81 	bl	800298c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800408a:	4b0d      	ldr	r3, [pc, #52]	@ (80040c0 <prvCheckTasksWaitingTermination+0x54>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	3b01      	subs	r3, #1
 8004090:	4a0b      	ldr	r2, [pc, #44]	@ (80040c0 <prvCheckTasksWaitingTermination+0x54>)
 8004092:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004094:	4b0b      	ldr	r3, [pc, #44]	@ (80040c4 <prvCheckTasksWaitingTermination+0x58>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3b01      	subs	r3, #1
 800409a:	4a0a      	ldr	r2, [pc, #40]	@ (80040c4 <prvCheckTasksWaitingTermination+0x58>)
 800409c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800409e:	f000 fe55 	bl	8004d4c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f810 	bl	80040c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040a8:	4b06      	ldr	r3, [pc, #24]	@ (80040c4 <prvCheckTasksWaitingTermination+0x58>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1e1      	bne.n	8004074 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040b0:	bf00      	nop
 80040b2:	bf00      	nop
 80040b4:	3708      	adds	r7, #8
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20000c60 	.word	0x20000c60
 80040c0:	20000c8c 	.word	0x20000c8c
 80040c4:	20000c74 	.word	0x20000c74

080040c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b084      	sub	sp, #16
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d108      	bne.n	80040ec <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040de:	4618      	mov	r0, r3
 80040e0:	f000 ffce 	bl	8005080 <vPortFree>
				vPortFree( pxTCB );
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 ffcb 	bl	8005080 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040ea:	e019      	b.n	8004120 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d103      	bne.n	80040fe <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80040f6:	6878      	ldr	r0, [r7, #4]
 80040f8:	f000 ffc2 	bl	8005080 <vPortFree>
	}
 80040fc:	e010      	b.n	8004120 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004104:	2b02      	cmp	r3, #2
 8004106:	d00b      	beq.n	8004120 <prvDeleteTCB+0x58>
	__asm volatile
 8004108:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800410c:	f383 8811 	msr	BASEPRI, r3
 8004110:	f3bf 8f6f 	isb	sy
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	60fb      	str	r3, [r7, #12]
}
 800411a:	bf00      	nop
 800411c:	bf00      	nop
 800411e:	e7fd      	b.n	800411c <prvDeleteTCB+0x54>
	}
 8004120:	bf00      	nop
 8004122:	3710      	adds	r7, #16
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800412e:	4b0e      	ldr	r3, [pc, #56]	@ (8004168 <prvResetNextTaskUnblockTime+0x40>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <prvResetNextTaskUnblockTime+0x14>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <prvResetNextTaskUnblockTime+0x16>
 800413c:	2300      	movs	r3, #0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d004      	beq.n	800414c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004142:	4b0a      	ldr	r3, [pc, #40]	@ (800416c <prvResetNextTaskUnblockTime+0x44>)
 8004144:	f04f 32ff 	mov.w	r2, #4294967295
 8004148:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800414a:	e008      	b.n	800415e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800414c:	4b06      	ldr	r3, [pc, #24]	@ (8004168 <prvResetNextTaskUnblockTime+0x40>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68db      	ldr	r3, [r3, #12]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	4a04      	ldr	r2, [pc, #16]	@ (800416c <prvResetNextTaskUnblockTime+0x44>)
 800415c:	6013      	str	r3, [r2, #0]
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	bc80      	pop	{r7}
 8004166:	4770      	bx	lr
 8004168:	20000c44 	.word	0x20000c44
 800416c:	20000cac 	.word	0x20000cac

08004170 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004176:	4b0b      	ldr	r3, [pc, #44]	@ (80041a4 <xTaskGetSchedulerState+0x34>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800417e:	2301      	movs	r3, #1
 8004180:	607b      	str	r3, [r7, #4]
 8004182:	e008      	b.n	8004196 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004184:	4b08      	ldr	r3, [pc, #32]	@ (80041a8 <xTaskGetSchedulerState+0x38>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	2b00      	cmp	r3, #0
 800418a:	d102      	bne.n	8004192 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800418c:	2302      	movs	r3, #2
 800418e:	607b      	str	r3, [r7, #4]
 8004190:	e001      	b.n	8004196 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004192:	2300      	movs	r3, #0
 8004194:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004196:	687b      	ldr	r3, [r7, #4]
	}
 8004198:	4618      	mov	r0, r3
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20000c98 	.word	0x20000c98
 80041a8:	20000cb4 	.word	0x20000cb4

080041ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80041b8:	2300      	movs	r3, #0
 80041ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d070      	beq.n	80042a4 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80041c2:	4b3b      	ldr	r3, [pc, #236]	@ (80042b0 <xTaskPriorityDisinherit+0x104>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	693a      	ldr	r2, [r7, #16]
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d00b      	beq.n	80041e4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80041cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041d0:	f383 8811 	msr	BASEPRI, r3
 80041d4:	f3bf 8f6f 	isb	sy
 80041d8:	f3bf 8f4f 	dsb	sy
 80041dc:	60fb      	str	r3, [r7, #12]
}
 80041de:	bf00      	nop
 80041e0:	bf00      	nop
 80041e2:	e7fd      	b.n	80041e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10b      	bne.n	8004204 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80041ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041f0:	f383 8811 	msr	BASEPRI, r3
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	60bb      	str	r3, [r7, #8]
}
 80041fe:	bf00      	nop
 8004200:	bf00      	nop
 8004202:	e7fd      	b.n	8004200 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004208:	1e5a      	subs	r2, r3, #1
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004216:	429a      	cmp	r2, r3
 8004218:	d044      	beq.n	80042a4 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800421e:	2b00      	cmp	r3, #0
 8004220:	d140      	bne.n	80042a4 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	3304      	adds	r3, #4
 8004226:	4618      	mov	r0, r3
 8004228:	f7fe fbb0 	bl	800298c <uxListRemove>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d115      	bne.n	800425e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004236:	491f      	ldr	r1, [pc, #124]	@ (80042b4 <xTaskPriorityDisinherit+0x108>)
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	440b      	add	r3, r1
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10a      	bne.n	800425e <xTaskPriorityDisinherit+0xb2>
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800424c:	2201      	movs	r2, #1
 800424e:	fa02 f303 	lsl.w	r3, r2, r3
 8004252:	43da      	mvns	r2, r3
 8004254:	4b18      	ldr	r3, [pc, #96]	@ (80042b8 <xTaskPriorityDisinherit+0x10c>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4013      	ands	r3, r2
 800425a:	4a17      	ldr	r2, [pc, #92]	@ (80042b8 <xTaskPriorityDisinherit+0x10c>)
 800425c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800426a:	f1c3 0207 	rsb	r2, r3, #7
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004276:	2201      	movs	r2, #1
 8004278:	409a      	lsls	r2, r3
 800427a:	4b0f      	ldr	r3, [pc, #60]	@ (80042b8 <xTaskPriorityDisinherit+0x10c>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4313      	orrs	r3, r2
 8004280:	4a0d      	ldr	r2, [pc, #52]	@ (80042b8 <xTaskPriorityDisinherit+0x10c>)
 8004282:	6013      	str	r3, [r2, #0]
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4a08      	ldr	r2, [pc, #32]	@ (80042b4 <xTaskPriorityDisinherit+0x108>)
 8004292:	441a      	add	r2, r3
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	3304      	adds	r3, #4
 8004298:	4619      	mov	r1, r3
 800429a:	4610      	mov	r0, r2
 800429c:	f7fe fb1b 	bl	80028d6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80042a0:	2301      	movs	r3, #1
 80042a2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80042a4:	697b      	ldr	r3, [r7, #20]
	}
 80042a6:	4618      	mov	r0, r3
 80042a8:	3718      	adds	r7, #24
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}
 80042ae:	bf00      	nop
 80042b0:	20000b8c 	.word	0x20000b8c
 80042b4:	20000b90 	.word	0x20000b90
 80042b8:	20000c94 	.word	0x20000c94

080042bc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80042c6:	4b29      	ldr	r3, [pc, #164]	@ (800436c <prvAddCurrentTaskToDelayedList+0xb0>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042cc:	4b28      	ldr	r3, [pc, #160]	@ (8004370 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	3304      	adds	r3, #4
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe fb5a 	bl	800298c <uxListRemove>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10b      	bne.n	80042f6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80042de:	4b24      	ldr	r3, [pc, #144]	@ (8004370 <prvAddCurrentTaskToDelayedList+0xb4>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e4:	2201      	movs	r2, #1
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	43da      	mvns	r2, r3
 80042ec:	4b21      	ldr	r3, [pc, #132]	@ (8004374 <prvAddCurrentTaskToDelayedList+0xb8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4013      	ands	r3, r2
 80042f2:	4a20      	ldr	r2, [pc, #128]	@ (8004374 <prvAddCurrentTaskToDelayedList+0xb8>)
 80042f4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042fc:	d10a      	bne.n	8004314 <prvAddCurrentTaskToDelayedList+0x58>
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d007      	beq.n	8004314 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004304:	4b1a      	ldr	r3, [pc, #104]	@ (8004370 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3304      	adds	r3, #4
 800430a:	4619      	mov	r1, r3
 800430c:	481a      	ldr	r0, [pc, #104]	@ (8004378 <prvAddCurrentTaskToDelayedList+0xbc>)
 800430e:	f7fe fae2 	bl	80028d6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004312:	e026      	b.n	8004362 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4413      	add	r3, r2
 800431a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800431c:	4b14      	ldr	r3, [pc, #80]	@ (8004370 <prvAddCurrentTaskToDelayedList+0xb4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004324:	68ba      	ldr	r2, [r7, #8]
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	429a      	cmp	r2, r3
 800432a:	d209      	bcs.n	8004340 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800432c:	4b13      	ldr	r3, [pc, #76]	@ (800437c <prvAddCurrentTaskToDelayedList+0xc0>)
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	4b0f      	ldr	r3, [pc, #60]	@ (8004370 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	3304      	adds	r3, #4
 8004336:	4619      	mov	r1, r3
 8004338:	4610      	mov	r0, r2
 800433a:	f7fe faef 	bl	800291c <vListInsert>
}
 800433e:	e010      	b.n	8004362 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004340:	4b0f      	ldr	r3, [pc, #60]	@ (8004380 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	4b0a      	ldr	r3, [pc, #40]	@ (8004370 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3304      	adds	r3, #4
 800434a:	4619      	mov	r1, r3
 800434c:	4610      	mov	r0, r2
 800434e:	f7fe fae5 	bl	800291c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004352:	4b0c      	ldr	r3, [pc, #48]	@ (8004384 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	429a      	cmp	r2, r3
 800435a:	d202      	bcs.n	8004362 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800435c:	4a09      	ldr	r2, [pc, #36]	@ (8004384 <prvAddCurrentTaskToDelayedList+0xc8>)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	6013      	str	r3, [r2, #0]
}
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	20000c90 	.word	0x20000c90
 8004370:	20000b8c 	.word	0x20000b8c
 8004374:	20000c94 	.word	0x20000c94
 8004378:	20000c78 	.word	0x20000c78
 800437c:	20000c48 	.word	0x20000c48
 8004380:	20000c44 	.word	0x20000c44
 8004384:	20000cac 	.word	0x20000cac

08004388 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b08a      	sub	sp, #40	@ 0x28
 800438c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800438e:	2300      	movs	r3, #0
 8004390:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004392:	f000 fb51 	bl	8004a38 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004396:	4b1d      	ldr	r3, [pc, #116]	@ (800440c <xTimerCreateTimerTask+0x84>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d021      	beq.n	80043e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800439e:	2300      	movs	r3, #0
 80043a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80043a2:	2300      	movs	r3, #0
 80043a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80043a6:	1d3a      	adds	r2, r7, #4
 80043a8:	f107 0108 	add.w	r1, r7, #8
 80043ac:	f107 030c 	add.w	r3, r7, #12
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7fb fee5 	bl	8000180 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80043b6:	6879      	ldr	r1, [r7, #4]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	9202      	str	r2, [sp, #8]
 80043be:	9301      	str	r3, [sp, #4]
 80043c0:	2302      	movs	r3, #2
 80043c2:	9300      	str	r3, [sp, #0]
 80043c4:	2300      	movs	r3, #0
 80043c6:	460a      	mov	r2, r1
 80043c8:	4911      	ldr	r1, [pc, #68]	@ (8004410 <xTimerCreateTimerTask+0x88>)
 80043ca:	4812      	ldr	r0, [pc, #72]	@ (8004414 <xTimerCreateTimerTask+0x8c>)
 80043cc:	f7ff f8ba 	bl	8003544 <xTaskCreateStatic>
 80043d0:	4603      	mov	r3, r0
 80043d2:	4a11      	ldr	r2, [pc, #68]	@ (8004418 <xTimerCreateTimerTask+0x90>)
 80043d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80043d6:	4b10      	ldr	r3, [pc, #64]	@ (8004418 <xTimerCreateTimerTask+0x90>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d001      	beq.n	80043e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80043de:	2301      	movs	r3, #1
 80043e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10b      	bne.n	8004400 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	613b      	str	r3, [r7, #16]
}
 80043fa:	bf00      	nop
 80043fc:	bf00      	nop
 80043fe:	e7fd      	b.n	80043fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004400:	697b      	ldr	r3, [r7, #20]
}
 8004402:	4618      	mov	r0, r3
 8004404:	3718      	adds	r7, #24
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	20000ce8 	.word	0x20000ce8
 8004410:	080053b0 	.word	0x080053b0
 8004414:	08004665 	.word	0x08004665
 8004418:	20000cec 	.word	0x20000cec

0800441c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af02      	add	r7, sp, #8
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
 8004428:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 800442a:	202c      	movs	r0, #44	@ 0x2c
 800442c:	f000 fd60 	bl	8004ef0 <pvPortMalloc>
 8004430:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00d      	beq.n	8004454 <xTimerCreate+0x38>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	9301      	str	r3, [sp, #4]
 800443c:	6a3b      	ldr	r3, [r7, #32]
 800443e:	9300      	str	r3, [sp, #0]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	68b9      	ldr	r1, [r7, #8]
 8004446:	68f8      	ldr	r0, [r7, #12]
 8004448:	f000 f848 	bl	80044dc <prvInitialiseNewTimer>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically, so note this
				timer was created dynamically in case the timer is later
				deleted. */
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */
		}

		return pxNewTimer;
 8004454:	697b      	ldr	r3, [r7, #20]
	}
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 800445e:	b580      	push	{r7, lr}
 8004460:	b08a      	sub	sp, #40	@ 0x28
 8004462:	af02      	add	r7, sp, #8
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	607a      	str	r2, [r7, #4]
 800446a:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 800446c:	232c      	movs	r3, #44	@ 0x2c
 800446e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	2b2c      	cmp	r3, #44	@ 0x2c
 8004474:	d00b      	beq.n	800448e <xTimerCreateStatic+0x30>
	__asm volatile
 8004476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447a:	f383 8811 	msr	BASEPRI, r3
 800447e:	f3bf 8f6f 	isb	sy
 8004482:	f3bf 8f4f 	dsb	sy
 8004486:	61bb      	str	r3, [r7, #24]
}
 8004488:	bf00      	nop
 800448a:	bf00      	nop
 800448c:	e7fd      	b.n	800448a <xTimerCreateStatic+0x2c>
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800448e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004490:	2b00      	cmp	r3, #0
 8004492:	d10b      	bne.n	80044ac <xTimerCreateStatic+0x4e>
	__asm volatile
 8004494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004498:	f383 8811 	msr	BASEPRI, r3
 800449c:	f3bf 8f6f 	isb	sy
 80044a0:	f3bf 8f4f 	dsb	sy
 80044a4:	617b      	str	r3, [r7, #20]
}
 80044a6:	bf00      	nop
 80044a8:	bf00      	nop
 80044aa:	e7fd      	b.n	80044a8 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80044ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044ae:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d00d      	beq.n	80044d2 <xTimerCreateStatic+0x74>
		{
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80044b6:	69fb      	ldr	r3, [r7, #28]
 80044b8:	9301      	str	r3, [sp, #4]
 80044ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044bc:	9300      	str	r3, [sp, #0]
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	68b9      	ldr	r1, [r7, #8]
 80044c4:	68f8      	ldr	r0, [r7, #12]
 80044c6:	f000 f809 	bl	80044dc <prvInitialiseNewTimer>

			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Timers can be created statically or dynamically so note this
				timer was created statically in case it is later deleted. */
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
		}

		return pxNewTimer;
 80044d2:	69fb      	ldr	r3, [r7, #28]
	}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3720      	adds	r7, #32
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
 80044e8:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d10b      	bne.n	8004508 <prvInitialiseNewTimer+0x2c>
	__asm volatile
 80044f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	617b      	str	r3, [r7, #20]
}
 8004502:	bf00      	nop
 8004504:	bf00      	nop
 8004506:	e7fd      	b.n	8004504 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8004508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450a:	2b00      	cmp	r3, #0
 800450c:	d015      	beq.n	800453a <prvInitialiseNewTimer+0x5e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800450e:	f000 fa93 	bl	8004a38 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8004512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8004518:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	619a      	str	r2, [r3, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 800451e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	61da      	str	r2, [r3, #28]
		pxNewTimer->pvTimerID = pvTimerID;
 8004524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004526:	683a      	ldr	r2, [r7, #0]
 8004528:	621a      	str	r2, [r3, #32]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800452a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800452c:	6a3a      	ldr	r2, [r7, #32]
 800452e:	625a      	str	r2, [r3, #36]	@ 0x24
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8004530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004532:	3304      	adds	r3, #4
 8004534:	4618      	mov	r0, r3
 8004536:	f7fe f9c2 	bl	80028be <vListInitialiseItem>
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800453a:	bf00      	nop
 800453c:	3718      	adds	r7, #24
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08a      	sub	sp, #40	@ 0x28
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004552:	2300      	movs	r3, #0
 8004554:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10b      	bne.n	8004574 <xTimerGenericCommand+0x30>
	__asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	623b      	str	r3, [r7, #32]
}
 800456e:	bf00      	nop
 8004570:	bf00      	nop
 8004572:	e7fd      	b.n	8004570 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004574:	4b19      	ldr	r3, [pc, #100]	@ (80045dc <xTimerGenericCommand+0x98>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d02a      	beq.n	80045d2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	61bb      	str	r3, [r7, #24]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	61fb      	str	r3, [r7, #28]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b05      	cmp	r3, #5
 800458c:	dc18      	bgt.n	80045c0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800458e:	f7ff fdef 	bl	8004170 <xTaskGetSchedulerState>
 8004592:	4603      	mov	r3, r0
 8004594:	2b02      	cmp	r3, #2
 8004596:	d109      	bne.n	80045ac <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004598:	4b10      	ldr	r3, [pc, #64]	@ (80045dc <xTimerGenericCommand+0x98>)
 800459a:	6818      	ldr	r0, [r3, #0]
 800459c:	f107 0114 	add.w	r1, r7, #20
 80045a0:	2300      	movs	r3, #0
 80045a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80045a4:	f7fe fb60 	bl	8002c68 <xQueueGenericSend>
 80045a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80045aa:	e012      	b.n	80045d2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80045ac:	4b0b      	ldr	r3, [pc, #44]	@ (80045dc <xTimerGenericCommand+0x98>)
 80045ae:	6818      	ldr	r0, [r3, #0]
 80045b0:	f107 0114 	add.w	r1, r7, #20
 80045b4:	2300      	movs	r3, #0
 80045b6:	2200      	movs	r2, #0
 80045b8:	f7fe fb56 	bl	8002c68 <xQueueGenericSend>
 80045bc:	6278      	str	r0, [r7, #36]	@ 0x24
 80045be:	e008      	b.n	80045d2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80045c0:	4b06      	ldr	r3, [pc, #24]	@ (80045dc <xTimerGenericCommand+0x98>)
 80045c2:	6818      	ldr	r0, [r3, #0]
 80045c4:	f107 0114 	add.w	r1, r7, #20
 80045c8:	2300      	movs	r3, #0
 80045ca:	683a      	ldr	r2, [r7, #0]
 80045cc:	f7fe fc4e 	bl	8002e6c <xQueueGenericSendFromISR>
 80045d0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80045d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3728      	adds	r7, #40	@ 0x28
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}
 80045dc:	20000ce8 	.word	0x20000ce8

080045e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b088      	sub	sp, #32
 80045e4:	af02      	add	r7, sp, #8
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045ea:	4b1d      	ldr	r3, [pc, #116]	@ (8004660 <prvProcessExpiredTimer+0x80>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	3304      	adds	r3, #4
 80045f8:	4618      	mov	r0, r3
 80045fa:	f7fe f9c7 	bl	800298c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d123      	bne.n	800464e <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	699a      	ldr	r2, [r3, #24]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	18d1      	adds	r1, r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	6978      	ldr	r0, [r7, #20]
 8004614:	f000 f8cc 	bl	80047b0 <prvInsertTimerInActiveList>
 8004618:	4603      	mov	r3, r0
 800461a:	2b00      	cmp	r3, #0
 800461c:	d017      	beq.n	800464e <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800461e:	2300      	movs	r3, #0
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	2300      	movs	r3, #0
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	2100      	movs	r1, #0
 8004628:	6978      	ldr	r0, [r7, #20]
 800462a:	f7ff ff8b 	bl	8004544 <xTimerGenericCommand>
 800462e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d10b      	bne.n	800464e <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8004636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800463a:	f383 8811 	msr	BASEPRI, r3
 800463e:	f3bf 8f6f 	isb	sy
 8004642:	f3bf 8f4f 	dsb	sy
 8004646:	60fb      	str	r3, [r7, #12]
}
 8004648:	bf00      	nop
 800464a:	bf00      	nop
 800464c:	e7fd      	b.n	800464a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004652:	6978      	ldr	r0, [r7, #20]
 8004654:	4798      	blx	r3
}
 8004656:	bf00      	nop
 8004658:	3718      	adds	r7, #24
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}
 800465e:	bf00      	nop
 8004660:	20000ce0 	.word	0x20000ce0

08004664 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b084      	sub	sp, #16
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800466c:	f107 0308 	add.w	r3, r7, #8
 8004670:	4618      	mov	r0, r3
 8004672:	f000 f859 	bl	8004728 <prvGetNextExpireTime>
 8004676:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4619      	mov	r1, r3
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f805 	bl	800468c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004682:	f000 f8d7 	bl	8004834 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004686:	bf00      	nop
 8004688:	e7f0      	b.n	800466c <prvTimerTask+0x8>
	...

0800468c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004696:	f7ff f981 	bl	800399c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800469a:	f107 0308 	add.w	r3, r7, #8
 800469e:	4618      	mov	r0, r3
 80046a0:	f000 f866 	bl	8004770 <prvSampleTimeNow>
 80046a4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d130      	bne.n	800470e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10a      	bne.n	80046c8 <prvProcessTimerOrBlockTask+0x3c>
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d806      	bhi.n	80046c8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80046ba:	f7ff f97d 	bl	80039b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046be:	68f9      	ldr	r1, [r7, #12]
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff ff8d 	bl	80045e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80046c6:	e024      	b.n	8004712 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d008      	beq.n	80046e0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046ce:	4b13      	ldr	r3, [pc, #76]	@ (800471c <prvProcessTimerOrBlockTask+0x90>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	bf0c      	ite	eq
 80046d8:	2301      	moveq	r3, #1
 80046da:	2300      	movne	r3, #0
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80046e0:	4b0f      	ldr	r3, [pc, #60]	@ (8004720 <prvProcessTimerOrBlockTask+0x94>)
 80046e2:	6818      	ldr	r0, [r3, #0]
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	683a      	ldr	r2, [r7, #0]
 80046ec:	4619      	mov	r1, r3
 80046ee:	f7fe fef5 	bl	80034dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80046f2:	f7ff f961 	bl	80039b8 <xTaskResumeAll>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10a      	bne.n	8004712 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80046fc:	4b09      	ldr	r3, [pc, #36]	@ (8004724 <prvProcessTimerOrBlockTask+0x98>)
 80046fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004702:	601a      	str	r2, [r3, #0]
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	f3bf 8f6f 	isb	sy
}
 800470c:	e001      	b.n	8004712 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800470e:	f7ff f953 	bl	80039b8 <xTaskResumeAll>
}
 8004712:	bf00      	nop
 8004714:	3710      	adds	r7, #16
 8004716:	46bd      	mov	sp, r7
 8004718:	bd80      	pop	{r7, pc}
 800471a:	bf00      	nop
 800471c:	20000ce4 	.word	0x20000ce4
 8004720:	20000ce8 	.word	0x20000ce8
 8004724:	e000ed04 	.word	0xe000ed04

08004728 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004728:	b480      	push	{r7}
 800472a:	b085      	sub	sp, #20
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004730:	4b0e      	ldr	r3, [pc, #56]	@ (800476c <prvGetNextExpireTime+0x44>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	2b00      	cmp	r3, #0
 8004738:	bf0c      	ite	eq
 800473a:	2301      	moveq	r3, #1
 800473c:	2300      	movne	r3, #0
 800473e:	b2db      	uxtb	r3, r3
 8004740:	461a      	mov	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d105      	bne.n	800475a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800474e:	4b07      	ldr	r3, [pc, #28]	@ (800476c <prvGetNextExpireTime+0x44>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60fb      	str	r3, [r7, #12]
 8004758:	e001      	b.n	800475e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800475e:	68fb      	ldr	r3, [r7, #12]
}
 8004760:	4618      	mov	r0, r3
 8004762:	3714      	adds	r7, #20
 8004764:	46bd      	mov	sp, r7
 8004766:	bc80      	pop	{r7}
 8004768:	4770      	bx	lr
 800476a:	bf00      	nop
 800476c:	20000ce0 	.word	0x20000ce0

08004770 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004778:	f7ff f9bc 	bl	8003af4 <xTaskGetTickCount>
 800477c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800477e:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <prvSampleTimeNow+0x3c>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	429a      	cmp	r2, r3
 8004786:	d205      	bcs.n	8004794 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004788:	f000 f8f4 	bl	8004974 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2201      	movs	r2, #1
 8004790:	601a      	str	r2, [r3, #0]
 8004792:	e002      	b.n	800479a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800479a:	4a04      	ldr	r2, [pc, #16]	@ (80047ac <prvSampleTimeNow+0x3c>)
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80047a0:	68fb      	ldr	r3, [r7, #12]
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3710      	adds	r7, #16
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	20000cf0 	.word	0x20000cf0

080047b0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80047be:	2300      	movs	r3, #0
 80047c0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80047ce:	68ba      	ldr	r2, [r7, #8]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d812      	bhi.n	80047fc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	1ad2      	subs	r2, r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	429a      	cmp	r2, r3
 80047e2:	d302      	bcc.n	80047ea <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80047e4:	2301      	movs	r3, #1
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	e01b      	b.n	8004822 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047ea:	4b10      	ldr	r3, [pc, #64]	@ (800482c <prvInsertTimerInActiveList+0x7c>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3304      	adds	r3, #4
 80047f2:	4619      	mov	r1, r3
 80047f4:	4610      	mov	r0, r2
 80047f6:	f7fe f891 	bl	800291c <vListInsert>
 80047fa:	e012      	b.n	8004822 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	429a      	cmp	r2, r3
 8004802:	d206      	bcs.n	8004812 <prvInsertTimerInActiveList+0x62>
 8004804:	68ba      	ldr	r2, [r7, #8]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	429a      	cmp	r2, r3
 800480a:	d302      	bcc.n	8004812 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800480c:	2301      	movs	r3, #1
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	e007      	b.n	8004822 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004812:	4b07      	ldr	r3, [pc, #28]	@ (8004830 <prvInsertTimerInActiveList+0x80>)
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	3304      	adds	r3, #4
 800481a:	4619      	mov	r1, r3
 800481c:	4610      	mov	r0, r2
 800481e:	f7fe f87d 	bl	800291c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004822:	697b      	ldr	r3, [r7, #20]
}
 8004824:	4618      	mov	r0, r3
 8004826:	3718      	adds	r7, #24
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	20000ce4 	.word	0x20000ce4
 8004830:	20000ce0 	.word	0x20000ce0

08004834 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b08c      	sub	sp, #48	@ 0x30
 8004838:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800483a:	e087      	b.n	800494c <prvProcessReceivedCommands+0x118>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f2c0 8084 	blt.w	800494c <prvProcessReceivedCommands+0x118>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	627b      	str	r3, [r7, #36]	@ 0x24

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d004      	beq.n	800485a <prvProcessReceivedCommands+0x26>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004852:	3304      	adds	r3, #4
 8004854:	4618      	mov	r0, r3
 8004856:	f7fe f899 	bl	800298c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800485a:	1d3b      	adds	r3, r7, #4
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff ff87 	bl	8004770 <prvSampleTimeNow>
 8004862:	6238      	str	r0, [r7, #32]

			switch( xMessage.xMessageID )
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	2b09      	cmp	r3, #9
 8004868:	d86b      	bhi.n	8004942 <prvProcessReceivedCommands+0x10e>
 800486a:	a201      	add	r2, pc, #4	@ (adr r2, 8004870 <prvProcessReceivedCommands+0x3c>)
 800486c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004870:	08004899 	.word	0x08004899
 8004874:	08004899 	.word	0x08004899
 8004878:	08004899 	.word	0x08004899
 800487c:	08004943 	.word	0x08004943
 8004880:	080048f7 	.word	0x080048f7
 8004884:	08004931 	.word	0x08004931
 8004888:	08004899 	.word	0x08004899
 800488c:	08004899 	.word	0x08004899
 8004890:	08004943 	.word	0x08004943
 8004894:	080048f7 	.word	0x080048f7
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	18d1      	adds	r1, r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6a3a      	ldr	r2, [r7, #32]
 80048a4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048a6:	f7ff ff83 	bl	80047b0 <prvInsertTimerInActiveList>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d04a      	beq.n	8004946 <prvProcessReceivedCommands+0x112>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048b6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80048b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048ba:	69db      	ldr	r3, [r3, #28]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d142      	bne.n	8004946 <prvProcessReceivedCommands+0x112>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048c0:	68fa      	ldr	r2, [r7, #12]
 80048c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	441a      	add	r2, r3
 80048c8:	2300      	movs	r3, #0
 80048ca:	9300      	str	r3, [sp, #0]
 80048cc:	2300      	movs	r3, #0
 80048ce:	2100      	movs	r1, #0
 80048d0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80048d2:	f7ff fe37 	bl	8004544 <xTimerGenericCommand>
 80048d6:	61f8      	str	r0, [r7, #28]
							configASSERT( xResult );
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d133      	bne.n	8004946 <prvProcessReceivedCommands+0x112>
	__asm volatile
 80048de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048e2:	f383 8811 	msr	BASEPRI, r3
 80048e6:	f3bf 8f6f 	isb	sy
 80048ea:	f3bf 8f4f 	dsb	sy
 80048ee:	61bb      	str	r3, [r7, #24]
}
 80048f0:	bf00      	nop
 80048f2:	bf00      	nop
 80048f4:	e7fd      	b.n	80048f2 <prvProcessReceivedCommands+0xbe>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80048fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d10b      	bne.n	800491c <prvProcessReceivedCommands+0xe8>
	__asm volatile
 8004904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	617b      	str	r3, [r7, #20]
}
 8004916:	bf00      	nop
 8004918:	bf00      	nop
 800491a:	e7fd      	b.n	8004918 <prvProcessReceivedCommands+0xe4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800491c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491e:	699a      	ldr	r2, [r3, #24]
 8004920:	6a3b      	ldr	r3, [r7, #32]
 8004922:	18d1      	adds	r1, r2, r3
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	6a3a      	ldr	r2, [r7, #32]
 8004928:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800492a:	f7ff ff41 	bl	80047b0 <prvInsertTimerInActiveList>
					break;
 800492e:	e00d      	b.n	800494c <prvProcessReceivedCommands+0x118>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004932:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004936:	2b00      	cmp	r3, #0
 8004938:	d107      	bne.n	800494a <prvProcessReceivedCommands+0x116>
						{
							vPortFree( pxTimer );
 800493a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800493c:	f000 fba0 	bl	8005080 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004940:	e003      	b.n	800494a <prvProcessReceivedCommands+0x116>

				default	:
					/* Don't expect to get here. */
					break;
 8004942:	bf00      	nop
 8004944:	e002      	b.n	800494c <prvProcessReceivedCommands+0x118>
					break;
 8004946:	bf00      	nop
 8004948:	e000      	b.n	800494c <prvProcessReceivedCommands+0x118>
					break;
 800494a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800494c:	4b08      	ldr	r3, [pc, #32]	@ (8004970 <prvProcessReceivedCommands+0x13c>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f107 0108 	add.w	r1, r7, #8
 8004954:	2200      	movs	r2, #0
 8004956:	4618      	mov	r0, r3
 8004958:	f7fe fb24 	bl	8002fa4 <xQueueReceive>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	f47f af6c 	bne.w	800483c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	3728      	adds	r7, #40	@ 0x28
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20000ce8 	.word	0x20000ce8

08004974 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800497a:	e046      	b.n	8004a0a <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800497c:	4b2c      	ldr	r3, [pc, #176]	@ (8004a30 <prvSwitchTimerLists+0xbc>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004986:	4b2a      	ldr	r3, [pc, #168]	@ (8004a30 <prvSwitchTimerLists+0xbc>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	3304      	adds	r3, #4
 8004994:	4618      	mov	r0, r3
 8004996:	f7fd fff9 	bl	800298c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	2b01      	cmp	r3, #1
 80049a8:	d12f      	bne.n	8004a0a <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4413      	add	r3, r2
 80049b2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d90e      	bls.n	80049da <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	68ba      	ldr	r2, [r7, #8]
 80049c0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80049c8:	4b19      	ldr	r3, [pc, #100]	@ (8004a30 <prvSwitchTimerLists+0xbc>)
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	3304      	adds	r3, #4
 80049d0:	4619      	mov	r1, r3
 80049d2:	4610      	mov	r0, r2
 80049d4:	f7fd ffa2 	bl	800291c <vListInsert>
 80049d8:	e017      	b.n	8004a0a <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80049da:	2300      	movs	r3, #0
 80049dc:	9300      	str	r3, [sp, #0]
 80049de:	2300      	movs	r3, #0
 80049e0:	693a      	ldr	r2, [r7, #16]
 80049e2:	2100      	movs	r1, #0
 80049e4:	68f8      	ldr	r0, [r7, #12]
 80049e6:	f7ff fdad 	bl	8004544 <xTimerGenericCommand>
 80049ea:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10b      	bne.n	8004a0a <prvSwitchTimerLists+0x96>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	603b      	str	r3, [r7, #0]
}
 8004a04:	bf00      	nop
 8004a06:	bf00      	nop
 8004a08:	e7fd      	b.n	8004a06 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a0a:	4b09      	ldr	r3, [pc, #36]	@ (8004a30 <prvSwitchTimerLists+0xbc>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1b3      	bne.n	800497c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a14:	4b06      	ldr	r3, [pc, #24]	@ (8004a30 <prvSwitchTimerLists+0xbc>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a1a:	4b06      	ldr	r3, [pc, #24]	@ (8004a34 <prvSwitchTimerLists+0xc0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a04      	ldr	r2, [pc, #16]	@ (8004a30 <prvSwitchTimerLists+0xbc>)
 8004a20:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a22:	4a04      	ldr	r2, [pc, #16]	@ (8004a34 <prvSwitchTimerLists+0xc0>)
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	6013      	str	r3, [r2, #0]
}
 8004a28:	bf00      	nop
 8004a2a:	3718      	adds	r7, #24
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}
 8004a30:	20000ce0 	.word	0x20000ce0
 8004a34:	20000ce4 	.word	0x20000ce4

08004a38 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a3e:	f000 f955 	bl	8004cec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a42:	4b15      	ldr	r3, [pc, #84]	@ (8004a98 <prvCheckForValidListAndQueue+0x60>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d120      	bne.n	8004a8c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a4a:	4814      	ldr	r0, [pc, #80]	@ (8004a9c <prvCheckForValidListAndQueue+0x64>)
 8004a4c:	f7fd ff18 	bl	8002880 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004a50:	4813      	ldr	r0, [pc, #76]	@ (8004aa0 <prvCheckForValidListAndQueue+0x68>)
 8004a52:	f7fd ff15 	bl	8002880 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004a56:	4b13      	ldr	r3, [pc, #76]	@ (8004aa4 <prvCheckForValidListAndQueue+0x6c>)
 8004a58:	4a10      	ldr	r2, [pc, #64]	@ (8004a9c <prvCheckForValidListAndQueue+0x64>)
 8004a5a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004a5c:	4b12      	ldr	r3, [pc, #72]	@ (8004aa8 <prvCheckForValidListAndQueue+0x70>)
 8004a5e:	4a10      	ldr	r2, [pc, #64]	@ (8004aa0 <prvCheckForValidListAndQueue+0x68>)
 8004a60:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004a62:	2300      	movs	r3, #0
 8004a64:	9300      	str	r3, [sp, #0]
 8004a66:	4b11      	ldr	r3, [pc, #68]	@ (8004aac <prvCheckForValidListAndQueue+0x74>)
 8004a68:	4a11      	ldr	r2, [pc, #68]	@ (8004ab0 <prvCheckForValidListAndQueue+0x78>)
 8004a6a:	210c      	movs	r1, #12
 8004a6c:	200a      	movs	r0, #10
 8004a6e:	f7fe f821 	bl	8002ab4 <xQueueGenericCreateStatic>
 8004a72:	4603      	mov	r3, r0
 8004a74:	4a08      	ldr	r2, [pc, #32]	@ (8004a98 <prvCheckForValidListAndQueue+0x60>)
 8004a76:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004a78:	4b07      	ldr	r3, [pc, #28]	@ (8004a98 <prvCheckForValidListAndQueue+0x60>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004a80:	4b05      	ldr	r3, [pc, #20]	@ (8004a98 <prvCheckForValidListAndQueue+0x60>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	490b      	ldr	r1, [pc, #44]	@ (8004ab4 <prvCheckForValidListAndQueue+0x7c>)
 8004a86:	4618      	mov	r0, r3
 8004a88:	f7fe fd00 	bl	800348c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004a8c:	f000 f95e 	bl	8004d4c <vPortExitCritical>
}
 8004a90:	bf00      	nop
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	20000ce8 	.word	0x20000ce8
 8004a9c:	20000cb8 	.word	0x20000cb8
 8004aa0:	20000ccc 	.word	0x20000ccc
 8004aa4:	20000ce0 	.word	0x20000ce0
 8004aa8:	20000ce4 	.word	0x20000ce4
 8004aac:	20000d6c 	.word	0x20000d6c
 8004ab0:	20000cf4 	.word	0x20000cf4
 8004ab4:	080053b8 	.word	0x080053b8

08004ab8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b086      	sub	sp, #24
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	617b      	str	r3, [r7, #20]

	configASSERT( xTimer );
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10b      	bne.n	8004ae2 <xTimerIsTimerActive+0x2a>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	60fb      	str	r3, [r7, #12]
}
 8004adc:	bf00      	nop
 8004ade:	bf00      	nop
 8004ae0:	e7fd      	b.n	8004ade <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8004ae2:	f000 f903 	bl	8004cec <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	bf14      	ite	ne
 8004aee:	2301      	movne	r3, #1
 8004af0:	2300      	moveq	r3, #0
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8004af6:	f000 f929 	bl	8004d4c <vPortExitCritical>

	return xTimerIsInActiveList;
 8004afa:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8004afc:	4618      	mov	r0, r3
 8004afe:	3718      	adds	r7, #24
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3b04      	subs	r3, #4
 8004b14:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	3b04      	subs	r3, #4
 8004b22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	f023 0201 	bic.w	r2, r3, #1
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	3b04      	subs	r3, #4
 8004b32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b34:	4a08      	ldr	r2, [pc, #32]	@ (8004b58 <pxPortInitialiseStack+0x54>)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	3b14      	subs	r3, #20
 8004b3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b40:	687a      	ldr	r2, [r7, #4]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	3b20      	subs	r3, #32
 8004b4a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3714      	adds	r7, #20
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr
 8004b58:	08004b5d 	.word	0x08004b5d

08004b5c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b5c:	b480      	push	{r7}
 8004b5e:	b085      	sub	sp, #20
 8004b60:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b66:	4b12      	ldr	r3, [pc, #72]	@ (8004bb0 <prvTaskExitError+0x54>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b6e:	d00b      	beq.n	8004b88 <prvTaskExitError+0x2c>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	60fb      	str	r3, [r7, #12]
}
 8004b82:	bf00      	nop
 8004b84:	bf00      	nop
 8004b86:	e7fd      	b.n	8004b84 <prvTaskExitError+0x28>
	__asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	60bb      	str	r3, [r7, #8]
}
 8004b9a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004b9c:	bf00      	nop
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0fc      	beq.n	8004b9e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop
 8004ba8:	3714      	adds	r7, #20
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bc80      	pop	{r7}
 8004bae:	4770      	bx	lr
 8004bb0:	20000014 	.word	0x20000014
	...

08004bc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004bc0:	4b07      	ldr	r3, [pc, #28]	@ (8004be0 <pxCurrentTCBConst2>)
 8004bc2:	6819      	ldr	r1, [r3, #0]
 8004bc4:	6808      	ldr	r0, [r1, #0]
 8004bc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004bca:	f380 8809 	msr	PSP, r0
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f04f 0000 	mov.w	r0, #0
 8004bd6:	f380 8811 	msr	BASEPRI, r0
 8004bda:	f04e 0e0d 	orr.w	lr, lr, #13
 8004bde:	4770      	bx	lr

08004be0 <pxCurrentTCBConst2>:
 8004be0:	20000b8c 	.word	0x20000b8c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004be4:	bf00      	nop
 8004be6:	bf00      	nop

08004be8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004be8:	4806      	ldr	r0, [pc, #24]	@ (8004c04 <prvPortStartFirstTask+0x1c>)
 8004bea:	6800      	ldr	r0, [r0, #0]
 8004bec:	6800      	ldr	r0, [r0, #0]
 8004bee:	f380 8808 	msr	MSP, r0
 8004bf2:	b662      	cpsie	i
 8004bf4:	b661      	cpsie	f
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	df00      	svc	0
 8004c00:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c02:	bf00      	nop
 8004c04:	e000ed08 	.word	0xe000ed08

08004c08 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b084      	sub	sp, #16
 8004c0c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c0e:	4b32      	ldr	r3, [pc, #200]	@ (8004cd8 <xPortStartScheduler+0xd0>)
 8004c10:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	b2db      	uxtb	r3, r3
 8004c18:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	22ff      	movs	r2, #255	@ 0xff
 8004c1e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c28:	78fb      	ldrb	r3, [r7, #3]
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004c30:	b2da      	uxtb	r2, r3
 8004c32:	4b2a      	ldr	r3, [pc, #168]	@ (8004cdc <xPortStartScheduler+0xd4>)
 8004c34:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c36:	4b2a      	ldr	r3, [pc, #168]	@ (8004ce0 <xPortStartScheduler+0xd8>)
 8004c38:	2207      	movs	r2, #7
 8004c3a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c3c:	e009      	b.n	8004c52 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8004c3e:	4b28      	ldr	r3, [pc, #160]	@ (8004ce0 <xPortStartScheduler+0xd8>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	4a26      	ldr	r2, [pc, #152]	@ (8004ce0 <xPortStartScheduler+0xd8>)
 8004c46:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004c48:	78fb      	ldrb	r3, [r7, #3]
 8004c4a:	b2db      	uxtb	r3, r3
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c52:	78fb      	ldrb	r3, [r7, #3]
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c5a:	2b80      	cmp	r3, #128	@ 0x80
 8004c5c:	d0ef      	beq.n	8004c3e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004c5e:	4b20      	ldr	r3, [pc, #128]	@ (8004ce0 <xPortStartScheduler+0xd8>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f1c3 0307 	rsb	r3, r3, #7
 8004c66:	2b04      	cmp	r3, #4
 8004c68:	d00b      	beq.n	8004c82 <xPortStartScheduler+0x7a>
	__asm volatile
 8004c6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c6e:	f383 8811 	msr	BASEPRI, r3
 8004c72:	f3bf 8f6f 	isb	sy
 8004c76:	f3bf 8f4f 	dsb	sy
 8004c7a:	60bb      	str	r3, [r7, #8]
}
 8004c7c:	bf00      	nop
 8004c7e:	bf00      	nop
 8004c80:	e7fd      	b.n	8004c7e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004c82:	4b17      	ldr	r3, [pc, #92]	@ (8004ce0 <xPortStartScheduler+0xd8>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	021b      	lsls	r3, r3, #8
 8004c88:	4a15      	ldr	r2, [pc, #84]	@ (8004ce0 <xPortStartScheduler+0xd8>)
 8004c8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004c8c:	4b14      	ldr	r3, [pc, #80]	@ (8004ce0 <xPortStartScheduler+0xd8>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004c94:	4a12      	ldr	r2, [pc, #72]	@ (8004ce0 <xPortStartScheduler+0xd8>)
 8004c96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	b2da      	uxtb	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004ca0:	4b10      	ldr	r3, [pc, #64]	@ (8004ce4 <xPortStartScheduler+0xdc>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a0f      	ldr	r2, [pc, #60]	@ (8004ce4 <xPortStartScheduler+0xdc>)
 8004ca6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004caa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004cac:	4b0d      	ldr	r3, [pc, #52]	@ (8004ce4 <xPortStartScheduler+0xdc>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a0c      	ldr	r2, [pc, #48]	@ (8004ce4 <xPortStartScheduler+0xdc>)
 8004cb2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004cb6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004cb8:	f000 f8b8 	bl	8004e2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004cbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004ce8 <xPortStartScheduler+0xe0>)
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004cc2:	f7ff ff91 	bl	8004be8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004cc6:	f7fe ffe1 	bl	8003c8c <vTaskSwitchContext>
	prvTaskExitError();
 8004cca:	f7ff ff47 	bl	8004b5c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004cce:	2300      	movs	r3, #0
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3710      	adds	r7, #16
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	e000e400 	.word	0xe000e400
 8004cdc:	20000db4 	.word	0x20000db4
 8004ce0:	20000db8 	.word	0x20000db8
 8004ce4:	e000ed20 	.word	0xe000ed20
 8004ce8:	20000014 	.word	0x20000014

08004cec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
	__asm volatile
 8004cf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cf6:	f383 8811 	msr	BASEPRI, r3
 8004cfa:	f3bf 8f6f 	isb	sy
 8004cfe:	f3bf 8f4f 	dsb	sy
 8004d02:	607b      	str	r3, [r7, #4]
}
 8004d04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d06:	4b0f      	ldr	r3, [pc, #60]	@ (8004d44 <vPortEnterCritical+0x58>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8004d44 <vPortEnterCritical+0x58>)
 8004d0e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d10:	4b0c      	ldr	r3, [pc, #48]	@ (8004d44 <vPortEnterCritical+0x58>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d110      	bne.n	8004d3a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d18:	4b0b      	ldr	r3, [pc, #44]	@ (8004d48 <vPortEnterCritical+0x5c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00b      	beq.n	8004d3a <vPortEnterCritical+0x4e>
	__asm volatile
 8004d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	603b      	str	r3, [r7, #0]
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop
 8004d38:	e7fd      	b.n	8004d36 <vPortEnterCritical+0x4a>
	}
}
 8004d3a:	bf00      	nop
 8004d3c:	370c      	adds	r7, #12
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bc80      	pop	{r7}
 8004d42:	4770      	bx	lr
 8004d44:	20000014 	.word	0x20000014
 8004d48:	e000ed04 	.word	0xe000ed04

08004d4c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004d52:	4b12      	ldr	r3, [pc, #72]	@ (8004d9c <vPortExitCritical+0x50>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10b      	bne.n	8004d72 <vPortExitCritical+0x26>
	__asm volatile
 8004d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d5e:	f383 8811 	msr	BASEPRI, r3
 8004d62:	f3bf 8f6f 	isb	sy
 8004d66:	f3bf 8f4f 	dsb	sy
 8004d6a:	607b      	str	r3, [r7, #4]
}
 8004d6c:	bf00      	nop
 8004d6e:	bf00      	nop
 8004d70:	e7fd      	b.n	8004d6e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004d72:	4b0a      	ldr	r3, [pc, #40]	@ (8004d9c <vPortExitCritical+0x50>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3b01      	subs	r3, #1
 8004d78:	4a08      	ldr	r2, [pc, #32]	@ (8004d9c <vPortExitCritical+0x50>)
 8004d7a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004d7c:	4b07      	ldr	r3, [pc, #28]	@ (8004d9c <vPortExitCritical+0x50>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d105      	bne.n	8004d90 <vPortExitCritical+0x44>
 8004d84:	2300      	movs	r3, #0
 8004d86:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	f383 8811 	msr	BASEPRI, r3
}
 8004d8e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004d90:	bf00      	nop
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bc80      	pop	{r7}
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	20000014 	.word	0x20000014

08004da0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004da0:	f3ef 8009 	mrs	r0, PSP
 8004da4:	f3bf 8f6f 	isb	sy
 8004da8:	4b0d      	ldr	r3, [pc, #52]	@ (8004de0 <pxCurrentTCBConst>)
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004db0:	6010      	str	r0, [r2, #0]
 8004db2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004db6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004dba:	f380 8811 	msr	BASEPRI, r0
 8004dbe:	f7fe ff65 	bl	8003c8c <vTaskSwitchContext>
 8004dc2:	f04f 0000 	mov.w	r0, #0
 8004dc6:	f380 8811 	msr	BASEPRI, r0
 8004dca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004dce:	6819      	ldr	r1, [r3, #0]
 8004dd0:	6808      	ldr	r0, [r1, #0]
 8004dd2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004dd6:	f380 8809 	msr	PSP, r0
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	4770      	bx	lr

08004de0 <pxCurrentTCBConst>:
 8004de0:	20000b8c 	.word	0x20000b8c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004de4:	bf00      	nop
 8004de6:	bf00      	nop

08004de8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	607b      	str	r3, [r7, #4]
}
 8004e00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004e02:	f7fe fe85 	bl	8003b10 <xTaskIncrementTick>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d003      	beq.n	8004e14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e0c:	4b06      	ldr	r3, [pc, #24]	@ (8004e28 <xPortSysTickHandler+0x40>)
 8004e0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e12:	601a      	str	r2, [r3, #0]
 8004e14:	2300      	movs	r3, #0
 8004e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	f383 8811 	msr	BASEPRI, r3
}
 8004e1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004e20:	bf00      	nop
 8004e22:	3708      	adds	r7, #8
 8004e24:	46bd      	mov	sp, r7
 8004e26:	bd80      	pop	{r7, pc}
 8004e28:	e000ed04 	.word	0xe000ed04

08004e2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004e30:	4b0a      	ldr	r3, [pc, #40]	@ (8004e5c <vPortSetupTimerInterrupt+0x30>)
 8004e32:	2200      	movs	r2, #0
 8004e34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004e36:	4b0a      	ldr	r3, [pc, #40]	@ (8004e60 <vPortSetupTimerInterrupt+0x34>)
 8004e38:	2200      	movs	r2, #0
 8004e3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004e3c:	4b09      	ldr	r3, [pc, #36]	@ (8004e64 <vPortSetupTimerInterrupt+0x38>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a09      	ldr	r2, [pc, #36]	@ (8004e68 <vPortSetupTimerInterrupt+0x3c>)
 8004e42:	fba2 2303 	umull	r2, r3, r2, r3
 8004e46:	099b      	lsrs	r3, r3, #6
 8004e48:	4a08      	ldr	r2, [pc, #32]	@ (8004e6c <vPortSetupTimerInterrupt+0x40>)
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004e4e:	4b03      	ldr	r3, [pc, #12]	@ (8004e5c <vPortSetupTimerInterrupt+0x30>)
 8004e50:	2207      	movs	r2, #7
 8004e52:	601a      	str	r2, [r3, #0]
}
 8004e54:	bf00      	nop
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bc80      	pop	{r7}
 8004e5a:	4770      	bx	lr
 8004e5c:	e000e010 	.word	0xe000e010
 8004e60:	e000e018 	.word	0xe000e018
 8004e64:	20000008 	.word	0x20000008
 8004e68:	10624dd3 	.word	0x10624dd3
 8004e6c:	e000e014 	.word	0xe000e014

08004e70 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004e76:	f3ef 8305 	mrs	r3, IPSR
 8004e7a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b0f      	cmp	r3, #15
 8004e80:	d915      	bls.n	8004eae <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004e82:	4a17      	ldr	r2, [pc, #92]	@ (8004ee0 <vPortValidateInterruptPriority+0x70>)
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	4413      	add	r3, r2
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004e8c:	4b15      	ldr	r3, [pc, #84]	@ (8004ee4 <vPortValidateInterruptPriority+0x74>)
 8004e8e:	781b      	ldrb	r3, [r3, #0]
 8004e90:	7afa      	ldrb	r2, [r7, #11]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d20b      	bcs.n	8004eae <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	607b      	str	r3, [r7, #4]
}
 8004ea8:	bf00      	nop
 8004eaa:	bf00      	nop
 8004eac:	e7fd      	b.n	8004eaa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004eae:	4b0e      	ldr	r3, [pc, #56]	@ (8004ee8 <vPortValidateInterruptPriority+0x78>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8004eec <vPortValidateInterruptPriority+0x7c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d90b      	bls.n	8004ed6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ec2:	f383 8811 	msr	BASEPRI, r3
 8004ec6:	f3bf 8f6f 	isb	sy
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	603b      	str	r3, [r7, #0]
}
 8004ed0:	bf00      	nop
 8004ed2:	bf00      	nop
 8004ed4:	e7fd      	b.n	8004ed2 <vPortValidateInterruptPriority+0x62>
	}
 8004ed6:	bf00      	nop
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bc80      	pop	{r7}
 8004ede:	4770      	bx	lr
 8004ee0:	e000e3f0 	.word	0xe000e3f0
 8004ee4:	20000db4 	.word	0x20000db4
 8004ee8:	e000ed0c 	.word	0xe000ed0c
 8004eec:	20000db8 	.word	0x20000db8

08004ef0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b08a      	sub	sp, #40	@ 0x28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ef8:	2300      	movs	r3, #0
 8004efa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004efc:	f7fe fd4e 	bl	800399c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f00:	4b5a      	ldr	r3, [pc, #360]	@ (800506c <pvPortMalloc+0x17c>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f08:	f000 f916 	bl	8005138 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f0c:	4b58      	ldr	r3, [pc, #352]	@ (8005070 <pvPortMalloc+0x180>)
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4013      	ands	r3, r2
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	f040 8090 	bne.w	800503a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d01e      	beq.n	8004f5e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004f20:	2208      	movs	r2, #8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4413      	add	r3, r2
 8004f26:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f003 0307 	and.w	r3, r3, #7
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d015      	beq.n	8004f5e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f023 0307 	bic.w	r3, r3, #7
 8004f38:	3308      	adds	r3, #8
 8004f3a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <pvPortMalloc+0x6e>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	617b      	str	r3, [r7, #20]
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	e7fd      	b.n	8004f5a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d06a      	beq.n	800503a <pvPortMalloc+0x14a>
 8004f64:	4b43      	ldr	r3, [pc, #268]	@ (8005074 <pvPortMalloc+0x184>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	429a      	cmp	r2, r3
 8004f6c:	d865      	bhi.n	800503a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004f6e:	4b42      	ldr	r3, [pc, #264]	@ (8005078 <pvPortMalloc+0x188>)
 8004f70:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004f72:	4b41      	ldr	r3, [pc, #260]	@ (8005078 <pvPortMalloc+0x188>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f78:	e004      	b.n	8004f84 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d903      	bls.n	8004f96 <pvPortMalloc+0xa6>
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d1f1      	bne.n	8004f7a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004f96:	4b35      	ldr	r3, [pc, #212]	@ (800506c <pvPortMalloc+0x17c>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d04c      	beq.n	800503a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2208      	movs	r2, #8
 8004fa6:	4413      	add	r3, r2
 8004fa8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	685a      	ldr	r2, [r3, #4]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	1ad2      	subs	r2, r2, r3
 8004fba:	2308      	movs	r3, #8
 8004fbc:	005b      	lsls	r3, r3, #1
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d920      	bls.n	8005004 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	f003 0307 	and.w	r3, r3, #7
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d00b      	beq.n	8004fec <pvPortMalloc+0xfc>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	613b      	str	r3, [r7, #16]
}
 8004fe6:	bf00      	nop
 8004fe8:	bf00      	nop
 8004fea:	e7fd      	b.n	8004fe8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	1ad2      	subs	r2, r2, r3
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ffe:	69b8      	ldr	r0, [r7, #24]
 8005000:	f000 f8fc 	bl	80051fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005004:	4b1b      	ldr	r3, [pc, #108]	@ (8005074 <pvPortMalloc+0x184>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500a:	685b      	ldr	r3, [r3, #4]
 800500c:	1ad3      	subs	r3, r2, r3
 800500e:	4a19      	ldr	r2, [pc, #100]	@ (8005074 <pvPortMalloc+0x184>)
 8005010:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005012:	4b18      	ldr	r3, [pc, #96]	@ (8005074 <pvPortMalloc+0x184>)
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	4b19      	ldr	r3, [pc, #100]	@ (800507c <pvPortMalloc+0x18c>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	429a      	cmp	r2, r3
 800501c:	d203      	bcs.n	8005026 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800501e:	4b15      	ldr	r3, [pc, #84]	@ (8005074 <pvPortMalloc+0x184>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a16      	ldr	r2, [pc, #88]	@ (800507c <pvPortMalloc+0x18c>)
 8005024:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	685a      	ldr	r2, [r3, #4]
 800502a:	4b11      	ldr	r3, [pc, #68]	@ (8005070 <pvPortMalloc+0x180>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	431a      	orrs	r2, r3
 8005030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005032:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800503a:	f7fe fcbd 	bl	80039b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	f003 0307 	and.w	r3, r3, #7
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00b      	beq.n	8005060 <pvPortMalloc+0x170>
	__asm volatile
 8005048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504c:	f383 8811 	msr	BASEPRI, r3
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	60fb      	str	r3, [r7, #12]
}
 800505a:	bf00      	nop
 800505c:	bf00      	nop
 800505e:	e7fd      	b.n	800505c <pvPortMalloc+0x16c>
	return pvReturn;
 8005060:	69fb      	ldr	r3, [r7, #28]
}
 8005062:	4618      	mov	r0, r3
 8005064:	3728      	adds	r7, #40	@ 0x28
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}
 800506a:	bf00      	nop
 800506c:	200019c4 	.word	0x200019c4
 8005070:	200019d0 	.word	0x200019d0
 8005074:	200019c8 	.word	0x200019c8
 8005078:	200019bc 	.word	0x200019bc
 800507c:	200019cc 	.word	0x200019cc

08005080 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b086      	sub	sp, #24
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d04a      	beq.n	8005128 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005092:	2308      	movs	r3, #8
 8005094:	425b      	negs	r3, r3
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	4413      	add	r3, r2
 800509a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	4b22      	ldr	r3, [pc, #136]	@ (8005130 <vPortFree+0xb0>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4013      	ands	r3, r2
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d10b      	bne.n	80050c6 <vPortFree+0x46>
	__asm volatile
 80050ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	60fb      	str	r3, [r7, #12]
}
 80050c0:	bf00      	nop
 80050c2:	bf00      	nop
 80050c4:	e7fd      	b.n	80050c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d00b      	beq.n	80050e6 <vPortFree+0x66>
	__asm volatile
 80050ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d2:	f383 8811 	msr	BASEPRI, r3
 80050d6:	f3bf 8f6f 	isb	sy
 80050da:	f3bf 8f4f 	dsb	sy
 80050de:	60bb      	str	r3, [r7, #8]
}
 80050e0:	bf00      	nop
 80050e2:	bf00      	nop
 80050e4:	e7fd      	b.n	80050e2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	685a      	ldr	r2, [r3, #4]
 80050ea:	4b11      	ldr	r3, [pc, #68]	@ (8005130 <vPortFree+0xb0>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4013      	ands	r3, r2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d019      	beq.n	8005128 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d115      	bne.n	8005128 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	4b0b      	ldr	r3, [pc, #44]	@ (8005130 <vPortFree+0xb0>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	43db      	mvns	r3, r3
 8005106:	401a      	ands	r2, r3
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800510c:	f7fe fc46 	bl	800399c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	4b07      	ldr	r3, [pc, #28]	@ (8005134 <vPortFree+0xb4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4413      	add	r3, r2
 800511a:	4a06      	ldr	r2, [pc, #24]	@ (8005134 <vPortFree+0xb4>)
 800511c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800511e:	6938      	ldr	r0, [r7, #16]
 8005120:	f000 f86c 	bl	80051fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005124:	f7fe fc48 	bl	80039b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005128:	bf00      	nop
 800512a:	3718      	adds	r7, #24
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	200019d0 	.word	0x200019d0
 8005134:	200019c8 	.word	0x200019c8

08005138 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005138:	b480      	push	{r7}
 800513a:	b085      	sub	sp, #20
 800513c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800513e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005142:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005144:	4b27      	ldr	r3, [pc, #156]	@ (80051e4 <prvHeapInit+0xac>)
 8005146:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	f003 0307 	and.w	r3, r3, #7
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00c      	beq.n	800516c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	3307      	adds	r3, #7
 8005156:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	f023 0307 	bic.w	r3, r3, #7
 800515e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005160:	68ba      	ldr	r2, [r7, #8]
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	4a1f      	ldr	r2, [pc, #124]	@ (80051e4 <prvHeapInit+0xac>)
 8005168:	4413      	add	r3, r2
 800516a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005170:	4a1d      	ldr	r2, [pc, #116]	@ (80051e8 <prvHeapInit+0xb0>)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005176:	4b1c      	ldr	r3, [pc, #112]	@ (80051e8 <prvHeapInit+0xb0>)
 8005178:	2200      	movs	r2, #0
 800517a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	4413      	add	r3, r2
 8005182:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005184:	2208      	movs	r2, #8
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	1a9b      	subs	r3, r3, r2
 800518a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f023 0307 	bic.w	r3, r3, #7
 8005192:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	4a15      	ldr	r2, [pc, #84]	@ (80051ec <prvHeapInit+0xb4>)
 8005198:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800519a:	4b14      	ldr	r3, [pc, #80]	@ (80051ec <prvHeapInit+0xb4>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2200      	movs	r2, #0
 80051a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051a2:	4b12      	ldr	r3, [pc, #72]	@ (80051ec <prvHeapInit+0xb4>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	2200      	movs	r2, #0
 80051a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	1ad2      	subs	r2, r2, r3
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051b8:	4b0c      	ldr	r3, [pc, #48]	@ (80051ec <prvHeapInit+0xb4>)
 80051ba:	681a      	ldr	r2, [r3, #0]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	4a0a      	ldr	r2, [pc, #40]	@ (80051f0 <prvHeapInit+0xb8>)
 80051c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	4a09      	ldr	r2, [pc, #36]	@ (80051f4 <prvHeapInit+0xbc>)
 80051ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051d0:	4b09      	ldr	r3, [pc, #36]	@ (80051f8 <prvHeapInit+0xc0>)
 80051d2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80051d6:	601a      	str	r2, [r3, #0]
}
 80051d8:	bf00      	nop
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	bc80      	pop	{r7}
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	20000dbc 	.word	0x20000dbc
 80051e8:	200019bc 	.word	0x200019bc
 80051ec:	200019c4 	.word	0x200019c4
 80051f0:	200019cc 	.word	0x200019cc
 80051f4:	200019c8 	.word	0x200019c8
 80051f8:	200019d0 	.word	0x200019d0

080051fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005204:	4b27      	ldr	r3, [pc, #156]	@ (80052a4 <prvInsertBlockIntoFreeList+0xa8>)
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	e002      	b.n	8005210 <prvInsertBlockIntoFreeList+0x14>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	429a      	cmp	r2, r3
 8005218:	d8f7      	bhi.n	800520a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	4413      	add	r3, r2
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	429a      	cmp	r2, r3
 800522a:	d108      	bne.n	800523e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	441a      	add	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	441a      	add	r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d118      	bne.n	8005284 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	4b14      	ldr	r3, [pc, #80]	@ (80052a8 <prvInsertBlockIntoFreeList+0xac>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d00d      	beq.n	800527a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	441a      	add	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	e008      	b.n	800528c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800527a:	4b0b      	ldr	r3, [pc, #44]	@ (80052a8 <prvInsertBlockIntoFreeList+0xac>)
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	e003      	b.n	800528c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	429a      	cmp	r2, r3
 8005292:	d002      	beq.n	800529a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800529a:	bf00      	nop
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	bc80      	pop	{r7}
 80052a2:	4770      	bx	lr
 80052a4:	200019bc 	.word	0x200019bc
 80052a8:	200019c4 	.word	0x200019c4

080052ac <memset>:
 80052ac:	4603      	mov	r3, r0
 80052ae:	4402      	add	r2, r0
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d100      	bne.n	80052b6 <memset+0xa>
 80052b4:	4770      	bx	lr
 80052b6:	f803 1b01 	strb.w	r1, [r3], #1
 80052ba:	e7f9      	b.n	80052b0 <memset+0x4>

080052bc <__libc_init_array>:
 80052bc:	b570      	push	{r4, r5, r6, lr}
 80052be:	2600      	movs	r6, #0
 80052c0:	4d0c      	ldr	r5, [pc, #48]	@ (80052f4 <__libc_init_array+0x38>)
 80052c2:	4c0d      	ldr	r4, [pc, #52]	@ (80052f8 <__libc_init_array+0x3c>)
 80052c4:	1b64      	subs	r4, r4, r5
 80052c6:	10a4      	asrs	r4, r4, #2
 80052c8:	42a6      	cmp	r6, r4
 80052ca:	d109      	bne.n	80052e0 <__libc_init_array+0x24>
 80052cc:	f000 f828 	bl	8005320 <_init>
 80052d0:	2600      	movs	r6, #0
 80052d2:	4d0a      	ldr	r5, [pc, #40]	@ (80052fc <__libc_init_array+0x40>)
 80052d4:	4c0a      	ldr	r4, [pc, #40]	@ (8005300 <__libc_init_array+0x44>)
 80052d6:	1b64      	subs	r4, r4, r5
 80052d8:	10a4      	asrs	r4, r4, #2
 80052da:	42a6      	cmp	r6, r4
 80052dc:	d105      	bne.n	80052ea <__libc_init_array+0x2e>
 80052de:	bd70      	pop	{r4, r5, r6, pc}
 80052e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80052e4:	4798      	blx	r3
 80052e6:	3601      	adds	r6, #1
 80052e8:	e7ee      	b.n	80052c8 <__libc_init_array+0xc>
 80052ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80052ee:	4798      	blx	r3
 80052f0:	3601      	adds	r6, #1
 80052f2:	e7f2      	b.n	80052da <__libc_init_array+0x1e>
 80052f4:	0800672c 	.word	0x0800672c
 80052f8:	0800672c 	.word	0x0800672c
 80052fc:	0800672c 	.word	0x0800672c
 8005300:	08006730 	.word	0x08006730

08005304 <memcpy>:
 8005304:	440a      	add	r2, r1
 8005306:	4291      	cmp	r1, r2
 8005308:	f100 33ff 	add.w	r3, r0, #4294967295
 800530c:	d100      	bne.n	8005310 <memcpy+0xc>
 800530e:	4770      	bx	lr
 8005310:	b510      	push	{r4, lr}
 8005312:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005316:	4291      	cmp	r1, r2
 8005318:	f803 4f01 	strb.w	r4, [r3, #1]!
 800531c:	d1f9      	bne.n	8005312 <memcpy+0xe>
 800531e:	bd10      	pop	{r4, pc}

08005320 <_init>:
 8005320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005322:	bf00      	nop
 8005324:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005326:	bc08      	pop	{r3}
 8005328:	469e      	mov	lr, r3
 800532a:	4770      	bx	lr

0800532c <_fini>:
 800532c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800532e:	bf00      	nop
 8005330:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005332:	bc08      	pop	{r3}
 8005334:	469e      	mov	lr, r3
 8005336:	4770      	bx	lr
