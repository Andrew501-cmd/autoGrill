
auto_mangal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f98  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001938  080040a8  080040a8  000050a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059e0  080059e0  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  080059e0  080059e0  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080059e0  080059e0  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059e0  080059e0  000069e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059e4  080059e4  000069e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080059e8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b08  20000068  08005a50  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b70  08005a50  00007b70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014b8a  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003741  00000000  00000000  0001bc1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  0001f360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f57  00000000  00000000  0001ffe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018e4c  00000000  00000000  00020f3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168fe  00000000  00000000  00039d8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a1cc  00000000  00000000  00050689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000da855  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028ac  00000000  00000000  000da898  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 000071d0  00000000  00000000  000dd144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000e4314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08004090 	.word	0x08004090

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08004090 	.word	0x08004090

08000150 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000150:	4b03      	ldr	r3, [pc, #12]	@ (8000160 <vApplicationGetIdleTaskMemory+0x10>)
 8000152:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000154:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <vApplicationGetIdleTaskMemory+0x14>)
 8000156:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000158:	2380      	movs	r3, #128	@ 0x80
 800015a:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	200006d8 	.word	0x200006d8
 8000164:	200004d8 	.word	0x200004d8

08000168 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000168:	4b03      	ldr	r3, [pc, #12]	@ (8000178 <vApplicationGetTimerTaskMemory+0x10>)
 800016a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800016c:	4b03      	ldr	r3, [pc, #12]	@ (800017c <vApplicationGetTimerTaskMemory+0x14>)
 800016e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000170:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000174:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000176:	4770      	bx	lr
 8000178:	20000484 	.word	0x20000484
 800017c:	20000084 	.word	0x20000084

08000180 <screenTimeoutCallback>:
void screenTimeoutCallback(void const * argument)
{
  /* USER CODE BEGIN screenTimeoutCallback */
  //ssd1306_SetDisplayOn(0);
  /* USER CODE END screenTimeoutCallback */
}
 8000180:	4770      	bx	lr
	...

08000184 <StartReadKeyTask>:
  osTimerStart(screenTimeoutTimerHandle, SCREEN_TIMEOUT);
 8000184:	4c5d      	ldr	r4, [pc, #372]	@ (80002fc <StartReadKeyTask+0x178>)
{
 8000186:	b580      	push	{r7, lr}
  osTimerStart(screenTimeoutTimerHandle, SCREEN_TIMEOUT);
 8000188:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800018c:	6820      	ldr	r0, [r4, #0]
 800018e:	f001 fd19 	bl	8001bc4 <osTimerStart>
	if (HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0) {
 8000192:	4f5b      	ldr	r7, [pc, #364]	@ (8000300 <StartReadKeyTask+0x17c>)
	    osTimerStart(cancelButtonHandle, 1000);
 8000194:	4e5b      	ldr	r6, [pc, #364]	@ (8000304 <StartReadKeyTask+0x180>)
	if (HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0) {
 8000196:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800019a:	4638      	mov	r0, r7
 800019c:	f000 ffca 	bl	8001134 <HAL_GPIO_ReadPin>
 80001a0:	4605      	mov	r5, r0
 80001a2:	bb00      	cbnz	r0, 80001e6 <StartReadKeyTask+0x62>
	    if (ssd1306_GetDisplayOn()==1) osMessagePut(buttonPressedQueueHandle, 0, 100); else ssd1306_SetDisplayOn(1);
 80001a4:	f000 fd80 	bl	8000ca8 <ssd1306_GetDisplayOn>
 80001a8:	2801      	cmp	r0, #1
 80001aa:	d114      	bne.n	80001d6 <StartReadKeyTask+0x52>
 80001ac:	4b56      	ldr	r3, [pc, #344]	@ (8000308 <StartReadKeyTask+0x184>)
 80001ae:	2264      	movs	r2, #100	@ 0x64
 80001b0:	4629      	mov	r1, r5
 80001b2:	6818      	ldr	r0, [r3, #0]
 80001b4:	f001 fd68 	bl	8001c88 <osMessagePut>
	    while(HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0)
 80001b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001bc:	4638      	mov	r0, r7
 80001be:	f000 ffb9 	bl	8001134 <HAL_GPIO_ReadPin>
 80001c2:	b160      	cbz	r0, 80001de <StartReadKeyTask+0x5a>
	    osTimerStart(screenTimeoutTimerHandle, SCREEN_TIMEOUT);
 80001c4:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80001c8:	6820      	ldr	r0, [r4, #0]
 80001ca:	f001 fcfb 	bl	8001bc4 <osTimerStart>
    osDelay(50);
 80001ce:	2032      	movs	r0, #50	@ 0x32
 80001d0:	f001 fcd7 	bl	8001b82 <osDelay>
	if (HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0) {
 80001d4:	e7df      	b.n	8000196 <StartReadKeyTask+0x12>
	    if (ssd1306_GetDisplayOn()==1) osMessagePut(buttonPressedQueueHandle, 0, 100); else ssd1306_SetDisplayOn(1);
 80001d6:	2001      	movs	r0, #1
 80001d8:	f000 fcf4 	bl	8000bc4 <ssd1306_SetDisplayOn>
 80001dc:	e7ec      	b.n	80001b8 <StartReadKeyTask+0x34>
		    osDelay(1);
 80001de:	2001      	movs	r0, #1
 80001e0:	f001 fccf 	bl	8001b82 <osDelay>
 80001e4:	e7e8      	b.n	80001b8 <StartReadKeyTask+0x34>
	else if (HAL_GPIO_ReadPin(btn_top_GPIO_Port, btn_top_Pin) == 0) {
 80001e6:	2180      	movs	r1, #128	@ 0x80
 80001e8:	4848      	ldr	r0, [pc, #288]	@ (800030c <StartReadKeyTask+0x188>)
 80001ea:	f000 ffa3 	bl	8001134 <HAL_GPIO_ReadPin>
 80001ee:	b9c0      	cbnz	r0, 8000222 <StartReadKeyTask+0x9e>
	    if (ssd1306_GetDisplayOn()==1) osMessagePut(buttonPressedQueueHandle, 1, 100); else ssd1306_SetDisplayOn(1);
 80001f0:	f000 fd5a 	bl	8000ca8 <ssd1306_GetDisplayOn>
 80001f4:	2801      	cmp	r0, #1
 80001f6:	4601      	mov	r1, r0
 80001f8:	d10f      	bne.n	800021a <StartReadKeyTask+0x96>
 80001fa:	4b43      	ldr	r3, [pc, #268]	@ (8000308 <StartReadKeyTask+0x184>)
 80001fc:	2264      	movs	r2, #100	@ 0x64
 80001fe:	6818      	ldr	r0, [r3, #0]
 8000200:	f001 fd42 	bl	8001c88 <osMessagePut>
	    while(HAL_GPIO_ReadPin(btn_top_GPIO_Port, btn_top_Pin) == 0)
 8000204:	4d41      	ldr	r5, [pc, #260]	@ (800030c <StartReadKeyTask+0x188>)
 8000206:	2180      	movs	r1, #128	@ 0x80
 8000208:	4628      	mov	r0, r5
 800020a:	f000 ff93 	bl	8001134 <HAL_GPIO_ReadPin>
 800020e:	2800      	cmp	r0, #0
 8000210:	d1d8      	bne.n	80001c4 <StartReadKeyTask+0x40>
		    osDelay(1);
 8000212:	2001      	movs	r0, #1
 8000214:	f001 fcb5 	bl	8001b82 <osDelay>
 8000218:	e7f5      	b.n	8000206 <StartReadKeyTask+0x82>
	    if (ssd1306_GetDisplayOn()==1) osMessagePut(buttonPressedQueueHandle, 1, 100); else ssd1306_SetDisplayOn(1);
 800021a:	2001      	movs	r0, #1
 800021c:	f000 fcd2 	bl	8000bc4 <ssd1306_SetDisplayOn>
 8000220:	e7f0      	b.n	8000204 <StartReadKeyTask+0x80>
	else if (HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin) == 0) {
 8000222:	2110      	movs	r1, #16
 8000224:	4839      	ldr	r0, [pc, #228]	@ (800030c <StartReadKeyTask+0x188>)
 8000226:	f000 ff85 	bl	8001134 <HAL_GPIO_ReadPin>
 800022a:	b9c0      	cbnz	r0, 800025e <StartReadKeyTask+0xda>
	    if (ssd1306_GetDisplayOn()==1) osMessagePut(buttonPressedQueueHandle, 2, 100); else ssd1306_SetDisplayOn(1);
 800022c:	f000 fd3c 	bl	8000ca8 <ssd1306_GetDisplayOn>
 8000230:	2801      	cmp	r0, #1
 8000232:	d110      	bne.n	8000256 <StartReadKeyTask+0xd2>
 8000234:	4b34      	ldr	r3, [pc, #208]	@ (8000308 <StartReadKeyTask+0x184>)
 8000236:	2264      	movs	r2, #100	@ 0x64
 8000238:	2102      	movs	r1, #2
 800023a:	6818      	ldr	r0, [r3, #0]
 800023c:	f001 fd24 	bl	8001c88 <osMessagePut>
	    while(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin) == 0)
 8000240:	4d32      	ldr	r5, [pc, #200]	@ (800030c <StartReadKeyTask+0x188>)
 8000242:	2110      	movs	r1, #16
 8000244:	4628      	mov	r0, r5
 8000246:	f000 ff75 	bl	8001134 <HAL_GPIO_ReadPin>
 800024a:	2800      	cmp	r0, #0
 800024c:	d1ba      	bne.n	80001c4 <StartReadKeyTask+0x40>
		    osDelay(1);
 800024e:	2001      	movs	r0, #1
 8000250:	f001 fc97 	bl	8001b82 <osDelay>
 8000254:	e7f5      	b.n	8000242 <StartReadKeyTask+0xbe>
	    if (ssd1306_GetDisplayOn()==1) osMessagePut(buttonPressedQueueHandle, 2, 100); else ssd1306_SetDisplayOn(1);
 8000256:	2001      	movs	r0, #1
 8000258:	f000 fcb4 	bl	8000bc4 <ssd1306_SetDisplayOn>
 800025c:	e7f0      	b.n	8000240 <StartReadKeyTask+0xbc>
	else if (HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin) == 0) {
 800025e:	2140      	movs	r1, #64	@ 0x40
 8000260:	482a      	ldr	r0, [pc, #168]	@ (800030c <StartReadKeyTask+0x188>)
 8000262:	f000 ff67 	bl	8001134 <HAL_GPIO_ReadPin>
 8000266:	b9c0      	cbnz	r0, 800029a <StartReadKeyTask+0x116>
	    if (ssd1306_GetDisplayOn()==1) osMessagePut(buttonPressedQueueHandle, 3, 100); else ssd1306_SetDisplayOn(1);
 8000268:	f000 fd1e 	bl	8000ca8 <ssd1306_GetDisplayOn>
 800026c:	2801      	cmp	r0, #1
 800026e:	d110      	bne.n	8000292 <StartReadKeyTask+0x10e>
 8000270:	4b25      	ldr	r3, [pc, #148]	@ (8000308 <StartReadKeyTask+0x184>)
 8000272:	2264      	movs	r2, #100	@ 0x64
 8000274:	2103      	movs	r1, #3
 8000276:	6818      	ldr	r0, [r3, #0]
 8000278:	f001 fd06 	bl	8001c88 <osMessagePut>
	    while(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin) == 0)
 800027c:	4d23      	ldr	r5, [pc, #140]	@ (800030c <StartReadKeyTask+0x188>)
 800027e:	2140      	movs	r1, #64	@ 0x40
 8000280:	4628      	mov	r0, r5
 8000282:	f000 ff57 	bl	8001134 <HAL_GPIO_ReadPin>
 8000286:	2800      	cmp	r0, #0
 8000288:	d19c      	bne.n	80001c4 <StartReadKeyTask+0x40>
		    osDelay(1);
 800028a:	2001      	movs	r0, #1
 800028c:	f001 fc79 	bl	8001b82 <osDelay>
 8000290:	e7f5      	b.n	800027e <StartReadKeyTask+0xfa>
	    if (ssd1306_GetDisplayOn()==1) osMessagePut(buttonPressedQueueHandle, 3, 100); else ssd1306_SetDisplayOn(1);
 8000292:	2001      	movs	r0, #1
 8000294:	f000 fc96 	bl	8000bc4 <ssd1306_SetDisplayOn>
 8000298:	e7f0      	b.n	800027c <StartReadKeyTask+0xf8>
	else if (HAL_GPIO_ReadPin(btn_ok_GPIO_Port, btn_ok_Pin) == 0) {
 800029a:	2120      	movs	r1, #32
 800029c:	481b      	ldr	r0, [pc, #108]	@ (800030c <StartReadKeyTask+0x188>)
 800029e:	f000 ff49 	bl	8001134 <HAL_GPIO_ReadPin>
 80002a2:	2800      	cmp	r0, #0
 80002a4:	d193      	bne.n	80001ce <StartReadKeyTask+0x4a>
	    osTimerStart(cancelButtonHandle, 1000);
 80002a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80002aa:	6830      	ldr	r0, [r6, #0]
 80002ac:	f001 fc8a 	bl	8001bc4 <osTimerStart>
	    while(HAL_GPIO_ReadPin(btn_ok_GPIO_Port, btn_ok_Pin) == 0)
 80002b0:	4d16      	ldr	r5, [pc, #88]	@ (800030c <StartReadKeyTask+0x188>)
 80002b2:	2120      	movs	r1, #32
 80002b4:	4628      	mov	r0, r5
 80002b6:	f000 ff3d 	bl	8001134 <HAL_GPIO_ReadPin>
 80002ba:	b1b0      	cbz	r0, 80002ea <StartReadKeyTask+0x166>
	    osTimerStart(screenTimeoutTimerHandle, SCREEN_TIMEOUT);
 80002bc:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80002c0:	6820      	ldr	r0, [r4, #0]
 80002c2:	f001 fc7f 	bl	8001bc4 <osTimerStart>
	    if (xTimerIsTimerActive(cancelButtonHandle) != pdFALSE) {
 80002c6:	6830      	ldr	r0, [r6, #0]
 80002c8:	f002 ffcc 	bl	8003264 <xTimerIsTimerActive>
 80002cc:	b148      	cbz	r0, 80002e2 <StartReadKeyTask+0x15e>
		if (ssd1306_GetDisplayOn()==1) osMessagePut(buttonPressedQueueHandle, 4, 100); else ssd1306_SetDisplayOn(1);
 80002ce:	f000 fceb 	bl	8000ca8 <ssd1306_GetDisplayOn>
 80002d2:	2801      	cmp	r0, #1
 80002d4:	d10d      	bne.n	80002f2 <StartReadKeyTask+0x16e>
 80002d6:	4b0c      	ldr	r3, [pc, #48]	@ (8000308 <StartReadKeyTask+0x184>)
 80002d8:	2264      	movs	r2, #100	@ 0x64
 80002da:	2104      	movs	r1, #4
 80002dc:	6818      	ldr	r0, [r3, #0]
 80002de:	f001 fcd3 	bl	8001c88 <osMessagePut>
	    osTimerStop(cancelButtonHandle);
 80002e2:	6830      	ldr	r0, [r6, #0]
 80002e4:	f001 fc97 	bl	8001c16 <osTimerStop>
 80002e8:	e771      	b.n	80001ce <StartReadKeyTask+0x4a>
		    osDelay(1);
 80002ea:	2001      	movs	r0, #1
 80002ec:	f001 fc49 	bl	8001b82 <osDelay>
 80002f0:	e7df      	b.n	80002b2 <StartReadKeyTask+0x12e>
		if (ssd1306_GetDisplayOn()==1) osMessagePut(buttonPressedQueueHandle, 4, 100); else ssd1306_SetDisplayOn(1);
 80002f2:	2001      	movs	r0, #1
 80002f4:	f000 fc66 	bl	8000bc4 <ssd1306_SetDisplayOn>
 80002f8:	e7f3      	b.n	80002e2 <StartReadKeyTask+0x15e>
 80002fa:	bf00      	nop
 80002fc:	2000072c 	.word	0x2000072c
 8000300:	40010800 	.word	0x40010800
 8000304:	20000730 	.word	0x20000730
 8000308:	20000734 	.word	0x20000734
 800030c:	40010c00 	.word	0x40010c00

08000310 <StartGuiTask>:
{
 8000310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t intermittentModeMenuPointer = 0;
 8000314:	f04f 0b00 	mov.w	fp, #0
  uint8_t corner = 45;
 8000318:	f04f 082d 	mov.w	r8, #45	@ 0x2d
  uint8_t sleep = 60;
 800031c:	263c      	movs	r6, #60	@ 0x3c
  uint8_t speed = 5;
 800031e:	2705      	movs	r7, #5
  uint8_t guiState = 0;
 8000320:	465d      	mov	r5, fp
{
 8000322:	b08b      	sub	sp, #44	@ 0x2c
  uint8_t selectedMode = 0;
 8000324:	f8cd b00c 	str.w	fp, [sp, #12]
      btnEvent = osMessageGet(buttonPressedQueueHandle, 100);
 8000328:	4bc5      	ldr	r3, [pc, #788]	@ (8000640 <StartGuiTask+0x330>)
 800032a:	2264      	movs	r2, #100	@ 0x64
 800032c:	6819      	ldr	r1, [r3, #0]
 800032e:	a807      	add	r0, sp, #28
 8000330:	f001 fcd3 	bl	8001cda <osMessageGet>
 8000334:	9b07      	ldr	r3, [sp, #28]
      switch (guiState) {
 8000336:	2d01      	cmp	r5, #1
      btnEvent = osMessageGet(buttonPressedQueueHandle, 100);
 8000338:	f8dd a020 	ldr.w	sl, [sp, #32]
 800033c:	9302      	str	r3, [sp, #8]
      switch (guiState) {
 800033e:	f000 8081 	beq.w	8000444 <StartGuiTask+0x134>
 8000342:	2d02      	cmp	r5, #2
 8000344:	f000 80d2 	beq.w	80004ec <StartGuiTask+0x1dc>
 8000348:	2d00      	cmp	r5, #0
 800034a:	d15c      	bne.n	8000406 <StartGuiTask+0xf6>
	  ssd1306_DrawRectangle(0, 0, 127, 63, White);
 800034c:	f04f 0901 	mov.w	r9, #1
	  ssd1306_Fill(Black);
 8000350:	4628      	mov	r0, r5
 8000352:	f000 fad9 	bl	8000908 <ssd1306_Fill>
	  ssd1306_WriteString("Выбор режима", RuFont_7x13, Black);
 8000356:	4cbb      	ldr	r4, [pc, #748]	@ (8000644 <StartGuiTask+0x334>)
	  ssd1306_DrawRectangle(0, 0, 127, 63, White);
 8000358:	233f      	movs	r3, #63	@ 0x3f
 800035a:	227f      	movs	r2, #127	@ 0x7f
 800035c:	4629      	mov	r1, r5
 800035e:	4628      	mov	r0, r5
 8000360:	f8cd 9000 	str.w	r9, [sp]
 8000364:	f000 fbc2 	bl	8000aec <ssd1306_DrawRectangle>
	  ssd1306_SetCursor(1,1);
 8000368:	4649      	mov	r1, r9
 800036a:	4648      	mov	r0, r9
 800036c:	f000 fb72 	bl	8000a54 <ssd1306_SetCursor>
	  ssd1306_WriteString("Выбор режима", RuFont_7x13, Black);
 8000370:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000374:	462b      	mov	r3, r5
 8000376:	48b4      	ldr	r0, [pc, #720]	@ (8000648 <StartGuiTask+0x338>)
 8000378:	f000 fb58 	bl	8000a2c <ssd1306_WriteString>
	  if (selectedMode == 0) {
 800037c:	9b03      	ldr	r3, [sp, #12]
	    ssd1306_SetCursor(4,16);
 800037e:	2110      	movs	r1, #16
 8000380:	2004      	movs	r0, #4
	  if (selectedMode == 0) {
 8000382:	bb5b      	cbnz	r3, 80003dc <StartGuiTask+0xcc>
	    ssd1306_SetCursor(4,16);
 8000384:	f000 fb66 	bl	8000a54 <ssd1306_SetCursor>
	    ssd1306_WriteString("> Постоянный", RuFont_7x13, White);
 8000388:	e894 0006 	ldmia.w	r4, {r1, r2}
 800038c:	464b      	mov	r3, r9
 800038e:	48af      	ldr	r0, [pc, #700]	@ (800064c <StartGuiTask+0x33c>)
 8000390:	f000 fb4c 	bl	8000a2c <ssd1306_WriteString>
	    ssd1306_SetCursor(4,30);
 8000394:	211e      	movs	r1, #30
 8000396:	2004      	movs	r0, #4
 8000398:	f000 fb5c 	bl	8000a54 <ssd1306_SetCursor>
	    ssd1306_WriteString("  Прерывистый", RuFont_7x13, White);
 800039c:	e894 0006 	ldmia.w	r4, {r1, r2}
 80003a0:	464b      	mov	r3, r9
 80003a2:	48ab      	ldr	r0, [pc, #684]	@ (8000650 <StartGuiTask+0x340>)
	    ssd1306_WriteString("> Прерывистый", RuFont_7x13, White);
 80003a4:	f000 fb42 	bl	8000a2c <ssd1306_WriteString>
	  if (btnEvent.status == osEventMessage)
 80003a8:	9b02      	ldr	r3, [sp, #8]
 80003aa:	2b10      	cmp	r3, #16
 80003ac:	d12a      	bne.n	8000404 <StartGuiTask+0xf4>
	    if (btnEvent.value.v == 0 || btnEvent.value.v == 1)
 80003ae:	f1ba 0f01 	cmp.w	sl, #1
 80003b2:	d824      	bhi.n	80003fe <StartGuiTask+0xee>
	      selectedMode = !selectedMode;
 80003b4:	9b03      	ldr	r3, [sp, #12]
 80003b6:	f083 0301 	eor.w	r3, r3, #1
 80003ba:	9303      	str	r3, [sp, #12]
		if (btnEvent.value.v == 0) { //bottom
 80003bc:	f1ba 0f03 	cmp.w	sl, #3
 80003c0:	d979      	bls.n	80004b6 <StartGuiTask+0x1a6>
 80003c2:	f1ba 0f04 	cmp.w	sl, #4
 80003c6:	d02c      	beq.n	8000422 <StartGuiTask+0x112>
 80003c8:	f1ba 0f05 	cmp.w	sl, #5
 80003cc:	d11e      	bne.n	800040c <StartGuiTask+0xfc>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 80003ce:	48a1      	ldr	r0, [pc, #644]	@ (8000654 <StartGuiTask+0x344>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	2110      	movs	r1, #16
 80003d4:	f000 feb4 	bl	8001140 <HAL_GPIO_WritePin>
			osDelay(250);
 80003d8:	20fa      	movs	r0, #250	@ 0xfa
 80003da:	e072      	b.n	80004c2 <StartGuiTask+0x1b2>
	    ssd1306_SetCursor(4,16);
 80003dc:	f000 fb3a 	bl	8000a54 <ssd1306_SetCursor>
	    ssd1306_WriteString("  Постоянный", RuFont_7x13, White);
 80003e0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80003e4:	464b      	mov	r3, r9
 80003e6:	489c      	ldr	r0, [pc, #624]	@ (8000658 <StartGuiTask+0x348>)
 80003e8:	f000 fb20 	bl	8000a2c <ssd1306_WriteString>
	    ssd1306_SetCursor(4,30);
 80003ec:	211e      	movs	r1, #30
 80003ee:	2004      	movs	r0, #4
 80003f0:	f000 fb30 	bl	8000a54 <ssd1306_SetCursor>
	    ssd1306_WriteString("> Прерывистый", RuFont_7x13, White);
 80003f4:	e894 0006 	ldmia.w	r4, {r1, r2}
 80003f8:	464b      	mov	r3, r9
 80003fa:	4898      	ldr	r0, [pc, #608]	@ (800065c <StartGuiTask+0x34c>)
 80003fc:	e7d2      	b.n	80003a4 <StartGuiTask+0x94>
	    } else if (btnEvent.value.v == 4)
 80003fe:	f1ba 0f04 	cmp.w	sl, #4
 8000402:	d009      	beq.n	8000418 <StartGuiTask+0x108>
  uint8_t guiState = 0;
 8000404:	2500      	movs	r5, #0
	if (btnEvent.status == osEventMessage)
 8000406:	9b02      	ldr	r3, [sp, #8]
 8000408:	2b10      	cmp	r3, #16
 800040a:	d0d7      	beq.n	80003bc <StartGuiTask+0xac>
	ssd1306_UpdateScreen();
 800040c:	f000 fa88 	bl	8000920 <ssd1306_UpdateScreen>
	osDelay(30);//
 8000410:	201e      	movs	r0, #30
 8000412:	f001 fbb6 	bl	8001b82 <osDelay>
      btnEvent = osMessageGet(buttonPressedQueueHandle, 100);
 8000416:	e787      	b.n	8000328 <StartGuiTask+0x18>
		  guiState = 1;
 8000418:	9b03      	ldr	r3, [sp, #12]
 800041a:	2b00      	cmp	r3, #0
 800041c:	bf14      	ite	ne
 800041e:	2502      	movne	r5, #2
 8000420:	2501      	moveq	r5, #1
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 8000422:	2201      	movs	r2, #1
 8000424:	2110      	movs	r1, #16
 8000426:	488b      	ldr	r0, [pc, #556]	@ (8000654 <StartGuiTask+0x344>)
 8000428:	f000 fe8a 	bl	8001140 <HAL_GPIO_WritePin>
			osDelay(50);
 800042c:	2032      	movs	r0, #50	@ 0x32
 800042e:	f001 fba8 	bl	8001b82 <osDelay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	2110      	movs	r1, #16
 8000436:	4887      	ldr	r0, [pc, #540]	@ (8000654 <StartGuiTask+0x344>)
 8000438:	f000 fe82 	bl	8001140 <HAL_GPIO_WritePin>
			osDelay(50);
 800043c:	2032      	movs	r0, #50	@ 0x32
 800043e:	f001 fba0 	bl	8001b82 <osDelay>
 8000442:	e038      	b.n	80004b6 <StartGuiTask+0x1a6>
	  ssd1306_Fill(Black);
 8000444:	2000      	movs	r0, #0
 8000446:	f000 fa5f 	bl	8000908 <ssd1306_Fill>
	  ssd1306_DrawRectangle(0, 0, 127, 63, White);
 800044a:	2100      	movs	r1, #0
 800044c:	233f      	movs	r3, #63	@ 0x3f
 800044e:	227f      	movs	r2, #127	@ 0x7f
 8000450:	4608      	mov	r0, r1
	  ssd1306_WriteString("Постоянный реж.", RuFont_7x13, Black);
 8000452:	4c7c      	ldr	r4, [pc, #496]	@ (8000644 <StartGuiTask+0x334>)
	  ssd1306_DrawRectangle(0, 0, 127, 63, White);
 8000454:	9500      	str	r5, [sp, #0]
 8000456:	f000 fb49 	bl	8000aec <ssd1306_DrawRectangle>
	  ssd1306_SetCursor(1,1);
 800045a:	4629      	mov	r1, r5
 800045c:	4628      	mov	r0, r5
 800045e:	f000 faf9 	bl	8000a54 <ssd1306_SetCursor>
	  ssd1306_WriteString("Постоянный реж.", RuFont_7x13, Black);
 8000462:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000466:	2300      	movs	r3, #0
 8000468:	487d      	ldr	r0, [pc, #500]	@ (8000660 <StartGuiTask+0x350>)
 800046a:	f000 fadf 	bl	8000a2c <ssd1306_WriteString>
	  ssd1306_SetCursor(4,16);
 800046e:	2110      	movs	r1, #16
 8000470:	2004      	movs	r0, #4
 8000472:	f000 faef 	bl	8000a54 <ssd1306_SetCursor>
	  ssd1306_WriteString("> Скорость: ", RuFont_7x13, White);
 8000476:	e894 0006 	ldmia.w	r4, {r1, r2}
 800047a:	462b      	mov	r3, r5
 800047c:	4879      	ldr	r0, [pc, #484]	@ (8000664 <StartGuiTask+0x354>)
 800047e:	f000 fad5 	bl	8000a2c <ssd1306_WriteString>
	  ssd1306_SetCursor(88,16);
 8000482:	2110      	movs	r1, #16
 8000484:	2058      	movs	r0, #88	@ 0x58
 8000486:	f000 fae5 	bl	8000a54 <ssd1306_SetCursor>
	  sprintf(speedStr, "%d", speed);
 800048a:	463a      	mov	r2, r7
 800048c:	4976      	ldr	r1, [pc, #472]	@ (8000668 <StartGuiTask+0x358>)
 800048e:	a806      	add	r0, sp, #24
 8000490:	f003 f94e 	bl	8003730 <siprintf>
	  ssd1306_WriteString(speedStr, RuFont_7x13, White);
 8000494:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000498:	462b      	mov	r3, r5
 800049a:	a806      	add	r0, sp, #24
 800049c:	f000 fac6 	bl	8000a2c <ssd1306_WriteString>
	  if (btnEvent.status == osEventMessage)
 80004a0:	9b02      	ldr	r3, [sp, #8]
 80004a2:	2b10      	cmp	r3, #16
 80004a4:	d1b2      	bne.n	800040c <StartGuiTask+0xfc>
	    if (btnEvent.value.v == 2)
 80004a6:	f1ba 0f02 	cmp.w	sl, #2
 80004aa:	d112      	bne.n	80004d2 <StartGuiTask+0x1c2>
		if(speed == 1)
 80004ac:	2f01      	cmp	r7, #1
 80004ae:	f000 80bc 	beq.w	800062a <StartGuiTask+0x31a>
		  speed--;
 80004b2:	3f01      	subs	r7, #1
		  speed++;
 80004b4:	b2ff      	uxtb	r7, r7
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 80004b6:	4867      	ldr	r0, [pc, #412]	@ (8000654 <StartGuiTask+0x344>)
 80004b8:	2201      	movs	r2, #1
 80004ba:	2110      	movs	r1, #16
 80004bc:	f000 fe40 	bl	8001140 <HAL_GPIO_WritePin>
			osDelay(30);
 80004c0:	201e      	movs	r0, #30
			osDelay(250);
 80004c2:	f001 fb5e 	bl	8001b82 <osDelay>
			HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2110      	movs	r1, #16
 80004ca:	4862      	ldr	r0, [pc, #392]	@ (8000654 <StartGuiTask+0x344>)
 80004cc:	f000 fe38 	bl	8001140 <HAL_GPIO_WritePin>
 80004d0:	e79c      	b.n	800040c <StartGuiTask+0xfc>
	    } else if ( btnEvent.value.v == 3)
 80004d2:	f1ba 0f03 	cmp.w	sl, #3
 80004d6:	d104      	bne.n	80004e2 <StartGuiTask+0x1d2>
		if(speed == 10)
 80004d8:	2f0a      	cmp	r7, #10
 80004da:	f000 80a8 	beq.w	800062e <StartGuiTask+0x31e>
		  speed++;
 80004de:	3701      	adds	r7, #1
 80004e0:	e7e8      	b.n	80004b4 <StartGuiTask+0x1a4>
	      else if (btnEvent.value.v == 5)
 80004e2:	f1ba 0505 	subs.w	r5, sl, #5
 80004e6:	bf18      	it	ne
 80004e8:	2501      	movne	r5, #1
 80004ea:	e767      	b.n	80003bc <StartGuiTask+0xac>
	  ssd1306_Fill(Black);
 80004ec:	2000      	movs	r0, #0
 80004ee:	f000 fa0b 	bl	8000908 <ssd1306_Fill>
	  ssd1306_DrawRectangle(0, 0, 127, 63, White);
 80004f2:	f04f 0901 	mov.w	r9, #1
 80004f6:	2100      	movs	r1, #0
 80004f8:	233f      	movs	r3, #63	@ 0x3f
 80004fa:	227f      	movs	r2, #127	@ 0x7f
 80004fc:	4608      	mov	r0, r1
	  ssd1306_WriteString("Прерывистый реж.", RuFont_7x13, Black);
 80004fe:	4c51      	ldr	r4, [pc, #324]	@ (8000644 <StartGuiTask+0x334>)
	  ssd1306_DrawRectangle(0, 0, 127, 63, White);
 8000500:	f8cd 9000 	str.w	r9, [sp]
 8000504:	f000 faf2 	bl	8000aec <ssd1306_DrawRectangle>
	  ssd1306_SetCursor(1,1);
 8000508:	4649      	mov	r1, r9
 800050a:	4648      	mov	r0, r9
 800050c:	f000 faa2 	bl	8000a54 <ssd1306_SetCursor>
	  ssd1306_WriteString("Прерывистый реж.", RuFont_7x13, Black);
 8000510:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000514:	2300      	movs	r3, #0
 8000516:	4855      	ldr	r0, [pc, #340]	@ (800066c <StartGuiTask+0x35c>)
 8000518:	f000 fa88 	bl	8000a2c <ssd1306_WriteString>
	      ssd1306_SetCursor(4,16);
 800051c:	2110      	movs	r1, #16
 800051e:	2004      	movs	r0, #4
	  if(intermittentModeMenuPointer == 0)
 8000520:	f1bb 0f00 	cmp.w	fp, #0
 8000524:	d146      	bne.n	80005b4 <StartGuiTask+0x2a4>
	      ssd1306_SetCursor(4,16);
 8000526:	f000 fa95 	bl	8000a54 <ssd1306_SetCursor>
	      ssd1306_WriteString("> Задержка: ", RuFont_7x13, White);
 800052a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800052e:	464b      	mov	r3, r9
 8000530:	484f      	ldr	r0, [pc, #316]	@ (8000670 <StartGuiTask+0x360>)
 8000532:	f000 fa7b 	bl	8000a2c <ssd1306_WriteString>
	      ssd1306_SetCursor(88,16);
 8000536:	2110      	movs	r1, #16
 8000538:	2058      	movs	r0, #88	@ 0x58
 800053a:	f000 fa8b 	bl	8000a54 <ssd1306_SetCursor>
	      sprintf(sleepStr, "%d", sleep);
 800053e:	4632      	mov	r2, r6
 8000540:	4949      	ldr	r1, [pc, #292]	@ (8000668 <StartGuiTask+0x358>)
 8000542:	a805      	add	r0, sp, #20
 8000544:	f003 f8f4 	bl	8003730 <siprintf>
	      ssd1306_WriteString(sleepStr, RuFont_7x13, White);
 8000548:	e894 0006 	ldmia.w	r4, {r1, r2}
 800054c:	464b      	mov	r3, r9
 800054e:	a805      	add	r0, sp, #20
 8000550:	f000 fa6c 	bl	8000a2c <ssd1306_WriteString>
	      ssd1306_SetCursor(4,30);
 8000554:	211e      	movs	r1, #30
 8000556:	2004      	movs	r0, #4
 8000558:	f000 fa7c 	bl	8000a54 <ssd1306_SetCursor>
	      ssd1306_WriteString("  Угол: ", RuFont_7x13, White);
 800055c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000560:	464b      	mov	r3, r9
 8000562:	4844      	ldr	r0, [pc, #272]	@ (8000674 <StartGuiTask+0x364>)
	      ssd1306_WriteString("> Угол: ", RuFont_7x13, White);
 8000564:	f000 fa62 	bl	8000a2c <ssd1306_WriteString>
	      ssd1306_SetCursor(56, 30);
 8000568:	211e      	movs	r1, #30
 800056a:	2038      	movs	r0, #56	@ 0x38
 800056c:	f000 fa72 	bl	8000a54 <ssd1306_SetCursor>
	      sprintf(cornerStr, "%d", corner);
 8000570:	4642      	mov	r2, r8
 8000572:	493d      	ldr	r1, [pc, #244]	@ (8000668 <StartGuiTask+0x358>)
 8000574:	a806      	add	r0, sp, #24
 8000576:	f003 f8db 	bl	8003730 <siprintf>
	      ssd1306_WriteString(cornerStr, RuFont_7x13, White);
 800057a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800057e:	464b      	mov	r3, r9
 8000580:	a806      	add	r0, sp, #24
 8000582:	f000 fa53 	bl	8000a2c <ssd1306_WriteString>
	  if (btnEvent.status == osEventMessage)
 8000586:	9b02      	ldr	r3, [sp, #8]
 8000588:	2b10      	cmp	r3, #16
 800058a:	f47f af3f 	bne.w	800040c <StartGuiTask+0xfc>
	    if (btnEvent.value.v == 0 || btnEvent.value.v == 1)
 800058e:	f1ba 0f05 	cmp.w	sl, #5
 8000592:	f63f af13 	bhi.w	80003bc <StartGuiTask+0xac>
 8000596:	a301      	add	r3, pc, #4	@ (adr r3, 800059c <StartGuiTask+0x28c>)
 8000598:	f853 f02a 	ldr.w	pc, [r3, sl, lsl #2]
 800059c:	080005f5 	.word	0x080005f5
 80005a0:	080005f5 	.word	0x080005f5
 80005a4:	0800060b 	.word	0x0800060b
 80005a8:	080005fb 	.word	0x080005fb
 80005ac:	080003bd 	.word	0x080003bd
 80005b0:	08000405 	.word	0x08000405
	      ssd1306_SetCursor(4,16);
 80005b4:	f000 fa4e 	bl	8000a54 <ssd1306_SetCursor>
	      ssd1306_WriteString("  Задержка: ", RuFont_7x13, White);
 80005b8:	e894 0006 	ldmia.w	r4, {r1, r2}
 80005bc:	464b      	mov	r3, r9
 80005be:	482e      	ldr	r0, [pc, #184]	@ (8000678 <StartGuiTask+0x368>)
 80005c0:	f000 fa34 	bl	8000a2c <ssd1306_WriteString>
	      ssd1306_SetCursor(88,16);
 80005c4:	2110      	movs	r1, #16
 80005c6:	2058      	movs	r0, #88	@ 0x58
 80005c8:	f000 fa44 	bl	8000a54 <ssd1306_SetCursor>
	      sprintf(sleepStr, "%d", sleep);
 80005cc:	4632      	mov	r2, r6
 80005ce:	4926      	ldr	r1, [pc, #152]	@ (8000668 <StartGuiTask+0x358>)
 80005d0:	a805      	add	r0, sp, #20
 80005d2:	f003 f8ad 	bl	8003730 <siprintf>
	      ssd1306_WriteString(sleepStr, RuFont_7x13, White);
 80005d6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80005da:	464b      	mov	r3, r9
 80005dc:	a805      	add	r0, sp, #20
 80005de:	f000 fa25 	bl	8000a2c <ssd1306_WriteString>
	      ssd1306_SetCursor(4,30);
 80005e2:	211e      	movs	r1, #30
 80005e4:	2004      	movs	r0, #4
 80005e6:	f000 fa35 	bl	8000a54 <ssd1306_SetCursor>
	      ssd1306_WriteString("> Угол: ", RuFont_7x13, White);
 80005ea:	e894 0006 	ldmia.w	r4, {r1, r2}
 80005ee:	464b      	mov	r3, r9
 80005f0:	4822      	ldr	r0, [pc, #136]	@ (800067c <StartGuiTask+0x36c>)
 80005f2:	e7b7      	b.n	8000564 <StartGuiTask+0x254>
		intermittentModeMenuPointer = !intermittentModeMenuPointer;
 80005f4:	f08b 0b01 	eor.w	fp, fp, #1
 80005f8:	e6e0      	b.n	80003bc <StartGuiTask+0xac>
		if(intermittentModeMenuPointer == 0)
 80005fa:	f1bb 0f00 	cmp.w	fp, #0
 80005fe:	d10b      	bne.n	8000618 <StartGuiTask+0x308>
		    if(sleep == 250)
 8000600:	2efa      	cmp	r6, #250	@ 0xfa
 8000602:	d016      	beq.n	8000632 <StartGuiTask+0x322>
		      sleep+=10;
 8000604:	360a      	adds	r6, #10
		      sleep-=10;
 8000606:	b2f6      	uxtb	r6, r6
 8000608:	e6d8      	b.n	80003bc <StartGuiTask+0xac>
		if(intermittentModeMenuPointer == 0)
 800060a:	f1bb 0f00 	cmp.w	fp, #0
 800060e:	d103      	bne.n	8000618 <StartGuiTask+0x308>
		    if(sleep == 10)
 8000610:	2e0a      	cmp	r6, #10
 8000612:	d010      	beq.n	8000636 <StartGuiTask+0x326>
		      sleep-=10;
 8000614:	3e0a      	subs	r6, #10
 8000616:	e7f6      	b.n	8000606 <StartGuiTask+0x2f6>
		    if(corner == 45)
 8000618:	f1b8 0f2d 	cmp.w	r8, #45	@ 0x2d
 800061c:	d00d      	beq.n	800063a <StartGuiTask+0x32a>
		      corner = 45;
 800061e:	f1b8 0f5a 	cmp.w	r8, #90	@ 0x5a
 8000622:	bf08      	it	eq
 8000624:	f04f 082d 	moveq.w	r8, #45	@ 0x2d
 8000628:	e6c8      	b.n	80003bc <StartGuiTask+0xac>
		  speed = 10;
 800062a:	270a      	movs	r7, #10
 800062c:	e743      	b.n	80004b6 <StartGuiTask+0x1a6>
		  speed = 1;
 800062e:	462f      	mov	r7, r5
 8000630:	e741      	b.n	80004b6 <StartGuiTask+0x1a6>
		      sleep = 10;
 8000632:	260a      	movs	r6, #10
 8000634:	e6c2      	b.n	80003bc <StartGuiTask+0xac>
		      sleep = 250;
 8000636:	26fa      	movs	r6, #250	@ 0xfa
 8000638:	e6c0      	b.n	80003bc <StartGuiTask+0xac>
			corner = 90;
 800063a:	f04f 085a 	mov.w	r8, #90	@ 0x5a
 800063e:	e6bd      	b.n	80003bc <StartGuiTask+0xac>
 8000640:	20000734 	.word	0x20000734
 8000644:	20000000 	.word	0x20000000
 8000648:	080040f0 	.word	0x080040f0
 800064c:	080040fd 	.word	0x080040fd
 8000650:	0800410a 	.word	0x0800410a
 8000654:	40010800 	.word	0x40010800
 8000658:	08004118 	.word	0x08004118
 800065c:	08004125 	.word	0x08004125
 8000660:	08004133 	.word	0x08004133
 8000664:	08004143 	.word	0x08004143
 8000668:	08004150 	.word	0x08004150
 800066c:	08004153 	.word	0x08004153
 8000670:	08004164 	.word	0x08004164
 8000674:	08004171 	.word	0x08004171
 8000678:	0800417a 	.word	0x0800417a
 800067c:	08004187 	.word	0x08004187

08000680 <cancelButtonCallback>:
{
 8000680:	b508      	push	{r3, lr}
  if (ssd1306_GetDisplayOn()==1) osMessagePut(buttonPressedQueueHandle, 5, 100); else ssd1306_SetDisplayOn(1);
 8000682:	f000 fb11 	bl	8000ca8 <ssd1306_GetDisplayOn>
 8000686:	2801      	cmp	r0, #1
 8000688:	d107      	bne.n	800069a <cancelButtonCallback+0x1a>
 800068a:	4b06      	ldr	r3, [pc, #24]	@ (80006a4 <cancelButtonCallback+0x24>)
 800068c:	2264      	movs	r2, #100	@ 0x64
 800068e:	6818      	ldr	r0, [r3, #0]
 8000690:	2105      	movs	r1, #5
}
 8000692:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (ssd1306_GetDisplayOn()==1) osMessagePut(buttonPressedQueueHandle, 5, 100); else ssd1306_SetDisplayOn(1);
 8000696:	f001 baf7 	b.w	8001c88 <osMessagePut>
 800069a:	2001      	movs	r0, #1
}
 800069c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (ssd1306_GetDisplayOn()==1) osMessagePut(buttonPressedQueueHandle, 5, 100); else ssd1306_SetDisplayOn(1);
 80006a0:	f000 ba90 	b.w	8000bc4 <ssd1306_SetDisplayOn>
 80006a4:	20000734 	.word	0x20000734

080006a8 <SystemClock_Config>:
{
 80006a8:	b510      	push	{r4, lr}
 80006aa:	b090      	sub	sp, #64	@ 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ac:	2214      	movs	r2, #20
 80006ae:	2100      	movs	r1, #0
 80006b0:	a808      	add	r0, sp, #32
 80006b2:	f003 f85d 	bl	8003770 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b6:	2214      	movs	r2, #20
 80006b8:	2100      	movs	r1, #0
 80006ba:	a801      	add	r0, sp, #4
 80006bc:	f003 f858 	bl	8003770 <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c0:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006c2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006c6:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006c8:	e9cd 430d 	strd	r4, r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006d0:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006d6:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006d8:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f000 ffb7 	bl	800164c <HAL_RCC_OscConfig>
 80006de:	b108      	cbz	r0, 80006e4 <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e4:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e6:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006ea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ee:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006f0:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006f4:	4621      	mov	r1, r4
 80006f6:	a801      	add	r0, sp, #4
 80006f8:	f001 f96a 	bl	80019d0 <HAL_RCC_ClockConfig>
 80006fc:	b108      	cbz	r0, 8000702 <SystemClock_Config+0x5a>
 80006fe:	b672      	cpsid	i
  while (1)
 8000700:	e7fe      	b.n	8000700 <SystemClock_Config+0x58>
}
 8000702:	b010      	add	sp, #64	@ 0x40
 8000704:	bd10      	pop	{r4, pc}
	...

08000708 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	2410      	movs	r4, #16
{
 800070a:	b580      	push	{r7, lr}
 800070c:	b09c      	sub	sp, #112	@ 0x70
  HAL_Init();
 800070e:	f000 fbb3 	bl	8000e78 <HAL_Init>
  SystemClock_Config();
 8000712:	f7ff ffc9 	bl	80006a8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	4622      	mov	r2, r4
 8000718:	2100      	movs	r1, #0
 800071a:	a815      	add	r0, sp, #84	@ 0x54
 800071c:	f003 f828 	bl	8003770 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000720:	4b54      	ldr	r3, [pc, #336]	@ (8000874 <main+0x16c>)
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000722:	4621      	mov	r1, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000724:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000726:	4854      	ldr	r0, [pc, #336]	@ (8000878 <main+0x170>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000728:	f042 0220 	orr.w	r2, r2, #32
 800072c:	619a      	str	r2, [r3, #24]
 800072e:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000730:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000732:	f002 0220 	and.w	r2, r2, #32
 8000736:	9203      	str	r2, [sp, #12]
 8000738:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	f042 0204 	orr.w	r2, r2, #4
 8000742:	619a      	str	r2, [r3, #24]
 8000744:	699a      	ldr	r2, [r3, #24]
 8000746:	f002 0204 	and.w	r2, r2, #4
 800074a:	9204      	str	r2, [sp, #16]
 800074c:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	699a      	ldr	r2, [r3, #24]
 8000750:	f042 0208 	orr.w	r2, r2, #8
 8000754:	619a      	str	r2, [r3, #24]
 8000756:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000758:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	f003 0308 	and.w	r3, r3, #8
 800075e:	9305      	str	r3, [sp, #20]
 8000760:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 8000762:	f000 fced 	bl	8001140 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = buzzer_Pin;
 8000766:	9415      	str	r4, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2400      	movs	r4, #0
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 800076a:	4843      	ldr	r0, [pc, #268]	@ (8000878 <main+0x170>)
 800076c:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	e9cd 6416 	strd	r6, r4, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	9718      	str	r7, [sp, #96]	@ 0x60
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 8000774:	f000 fc0c 	bl	8000f90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = btn_bottom_Pin;
 8000778:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(btn_bottom_GPIO_Port, &GPIO_InitStruct);
 800077c:	483e      	ldr	r0, [pc, #248]	@ (8000878 <main+0x170>)
 800077e:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000780:	e9cd 3415 	strd	r3, r4, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000784:	9617      	str	r6, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(btn_bottom_GPIO_Port, &GPIO_InitStruct);
 8000786:	f000 fc03 	bl	8000f90 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = btn_left_Pin|btn_ok_Pin|btn_right_Pin|btn_top_Pin;
 800078a:	23f0      	movs	r3, #240	@ 0xf0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800078c:	483b      	ldr	r0, [pc, #236]	@ (800087c <main+0x174>)
 800078e:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000790:	e9cd 3415 	strd	r3, r4, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000794:	9617      	str	r6, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000796:	f000 fbfb 	bl	8000f90 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 800079a:	4839      	ldr	r0, [pc, #228]	@ (8000880 <main+0x178>)
  hi2c1.Init.ClockSpeed = 100000;
 800079c:	4a39      	ldr	r2, [pc, #228]	@ (8000884 <main+0x17c>)
 800079e:	4b3a      	ldr	r3, [pc, #232]	@ (8000888 <main+0x180>)
  hi2c1.Init.OwnAddress1 = 0;
 80007a0:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 80007a4:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007a8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007ac:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007b0:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b4:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007b6:	f000 fe11 	bl	80013dc <HAL_I2C_Init>
 80007ba:	4605      	mov	r5, r0
 80007bc:	b108      	cbz	r0, 80007c2 <main+0xba>
 80007be:	b672      	cpsid	i
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <main+0xb8>
  ssd1306_Init();
 80007c2:	f000 fa0d 	bl	8000be0 <ssd1306_Init>
  ssd1306_Fill(Black);
 80007c6:	4628      	mov	r0, r5
 80007c8:	f000 f89e 	bl	8000908 <ssd1306_Fill>
  ssd1306_DrawBitmap(43, 2, logo, 42, 42, White);
 80007cc:	232a      	movs	r3, #42	@ 0x2a
 80007ce:	4639      	mov	r1, r7
 80007d0:	4a2e      	ldr	r2, [pc, #184]	@ (800088c <main+0x184>)
 80007d2:	9300      	str	r3, [sp, #0]
 80007d4:	202b      	movs	r0, #43	@ 0x2b
 80007d6:	9601      	str	r6, [sp, #4]
 80007d8:	f000 f9b0 	bl	8000b3c <ssd1306_DrawBitmap>
  ssd1306_SetCursor(11, 46);
 80007dc:	212e      	movs	r1, #46	@ 0x2e
 80007de:	200b      	movs	r0, #11
 80007e0:	f000 f938 	bl	8000a54 <ssd1306_SetCursor>
  ssd1306_WriteString("АвтоШашлык V0.1", RuFont_7x13, White);
 80007e4:	4a2a      	ldr	r2, [pc, #168]	@ (8000890 <main+0x188>)
 80007e6:	4633      	mov	r3, r6
 80007e8:	ca06      	ldmia	r2, {r1, r2}
 80007ea:	482a      	ldr	r0, [pc, #168]	@ (8000894 <main+0x18c>)
 80007ec:	f000 f91e 	bl	8000a2c <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80007f0:	f000 f896 	bl	8000920 <ssd1306_UpdateScreen>
  osTimerDef(cancelButton, cancelButtonCallback);
 80007f4:	4b28      	ldr	r3, [pc, #160]	@ (8000898 <main+0x190>)
  cancelButtonHandle = osTimerCreate(osTimer(cancelButton), osTimerOnce, NULL);
 80007f6:	462a      	mov	r2, r5
 80007f8:	4629      	mov	r1, r5
 80007fa:	a806      	add	r0, sp, #24
  osTimerDef(cancelButton, cancelButtonCallback);
 80007fc:	e9cd 3506 	strd	r3, r5, [sp, #24]
  cancelButtonHandle = osTimerCreate(osTimer(cancelButton), osTimerOnce, NULL);
 8000800:	f001 f9c8 	bl	8001b94 <osTimerCreate>
 8000804:	4b25      	ldr	r3, [pc, #148]	@ (800089c <main+0x194>)
  screenTimeoutTimerHandle = osTimerCreate(osTimer(screenTimeoutTimer), osTimerOnce, NULL);
 8000806:	462a      	mov	r2, r5
  cancelButtonHandle = osTimerCreate(osTimer(cancelButton), osTimerOnce, NULL);
 8000808:	6018      	str	r0, [r3, #0]
  osTimerDef(screenTimeoutTimer, screenTimeoutCallback);
 800080a:	4b25      	ldr	r3, [pc, #148]	@ (80008a0 <main+0x198>)
  screenTimeoutTimerHandle = osTimerCreate(osTimer(screenTimeoutTimer), osTimerOnce, NULL);
 800080c:	4629      	mov	r1, r5
 800080e:	a808      	add	r0, sp, #32
  osTimerDef(screenTimeoutTimer, screenTimeoutCallback);
 8000810:	e9cd 3508 	strd	r3, r5, [sp, #32]
  screenTimeoutTimerHandle = osTimerCreate(osTimer(screenTimeoutTimer), osTimerOnce, NULL);
 8000814:	f001 f9be 	bl	8001b94 <osTimerCreate>
  osMessageQDef(buttonPressedQueue, 8, uint8_t);
 8000818:	4c22      	ldr	r4, [pc, #136]	@ (80008a4 <main+0x19c>)
  screenTimeoutTimerHandle = osTimerCreate(osTimer(screenTimeoutTimer), osTimerOnce, NULL);
 800081a:	4b23      	ldr	r3, [pc, #140]	@ (80008a8 <main+0x1a0>)
  osMessageQDef(buttonPressedQueue, 8, uint8_t);
 800081c:	ae0a      	add	r6, sp, #40	@ 0x28
  screenTimeoutTimerHandle = osTimerCreate(osTimer(screenTimeoutTimer), osTimerOnce, NULL);
 800081e:	6018      	str	r0, [r3, #0]
  osMessageQDef(buttonPressedQueue, 8, uint8_t);
 8000820:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000824:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  buttonPressedQueueHandle = osMessageCreate(osMessageQ(buttonPressedQueue), NULL);
 8000828:	4629      	mov	r1, r5
 800082a:	4630      	mov	r0, r6
 800082c:	f001 fa1a 	bl	8001c64 <osMessageCreate>
 8000830:	4b1e      	ldr	r3, [pc, #120]	@ (80008ac <main+0x1a4>)
  osThreadDef(readKeyTask, StartReadKeyTask, osPriorityAboveNormal, 0, 128);
 8000832:	f104 0710 	add.w	r7, r4, #16
 8000836:	ae0e      	add	r6, sp, #56	@ 0x38
  buttonPressedQueueHandle = osMessageCreate(osMessageQ(buttonPressedQueue), NULL);
 8000838:	6018      	str	r0, [r3, #0]
  osThreadDef(readKeyTask, StartReadKeyTask, osPriorityAboveNormal, 0, 128);
 800083a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800083c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800083e:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8000842:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  readKeyTaskHandle = osThreadCreate(osThread(readKeyTask), NULL);
 8000846:	4629      	mov	r1, r5
 8000848:	a80e      	add	r0, sp, #56	@ 0x38
 800084a:	f001 f972 	bl	8001b32 <osThreadCreate>
 800084e:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <main+0x1a8>)
  osThreadDef(guiTask, StartGuiTask, osPriorityNormal, 0, 128);
 8000850:	ae15      	add	r6, sp, #84	@ 0x54
 8000852:	342c      	adds	r4, #44	@ 0x2c
  readKeyTaskHandle = osThreadCreate(osThread(readKeyTask), NULL);
 8000854:	6018      	str	r0, [r3, #0]
  osThreadDef(guiTask, StartGuiTask, osPriorityNormal, 0, 128);
 8000856:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000858:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800085a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800085e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  guiTaskHandle = osThreadCreate(osThread(guiTask), NULL);
 8000862:	4629      	mov	r1, r5
 8000864:	a815      	add	r0, sp, #84	@ 0x54
 8000866:	f001 f964 	bl	8001b32 <osThreadCreate>
 800086a:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <main+0x1ac>)
 800086c:	6018      	str	r0, [r3, #0]
  osKernelStart();
 800086e:	f001 f95b 	bl	8001b28 <osKernelStart>
  while (1)
 8000872:	e7fe      	b.n	8000872 <main+0x16a>
 8000874:	40021000 	.word	0x40021000
 8000878:	40010800 	.word	0x40010800
 800087c:	40010c00 	.word	0x40010c00
 8000880:	20000740 	.word	0x20000740
 8000884:	40005400 	.word	0x40005400
 8000888:	000186a0 	.word	0x000186a0
 800088c:	080041b4 	.word	0x080041b4
 8000890:	20000000 	.word	0x20000000
 8000894:	08004190 	.word	0x08004190
 8000898:	08000681 	.word	0x08000681
 800089c:	20000730 	.word	0x20000730
 80008a0:	08000181 	.word	0x08000181
 80008a4:	080040a8 	.word	0x080040a8
 80008a8:	2000072c 	.word	0x2000072c
 80008ac:	20000734 	.word	0x20000734
 80008b0:	2000073c 	.word	0x2000073c
 80008b4:	20000738 	.word	0x20000738

080008b8 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80008b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80008ba:	2301      	movs	r3, #1
 80008bc:	f04f 32ff 	mov.w	r2, #4294967295
 80008c0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80008c4:	f10d 0217 	add.w	r2, sp, #23
void ssd1306_WriteCommand(uint8_t byte) {
 80008c8:	f88d 0017 	strb.w	r0, [sp, #23]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80008cc:	9200      	str	r2, [sp, #0]
 80008ce:	2178      	movs	r1, #120	@ 0x78
 80008d0:	2200      	movs	r2, #0
 80008d2:	4803      	ldr	r0, [pc, #12]	@ (80008e0 <ssd1306_WriteCommand+0x28>)
 80008d4:	f000 fe2a 	bl	800152c <HAL_I2C_Mem_Write>
}
 80008d8:	b007      	add	sp, #28
 80008da:	f85d fb04 	ldr.w	pc, [sp], #4
 80008de:	bf00      	nop
 80008e0:	20000740 	.word	0x20000740

080008e4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80008e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ea:	b289      	uxth	r1, r1
 80008ec:	e9cd 0100 	strd	r0, r1, [sp]
 80008f0:	9302      	str	r3, [sp, #8]
 80008f2:	2240      	movs	r2, #64	@ 0x40
 80008f4:	2301      	movs	r3, #1
 80008f6:	2178      	movs	r1, #120	@ 0x78
 80008f8:	4802      	ldr	r0, [pc, #8]	@ (8000904 <ssd1306_WriteData+0x20>)
 80008fa:	f000 fe17 	bl	800152c <HAL_I2C_Mem_Write>
}
 80008fe:	b005      	add	sp, #20
 8000900:	f85d fb04 	ldr.w	pc, [sp], #4
 8000904:	20000740 	.word	0x20000740

08000908 <ssd1306_Fill>:
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000908:	2800      	cmp	r0, #0
 800090a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800090e:	bf14      	ite	ne
 8000910:	21ff      	movne	r1, #255	@ 0xff
 8000912:	2100      	moveq	r1, #0
 8000914:	4801      	ldr	r0, [pc, #4]	@ (800091c <ssd1306_Fill+0x14>)
 8000916:	f002 bf2b 	b.w	8003770 <memset>
 800091a:	bf00      	nop
 800091c:	2000079a 	.word	0x2000079a

08000920 <ssd1306_UpdateScreen>:
}

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000920:	b538      	push	{r3, r4, r5, lr}
 8000922:	24b0      	movs	r4, #176	@ 0xb0
 8000924:	4d0a      	ldr	r5, [pc, #40]	@ (8000950 <ssd1306_UpdateScreen+0x30>)
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000926:	4620      	mov	r0, r4
 8000928:	f7ff ffc6 	bl	80008b8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800092c:	2000      	movs	r0, #0
 800092e:	f7ff ffc3 	bl	80008b8 <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000932:	3401      	adds	r4, #1
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000934:	2010      	movs	r0, #16
 8000936:	f7ff ffbf 	bl	80008b8 <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800093a:	b2e4      	uxtb	r4, r4
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800093c:	4628      	mov	r0, r5
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	f7ff ffd0 	bl	80008e4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000944:	2cb8      	cmp	r4, #184	@ 0xb8
 8000946:	f105 0580 	add.w	r5, r5, #128	@ 0x80
 800094a:	d1ec      	bne.n	8000926 <ssd1306_UpdateScreen+0x6>
    }
}
 800094c:	bd38      	pop	{r3, r4, r5, pc}
 800094e:	bf00      	nop
 8000950:	2000079a 	.word	0x2000079a

08000954 <ssd1306_DrawPixel>:
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000954:	0603      	lsls	r3, r0, #24
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000956:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000958:	d410      	bmi.n	800097c <ssd1306_DrawPixel+0x28>
 800095a:	293f      	cmp	r1, #63	@ 0x3f
 800095c:	d80e      	bhi.n	800097c <ssd1306_DrawPixel+0x28>
        return;
    }
   
    // Draw in the right color
    if(color == White) {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800095e:	2401      	movs	r4, #1
 8000960:	08cb      	lsrs	r3, r1, #3
 8000962:	4d07      	ldr	r5, [pc, #28]	@ (8000980 <ssd1306_DrawPixel+0x2c>)
 8000964:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 8000968:	5c2b      	ldrb	r3, [r5, r0]
 800096a:	f001 0107 	and.w	r1, r1, #7
 800096e:	fa04 f101 	lsl.w	r1, r4, r1
    if(color == White) {
 8000972:	42a2      	cmp	r2, r4
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000974:	bf0c      	ite	eq
 8000976:	430b      	orreq	r3, r1
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000978:	438b      	bicne	r3, r1
 800097a:	542b      	strb	r3, [r5, r0]
    }
}
 800097c:	bd30      	pop	{r4, r5, pc}
 800097e:	bf00      	nop
 8000980:	2000079a 	.word	0x2000079a

08000984 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000988:	4604      	mov	r4, r0
 800098a:	b087      	sub	sp, #28
 800098c:	a806      	add	r0, sp, #24
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 255)
 800098e:	2c1f      	cmp	r4, #31
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000990:	e900 0006 	stmdb	r0, {r1, r2}
 8000994:	9301      	str	r3, [sp, #4]
    if (ch < 32 || ch > 255)
 8000996:	d944      	bls.n	8000a22 <ssd1306_WriteChar+0x9e>
        return 0;

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000998:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8000a28 <ssd1306_WriteChar+0xa4>
 800099c:	f89d 6010 	ldrb.w	r6, [sp, #16]
 80009a0:	f8b9 a000 	ldrh.w	sl, [r9]
 80009a4:	eb0a 0306 	add.w	r3, sl, r6
 80009a8:	2b80      	cmp	r3, #128	@ 0x80
 80009aa:	dc3a      	bgt.n	8000a22 <ssd1306_WriteChar+0x9e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 80009ac:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 80009b0:	f89d b011 	ldrb.w	fp, [sp, #17]
 80009b4:	9300      	str	r3, [sp, #0]
 80009b6:	eb03 020b 	add.w	r2, r3, fp
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 80009ba:	2a40      	cmp	r2, #64	@ 0x40
 80009bc:	dc31      	bgt.n	8000a22 <ssd1306_WriteChar+0x9e>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 80009be:	f04f 0800 	mov.w	r8, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80009c2:	f1a4 0520 	sub.w	r5, r4, #32
 80009c6:	fb0b f505 	mul.w	r5, fp, r5
 80009ca:	006d      	lsls	r5, r5, #1
    for(i = 0; i < Font.FontHeight; i++) {
 80009cc:	45c3      	cmp	fp, r8
 80009ce:	d806      	bhi.n	80009de <ssd1306_WriteChar+0x5a>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80009d0:	4456      	add	r6, sl
 80009d2:	f8a9 6000 	strh.w	r6, [r9]
    
    // Return written char for validation
    return ch;
}
 80009d6:	4620      	mov	r0, r4
 80009d8:	b007      	add	sp, #28
 80009da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(j = 0; j < Font.FontWidth; j++) {
 80009de:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 80009e0:	9a05      	ldr	r2, [sp, #20]
 80009e2:	5b53      	ldrh	r3, [r2, r5]
 80009e4:	9303      	str	r3, [sp, #12]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80009e6:	9b00      	ldr	r3, [sp, #0]
 80009e8:	eb08 0203 	add.w	r2, r8, r3
 80009ec:	b2d3      	uxtb	r3, r2
 80009ee:	9302      	str	r3, [sp, #8]
        for(j = 0; j < Font.FontWidth; j++) {
 80009f0:	42be      	cmp	r6, r7
 80009f2:	d803      	bhi.n	80009fc <ssd1306_WriteChar+0x78>
    for(i = 0; i < Font.FontHeight; i++) {
 80009f4:	f108 0801 	add.w	r8, r8, #1
 80009f8:	3502      	adds	r5, #2
 80009fa:	e7e7      	b.n	80009cc <ssd1306_WriteChar+0x48>
            if((b << j) & 0x8000)  {
 80009fc:	9b03      	ldr	r3, [sp, #12]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80009fe:	eb07 000a 	add.w	r0, r7, sl
            if((b << j) & 0x8000)  {
 8000a02:	fa03 f207 	lsl.w	r2, r3, r7
 8000a06:	0413      	lsls	r3, r2, #16
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000a08:	bf56      	itet	pl
 8000a0a:	9b01      	ldrpl	r3, [sp, #4]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000a0c:	9a01      	ldrmi	r2, [sp, #4]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000a0e:	fab3 f283 	clzpl	r2, r3
 8000a12:	9902      	ldr	r1, [sp, #8]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000a14:	b2c0      	uxtb	r0, r0
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000a16:	bf58      	it	pl
 8000a18:	0952      	lsrpl	r2, r2, #5
 8000a1a:	f7ff ff9b 	bl	8000954 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000a1e:	3701      	adds	r7, #1
 8000a20:	e7e6      	b.n	80009f0 <ssd1306_WriteChar+0x6c>
        return 0;
 8000a22:	2400      	movs	r4, #0
 8000a24:	e7d7      	b.n	80009d6 <ssd1306_WriteChar+0x52>
 8000a26:	bf00      	nop
 8000a28:	20000794 	.word	0x20000794

08000a2c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000a2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000a2e:	466d      	mov	r5, sp
 8000a30:	461e      	mov	r6, r3
 8000a32:	e885 0006 	stmia.w	r5, {r1, r2}
 8000a36:	1e44      	subs	r4, r0, #1
    while (*str) {
 8000a38:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000a3c:	b140      	cbz	r0, 8000a50 <ssd1306_WriteString+0x24>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000a3e:	e895 0006 	ldmia.w	r5, {r1, r2}
 8000a42:	4633      	mov	r3, r6
 8000a44:	f7ff ff9e 	bl	8000984 <ssd1306_WriteChar>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	7820      	ldrb	r0, [r4, #0]
 8000a4c:	4283      	cmp	r3, r0
 8000a4e:	d0f3      	beq.n	8000a38 <ssd1306_WriteString+0xc>
        str++;
    }
    
    // Everything ok
    return *str;
}
 8000a50:	b002      	add	sp, #8
 8000a52:	bd70      	pop	{r4, r5, r6, pc}

08000a54 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 8000a54:	4b01      	ldr	r3, [pc, #4]	@ (8000a5c <ssd1306_SetCursor+0x8>)
 8000a56:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8000a58:	8059      	strh	r1, [r3, #2]
}
 8000a5a:	4770      	bx	lr
 8000a5c:	20000794 	.word	0x20000794

08000a60 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000a60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a64:	4690      	mov	r8, r2
    int32_t deltaX = abs(x2 - x1);
 8000a66:	eba8 0900 	sub.w	r9, r8, r0
    int32_t deltaY = abs(y2 - y1);
 8000a6a:	eba3 0a01 	sub.w	sl, r3, r1
    int32_t deltaX = abs(x2 - x1);
 8000a6e:	f1b9 0f00 	cmp.w	r9, #0
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000a72:	461e      	mov	r6, r3
    int32_t deltaX = abs(x2 - x1);
 8000a74:	bfb8      	it	lt
 8000a76:	f1c9 0900 	rsblt	r9, r9, #0
    int32_t deltaY = abs(y2 - y1);
 8000a7a:	f1ba 0f00 	cmp.w	sl, #0
 8000a7e:	bfb8      	it	lt
 8000a80:	f1ca 0a00 	rsblt	sl, sl, #0
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8000a84:	4580      	cmp	r8, r0
 8000a86:	bf8c      	ite	hi
 8000a88:	2301      	movhi	r3, #1
 8000a8a:	f04f 33ff 	movls.w	r3, #4294967295
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000a8e:	4605      	mov	r5, r0
 8000a90:	460c      	mov	r4, r1
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8000a92:	428e      	cmp	r6, r1
 8000a94:	bf8c      	ite	hi
 8000a96:	f04f 0b01 	movhi.w	fp, #1
 8000a9a:	f04f 3bff 	movls.w	fp, #4294967295
    int32_t error = deltaX - deltaY;
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8000a9e:	4640      	mov	r0, r8
 8000aa0:	4631      	mov	r1, r6
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000aa2:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8000aa6:	9300      	str	r3, [sp, #0]
    int32_t error = deltaX - deltaY;
 8000aa8:	eba9 070a 	sub.w	r7, r9, sl
    ssd1306_DrawPixel(x2, y2, color);
 8000aac:	f7ff ff52 	bl	8000954 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
        ssd1306_DrawPixel(x1, y1, color);
        error2 = error * 2;
        if(error2 > -deltaY) {
 8000ab0:	f1ca 0300 	rsb	r3, sl, #0
    while((x1 != x2) || (y1 != y2)) {
 8000ab4:	4545      	cmp	r5, r8
 8000ab6:	d104      	bne.n	8000ac2 <ssd1306_Line+0x62>
 8000ab8:	42b4      	cmp	r4, r6
 8000aba:	d102      	bne.n	8000ac2 <ssd1306_Line+0x62>
            error += deltaX;
            y1 += signY;
        }
    }
    return;
}
 8000abc:	b003      	add	sp, #12
 8000abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ssd1306_DrawPixel(x1, y1, color);
 8000ac2:	4621      	mov	r1, r4
 8000ac4:	4628      	mov	r0, r5
 8000ac6:	9301      	str	r3, [sp, #4]
 8000ac8:	f7ff ff44 	bl	8000954 <ssd1306_DrawPixel>
        if(error2 > -deltaY) {
 8000acc:	9b01      	ldr	r3, [sp, #4]
        error2 = error * 2;
 8000ace:	0079      	lsls	r1, r7, #1
        if(error2 > -deltaY) {
 8000ad0:	ebb3 0f47 	cmp.w	r3, r7, lsl #1
            x1 += signX;
 8000ad4:	bfbf      	itttt	lt
 8000ad6:	9800      	ldrlt	r0, [sp, #0]
            error -= deltaY;
 8000ad8:	eba7 070a 	sublt.w	r7, r7, sl
            x1 += signX;
 8000adc:	182d      	addlt	r5, r5, r0
 8000ade:	b2ed      	uxtblt	r5, r5
        if(error2 < deltaX) {
 8000ae0:	4589      	cmp	r9, r1
            y1 += signY;
 8000ae2:	bfc2      	ittt	gt
 8000ae4:	445c      	addgt	r4, fp
            error += deltaX;
 8000ae6:	444f      	addgt	r7, r9
            y1 += signY;
 8000ae8:	b2e4      	uxtbgt	r4, r4
 8000aea:	e7e3      	b.n	8000ab4 <ssd1306_Line+0x54>

08000aec <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000aec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000af0:	461c      	mov	r4, r3
 8000af2:	4616      	mov	r6, r2
 8000af4:	460d      	mov	r5, r1
 8000af6:	4607      	mov	r7, r0
 8000af8:	f89d 8020 	ldrb.w	r8, [sp, #32]
    ssd1306_Line(x1,y1,x2,y1,color);
 8000afc:	460b      	mov	r3, r1
 8000afe:	f8cd 8000 	str.w	r8, [sp]
 8000b02:	f7ff ffad 	bl	8000a60 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8000b06:	4623      	mov	r3, r4
 8000b08:	4632      	mov	r2, r6
 8000b0a:	4629      	mov	r1, r5
 8000b0c:	4630      	mov	r0, r6
 8000b0e:	f8cd 8000 	str.w	r8, [sp]
 8000b12:	f7ff ffa5 	bl	8000a60 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8000b16:	4623      	mov	r3, r4
 8000b18:	463a      	mov	r2, r7
 8000b1a:	4621      	mov	r1, r4
 8000b1c:	4630      	mov	r0, r6
 8000b1e:	f8cd 8000 	str.w	r8, [sp]
 8000b22:	f7ff ff9d 	bl	8000a60 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8000b26:	462b      	mov	r3, r5
 8000b28:	463a      	mov	r2, r7
 8000b2a:	4621      	mov	r1, r4
 8000b2c:	4638      	mov	r0, r7
 8000b2e:	f8cd 8020 	str.w	r8, [sp, #32]

    return;
}
 8000b32:	b002      	add	sp, #8
 8000b34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ssd1306_Line(x1,y2,x1,y1,color);
 8000b38:	f7ff bf92 	b.w	8000a60 <ssd1306_Line>

08000b3c <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000b3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000b40:	f010 0f80 	tst.w	r0, #128	@ 0x80
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000b44:	9200      	str	r2, [sp, #0]
 8000b46:	4681      	mov	r9, r0
 8000b48:	460c      	mov	r4, r1
 8000b4a:	469a      	mov	sl, r3
 8000b4c:	f89d 2034 	ldrb.w	r2, [sp, #52]	@ 0x34
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000b50:	d12b      	bne.n	8000baa <ssd1306_DrawBitmap+0x6e>
 8000b52:	293f      	cmp	r1, #63	@ 0x3f
 8000b54:	d829      	bhi.n	8000baa <ssd1306_DrawBitmap+0x6e>
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000b56:	2700      	movs	r7, #0
    uint8_t byte = 0;
 8000b58:	463d      	mov	r5, r7
 8000b5a:	f89d 6030 	ldrb.w	r6, [sp, #48]	@ 0x30
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000b5e:	f103 0b07 	add.w	fp, r3, #7
 8000b62:	440e      	add	r6, r1
 8000b64:	ea4f 0beb 	mov.w	fp, fp, asr #3
 8000b68:	b2f6      	uxtb	r6, r6
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000b6a:	42b4      	cmp	r4, r6
 8000b6c:	d01d      	beq.n	8000baa <ssd1306_DrawBitmap+0x6e>
        for (uint8_t i = 0; i < w; i++) {
            if (i & 7) {
                byte <<= 1;
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000b6e:	9b00      	ldr	r3, [sp, #0]
    for (uint8_t j = 0; j < h; j++, y++) {
 8000b70:	f04f 0800 	mov.w	r8, #0
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000b74:	443b      	add	r3, r7
 8000b76:	e010      	b.n	8000b9a <ssd1306_DrawBitmap+0x5e>
            if (i & 7) {
 8000b78:	0741      	lsls	r1, r0, #29
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000b7a:	bf0b      	itete	eq
 8000b7c:	08c1      	lsreq	r1, r0, #3
                byte <<= 1;
 8000b7e:	006d      	lslne	r5, r5, #1
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000b80:	5c5d      	ldrbeq	r5, [r3, r1]
                byte <<= 1;
 8000b82:	b2ed      	uxtbne	r5, r5
            }

            if (byte & 0x80) {
 8000b84:	0629      	lsls	r1, r5, #24
 8000b86:	d506      	bpl.n	8000b96 <ssd1306_DrawBitmap+0x5a>
                ssd1306_DrawPixel(x + i, y, color);
 8000b88:	4448      	add	r0, r9
 8000b8a:	4621      	mov	r1, r4
 8000b8c:	b2c0      	uxtb	r0, r0
 8000b8e:	9301      	str	r3, [sp, #4]
 8000b90:	f7ff fee0 	bl	8000954 <ssd1306_DrawPixel>
 8000b94:	9b01      	ldr	r3, [sp, #4]
        for (uint8_t i = 0; i < w; i++) {
 8000b96:	f108 0801 	add.w	r8, r8, #1
 8000b9a:	45d0      	cmp	r8, sl
 8000b9c:	fa5f f088 	uxtb.w	r0, r8
 8000ba0:	d1ea      	bne.n	8000b78 <ssd1306_DrawBitmap+0x3c>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000ba2:	3401      	adds	r4, #1
 8000ba4:	b2e4      	uxtb	r4, r4
 8000ba6:	445f      	add	r7, fp
 8000ba8:	e7df      	b.n	8000b6a <ssd1306_DrawBitmap+0x2e>
            }
        }
    }
    return;
}
 8000baa:	b003      	add	sp, #12
 8000bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000bb0 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000bb0:	b510      	push	{r4, lr}
 8000bb2:	4604      	mov	r4, r0
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000bb4:	2081      	movs	r0, #129	@ 0x81
 8000bb6:	f7ff fe7f 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000bba:	4620      	mov	r0, r4
}
 8000bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ssd1306_WriteCommand(value);
 8000bc0:	f7ff be7a 	b.w	80008b8 <ssd1306_WriteCommand>

08000bc4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
    uint8_t value;
    if (on) {
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
 8000bc4:	2800      	cmp	r0, #0
    if (on) {
 8000bc6:	4603      	mov	r3, r0
        SSD1306.DisplayOn = 1;
 8000bc8:	bf0c      	ite	eq
 8000bca:	4603      	moveq	r3, r0
 8000bcc:	2301      	movne	r3, #1
 8000bce:	4a03      	ldr	r2, [pc, #12]	@ (8000bdc <ssd1306_SetDisplayOn+0x18>)
 8000bd0:	bf0c      	ite	eq
 8000bd2:	20ae      	moveq	r0, #174	@ 0xae
 8000bd4:	20af      	movne	r0, #175	@ 0xaf
 8000bd6:	7153      	strb	r3, [r2, #5]
    } else {
        value = 0xAE;   // Display off
        SSD1306.DisplayOn = 0;
    }
    ssd1306_WriteCommand(value);
 8000bd8:	f7ff be6e 	b.w	80008b8 <ssd1306_WriteCommand>
 8000bdc:	20000794 	.word	0x20000794

08000be0 <ssd1306_Init>:
void ssd1306_Init(void) {
 8000be0:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8000be2:	2064      	movs	r0, #100	@ 0x64
 8000be4:	f000 f96c 	bl	8000ec0 <HAL_Delay>
    ssd1306_SetDisplayOn(0); //display off
 8000be8:	2000      	movs	r0, #0
 8000bea:	f7ff ffeb 	bl	8000bc4 <ssd1306_SetDisplayOn>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000bee:	2020      	movs	r0, #32
 8000bf0:	f7ff fe62 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f7ff fe5f 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000bfa:	20b0      	movs	r0, #176	@ 0xb0
 8000bfc:	f7ff fe5c 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000c00:	20c8      	movs	r0, #200	@ 0xc8
 8000c02:	f7ff fe59 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 8000c06:	2000      	movs	r0, #0
 8000c08:	f7ff fe56 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000c0c:	2010      	movs	r0, #16
 8000c0e:	f7ff fe53 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000c12:	2040      	movs	r0, #64	@ 0x40
 8000c14:	f7ff fe50 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_SetContrast(0xFF);
 8000c18:	20ff      	movs	r0, #255	@ 0xff
 8000c1a:	f7ff ffc9 	bl	8000bb0 <ssd1306_SetContrast>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000c1e:	20a1      	movs	r0, #161	@ 0xa1
 8000c20:	f7ff fe4a 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000c24:	20a6      	movs	r0, #166	@ 0xa6
 8000c26:	f7ff fe47 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000c2a:	20a8      	movs	r0, #168	@ 0xa8
 8000c2c:	f7ff fe44 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8000c30:	203f      	movs	r0, #63	@ 0x3f
 8000c32:	f7ff fe41 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c36:	20a4      	movs	r0, #164	@ 0xa4
 8000c38:	f7ff fe3e 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000c3c:	20d3      	movs	r0, #211	@ 0xd3
 8000c3e:	f7ff fe3b 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000c42:	2000      	movs	r0, #0
 8000c44:	f7ff fe38 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c48:	20d5      	movs	r0, #213	@ 0xd5
 8000c4a:	f7ff fe35 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000c4e:	20f0      	movs	r0, #240	@ 0xf0
 8000c50:	f7ff fe32 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000c54:	20d9      	movs	r0, #217	@ 0xd9
 8000c56:	f7ff fe2f 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000c5a:	2022      	movs	r0, #34	@ 0x22
 8000c5c:	f7ff fe2c 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000c60:	20da      	movs	r0, #218	@ 0xda
 8000c62:	f7ff fe29 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8000c66:	2012      	movs	r0, #18
 8000c68:	f7ff fe26 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000c6c:	20db      	movs	r0, #219	@ 0xdb
 8000c6e:	f7ff fe23 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000c72:	2020      	movs	r0, #32
 8000c74:	f7ff fe20 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000c78:	208d      	movs	r0, #141	@ 0x8d
 8000c7a:	f7ff fe1d 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000c7e:	2014      	movs	r0, #20
 8000c80:	f7ff fe1a 	bl	80008b8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000c84:	2001      	movs	r0, #1
 8000c86:	f7ff ff9d 	bl	8000bc4 <ssd1306_SetDisplayOn>
    ssd1306_Fill(Black);
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	f7ff fe3c 	bl	8000908 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8000c90:	f7ff fe46 	bl	8000920 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8000c94:	2200      	movs	r2, #0
 8000c96:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <ssd1306_Init+0xc4>)
 8000c98:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000c9a:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	711a      	strb	r2, [r3, #4]
}
 8000ca0:	bd08      	pop	{r3, pc}
 8000ca2:	bf00      	nop
 8000ca4:	20000794 	.word	0x20000794

08000ca8 <ssd1306_GetDisplayOn>:
}

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}
 8000ca8:	4b01      	ldr	r3, [pc, #4]	@ (8000cb0 <ssd1306_GetDisplayOn+0x8>)
 8000caa:	7958      	ldrb	r0, [r3, #5]
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000794 	.word	0x20000794

08000cb4 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <HAL_MspInit+0x48>)
{
 8000cb6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cb8:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cba:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cbc:	f042 0201 	orr.w	r2, r2, #1
 8000cc0:	619a      	str	r2, [r3, #24]
 8000cc2:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cc4:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000cc8:	f002 0201 	and.w	r2, r2, #1
 8000ccc:	9200      	str	r2, [sp, #0]
 8000cce:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd0:	69da      	ldr	r2, [r3, #28]
 8000cd2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000cd6:	61da      	str	r2, [r3, #28]
 8000cd8:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cda:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cdc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ce0:	9301      	str	r3, [sp, #4]
 8000ce2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ce4:	f000 f910 	bl	8000f08 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ce8:	4a05      	ldr	r2, [pc, #20]	@ (8000d00 <HAL_MspInit+0x4c>)
 8000cea:	6853      	ldr	r3, [r2, #4]
 8000cec:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000cf0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000cf4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	b003      	add	sp, #12
 8000cf8:	f85d fb04 	ldr.w	pc, [sp], #4
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40010000 	.word	0x40010000

08000d04 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d04:	b510      	push	{r4, lr}
 8000d06:	4604      	mov	r4, r0
 8000d08:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d0a:	2210      	movs	r2, #16
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	a802      	add	r0, sp, #8
 8000d10:	f002 fd2e 	bl	8003770 <memset>
  if(hi2c->Instance==I2C1)
 8000d14:	6822      	ldr	r2, [r4, #0]
 8000d16:	4b15      	ldr	r3, [pc, #84]	@ (8000d6c <HAL_I2C_MspInit+0x68>)
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d124      	bne.n	8000d66 <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1c:	4c14      	ldr	r4, [pc, #80]	@ (8000d70 <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d1e:	f44f 7240 	mov.w	r2, #768	@ 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d24:	4813      	ldr	r0, [pc, #76]	@ (8000d74 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	f043 0308 	orr.w	r3, r3, #8
 8000d2a:	61a3      	str	r3, [r4, #24]
 8000d2c:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d2e:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d30:	f003 0308 	and.w	r3, r3, #8
 8000d34:	9300      	str	r3, [sp, #0]
 8000d36:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d38:	2312      	movs	r3, #18
 8000d3a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d42:	f000 f925 	bl	8000f90 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000d46:	4a0c      	ldr	r2, [pc, #48]	@ (8000d78 <HAL_I2C_MspInit+0x74>)
 8000d48:	6853      	ldr	r3, [r2, #4]
 8000d4a:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000d4e:	f043 0302 	orr.w	r3, r3, #2
 8000d52:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d54:	69e3      	ldr	r3, [r4, #28]
 8000d56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d5a:	61e3      	str	r3, [r4, #28]
 8000d5c:	69e3      	ldr	r3, [r4, #28]
 8000d5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d62:	9301      	str	r3, [sp, #4]
 8000d64:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d66:	b006      	add	sp, #24
 8000d68:	bd10      	pop	{r4, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40005400 	.word	0x40005400
 8000d70:	40021000 	.word	0x40021000
 8000d74:	40010c00 	.word	0x40010c00
 8000d78:	40010000 	.word	0x40010000

08000d7c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler>

08000d7e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <HardFault_Handler>

08000d80 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <MemManage_Handler>

08000d82 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <BusFault_Handler>

08000d84 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler>

08000d86 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d86:	4770      	bx	lr

08000d88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d88:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d8a:	f000 f887 	bl	8000e9c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000d8e:	f001 ffd5 	bl	8002d3c <xTaskGetSchedulerState>
 8000d92:	2801      	cmp	r0, #1
 8000d94:	d003      	beq.n	8000d9e <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 8000d9a:	f002 bb2b 	b.w	80033f4 <xPortSysTickHandler>
}
 8000d9e:	bd08      	pop	{r3, pc}

08000da0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000da0:	4a0b      	ldr	r2, [pc, #44]	@ (8000dd0 <_sbrk+0x30>)
{
 8000da2:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000da4:	6811      	ldr	r1, [r2, #0]
{
 8000da6:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000da8:	b909      	cbnz	r1, 8000dae <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000daa:	490a      	ldr	r1, [pc, #40]	@ (8000dd4 <_sbrk+0x34>)
 8000dac:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dae:	6810      	ldr	r0, [r2, #0]
 8000db0:	4909      	ldr	r1, [pc, #36]	@ (8000dd8 <_sbrk+0x38>)
 8000db2:	4c0a      	ldr	r4, [pc, #40]	@ (8000ddc <_sbrk+0x3c>)
 8000db4:	4403      	add	r3, r0
 8000db6:	1b09      	subs	r1, r1, r4
 8000db8:	428b      	cmp	r3, r1
 8000dba:	d906      	bls.n	8000dca <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000dbc:	f002 fce0 	bl	8003780 <__errno>
 8000dc0:	230c      	movs	r3, #12
 8000dc2:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000dc4:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000dc8:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000dca:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000dcc:	e7fc      	b.n	8000dc8 <_sbrk+0x28>
 8000dce:	bf00      	nop
 8000dd0:	20000b9c 	.word	0x20000b9c
 8000dd4:	20001b70 	.word	0x20001b70
 8000dd8:	20002800 	.word	0x20002800
 8000ddc:	00000400 	.word	0x00000400

08000de0 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de0:	4770      	bx	lr
	...

08000de4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000de4:	f7ff fffc 	bl	8000de0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000de8:	480b      	ldr	r0, [pc, #44]	@ (8000e18 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dea:	490c      	ldr	r1, [pc, #48]	@ (8000e1c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dec:	4a0c      	ldr	r2, [pc, #48]	@ (8000e20 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000df0:	e002      	b.n	8000df8 <LoopCopyDataInit>

08000df2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000df2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000df4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000df6:	3304      	adds	r3, #4

08000df8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000df8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dfa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dfc:	d3f9      	bcc.n	8000df2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dfe:	4a09      	ldr	r2, [pc, #36]	@ (8000e24 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e00:	4c09      	ldr	r4, [pc, #36]	@ (8000e28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e04:	e001      	b.n	8000e0a <LoopFillZerobss>

08000e06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e08:	3204      	adds	r2, #4

08000e0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e0c:	d3fb      	bcc.n	8000e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e0e:	f002 fcbd 	bl	800378c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e12:	f7ff fc79 	bl	8000708 <main>
  bx lr
 8000e16:	4770      	bx	lr
  ldr r0, =_sdata
 8000e18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e1c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e20:	080059e8 	.word	0x080059e8
  ldr r2, =_sbss
 8000e24:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e28:	20001b70 	.word	0x20001b70

08000e2c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e2c:	e7fe      	b.n	8000e2c <ADC1_2_IRQHandler>
	...

08000e30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e30:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e32:	4b0e      	ldr	r3, [pc, #56]	@ (8000e6c <HAL_InitTick+0x3c>)
{
 8000e34:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e36:	781a      	ldrb	r2, [r3, #0]
 8000e38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e3c:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e40:	4a0b      	ldr	r2, [pc, #44]	@ (8000e70 <HAL_InitTick+0x40>)
 8000e42:	6810      	ldr	r0, [r2, #0]
 8000e44:	fbb0 f0f3 	udiv	r0, r0, r3
 8000e48:	f000 f88e 	bl	8000f68 <HAL_SYSTICK_Config>
 8000e4c:	4604      	mov	r4, r0
 8000e4e:	b958      	cbnz	r0, 8000e68 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e50:	2d0f      	cmp	r5, #15
 8000e52:	d809      	bhi.n	8000e68 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e54:	4602      	mov	r2, r0
 8000e56:	4629      	mov	r1, r5
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f000 f854 	bl	8000f08 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e60:	4620      	mov	r0, r4
 8000e62:	4b04      	ldr	r3, [pc, #16]	@ (8000e74 <HAL_InitTick+0x44>)
 8000e64:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000e66:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000e68:	2001      	movs	r0, #1
 8000e6a:	e7fc      	b.n	8000e66 <HAL_InitTick+0x36>
 8000e6c:	2000000c 	.word	0x2000000c
 8000e70:	20000008 	.word	0x20000008
 8000e74:	20000010 	.word	0x20000010

08000e78 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e78:	4a07      	ldr	r2, [pc, #28]	@ (8000e98 <HAL_Init+0x20>)
{
 8000e7a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e7c:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7e:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e80:	f043 0310 	orr.w	r3, r3, #16
 8000e84:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e86:	f000 f82d 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e8a:	200f      	movs	r0, #15
 8000e8c:	f7ff ffd0 	bl	8000e30 <HAL_InitTick>
  HAL_MspInit();
 8000e90:	f7ff ff10 	bl	8000cb4 <HAL_MspInit>
}
 8000e94:	2000      	movs	r0, #0
 8000e96:	bd08      	pop	{r3, pc}
 8000e98:	40022000 	.word	0x40022000

08000e9c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000e9c:	4a03      	ldr	r2, [pc, #12]	@ (8000eac <HAL_IncTick+0x10>)
 8000e9e:	4b04      	ldr	r3, [pc, #16]	@ (8000eb0 <HAL_IncTick+0x14>)
 8000ea0:	6811      	ldr	r1, [r2, #0]
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	440b      	add	r3, r1
 8000ea6:	6013      	str	r3, [r2, #0]
}
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000ba0 	.word	0x20000ba0
 8000eb0:	2000000c 	.word	0x2000000c

08000eb4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000eb4:	4b01      	ldr	r3, [pc, #4]	@ (8000ebc <HAL_GetTick+0x8>)
 8000eb6:	6818      	ldr	r0, [r3, #0]
}
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000ba0 	.word	0x20000ba0

08000ec0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ec0:	b538      	push	{r3, r4, r5, lr}
 8000ec2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000ec4:	f7ff fff6 	bl	8000eb4 <HAL_GetTick>
 8000ec8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eca:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000ecc:	bf1e      	ittt	ne
 8000ece:	4b04      	ldrne	r3, [pc, #16]	@ (8000ee0 <HAL_Delay+0x20>)
 8000ed0:	781b      	ldrbne	r3, [r3, #0]
 8000ed2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ed4:	f7ff ffee 	bl	8000eb4 <HAL_GetTick>
 8000ed8:	1b43      	subs	r3, r0, r5
 8000eda:	42a3      	cmp	r3, r4
 8000edc:	d3fa      	bcc.n	8000ed4 <HAL_Delay+0x14>
  {
  }
}
 8000ede:	bd38      	pop	{r3, r4, r5, pc}
 8000ee0:	2000000c 	.word	0x2000000c

08000ee4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee4:	4907      	ldr	r1, [pc, #28]	@ (8000f04 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ee6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ee8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000eea:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eee:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000ef2:	0412      	lsls	r2, r2, #16
 8000ef4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000efc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000f00:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f02:	4770      	bx	lr
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b15      	ldr	r3, [pc, #84]	@ (8000f60 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0a:	b530      	push	{r4, r5, lr}
 8000f0c:	68dc      	ldr	r4, [r3, #12]
 8000f0e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f12:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f16:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f18:	2b04      	cmp	r3, #4
 8000f1a:	bf28      	it	cs
 8000f1c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f1e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f24:	bf94      	ite	ls
 8000f26:	2400      	movls	r4, #0
 8000f28:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f2a:	fa05 f303 	lsl.w	r3, r5, r3
 8000f2e:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f32:	40a5      	lsls	r5, r4
 8000f34:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f38:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8000f3a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	bfac      	ite	ge
 8000f42:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f46:	4a07      	ldrlt	r2, [pc, #28]	@ (8000f64 <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f48:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	bfab      	itete	ge
 8000f50:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f54:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f5c:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000f5e:	bd30      	pop	{r4, r5, pc}
 8000f60:	e000ed00 	.word	0xe000ed00
 8000f64:	e000ed14 	.word	0xe000ed14

08000f68 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f68:	3801      	subs	r0, #1
 8000f6a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000f6e:	d20b      	bcs.n	8000f88 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f70:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f74:	21f0      	movs	r1, #240	@ 0xf0
 8000f76:	4a05      	ldr	r2, [pc, #20]	@ (8000f8c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f78:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f7a:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f7e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f80:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f82:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f84:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f86:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000f88:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f94:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8000f96:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000f98:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 8001118 <HAL_GPIO_Init+0x188>
 8000f9c:	4b5f      	ldr	r3, [pc, #380]	@ (800111c <HAL_GPIO_Init+0x18c>)
      switch (GPIO_Init->Mode)
 8000f9e:	f8df e180 	ldr.w	lr, [pc, #384]	@ 8001120 <HAL_GPIO_Init+0x190>
 8000fa2:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 8001124 <HAL_GPIO_Init+0x194>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fa6:	680d      	ldr	r5, [r1, #0]
 8000fa8:	fa35 f406 	lsrs.w	r4, r5, r6
 8000fac:	d102      	bne.n	8000fb4 <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8000fae:	b003      	add	sp, #12
 8000fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8000fb4:	2701      	movs	r7, #1
 8000fb6:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fb8:	ea05 0407 	and.w	r4, r5, r7
    if (iocurrent == ioposition)
 8000fbc:	ea37 0505 	bics.w	r5, r7, r5
 8000fc0:	d175      	bne.n	80010ae <HAL_GPIO_Init+0x11e>
      switch (GPIO_Init->Mode)
 8000fc2:	684d      	ldr	r5, [r1, #4]
 8000fc4:	2d03      	cmp	r5, #3
 8000fc6:	d806      	bhi.n	8000fd6 <HAL_GPIO_Init+0x46>
 8000fc8:	3d01      	subs	r5, #1
 8000fca:	2d02      	cmp	r5, #2
 8000fcc:	d87e      	bhi.n	80010cc <HAL_GPIO_Init+0x13c>
 8000fce:	e8df f005 	tbb	[pc, r5]
 8000fd2:	948f      	.short	0x948f
 8000fd4:	9a          	.byte	0x9a
 8000fd5:	00          	.byte	0x00
 8000fd6:	2d12      	cmp	r5, #18
 8000fd8:	f000 8092 	beq.w	8001100 <HAL_GPIO_Init+0x170>
 8000fdc:	d869      	bhi.n	80010b2 <HAL_GPIO_Init+0x122>
 8000fde:	2d11      	cmp	r5, #17
 8000fe0:	f000 8088 	beq.w	80010f4 <HAL_GPIO_Init+0x164>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fe4:	2cff      	cmp	r4, #255	@ 0xff
 8000fe6:	bf98      	it	ls
 8000fe8:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fea:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fee:	bf88      	it	hi
 8000ff0:	f100 0904 	addhi.w	r9, r0, #4
 8000ff4:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000ff8:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ffc:	bf88      	it	hi
 8000ffe:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001000:	fa0b fa05 	lsl.w	sl, fp, r5
 8001004:	ea27 070a 	bic.w	r7, r7, sl
 8001008:	fa02 f505 	lsl.w	r5, r2, r5
 800100c:	432f      	orrs	r7, r5
 800100e:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001012:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8001016:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 800101a:	d048      	beq.n	80010ae <HAL_GPIO_Init+0x11e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 800101c:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8001020:	f026 0703 	bic.w	r7, r6, #3
 8001024:	f045 0501 	orr.w	r5, r5, #1
 8001028:	f8cc 5018 	str.w	r5, [ip, #24]
 800102c:	f8dc 5018 	ldr.w	r5, [ip, #24]
 8001030:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 8001034:	f005 0501 	and.w	r5, r5, #1
 8001038:	9501      	str	r5, [sp, #4]
 800103a:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800103e:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001042:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001044:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8001048:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800104a:	fa0b fb0a 	lsl.w	fp, fp, sl
 800104e:	ea25 0b0b 	bic.w	fp, r5, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001052:	4d35      	ldr	r5, [pc, #212]	@ (8001128 <HAL_GPIO_Init+0x198>)
 8001054:	42a8      	cmp	r0, r5
 8001056:	d05a      	beq.n	800110e <HAL_GPIO_Init+0x17e>
 8001058:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800105c:	42a8      	cmp	r0, r5
 800105e:	d058      	beq.n	8001112 <HAL_GPIO_Init+0x182>
 8001060:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8001064:	42a8      	cmp	r0, r5
 8001066:	bf14      	ite	ne
 8001068:	2503      	movne	r5, #3
 800106a:	2502      	moveq	r5, #2
 800106c:	fa05 f50a 	lsl.w	r5, r5, sl
 8001070:	ea45 050b 	orr.w	r5, r5, fp
        AFIO->EXTICR[position >> 2u] = temp;
 8001074:	60bd      	str	r5, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 8001076:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001078:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 800107c:	bf14      	ite	ne
 800107e:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001080:	43a5      	biceq	r5, r4
 8001082:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8001084:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001086:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 800108a:	bf14      	ite	ne
 800108c:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800108e:	43a5      	biceq	r5, r4
 8001090:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 8001092:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001094:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001098:	bf14      	ite	ne
 800109a:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800109c:	43a5      	biceq	r5, r4
 800109e:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 80010a0:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010a2:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 80010a6:	bf14      	ite	ne
 80010a8:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010aa:	43a5      	biceq	r5, r4
 80010ac:	601d      	str	r5, [r3, #0]
	position++;
 80010ae:	3601      	adds	r6, #1
 80010b0:	e779      	b.n	8000fa6 <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 80010b2:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 800112c <HAL_GPIO_Init+0x19c>
 80010b6:	454d      	cmp	r5, r9
 80010b8:	d008      	beq.n	80010cc <HAL_GPIO_Init+0x13c>
 80010ba:	d811      	bhi.n	80010e0 <HAL_GPIO_Init+0x150>
 80010bc:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 80010c0:	454d      	cmp	r5, r9
 80010c2:	d003      	beq.n	80010cc <HAL_GPIO_Init+0x13c>
 80010c4:	4575      	cmp	r5, lr
 80010c6:	d001      	beq.n	80010cc <HAL_GPIO_Init+0x13c>
 80010c8:	4545      	cmp	r5, r8
 80010ca:	d18b      	bne.n	8000fe4 <HAL_GPIO_Init+0x54>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010cc:	688a      	ldr	r2, [r1, #8]
 80010ce:	b1e2      	cbz	r2, 800110a <HAL_GPIO_Init+0x17a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010d0:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 80010d2:	bf08      	it	eq
 80010d4:	6107      	streq	r7, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010d6:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 80010da:	bf18      	it	ne
 80010dc:	6147      	strne	r7, [r0, #20]
 80010de:	e781      	b.n	8000fe4 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 80010e0:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 8001130 <HAL_GPIO_Init+0x1a0>
 80010e4:	454d      	cmp	r5, r9
 80010e6:	d0f1      	beq.n	80010cc <HAL_GPIO_Init+0x13c>
 80010e8:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 80010ec:	454d      	cmp	r5, r9
 80010ee:	e7ec      	b.n	80010ca <HAL_GPIO_Init+0x13a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80010f0:	68ca      	ldr	r2, [r1, #12]
          break;
 80010f2:	e777      	b.n	8000fe4 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80010f4:	68ca      	ldr	r2, [r1, #12]
 80010f6:	3204      	adds	r2, #4
          break;
 80010f8:	e774      	b.n	8000fe4 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010fa:	68ca      	ldr	r2, [r1, #12]
 80010fc:	3208      	adds	r2, #8
          break;
 80010fe:	e771      	b.n	8000fe4 <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001100:	68ca      	ldr	r2, [r1, #12]
 8001102:	320c      	adds	r2, #12
          break;
 8001104:	e76e      	b.n	8000fe4 <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 8001106:	2200      	movs	r2, #0
 8001108:	e76c      	b.n	8000fe4 <HAL_GPIO_Init+0x54>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800110a:	2204      	movs	r2, #4
 800110c:	e76a      	b.n	8000fe4 <HAL_GPIO_Init+0x54>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800110e:	2500      	movs	r5, #0
 8001110:	e7ac      	b.n	800106c <HAL_GPIO_Init+0xdc>
 8001112:	2501      	movs	r5, #1
 8001114:	e7aa      	b.n	800106c <HAL_GPIO_Init+0xdc>
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000
 800111c:	40010400 	.word	0x40010400
 8001120:	10210000 	.word	0x10210000
 8001124:	10110000 	.word	0x10110000
 8001128:	40010800 	.word	0x40010800
 800112c:	10220000 	.word	0x10220000
 8001130:	10310000 	.word	0x10310000

08001134 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001134:	6883      	ldr	r3, [r0, #8]
 8001136:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001138:	bf14      	ite	ne
 800113a:	2001      	movne	r0, #1
 800113c:	2000      	moveq	r0, #0
 800113e:	4770      	bx	lr

08001140 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001140:	b10a      	cbz	r2, 8001146 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001142:	6101      	str	r1, [r0, #16]
  }
}
 8001144:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001146:	0409      	lsls	r1, r1, #16
 8001148:	e7fb      	b.n	8001142 <HAL_GPIO_WritePin+0x2>

0800114a <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800114a:	6801      	ldr	r1, [r0, #0]
 800114c:	2200      	movs	r2, #0
 800114e:	694b      	ldr	r3, [r1, #20]
 8001150:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 8001154:	d010      	beq.n	8001178 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001156:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 800115a:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800115c:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800115e:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001160:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001164:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001168:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800116a:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800116e:	f043 0304 	orr.w	r3, r3, #4
 8001172:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 8001174:	2001      	movs	r0, #1
 8001176:	4770      	bx	lr
  }
  return HAL_OK;
 8001178:	4618      	mov	r0, r3
}
 800117a:	4770      	bx	lr

0800117c <I2C_WaitOnFlagUntilTimeout>:
{
 800117c:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8001180:	4606      	mov	r6, r0
 8001182:	460f      	mov	r7, r1
 8001184:	4691      	mov	r9, r2
 8001186:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001188:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800118c:	6833      	ldr	r3, [r6, #0]
 800118e:	f1ba 0f01 	cmp.w	sl, #1
 8001192:	bf0c      	ite	eq
 8001194:	695c      	ldreq	r4, [r3, #20]
 8001196:	699c      	ldrne	r4, [r3, #24]
 8001198:	ea27 0404 	bic.w	r4, r7, r4
 800119c:	b2a4      	uxth	r4, r4
 800119e:	fab4 f484 	clz	r4, r4
 80011a2:	0964      	lsrs	r4, r4, #5
 80011a4:	45a1      	cmp	r9, r4
 80011a6:	d001      	beq.n	80011ac <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 80011a8:	2000      	movs	r0, #0
 80011aa:	e025      	b.n	80011f8 <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 80011ac:	1c6a      	adds	r2, r5, #1
 80011ae:	d0ee      	beq.n	800118e <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80011b0:	f7ff fe80 	bl	8000eb4 <HAL_GetTick>
 80011b4:	9b08      	ldr	r3, [sp, #32]
 80011b6:	1ac0      	subs	r0, r0, r3
 80011b8:	42a8      	cmp	r0, r5
 80011ba:	d801      	bhi.n	80011c0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80011bc:	2d00      	cmp	r5, #0
 80011be:	d1e5      	bne.n	800118c <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80011c0:	6833      	ldr	r3, [r6, #0]
 80011c2:	f1ba 0f01 	cmp.w	sl, #1
 80011c6:	bf0c      	ite	eq
 80011c8:	695b      	ldreq	r3, [r3, #20]
 80011ca:	699b      	ldrne	r3, [r3, #24]
 80011cc:	ea27 0303 	bic.w	r3, r7, r3
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	fab3 f383 	clz	r3, r3
 80011d6:	095b      	lsrs	r3, r3, #5
 80011d8:	4599      	cmp	r9, r3
 80011da:	d1d7      	bne.n	800118c <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 80011dc:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 80011de:	2220      	movs	r2, #32
          return HAL_ERROR;
 80011e0:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 80011e2:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80011e4:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80011e8:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80011ec:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80011ee:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80011f2:	f042 0220 	orr.w	r2, r2, #32
 80011f6:	6432      	str	r2, [r6, #64]	@ 0x40
}
 80011f8:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

080011fc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80011fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001200:	4604      	mov	r4, r0
 8001202:	460f      	mov	r7, r1
 8001204:	4616      	mov	r6, r2
 8001206:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001208:	6825      	ldr	r5, [r4, #0]
 800120a:	6968      	ldr	r0, [r5, #20]
 800120c:	ea27 0000 	bic.w	r0, r7, r0
 8001210:	b280      	uxth	r0, r0
 8001212:	b1c0      	cbz	r0, 8001246 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001214:	696b      	ldr	r3, [r5, #20]
 8001216:	055a      	lsls	r2, r3, #21
 8001218:	d517      	bpl.n	800124a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800121a:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 800121c:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800121e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001222:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001224:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 8001228:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 800122a:	2300      	movs	r3, #0
 800122c:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800122e:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001232:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001236:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001238:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800123c:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800123e:	2300      	movs	r3, #0
      return HAL_ERROR;
 8001240:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 8001242:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 8001246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800124a:	1c73      	adds	r3, r6, #1
 800124c:	d0dd      	beq.n	800120a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800124e:	f7ff fe31 	bl	8000eb4 <HAL_GetTick>
 8001252:	eba0 0008 	sub.w	r0, r0, r8
 8001256:	42b0      	cmp	r0, r6
 8001258:	d801      	bhi.n	800125e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 800125a:	2e00      	cmp	r6, #0
 800125c:	d1d4      	bne.n	8001208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800125e:	6823      	ldr	r3, [r4, #0]
 8001260:	695a      	ldr	r2, [r3, #20]
 8001262:	ea27 0202 	bic.w	r2, r7, r2
 8001266:	b292      	uxth	r2, r2
 8001268:	2a00      	cmp	r2, #0
 800126a:	d0cd      	beq.n	8001208 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 800126c:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 800126e:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001270:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001272:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001276:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800127a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800127c:	4313      	orrs	r3, r2
 800127e:	e7dd      	b.n	800123c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08001280 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001280:	b570      	push	{r4, r5, r6, lr}
 8001282:	4604      	mov	r4, r0
 8001284:	460d      	mov	r5, r1
 8001286:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001288:	6823      	ldr	r3, [r4, #0]
 800128a:	695b      	ldr	r3, [r3, #20]
 800128c:	061b      	lsls	r3, r3, #24
 800128e:	d501      	bpl.n	8001294 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001290:	2000      	movs	r0, #0
 8001292:	e01e      	b.n	80012d2 <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001294:	4620      	mov	r0, r4
 8001296:	f7ff ff58 	bl	800114a <I2C_IsAcknowledgeFailed>
 800129a:	b9c8      	cbnz	r0, 80012d0 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800129c:	1c6a      	adds	r2, r5, #1
 800129e:	d0f3      	beq.n	8001288 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012a0:	f7ff fe08 	bl	8000eb4 <HAL_GetTick>
 80012a4:	1b80      	subs	r0, r0, r6
 80012a6:	42a8      	cmp	r0, r5
 80012a8:	d801      	bhi.n	80012ae <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80012aa:	2d00      	cmp	r5, #0
 80012ac:	d1ec      	bne.n	8001288 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	695b      	ldr	r3, [r3, #20]
 80012b2:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 80012b6:	d1e7      	bne.n	8001288 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 80012b8:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80012ba:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80012bc:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012c0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012c4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80012c6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012ca:	f042 0220 	orr.w	r2, r2, #32
 80012ce:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80012d0:	2001      	movs	r0, #1
}
 80012d2:	bd70      	pop	{r4, r5, r6, pc}

080012d4 <I2C_RequestMemoryWrite>:
{
 80012d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012d8:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012da:	6802      	ldr	r2, [r0, #0]
{
 80012dc:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012de:	6813      	ldr	r3, [r2, #0]
{
 80012e0:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80012e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012e6:	6013      	str	r3, [r2, #0]
{
 80012e8:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 80012ec:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80012ee:	463b      	mov	r3, r7
 80012f0:	2200      	movs	r2, #0
 80012f2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80012f6:	f8cd 8000 	str.w	r8, [sp]
{
 80012fa:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80012fc:	f7ff ff3e 	bl	800117c <I2C_WaitOnFlagUntilTimeout>
 8001300:	6823      	ldr	r3, [r4, #0]
 8001302:	b138      	cbz	r0, 8001314 <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	05db      	lsls	r3, r3, #23
 8001308:	d502      	bpl.n	8001310 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800130a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800130e:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8001310:	2603      	movs	r6, #3
 8001312:	e020      	b.n	8001356 <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001314:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 8001318:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800131a:	463a      	mov	r2, r7
 800131c:	4643      	mov	r3, r8
 800131e:	4620      	mov	r0, r4
 8001320:	4918      	ldr	r1, [pc, #96]	@ (8001384 <I2C_RequestMemoryWrite+0xb0>)
 8001322:	f7ff ff6b 	bl	80011fc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001326:	b9a8      	cbnz	r0, 8001354 <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	9003      	str	r0, [sp, #12]
 800132c:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800132e:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001330:	9203      	str	r2, [sp, #12]
 8001332:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001334:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001336:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001338:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800133a:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800133c:	f7ff ffa0 	bl	8001280 <I2C_WaitOnTXEFlagUntilTimeout>
 8001340:	4606      	mov	r6, r0
 8001342:	b160      	cbz	r0, 800135e <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001344:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001346:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001348:	bf01      	itttt	eq
 800134a:	6822      	ldreq	r2, [r4, #0]
 800134c:	6813      	ldreq	r3, [r2, #0]
 800134e:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8001352:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 8001354:	2601      	movs	r6, #1
}
 8001356:	4630      	mov	r0, r6
 8001358:	b005      	add	sp, #20
 800135a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800135e:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001362:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001364:	d102      	bne.n	800136c <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001366:	b2ed      	uxtb	r5, r5
 8001368:	611d      	str	r5, [r3, #16]
 800136a:	e7f4      	b.n	8001356 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800136c:	0a2a      	lsrs	r2, r5, #8
 800136e:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001370:	4639      	mov	r1, r7
 8001372:	4642      	mov	r2, r8
 8001374:	4620      	mov	r0, r4
 8001376:	f7ff ff83 	bl	8001280 <I2C_WaitOnTXEFlagUntilTimeout>
 800137a:	2800      	cmp	r0, #0
 800137c:	d1e2      	bne.n	8001344 <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800137e:	6823      	ldr	r3, [r4, #0]
 8001380:	e7f1      	b.n	8001366 <I2C_RequestMemoryWrite+0x92>
 8001382:	bf00      	nop
 8001384:	00010002 	.word	0x00010002

08001388 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001388:	b570      	push	{r4, r5, r6, lr}
 800138a:	4604      	mov	r4, r0
 800138c:	460d      	mov	r5, r1
 800138e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001390:	6823      	ldr	r3, [r4, #0]
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	075b      	lsls	r3, r3, #29
 8001396:	d501      	bpl.n	800139c <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001398:	2000      	movs	r0, #0
 800139a:	e01e      	b.n	80013da <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800139c:	4620      	mov	r0, r4
 800139e:	f7ff fed4 	bl	800114a <I2C_IsAcknowledgeFailed>
 80013a2:	b9c8      	cbnz	r0, 80013d8 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 80013a4:	1c6a      	adds	r2, r5, #1
 80013a6:	d0f3      	beq.n	8001390 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013a8:	f7ff fd84 	bl	8000eb4 <HAL_GetTick>
 80013ac:	1b80      	subs	r0, r0, r6
 80013ae:	42a8      	cmp	r0, r5
 80013b0:	d801      	bhi.n	80013b6 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80013b2:	2d00      	cmp	r5, #0
 80013b4:	d1ec      	bne.n	8001390 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80013b6:	6823      	ldr	r3, [r4, #0]
 80013b8:	695b      	ldr	r3, [r3, #20]
 80013ba:	f013 0304 	ands.w	r3, r3, #4
 80013be:	d1e7      	bne.n	8001390 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 80013c0:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80013c2:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80013c4:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80013c8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013cc:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80013ce:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80013d2:	f042 0220 	orr.w	r2, r2, #32
 80013d6:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 80013d8:	2001      	movs	r0, #1
}
 80013da:	bd70      	pop	{r4, r5, r6, pc}

080013dc <HAL_I2C_Init>:
{
 80013dc:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80013de:	4604      	mov	r4, r0
 80013e0:	b908      	cbnz	r0, 80013e6 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80013e2:	2001      	movs	r0, #1
}
 80013e4:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013e6:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80013ea:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80013ee:	b91b      	cbnz	r3, 80013f8 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 80013f0:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 80013f4:	f7ff fc86 	bl	8000d04 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 80013f8:	2324      	movs	r3, #36	@ 0x24
 80013fa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 80013fe:	6823      	ldr	r3, [r4, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	f022 0201 	bic.w	r2, r2, #1
 8001406:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800140e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001410:	681a      	ldr	r2, [r3, #0]
 8001412:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001416:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001418:	f000 fb76 	bl	8001b08 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800141c:	4b3f      	ldr	r3, [pc, #252]	@ (800151c <HAL_I2C_Init+0x140>)
 800141e:	6865      	ldr	r5, [r4, #4]
 8001420:	429d      	cmp	r5, r3
 8001422:	bf94      	ite	ls
 8001424:	4b3e      	ldrls	r3, [pc, #248]	@ (8001520 <HAL_I2C_Init+0x144>)
 8001426:	4b3f      	ldrhi	r3, [pc, #252]	@ (8001524 <HAL_I2C_Init+0x148>)
 8001428:	4298      	cmp	r0, r3
 800142a:	bf8c      	ite	hi
 800142c:	2300      	movhi	r3, #0
 800142e:	2301      	movls	r3, #1
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1d6      	bne.n	80013e2 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001434:	4e39      	ldr	r6, [pc, #228]	@ (800151c <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 8001436:	4b3c      	ldr	r3, [pc, #240]	@ (8001528 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001438:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 800143a:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800143e:	bf88      	it	hi
 8001440:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001444:	6822      	ldr	r2, [r4, #0]
 8001446:	6851      	ldr	r1, [r2, #4]
 8001448:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 800144c:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001450:	bf82      	ittt	hi
 8001452:	4373      	mulhi	r3, r6
 8001454:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 8001458:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800145c:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800145e:	6a11      	ldr	r1, [r2, #32]
 8001460:	3301      	adds	r3, #1
 8001462:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8001466:	430b      	orrs	r3, r1
 8001468:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800146a:	69d1      	ldr	r1, [r2, #28]
 800146c:	1e43      	subs	r3, r0, #1
 800146e:	482b      	ldr	r0, [pc, #172]	@ (800151c <HAL_I2C_Init+0x140>)
 8001470:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 8001474:	4285      	cmp	r5, r0
 8001476:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800147a:	d832      	bhi.n	80014e2 <HAL_I2C_Init+0x106>
 800147c:	006d      	lsls	r5, r5, #1
 800147e:	fbb3 f3f5 	udiv	r3, r3, r5
 8001482:	f640 70fc 	movw	r0, #4092	@ 0xffc
 8001486:	3301      	adds	r3, #1
 8001488:	4203      	tst	r3, r0
 800148a:	d042      	beq.n	8001512 <HAL_I2C_Init+0x136>
 800148c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001490:	4319      	orrs	r1, r3
 8001492:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001494:	6811      	ldr	r1, [r2, #0]
 8001496:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 800149a:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 800149e:	4303      	orrs	r3, r0
 80014a0:	430b      	orrs	r3, r1
 80014a2:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80014a4:	6891      	ldr	r1, [r2, #8]
 80014a6:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80014aa:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 80014ae:	4303      	orrs	r3, r0
 80014b0:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80014b4:	430b      	orrs	r3, r1
 80014b6:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80014b8:	68d1      	ldr	r1, [r2, #12]
 80014ba:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80014be:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 80014c2:	4303      	orrs	r3, r0
 80014c4:	430b      	orrs	r3, r1
 80014c6:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80014c8:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014ca:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80014d2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014d4:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80014d6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80014da:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014dc:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 80014e0:	e780      	b.n	80013e4 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014e2:	68a0      	ldr	r0, [r4, #8]
 80014e4:	b950      	cbnz	r0, 80014fc <HAL_I2C_Init+0x120>
 80014e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80014ea:	fbb3 f3f5 	udiv	r3, r3, r5
 80014ee:	3301      	adds	r3, #1
 80014f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f4:	b17b      	cbz	r3, 8001516 <HAL_I2C_Init+0x13a>
 80014f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80014fa:	e7c9      	b.n	8001490 <HAL_I2C_Init+0xb4>
 80014fc:	2019      	movs	r0, #25
 80014fe:	4368      	muls	r0, r5
 8001500:	fbb3 f3f0 	udiv	r3, r3, r0
 8001504:	3301      	adds	r3, #1
 8001506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800150a:	b123      	cbz	r3, 8001516 <HAL_I2C_Init+0x13a>
 800150c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001510:	e7be      	b.n	8001490 <HAL_I2C_Init+0xb4>
 8001512:	2304      	movs	r3, #4
 8001514:	e7bc      	b.n	8001490 <HAL_I2C_Init+0xb4>
 8001516:	2301      	movs	r3, #1
 8001518:	e7ba      	b.n	8001490 <HAL_I2C_Init+0xb4>
 800151a:	bf00      	nop
 800151c:	000186a0 	.word	0x000186a0
 8001520:	001e847f 	.word	0x001e847f
 8001524:	003d08ff 	.word	0x003d08ff
 8001528:	000f4240 	.word	0x000f4240

0800152c <HAL_I2C_Mem_Write>:
{
 800152c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8001530:	4604      	mov	r4, r0
 8001532:	4699      	mov	r9, r3
 8001534:	460f      	mov	r7, r1
 8001536:	4690      	mov	r8, r2
 8001538:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 800153a:	f7ff fcbb 	bl	8000eb4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800153e:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 8001542:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001544:	2b20      	cmp	r3, #32
 8001546:	d003      	beq.n	8001550 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 8001548:	2002      	movs	r0, #2
}
 800154a:	b003      	add	sp, #12
 800154c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001550:	9000      	str	r0, [sp, #0]
 8001552:	2319      	movs	r3, #25
 8001554:	2201      	movs	r2, #1
 8001556:	4620      	mov	r0, r4
 8001558:	493a      	ldr	r1, [pc, #232]	@ (8001644 <HAL_I2C_Mem_Write+0x118>)
 800155a:	f7ff fe0f 	bl	800117c <I2C_WaitOnFlagUntilTimeout>
 800155e:	2800      	cmp	r0, #0
 8001560:	d1f2      	bne.n	8001548 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8001562:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 8001566:	2b01      	cmp	r3, #1
 8001568:	d0ee      	beq.n	8001548 <HAL_I2C_Mem_Write+0x1c>
 800156a:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800156c:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 800156e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001572:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001574:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001576:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8001578:	bf58      	it	pl
 800157a:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800157c:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 800157e:	bf5c      	itt	pl
 8001580:	f043 0301 	orrpl.w	r3, r3, #1
 8001584:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001586:	6803      	ldr	r3, [r0, #0]
 8001588:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800158c:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800158e:	2321      	movs	r3, #33	@ 0x21
 8001590:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001594:	2340      	movs	r3, #64	@ 0x40
 8001596:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800159a:	2300      	movs	r3, #0
 800159c:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 800159e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015a0:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 80015a2:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80015a4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80015a8:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80015aa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80015ac:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80015ae:	4b26      	ldr	r3, [pc, #152]	@ (8001648 <HAL_I2C_Mem_Write+0x11c>)
 80015b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015b2:	464b      	mov	r3, r9
 80015b4:	e9cd 6500 	strd	r6, r5, [sp]
 80015b8:	f7ff fe8c 	bl	80012d4 <I2C_RequestMemoryWrite>
 80015bc:	2800      	cmp	r0, #0
 80015be:	d02a      	beq.n	8001616 <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 80015c0:	2001      	movs	r0, #1
 80015c2:	e7c2      	b.n	800154a <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015c4:	f7ff fe5c 	bl	8001280 <I2C_WaitOnTXEFlagUntilTimeout>
 80015c8:	b140      	cbz	r0, 80015dc <HAL_I2C_Mem_Write+0xb0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80015ca:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80015cc:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80015ce:	bf01      	itttt	eq
 80015d0:	6822      	ldreq	r2, [r4, #0]
 80015d2:	6813      	ldreq	r3, [r2, #0]
 80015d4:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 80015d8:	6013      	streq	r3, [r2, #0]
 80015da:	e7f1      	b.n	80015c0 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80015dc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80015de:	6827      	ldr	r7, [r4, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80015e6:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 80015e8:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80015ea:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80015ec:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80015ee:	3a01      	subs	r2, #1
 80015f0:	b292      	uxth	r2, r2
 80015f2:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015f4:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 80015f6:	1e48      	subs	r0, r1, #1
 80015f8:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015fa:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 80015fc:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80015fe:	d50a      	bpl.n	8001616 <HAL_I2C_Mem_Write+0xea>
 8001600:	b148      	cbz	r0, 8001616 <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001602:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 8001604:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001606:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8001608:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 800160a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 800160c:	3902      	subs	r1, #2
        hi2c->XferCount--;
 800160e:	3b01      	subs	r3, #1
 8001610:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8001612:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 8001614:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8001616:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001618:	462a      	mov	r2, r5
 800161a:	4631      	mov	r1, r6
 800161c:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1d0      	bne.n	80015c4 <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001622:	f7ff feb1 	bl	8001388 <I2C_WaitOnBTFFlagUntilTimeout>
 8001626:	2800      	cmp	r0, #0
 8001628:	d1cf      	bne.n	80015ca <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800162a:	6822      	ldr	r2, [r4, #0]
 800162c:	6813      	ldr	r3, [r2, #0]
 800162e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001632:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8001634:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 8001636:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800163a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800163e:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 8001642:	e782      	b.n	800154a <HAL_I2C_Mem_Write+0x1e>
 8001644:	00100002 	.word	0x00100002
 8001648:	ffff0000 	.word	0xffff0000

0800164c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800164c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001650:	4605      	mov	r5, r0
 8001652:	b338      	cbz	r0, 80016a4 <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001654:	6803      	ldr	r3, [r0, #0]
 8001656:	07db      	lsls	r3, r3, #31
 8001658:	d410      	bmi.n	800167c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165a:	682b      	ldr	r3, [r5, #0]
 800165c:	079f      	lsls	r7, r3, #30
 800165e:	d45e      	bmi.n	800171e <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001660:	682b      	ldr	r3, [r5, #0]
 8001662:	0719      	lsls	r1, r3, #28
 8001664:	f100 8095 	bmi.w	8001792 <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001668:	682b      	ldr	r3, [r5, #0]
 800166a:	075a      	lsls	r2, r3, #29
 800166c:	f100 80c1 	bmi.w	80017f2 <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001670:	69eb      	ldr	r3, [r5, #28]
 8001672:	2b00      	cmp	r3, #0
 8001674:	f040 812c 	bne.w	80018d0 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001678:	2000      	movs	r0, #0
 800167a:	e029      	b.n	80016d0 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800167c:	4c90      	ldr	r4, [pc, #576]	@ (80018c0 <HAL_RCC_OscConfig+0x274>)
 800167e:	6863      	ldr	r3, [r4, #4]
 8001680:	f003 030c 	and.w	r3, r3, #12
 8001684:	2b04      	cmp	r3, #4
 8001686:	d007      	beq.n	8001698 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001688:	6863      	ldr	r3, [r4, #4]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b08      	cmp	r3, #8
 8001690:	d10a      	bne.n	80016a8 <HAL_RCC_OscConfig+0x5c>
 8001692:	6863      	ldr	r3, [r4, #4]
 8001694:	03de      	lsls	r6, r3, #15
 8001696:	d507      	bpl.n	80016a8 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001698:	6823      	ldr	r3, [r4, #0]
 800169a:	039c      	lsls	r4, r3, #14
 800169c:	d5dd      	bpl.n	800165a <HAL_RCC_OscConfig+0xe>
 800169e:	686b      	ldr	r3, [r5, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1da      	bne.n	800165a <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 80016a4:	2001      	movs	r0, #1
 80016a6:	e013      	b.n	80016d0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016a8:	686b      	ldr	r3, [r5, #4]
 80016aa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016ae:	d112      	bne.n	80016d6 <HAL_RCC_OscConfig+0x8a>
 80016b0:	6823      	ldr	r3, [r4, #0]
 80016b2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016b6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016b8:	f7ff fbfc 	bl	8000eb4 <HAL_GetTick>
 80016bc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	6823      	ldr	r3, [r4, #0]
 80016c0:	0398      	lsls	r0, r3, #14
 80016c2:	d4ca      	bmi.n	800165a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016c4:	f7ff fbf6 	bl	8000eb4 <HAL_GetTick>
 80016c8:	1b80      	subs	r0, r0, r6
 80016ca:	2864      	cmp	r0, #100	@ 0x64
 80016cc:	d9f7      	bls.n	80016be <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 80016ce:	2003      	movs	r0, #3
}
 80016d0:	b002      	add	sp, #8
 80016d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016d6:	b99b      	cbnz	r3, 8001700 <HAL_RCC_OscConfig+0xb4>
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016de:	6023      	str	r3, [r4, #0]
 80016e0:	6823      	ldr	r3, [r4, #0]
 80016e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016e6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016e8:	f7ff fbe4 	bl	8000eb4 <HAL_GetTick>
 80016ec:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	0399      	lsls	r1, r3, #14
 80016f2:	d5b2      	bpl.n	800165a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fbde 	bl	8000eb4 <HAL_GetTick>
 80016f8:	1b80      	subs	r0, r0, r6
 80016fa:	2864      	cmp	r0, #100	@ 0x64
 80016fc:	d9f7      	bls.n	80016ee <HAL_RCC_OscConfig+0xa2>
 80016fe:	e7e6      	b.n	80016ce <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001700:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001704:	6823      	ldr	r3, [r4, #0]
 8001706:	d103      	bne.n	8001710 <HAL_RCC_OscConfig+0xc4>
 8001708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800170c:	6023      	str	r3, [r4, #0]
 800170e:	e7cf      	b.n	80016b0 <HAL_RCC_OscConfig+0x64>
 8001710:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001714:	6023      	str	r3, [r4, #0]
 8001716:	6823      	ldr	r3, [r4, #0]
 8001718:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800171c:	e7cb      	b.n	80016b6 <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800171e:	4c68      	ldr	r4, [pc, #416]	@ (80018c0 <HAL_RCC_OscConfig+0x274>)
 8001720:	6863      	ldr	r3, [r4, #4]
 8001722:	f013 0f0c 	tst.w	r3, #12
 8001726:	d007      	beq.n	8001738 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001728:	6863      	ldr	r3, [r4, #4]
 800172a:	f003 030c 	and.w	r3, r3, #12
 800172e:	2b08      	cmp	r3, #8
 8001730:	d110      	bne.n	8001754 <HAL_RCC_OscConfig+0x108>
 8001732:	6863      	ldr	r3, [r4, #4]
 8001734:	03da      	lsls	r2, r3, #15
 8001736:	d40d      	bmi.n	8001754 <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	079b      	lsls	r3, r3, #30
 800173c:	d502      	bpl.n	8001744 <HAL_RCC_OscConfig+0xf8>
 800173e:	692b      	ldr	r3, [r5, #16]
 8001740:	2b01      	cmp	r3, #1
 8001742:	d1af      	bne.n	80016a4 <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001744:	6823      	ldr	r3, [r4, #0]
 8001746:	696a      	ldr	r2, [r5, #20]
 8001748:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800174c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001750:	6023      	str	r3, [r4, #0]
 8001752:	e785      	b.n	8001660 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001754:	692a      	ldr	r2, [r5, #16]
 8001756:	4b5b      	ldr	r3, [pc, #364]	@ (80018c4 <HAL_RCC_OscConfig+0x278>)
 8001758:	b16a      	cbz	r2, 8001776 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 800175a:	2201      	movs	r2, #1
 800175c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800175e:	f7ff fba9 	bl	8000eb4 <HAL_GetTick>
 8001762:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001764:	6823      	ldr	r3, [r4, #0]
 8001766:	079f      	lsls	r7, r3, #30
 8001768:	d4ec      	bmi.n	8001744 <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176a:	f7ff fba3 	bl	8000eb4 <HAL_GetTick>
 800176e:	1b80      	subs	r0, r0, r6
 8001770:	2802      	cmp	r0, #2
 8001772:	d9f7      	bls.n	8001764 <HAL_RCC_OscConfig+0x118>
 8001774:	e7ab      	b.n	80016ce <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 8001776:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001778:	f7ff fb9c 	bl	8000eb4 <HAL_GetTick>
 800177c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177e:	6823      	ldr	r3, [r4, #0]
 8001780:	0798      	lsls	r0, r3, #30
 8001782:	f57f af6d 	bpl.w	8001660 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001786:	f7ff fb95 	bl	8000eb4 <HAL_GetTick>
 800178a:	1b80      	subs	r0, r0, r6
 800178c:	2802      	cmp	r0, #2
 800178e:	d9f6      	bls.n	800177e <HAL_RCC_OscConfig+0x132>
 8001790:	e79d      	b.n	80016ce <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001792:	69aa      	ldr	r2, [r5, #24]
 8001794:	4e4a      	ldr	r6, [pc, #296]	@ (80018c0 <HAL_RCC_OscConfig+0x274>)
 8001796:	4b4b      	ldr	r3, [pc, #300]	@ (80018c4 <HAL_RCC_OscConfig+0x278>)
 8001798:	b1e2      	cbz	r2, 80017d4 <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 800179a:	2201      	movs	r2, #1
 800179c:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80017a0:	f7ff fb88 	bl	8000eb4 <HAL_GetTick>
 80017a4:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017a6:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80017a8:	079b      	lsls	r3, r3, #30
 80017aa:	d50d      	bpl.n	80017c8 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017ac:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80017b0:	4b45      	ldr	r3, [pc, #276]	@ (80018c8 <HAL_RCC_OscConfig+0x27c>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80017b8:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80017ba:	bf00      	nop
  }
  while (Delay --);
 80017bc:	9b01      	ldr	r3, [sp, #4]
 80017be:	1e5a      	subs	r2, r3, #1
 80017c0:	9201      	str	r2, [sp, #4]
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d1f9      	bne.n	80017ba <HAL_RCC_OscConfig+0x16e>
 80017c6:	e74f      	b.n	8001668 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017c8:	f7ff fb74 	bl	8000eb4 <HAL_GetTick>
 80017cc:	1b00      	subs	r0, r0, r4
 80017ce:	2802      	cmp	r0, #2
 80017d0:	d9e9      	bls.n	80017a6 <HAL_RCC_OscConfig+0x15a>
 80017d2:	e77c      	b.n	80016ce <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 80017d4:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 80017d8:	f7ff fb6c 	bl	8000eb4 <HAL_GetTick>
 80017dc:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017de:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 80017e0:	079f      	lsls	r7, r3, #30
 80017e2:	f57f af41 	bpl.w	8001668 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017e6:	f7ff fb65 	bl	8000eb4 <HAL_GetTick>
 80017ea:	1b00      	subs	r0, r0, r4
 80017ec:	2802      	cmp	r0, #2
 80017ee:	d9f6      	bls.n	80017de <HAL_RCC_OscConfig+0x192>
 80017f0:	e76d      	b.n	80016ce <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017f2:	4c33      	ldr	r4, [pc, #204]	@ (80018c0 <HAL_RCC_OscConfig+0x274>)
 80017f4:	69e3      	ldr	r3, [r4, #28]
 80017f6:	00d8      	lsls	r0, r3, #3
 80017f8:	d424      	bmi.n	8001844 <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 80017fa:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80017fc:	69e3      	ldr	r3, [r4, #28]
 80017fe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001802:	61e3      	str	r3, [r4, #28]
 8001804:	69e3      	ldr	r3, [r4, #28]
 8001806:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180e:	4e2f      	ldr	r6, [pc, #188]	@ (80018cc <HAL_RCC_OscConfig+0x280>)
 8001810:	6833      	ldr	r3, [r6, #0]
 8001812:	05d9      	lsls	r1, r3, #23
 8001814:	d518      	bpl.n	8001848 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001816:	68eb      	ldr	r3, [r5, #12]
 8001818:	2b01      	cmp	r3, #1
 800181a:	d126      	bne.n	800186a <HAL_RCC_OscConfig+0x21e>
 800181c:	6a23      	ldr	r3, [r4, #32]
 800181e:	f043 0301 	orr.w	r3, r3, #1
 8001822:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001824:	f7ff fb46 	bl	8000eb4 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001828:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800182c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800182e:	6a23      	ldr	r3, [r4, #32]
 8001830:	079b      	lsls	r3, r3, #30
 8001832:	d53f      	bpl.n	80018b4 <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 8001834:	2f00      	cmp	r7, #0
 8001836:	f43f af1b 	beq.w	8001670 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 800183a:	69e3      	ldr	r3, [r4, #28]
 800183c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001840:	61e3      	str	r3, [r4, #28]
 8001842:	e715      	b.n	8001670 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 8001844:	2700      	movs	r7, #0
 8001846:	e7e2      	b.n	800180e <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001848:	6833      	ldr	r3, [r6, #0]
 800184a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800184e:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001850:	f7ff fb30 	bl	8000eb4 <HAL_GetTick>
 8001854:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001856:	6833      	ldr	r3, [r6, #0]
 8001858:	05da      	lsls	r2, r3, #23
 800185a:	d4dc      	bmi.n	8001816 <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800185c:	f7ff fb2a 	bl	8000eb4 <HAL_GetTick>
 8001860:	eba0 0008 	sub.w	r0, r0, r8
 8001864:	2864      	cmp	r0, #100	@ 0x64
 8001866:	d9f6      	bls.n	8001856 <HAL_RCC_OscConfig+0x20a>
 8001868:	e731      	b.n	80016ce <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800186a:	b9ab      	cbnz	r3, 8001898 <HAL_RCC_OscConfig+0x24c>
 800186c:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800186e:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001872:	f023 0301 	bic.w	r3, r3, #1
 8001876:	6223      	str	r3, [r4, #32]
 8001878:	6a23      	ldr	r3, [r4, #32]
 800187a:	f023 0304 	bic.w	r3, r3, #4
 800187e:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001880:	f7ff fb18 	bl	8000eb4 <HAL_GetTick>
 8001884:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001886:	6a23      	ldr	r3, [r4, #32]
 8001888:	0798      	lsls	r0, r3, #30
 800188a:	d5d3      	bpl.n	8001834 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800188c:	f7ff fb12 	bl	8000eb4 <HAL_GetTick>
 8001890:	1b80      	subs	r0, r0, r6
 8001892:	4540      	cmp	r0, r8
 8001894:	d9f7      	bls.n	8001886 <HAL_RCC_OscConfig+0x23a>
 8001896:	e71a      	b.n	80016ce <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001898:	2b05      	cmp	r3, #5
 800189a:	6a23      	ldr	r3, [r4, #32]
 800189c:	d103      	bne.n	80018a6 <HAL_RCC_OscConfig+0x25a>
 800189e:	f043 0304 	orr.w	r3, r3, #4
 80018a2:	6223      	str	r3, [r4, #32]
 80018a4:	e7ba      	b.n	800181c <HAL_RCC_OscConfig+0x1d0>
 80018a6:	f023 0301 	bic.w	r3, r3, #1
 80018aa:	6223      	str	r3, [r4, #32]
 80018ac:	6a23      	ldr	r3, [r4, #32]
 80018ae:	f023 0304 	bic.w	r3, r3, #4
 80018b2:	e7b6      	b.n	8001822 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b4:	f7ff fafe 	bl	8000eb4 <HAL_GetTick>
 80018b8:	1b80      	subs	r0, r0, r6
 80018ba:	4540      	cmp	r0, r8
 80018bc:	d9b7      	bls.n	800182e <HAL_RCC_OscConfig+0x1e2>
 80018be:	e706      	b.n	80016ce <HAL_RCC_OscConfig+0x82>
 80018c0:	40021000 	.word	0x40021000
 80018c4:	42420000 	.word	0x42420000
 80018c8:	20000008 	.word	0x20000008
 80018cc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018d0:	4c2a      	ldr	r4, [pc, #168]	@ (800197c <HAL_RCC_OscConfig+0x330>)
 80018d2:	6862      	ldr	r2, [r4, #4]
 80018d4:	f002 020c 	and.w	r2, r2, #12
 80018d8:	2a08      	cmp	r2, #8
 80018da:	d03e      	beq.n	800195a <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018dc:	2200      	movs	r2, #0
 80018de:	2b02      	cmp	r3, #2
 80018e0:	4b27      	ldr	r3, [pc, #156]	@ (8001980 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 80018e2:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018e4:	d12c      	bne.n	8001940 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 80018e6:	f7ff fae5 	bl	8000eb4 <HAL_GetTick>
 80018ea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ec:	6823      	ldr	r3, [r4, #0]
 80018ee:	0199      	lsls	r1, r3, #6
 80018f0:	d420      	bmi.n	8001934 <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80018f2:	6a2b      	ldr	r3, [r5, #32]
 80018f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018f8:	d105      	bne.n	8001906 <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018fa:	6862      	ldr	r2, [r4, #4]
 80018fc:	68a9      	ldr	r1, [r5, #8]
 80018fe:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8001902:	430a      	orrs	r2, r1
 8001904:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001906:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8001908:	6862      	ldr	r2, [r4, #4]
 800190a:	430b      	orrs	r3, r1
 800190c:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8001910:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8001912:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001914:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8001916:	4b1a      	ldr	r3, [pc, #104]	@ (8001980 <HAL_RCC_OscConfig+0x334>)
 8001918:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800191a:	f7ff facb 	bl	8000eb4 <HAL_GetTick>
 800191e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001920:	6823      	ldr	r3, [r4, #0]
 8001922:	019a      	lsls	r2, r3, #6
 8001924:	f53f aea8 	bmi.w	8001678 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001928:	f7ff fac4 	bl	8000eb4 <HAL_GetTick>
 800192c:	1b40      	subs	r0, r0, r5
 800192e:	2802      	cmp	r0, #2
 8001930:	d9f6      	bls.n	8001920 <HAL_RCC_OscConfig+0x2d4>
 8001932:	e6cc      	b.n	80016ce <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff fabe 	bl	8000eb4 <HAL_GetTick>
 8001938:	1b80      	subs	r0, r0, r6
 800193a:	2802      	cmp	r0, #2
 800193c:	d9d6      	bls.n	80018ec <HAL_RCC_OscConfig+0x2a0>
 800193e:	e6c6      	b.n	80016ce <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 8001940:	f7ff fab8 	bl	8000eb4 <HAL_GetTick>
 8001944:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001946:	6823      	ldr	r3, [r4, #0]
 8001948:	019b      	lsls	r3, r3, #6
 800194a:	f57f ae95 	bpl.w	8001678 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194e:	f7ff fab1 	bl	8000eb4 <HAL_GetTick>
 8001952:	1b40      	subs	r0, r0, r5
 8001954:	2802      	cmp	r0, #2
 8001956:	d9f6      	bls.n	8001946 <HAL_RCC_OscConfig+0x2fa>
 8001958:	e6b9      	b.n	80016ce <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800195a:	2b01      	cmp	r3, #1
 800195c:	f43f aea2 	beq.w	80016a4 <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 8001960:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001962:	6a2b      	ldr	r3, [r5, #32]
 8001964:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 8001968:	429a      	cmp	r2, r3
 800196a:	f47f ae9b 	bne.w	80016a4 <HAL_RCC_OscConfig+0x58>
 800196e:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001970:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001974:	1ac0      	subs	r0, r0, r3
 8001976:	bf18      	it	ne
 8001978:	2001      	movne	r0, #1
 800197a:	e6a9      	b.n	80016d0 <HAL_RCC_OscConfig+0x84>
 800197c:	40021000 	.word	0x40021000
 8001980:	42420000 	.word	0x42420000

08001984 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001984:	4a0d      	ldr	r2, [pc, #52]	@ (80019bc <HAL_RCC_GetSysClockFreq+0x38>)
 8001986:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001988:	f003 010c 	and.w	r1, r3, #12
 800198c:	2908      	cmp	r1, #8
 800198e:	d112      	bne.n	80019b6 <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001990:	480b      	ldr	r0, [pc, #44]	@ (80019c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001992:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001996:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001998:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800199a:	d509      	bpl.n	80019b0 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800199c:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800199e:	4a09      	ldr	r2, [pc, #36]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019a0:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019a4:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019a6:	4a08      	ldr	r2, [pc, #32]	@ (80019c8 <HAL_RCC_GetSysClockFreq+0x44>)
 80019a8:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80019ae:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019b0:	4b06      	ldr	r3, [pc, #24]	@ (80019cc <HAL_RCC_GetSysClockFreq+0x48>)
 80019b2:	4358      	muls	r0, r3
 80019b4:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 80019b6:	4803      	ldr	r0, [pc, #12]	@ (80019c4 <HAL_RCC_GetSysClockFreq+0x40>)
}
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000
 80019c0:	0800598a 	.word	0x0800598a
 80019c4:	007a1200 	.word	0x007a1200
 80019c8:	08005988 	.word	0x08005988
 80019cc:	003d0900 	.word	0x003d0900

080019d0 <HAL_RCC_ClockConfig>:
{
 80019d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019d4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80019d6:	4604      	mov	r4, r0
 80019d8:	b910      	cbnz	r0, 80019e0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80019da:	2001      	movs	r0, #1
}
 80019dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019e0:	4a44      	ldr	r2, [pc, #272]	@ (8001af4 <HAL_RCC_ClockConfig+0x124>)
 80019e2:	6813      	ldr	r3, [r2, #0]
 80019e4:	f003 0307 	and.w	r3, r3, #7
 80019e8:	428b      	cmp	r3, r1
 80019ea:	d328      	bcc.n	8001a3e <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019ec:	6821      	ldr	r1, [r4, #0]
 80019ee:	078e      	lsls	r6, r1, #30
 80019f0:	d430      	bmi.n	8001a54 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019f2:	07ca      	lsls	r2, r1, #31
 80019f4:	d443      	bmi.n	8001a7e <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019f6:	4a3f      	ldr	r2, [pc, #252]	@ (8001af4 <HAL_RCC_ClockConfig+0x124>)
 80019f8:	6813      	ldr	r3, [r2, #0]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	42ab      	cmp	r3, r5
 8001a00:	d865      	bhi.n	8001ace <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a02:	6822      	ldr	r2, [r4, #0]
 8001a04:	4d3c      	ldr	r5, [pc, #240]	@ (8001af8 <HAL_RCC_ClockConfig+0x128>)
 8001a06:	f012 0f04 	tst.w	r2, #4
 8001a0a:	d16c      	bne.n	8001ae6 <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a0c:	0713      	lsls	r3, r2, #28
 8001a0e:	d506      	bpl.n	8001a1e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a10:	686b      	ldr	r3, [r5, #4]
 8001a12:	6922      	ldr	r2, [r4, #16]
 8001a14:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001a18:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001a1c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a1e:	f7ff ffb1 	bl	8001984 <HAL_RCC_GetSysClockFreq>
 8001a22:	686b      	ldr	r3, [r5, #4]
 8001a24:	4a35      	ldr	r2, [pc, #212]	@ (8001afc <HAL_RCC_ClockConfig+0x12c>)
 8001a26:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a2a:	5cd3      	ldrb	r3, [r2, r3]
 8001a2c:	40d8      	lsrs	r0, r3
 8001a2e:	4b34      	ldr	r3, [pc, #208]	@ (8001b00 <HAL_RCC_ClockConfig+0x130>)
 8001a30:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001a32:	4b34      	ldr	r3, [pc, #208]	@ (8001b04 <HAL_RCC_ClockConfig+0x134>)
 8001a34:	6818      	ldr	r0, [r3, #0]
 8001a36:	f7ff f9fb 	bl	8000e30 <HAL_InitTick>
  return HAL_OK;
 8001a3a:	2000      	movs	r0, #0
 8001a3c:	e7ce      	b.n	80019dc <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a3e:	6813      	ldr	r3, [r2, #0]
 8001a40:	f023 0307 	bic.w	r3, r3, #7
 8001a44:	430b      	orrs	r3, r1
 8001a46:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a48:	6813      	ldr	r3, [r2, #0]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	428b      	cmp	r3, r1
 8001a50:	d1c3      	bne.n	80019da <HAL_RCC_ClockConfig+0xa>
 8001a52:	e7cb      	b.n	80019ec <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a54:	4b28      	ldr	r3, [pc, #160]	@ (8001af8 <HAL_RCC_ClockConfig+0x128>)
 8001a56:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a5a:	bf1e      	ittt	ne
 8001a5c:	685a      	ldrne	r2, [r3, #4]
 8001a5e:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8001a62:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a64:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a66:	bf42      	ittt	mi
 8001a68:	685a      	ldrmi	r2, [r3, #4]
 8001a6a:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8001a6e:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a70:	685a      	ldr	r2, [r3, #4]
 8001a72:	68a0      	ldr	r0, [r4, #8]
 8001a74:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001a78:	4302      	orrs	r2, r0
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	e7b9      	b.n	80019f2 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a7e:	6862      	ldr	r2, [r4, #4]
 8001a80:	4e1d      	ldr	r6, [pc, #116]	@ (8001af8 <HAL_RCC_ClockConfig+0x128>)
 8001a82:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a84:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a86:	d11a      	bne.n	8001abe <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a88:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a8c:	d0a5      	beq.n	80019da <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8e:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a90:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a94:	f023 0303 	bic.w	r3, r3, #3
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001a9c:	f7ff fa0a 	bl	8000eb4 <HAL_GetTick>
 8001aa0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa2:	6873      	ldr	r3, [r6, #4]
 8001aa4:	6862      	ldr	r2, [r4, #4]
 8001aa6:	f003 030c 	and.w	r3, r3, #12
 8001aaa:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001aae:	d0a2      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ab0:	f7ff fa00 	bl	8000eb4 <HAL_GetTick>
 8001ab4:	1bc0      	subs	r0, r0, r7
 8001ab6:	4540      	cmp	r0, r8
 8001ab8:	d9f3      	bls.n	8001aa2 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001aba:	2003      	movs	r0, #3
 8001abc:	e78e      	b.n	80019dc <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001abe:	2a02      	cmp	r2, #2
 8001ac0:	d102      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ac2:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001ac6:	e7e1      	b.n	8001a8c <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ac8:	f013 0f02 	tst.w	r3, #2
 8001acc:	e7de      	b.n	8001a8c <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ace:	6813      	ldr	r3, [r2, #0]
 8001ad0:	f023 0307 	bic.w	r3, r3, #7
 8001ad4:	432b      	orrs	r3, r5
 8001ad6:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad8:	6813      	ldr	r3, [r2, #0]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	42ab      	cmp	r3, r5
 8001ae0:	f47f af7b 	bne.w	80019da <HAL_RCC_ClockConfig+0xa>
 8001ae4:	e78d      	b.n	8001a02 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ae6:	686b      	ldr	r3, [r5, #4]
 8001ae8:	68e1      	ldr	r1, [r4, #12]
 8001aea:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001aee:	430b      	orrs	r3, r1
 8001af0:	606b      	str	r3, [r5, #4]
 8001af2:	e78b      	b.n	8001a0c <HAL_RCC_ClockConfig+0x3c>
 8001af4:	40022000 	.word	0x40022000
 8001af8:	40021000 	.word	0x40021000
 8001afc:	08005978 	.word	0x08005978
 8001b00:	20000008 	.word	0x20000008
 8001b04:	20000010 	.word	0x20000010

08001b08 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b08:	4b04      	ldr	r3, [pc, #16]	@ (8001b1c <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b0a:	4a05      	ldr	r2, [pc, #20]	@ (8001b20 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001b12:	5cd3      	ldrb	r3, [r2, r3]
 8001b14:	4a03      	ldr	r2, [pc, #12]	@ (8001b24 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b16:	6810      	ldr	r0, [r2, #0]
}
 8001b18:	40d8      	lsrs	r0, r3
 8001b1a:	4770      	bx	lr
 8001b1c:	40021000 	.word	0x40021000
 8001b20:	08005970 	.word	0x08005970
 8001b24:	20000008 	.word	0x20000008

08001b28 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001b28:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001b2a:	f000 fe7b 	bl	8002824 <vTaskStartScheduler>
  
  return osOK;
}
 8001b2e:	2000      	movs	r0, #0
 8001b30:	bd08      	pop	{r3, pc}

08001b32 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001b32:	b570      	push	{r4, r5, r6, lr}
 8001b34:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001b36:	6946      	ldr	r6, [r0, #20]
{
 8001b38:	460b      	mov	r3, r1
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b3a:	e9d0 1000 	ldrd	r1, r0, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001b3e:	692a      	ldr	r2, [r5, #16]
 8001b40:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8001b44:	b086      	sub	sp, #24
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001b46:	b176      	cbz	r6, 8001b66 <osThreadCreate+0x34>
 8001b48:	69ad      	ldr	r5, [r5, #24]
 8001b4a:	b165      	cbz	r5, 8001b66 <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8001b4c:	2c84      	cmp	r4, #132	@ 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001b4e:	bf0c      	ite	eq
 8001b50:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8001b52:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b54:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8001b58:	9400      	str	r4, [sp, #0]
 8001b5a:	f000 fdfe 	bl	800275a <xTaskCreateStatic>
 8001b5e:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001b60:	9805      	ldr	r0, [sp, #20]
}
 8001b62:	b006      	add	sp, #24
 8001b64:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8001b66:	2c84      	cmp	r4, #132	@ 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001b68:	bf0c      	ite	eq
 8001b6a:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8001b6c:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001b6e:	ad05      	add	r5, sp, #20
 8001b70:	e9cd 4500 	strd	r4, r5, [sp]
 8001b74:	b292      	uxth	r2, r2
 8001b76:	f000 fe27 	bl	80027c8 <xTaskCreate>
 8001b7a:	2801      	cmp	r0, #1
 8001b7c:	d0f0      	beq.n	8001b60 <osThreadCreate+0x2e>
      return NULL;
 8001b7e:	2000      	movs	r0, #0
 8001b80:	e7ef      	b.n	8001b62 <osThreadCreate+0x30>

08001b82 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001b82:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001b84:	2801      	cmp	r0, #1
 8001b86:	bf38      	it	cc
 8001b88:	2001      	movcc	r0, #1
 8001b8a:	f000 ffaf 	bl	8002aec <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001b8e:	2000      	movs	r0, #0
 8001b90:	bd08      	pop	{r3, pc}
	...

08001b94 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8001b94:	b513      	push	{r0, r1, r4, lr}
  if(timer_def->controlblock != NULL) {
    return xTimerCreateStatic((const char *)"",
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8001b96:	c811      	ldmia	r0, {r0, r4}
    return xTimerCreateStatic((const char *)"",
 8001b98:	3901      	subs	r1, #1
{
 8001b9a:	4613      	mov	r3, r2
    return xTimerCreateStatic((const char *)"",
 8001b9c:	424a      	negs	r2, r1
 8001b9e:	414a      	adcs	r2, r1
  if(timer_def->controlblock != NULL) {
 8001ba0:	b13c      	cbz	r4, 8001bb2 <osTimerCreate+0x1e>
    return xTimerCreateStatic((const char *)"",
 8001ba2:	e9cd 0400 	strd	r0, r4, [sp]
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	4805      	ldr	r0, [pc, #20]	@ (8001bc0 <osTimerCreate+0x2c>)
 8001baa:	f001 f9d2 	bl	8002f52 <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8001bae:	b002      	add	sp, #8
 8001bb0:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 8001bb2:	9000      	str	r0, [sp, #0]
 8001bb4:	2101      	movs	r1, #1
 8001bb6:	4802      	ldr	r0, [pc, #8]	@ (8001bc0 <osTimerCreate+0x2c>)
 8001bb8:	f001 f9a4 	bl	8002f04 <xTimerCreate>
 8001bbc:	e7f7      	b.n	8001bae <osTimerCreate+0x1a>
 8001bbe:	bf00      	nop
 8001bc0:	080059b1 	.word	0x080059b1

08001bc4 <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8001bc4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8001bc6:	2400      	movs	r4, #0
 8001bc8:	2901      	cmp	r1, #1
 8001bca:	460a      	mov	r2, r1
 8001bcc:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 8001bce:	bf38      	it	cc
 8001bd0:	2201      	movcc	r2, #1
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bd2:	f3ef 8305 	mrs	r3, IPSR
    ticks = 1;
    
  if (inHandlerMode()) 
 8001bd6:	b1bb      	cbz	r3, 8001c08 <osTimerStart+0x44>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8001bd8:	2109      	movs	r1, #9
 8001bda:	9400      	str	r4, [sp, #0]
 8001bdc:	ab03      	add	r3, sp, #12
 8001bde:	f001 f9f5 	bl	8002fcc <xTimerGenericCommand>
 8001be2:	2801      	cmp	r0, #1
 8001be4:	d002      	beq.n	8001bec <osTimerStart+0x28>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
      result = osErrorOS;
 8001be6:	20ff      	movs	r0, #255	@ 0xff

#else 
  result = osErrorOS;
#endif
  return result;
}
 8001be8:	b004      	add	sp, #16
 8001bea:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 8001bec:	9b03      	ldr	r3, [sp, #12]
 8001bee:	b14b      	cbz	r3, 8001c04 <osTimerStart+0x40>
 8001bf0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001bf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001bf8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001bfc:	f3bf 8f4f 	dsb	sy
 8001c00:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8001c04:	2000      	movs	r0, #0
  return result;
 8001c06:	e7ef      	b.n	8001be8 <osTimerStart+0x24>
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8001c08:	2104      	movs	r1, #4
 8001c0a:	9300      	str	r3, [sp, #0]
 8001c0c:	f001 f9de 	bl	8002fcc <xTimerGenericCommand>
 8001c10:	2801      	cmp	r0, #1
 8001c12:	d1e8      	bne.n	8001be6 <osTimerStart+0x22>
 8001c14:	e7f6      	b.n	8001c04 <osTimerStart+0x40>

08001c16 <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8001c16:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8001c18:	2200      	movs	r2, #0
 8001c1a:	9203      	str	r2, [sp, #12]
 8001c1c:	f3ef 8305 	mrs	r3, IPSR

  if (inHandlerMode()) {
 8001c20:	b1c3      	cbz	r3, 8001c54 <osTimerStop+0x3e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8001c22:	2108      	movs	r1, #8
 8001c24:	9200      	str	r2, [sp, #0]
 8001c26:	ab03      	add	r3, sp, #12
 8001c28:	f001 f9d0 	bl	8002fcc <xTimerGenericCommand>
 8001c2c:	2801      	cmp	r0, #1
 8001c2e:	d003      	beq.n	8001c38 <osTimerStop+0x22>
      return osErrorOS;
 8001c30:	20ff      	movs	r0, #255	@ 0xff
  }
#else 
  result = osErrorOS;
#endif 
  return result;
}
 8001c32:	b005      	add	sp, #20
 8001c34:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 8001c38:	9b03      	ldr	r3, [sp, #12]
 8001c3a:	b14b      	cbz	r3, 8001c50 <osTimerStop+0x3a>
 8001c3c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001c40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c44:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001c48:	f3bf 8f4f 	dsb	sy
 8001c4c:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8001c50:	2000      	movs	r0, #0
 8001c52:	e7ee      	b.n	8001c32 <osTimerStop+0x1c>
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8001c54:	461a      	mov	r2, r3
 8001c56:	2103      	movs	r1, #3
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	f001 f9b7 	bl	8002fcc <xTimerGenericCommand>
 8001c5e:	2801      	cmp	r0, #1
 8001c60:	d1e6      	bne.n	8001c30 <osTimerStop+0x1a>
 8001c62:	e7f5      	b.n	8001c50 <osTimerStop+0x3a>

08001c64 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001c64:	4603      	mov	r3, r0
 8001c66:	b513      	push	{r0, r1, r4, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8001c68:	c807      	ldmia	r0, {r0, r1, r2}
  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8001c6a:	b10a      	cbz	r2, 8001c70 <osMessageCreate+0xc>
 8001c6c:	68db      	ldr	r3, [r3, #12]
 8001c6e:	b92b      	cbnz	r3, 8001c7c <osMessageCreate+0x18>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001c70:	2200      	movs	r2, #0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8001c72:	b002      	add	sp, #8
 8001c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001c78:	f000 b9bb 	b.w	8001ff2 <xQueueGenericCreate>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8001c7c:	2400      	movs	r4, #0
 8001c7e:	9400      	str	r4, [sp, #0]
 8001c80:	f000 f96e 	bl	8001f60 <xQueueGenericCreateStatic>
}
 8001c84:	b002      	add	sp, #8
 8001c86:	bd10      	pop	{r4, pc}

08001c88 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8001c88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001c8a:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8001c8c:	2100      	movs	r1, #0
 8001c8e:	9103      	str	r1, [sp, #12]
 8001c90:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8001c94:	b1c3      	cbz	r3, 8001cc8 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8001c96:	460b      	mov	r3, r1
 8001c98:	aa03      	add	r2, sp, #12
 8001c9a:	a901      	add	r1, sp, #4
 8001c9c:	f000 fa7f 	bl	800219e <xQueueGenericSendFromISR>
 8001ca0:	2801      	cmp	r0, #1
 8001ca2:	d003      	beq.n	8001cac <osMessagePut+0x24>
      return osErrorOS;
 8001ca4:	20ff      	movs	r0, #255	@ 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8001ca6:	b005      	add	sp, #20
 8001ca8:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 8001cac:	9b03      	ldr	r3, [sp, #12]
 8001cae:	b14b      	cbz	r3, 8001cc4 <osMessagePut+0x3c>
 8001cb0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001cb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001cb8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001cbc:	f3bf 8f4f 	dsb	sy
 8001cc0:	f3bf 8f6f 	isb	sy
  return osOK;
 8001cc4:	2000      	movs	r0, #0
 8001cc6:	e7ee      	b.n	8001ca6 <osMessagePut+0x1e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8001cc8:	2a01      	cmp	r2, #1
 8001cca:	bf38      	it	cc
 8001ccc:	2201      	movcc	r2, #1
 8001cce:	a901      	add	r1, sp, #4
 8001cd0:	f000 f9b3 	bl	800203a <xQueueGenericSend>
 8001cd4:	2801      	cmp	r0, #1
 8001cd6:	d0f5      	beq.n	8001cc4 <osMessagePut+0x3c>
 8001cd8:	e7e4      	b.n	8001ca4 <osMessagePut+0x1c>

08001cda <osMessageGet>:
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8001cda:	2300      	movs	r3, #0
{
 8001cdc:	b530      	push	{r4, r5, lr}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	4605      	mov	r5, r0
 8001ce2:	4614      	mov	r4, r2
 8001ce4:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8001ce6:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8001ce8:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 8001cea:	b911      	cbnz	r1, 8001cf2 <osMessageGet+0x18>
    event.status = osErrorParameter;
 8001cec:	2380      	movs	r3, #128	@ 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 8001cee:	9301      	str	r3, [sp, #4]
 8001cf0:	e018      	b.n	8001d24 <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8001cf8:	b1e3      	cbz	r3, 8001d34 <osMessageGet+0x5a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8001cfa:	466a      	mov	r2, sp
 8001cfc:	a902      	add	r1, sp, #8
 8001cfe:	f000 fb48 	bl	8002392 <xQueueReceiveFromISR>
 8001d02:	1e43      	subs	r3, r0, #1
 8001d04:	4258      	negs	r0, r3
 8001d06:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 8001d08:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8001d0a:	0100      	lsls	r0, r0, #4
 8001d0c:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8001d0e:	b14b      	cbz	r3, 8001d24 <osMessageGet+0x4a>
 8001d10:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001d14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d18:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001d1c:	f3bf 8f4f 	dsb	sy
 8001d20:	f3bf 8f6f 	isb	sy
    return event;
 8001d24:	ab04      	add	r3, sp, #16
 8001d26:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8001d2a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
 8001d2e:	4628      	mov	r0, r5
 8001d30:	b005      	add	sp, #20
 8001d32:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8001d34:	a902      	add	r1, sp, #8
 8001d36:	f000 fa8e 	bl	8002256 <xQueueReceive>
 8001d3a:	2801      	cmp	r0, #1
 8001d3c:	d101      	bne.n	8001d42 <osMessageGet+0x68>
      event.status = osEventMessage;
 8001d3e:	2310      	movs	r3, #16
 8001d40:	e7d5      	b.n	8001cee <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8001d42:	3c00      	subs	r4, #0
 8001d44:	bf18      	it	ne
 8001d46:	2401      	movne	r4, #1
 8001d48:	01a4      	lsls	r4, r4, #6
 8001d4a:	9401      	str	r4, [sp, #4]
  return event;
 8001d4c:	e7ea      	b.n	8001d24 <osMessageGet+0x4a>

08001d4e <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d4e:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d52:	f100 0308 	add.w	r3, r0, #8

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d56:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d5a:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d5c:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d5e:	2300      	movs	r3, #0
 8001d60:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d62:	4770      	bx	lr

08001d64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001d64:	2300      	movs	r3, #0
 8001d66:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001d68:	4770      	bx	lr

08001d6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001d6a:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d6c:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8001d6e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001d70:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001d72:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001d74:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001d76:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d78:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	6003      	str	r3, [r0, #0]
}
 8001d7e:	4770      	bx	lr

08001d80 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001d80:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001d82:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001d84:	1c63      	adds	r3, r4, #1
 8001d86:	d10a      	bne.n	8001d9e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001d88:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001d8a:	685a      	ldr	r2, [r3, #4]
 8001d8c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001d8e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d90:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d92:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001d94:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001d96:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001d98:	3301      	adds	r3, #1
 8001d9a:	6003      	str	r3, [r0, #0]
}
 8001d9c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d9e:	f100 0208 	add.w	r2, r0, #8
 8001da2:	4613      	mov	r3, r2
 8001da4:	6852      	ldr	r2, [r2, #4]
 8001da6:	6815      	ldr	r5, [r2, #0]
 8001da8:	42a5      	cmp	r5, r4
 8001daa:	d9fa      	bls.n	8001da2 <vListInsert+0x22>
 8001dac:	e7ed      	b.n	8001d8a <vListInsert+0xa>

08001dae <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001dae:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001db0:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8001db4:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001db6:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001db8:	6859      	ldr	r1, [r3, #4]
 8001dba:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001dbc:	bf08      	it	eq
 8001dbe:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	3a01      	subs	r2, #1
 8001dc8:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001dca:	6818      	ldr	r0, [r3, #0]
}
 8001dcc:	4770      	bx	lr

08001dce <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001dce:	b510      	push	{r4, lr}
 8001dd0:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001dd2:	f001 fab7 	bl	8003344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001dd6:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001dd8:	f001 fad4 	bl	8003384 <vPortExitCritical>

	return xReturn;
}
 8001ddc:	fab4 f084 	clz	r0, r4
 8001de0:	0940      	lsrs	r0, r0, #5
 8001de2:	bd10      	pop	{r4, pc}

08001de4 <prvCopyDataToQueue>:
{
 8001de4:	b570      	push	{r4, r5, r6, lr}
 8001de6:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001de8:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8001dea:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001dec:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001dee:	b942      	cbnz	r2, 8001e02 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001df0:	6806      	ldr	r6, [r0, #0]
 8001df2:	b99e      	cbnz	r6, 8001e1c <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001df4:	6840      	ldr	r0, [r0, #4]
 8001df6:	f000 ffb1 	bl	8002d5c <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8001dfa:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001dfc:	3501      	adds	r5, #1
 8001dfe:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8001e00:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8001e02:	b96e      	cbnz	r6, 8001e20 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001e04:	6880      	ldr	r0, [r0, #8]
 8001e06:	f001 fce7 	bl	80037d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001e0a:	68a3      	ldr	r3, [r4, #8]
 8001e0c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001e0e:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e10:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001e12:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e14:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e16:	bf24      	itt	cs
 8001e18:	6823      	ldrcs	r3, [r4, #0]
 8001e1a:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8001e1c:	2000      	movs	r0, #0
 8001e1e:	e7ed      	b.n	8001dfc <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001e20:	68c0      	ldr	r0, [r0, #12]
 8001e22:	f001 fcd9 	bl	80037d8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001e26:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001e28:	68e3      	ldr	r3, [r4, #12]
 8001e2a:	4251      	negs	r1, r2
 8001e2c:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e2e:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001e30:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e32:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001e34:	bf3e      	ittt	cc
 8001e36:	6863      	ldrcc	r3, [r4, #4]
 8001e38:	185b      	addcc	r3, r3, r1
 8001e3a:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001e3c:	2e02      	cmp	r6, #2
 8001e3e:	d1ed      	bne.n	8001e1c <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001e40:	b10d      	cbz	r5, 8001e46 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8001e42:	3d01      	subs	r5, #1
 8001e44:	e7ea      	b.n	8001e1c <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8001e46:	4628      	mov	r0, r5
 8001e48:	e7d8      	b.n	8001dfc <prvCopyDataToQueue+0x18>

08001e4a <prvCopyDataFromQueue>:
{
 8001e4a:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001e4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8001e4e:	4608      	mov	r0, r1
 8001e50:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001e52:	b162      	cbz	r2, 8001e6e <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001e54:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001e56:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001e58:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001e5a:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001e5c:	bf28      	it	cs
 8001e5e:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001e60:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001e62:	bf28      	it	cs
 8001e64:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001e66:	68d9      	ldr	r1, [r3, #12]
}
 8001e68:	bc10      	pop	{r4}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001e6a:	f001 bcb5 	b.w	80037d8 <memcpy>
}
 8001e6e:	bc10      	pop	{r4}
 8001e70:	4770      	bx	lr

08001e72 <prvUnlockQueue>:
{
 8001e72:	b570      	push	{r4, r5, r6, lr}
 8001e74:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001e76:	f001 fa65 	bl	8003344 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001e7a:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001e7e:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8001e82:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001e84:	2d00      	cmp	r5, #0
 8001e86:	dc14      	bgt.n	8001eb2 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8001e88:	23ff      	movs	r3, #255	@ 0xff
 8001e8a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8001e8e:	f001 fa79 	bl	8003384 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001e92:	f001 fa57 	bl	8003344 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001e96:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e9a:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8001e9e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001ea0:	2d00      	cmp	r5, #0
 8001ea2:	dc12      	bgt.n	8001eca <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8001ea4:	23ff      	movs	r3, #255	@ 0xff
 8001ea6:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8001eaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8001eae:	f001 ba69 	b.w	8003384 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001eb2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0e7      	beq.n	8001e88 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001eb8:	4630      	mov	r0, r6
 8001eba:	f000 feaf 	bl	8002c1c <xTaskRemoveFromEventList>
 8001ebe:	b108      	cbz	r0, 8001ec4 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8001ec0:	f000 ff36 	bl	8002d30 <vTaskMissedYield>
			--cTxLock;
 8001ec4:	3d01      	subs	r5, #1
 8001ec6:	b26d      	sxtb	r5, r5
 8001ec8:	e7dc      	b.n	8001e84 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001eca:	6923      	ldr	r3, [r4, #16]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d0e9      	beq.n	8001ea4 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001ed0:	4630      	mov	r0, r6
 8001ed2:	f000 fea3 	bl	8002c1c <xTaskRemoveFromEventList>
 8001ed6:	b108      	cbz	r0, 8001edc <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8001ed8:	f000 ff2a 	bl	8002d30 <vTaskMissedYield>
				--cRxLock;
 8001edc:	3d01      	subs	r5, #1
 8001ede:	b26d      	sxtb	r5, r5
 8001ee0:	e7de      	b.n	8001ea0 <prvUnlockQueue+0x2e>

08001ee2 <xQueueGenericReset>:
{
 8001ee2:	b538      	push	{r3, r4, r5, lr}
 8001ee4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8001ee6:	4604      	mov	r4, r0
 8001ee8:	b940      	cbnz	r0, 8001efc <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001eea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eee:	f383 8811 	msr	BASEPRI, r3
 8001ef2:	f3bf 8f6f 	isb	sy
 8001ef6:	f3bf 8f4f 	dsb	sy
 8001efa:	e7fe      	b.n	8001efa <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8001efc:	f001 fa22 	bl	8003344 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001f00:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8001f04:	434b      	muls	r3, r1
 8001f06:	6822      	ldr	r2, [r4, #0]
 8001f08:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001f0a:	1a5b      	subs	r3, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001f0c:	6060      	str	r0, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f0e:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f10:	2000      	movs	r0, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001f12:	441a      	add	r2, r3
		pxQueue->cRxLock = queueUNLOCKED;
 8001f14:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f16:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001f18:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001f1a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001f1e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8001f22:	b9a5      	cbnz	r5, 8001f4e <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f24:	6923      	ldr	r3, [r4, #16]
 8001f26:	b173      	cbz	r3, 8001f46 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f28:	f104 0010 	add.w	r0, r4, #16
 8001f2c:	f000 fe76 	bl	8002c1c <xTaskRemoveFromEventList>
 8001f30:	b148      	cbz	r0, 8001f46 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8001f32:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f3a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001f3e:	f3bf 8f4f 	dsb	sy
 8001f42:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8001f46:	f001 fa1d 	bl	8003384 <vPortExitCritical>
}
 8001f4a:	2001      	movs	r0, #1
 8001f4c:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f4e:	f104 0010 	add.w	r0, r4, #16
 8001f52:	f7ff fefc 	bl	8001d4e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f56:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8001f5a:	f7ff fef8 	bl	8001d4e <vListInitialise>
 8001f5e:	e7f2      	b.n	8001f46 <xQueueGenericReset+0x64>

08001f60 <xQueueGenericCreateStatic>:
	{
 8001f60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001f62:	460d      	mov	r5, r1
 8001f64:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f66:	b940      	cbnz	r0, 8001f7a <xQueueGenericCreateStatic+0x1a>
 8001f68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f6c:	f383 8811 	msr	BASEPRI, r3
 8001f70:	f3bf 8f6f 	isb	sy
 8001f74:	f3bf 8f4f 	dsb	sy
 8001f78:	e7fe      	b.n	8001f78 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8001f7a:	b943      	cbnz	r3, 8001f8e <xQueueGenericCreateStatic+0x2e>
 8001f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f80:	f383 8811 	msr	BASEPRI, r3
 8001f84:	f3bf 8f6f 	isb	sy
 8001f88:	f3bf 8f4f 	dsb	sy
 8001f8c:	e7fe      	b.n	8001f8c <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001f8e:	b14a      	cbz	r2, 8001fa4 <xQueueGenericCreateStatic+0x44>
 8001f90:	b991      	cbnz	r1, 8001fb8 <xQueueGenericCreateStatic+0x58>
 8001f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f96:	f383 8811 	msr	BASEPRI, r3
 8001f9a:	f3bf 8f6f 	isb	sy
 8001f9e:	f3bf 8f4f 	dsb	sy
 8001fa2:	e7fe      	b.n	8001fa2 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001fa4:	b141      	cbz	r1, 8001fb8 <xQueueGenericCreateStatic+0x58>
 8001fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001faa:	f383 8811 	msr	BASEPRI, r3
 8001fae:	f3bf 8f6f 	isb	sy
 8001fb2:	f3bf 8f4f 	dsb	sy
 8001fb6:	e7fe      	b.n	8001fb6 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001fb8:	2348      	movs	r3, #72	@ 0x48
 8001fba:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001fbc:	9b01      	ldr	r3, [sp, #4]
 8001fbe:	2b48      	cmp	r3, #72	@ 0x48
 8001fc0:	d008      	beq.n	8001fd4 <xQueueGenericCreateStatic+0x74>
 8001fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001fc6:	f383 8811 	msr	BASEPRI, r3
 8001fca:	f3bf 8f6f 	isb	sy
 8001fce:	f3bf 8f4f 	dsb	sy
 8001fd2:	e7fe      	b.n	8001fd2 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001fd4:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001fd6:	2d00      	cmp	r5, #0
 8001fd8:	bf08      	it	eq
 8001fda:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8001fdc:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001fe0:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001fe4:	4620      	mov	r0, r4
 8001fe6:	6022      	str	r2, [r4, #0]
 8001fe8:	f7ff ff7b 	bl	8001ee2 <xQueueGenericReset>
	}
 8001fec:	4620      	mov	r0, r4
 8001fee:	b003      	add	sp, #12
 8001ff0:	bd30      	pop	{r4, r5, pc}

08001ff2 <xQueueGenericCreate>:
	{
 8001ff2:	b570      	push	{r4, r5, r6, lr}
 8001ff4:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001ff6:	4606      	mov	r6, r0
 8001ff8:	b940      	cbnz	r0, 800200c <xQueueGenericCreate+0x1a>
 8001ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ffe:	f383 8811 	msr	BASEPRI, r3
 8002002:	f3bf 8f6f 	isb	sy
 8002006:	f3bf 8f4f 	dsb	sy
 800200a:	e7fe      	b.n	800200a <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800200c:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800200e:	3048      	adds	r0, #72	@ 0x48
 8002010:	f001 fac4 	bl	800359c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8002014:	4604      	mov	r4, r0
 8002016:	b160      	cbz	r0, 8002032 <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002018:	2300      	movs	r3, #0
 800201a:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800201e:	b155      	cbz	r5, 8002036 <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002020:	f100 0348 	add.w	r3, r0, #72	@ 0x48
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002024:	2101      	movs	r1, #1
 8002026:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8002028:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 800202c:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800202e:	f7ff ff58 	bl	8001ee2 <xQueueGenericReset>
	}
 8002032:	4620      	mov	r0, r4
 8002034:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002036:	4603      	mov	r3, r0
 8002038:	e7f4      	b.n	8002024 <xQueueGenericCreate+0x32>

0800203a <xQueueGenericSend>:
{
 800203a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800203e:	460f      	mov	r7, r1
 8002040:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8002042:	4604      	mov	r4, r0
{
 8002044:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 8002046:	b940      	cbnz	r0, 800205a <xQueueGenericSend+0x20>
 8002048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800204c:	f383 8811 	msr	BASEPRI, r3
 8002050:	f3bf 8f6f 	isb	sy
 8002054:	f3bf 8f4f 	dsb	sy
 8002058:	e7fe      	b.n	8002058 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800205a:	b951      	cbnz	r1, 8002072 <xQueueGenericSend+0x38>
 800205c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800205e:	b143      	cbz	r3, 8002072 <xQueueGenericSend+0x38>
 8002060:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	e7fe      	b.n	8002070 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002072:	2e02      	cmp	r6, #2
 8002074:	d10b      	bne.n	800208e <xQueueGenericSend+0x54>
 8002076:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002078:	2b01      	cmp	r3, #1
 800207a:	d008      	beq.n	800208e <xQueueGenericSend+0x54>
 800207c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002080:	f383 8811 	msr	BASEPRI, r3
 8002084:	f3bf 8f6f 	isb	sy
 8002088:	f3bf 8f4f 	dsb	sy
 800208c:	e7fe      	b.n	800208c <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800208e:	f000 fe55 	bl	8002d3c <xTaskGetSchedulerState>
 8002092:	4605      	mov	r5, r0
 8002094:	b330      	cbz	r0, 80020e4 <xQueueGenericSend+0xaa>
 8002096:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8002098:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800209c:	f001 f952 	bl	8003344 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020a0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80020a2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d301      	bcc.n	80020ac <xQueueGenericSend+0x72>
 80020a8:	2e02      	cmp	r6, #2
 80020aa:	d127      	bne.n	80020fc <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020ac:	4632      	mov	r2, r6
 80020ae:	4639      	mov	r1, r7
 80020b0:	4620      	mov	r0, r4
 80020b2:	f7ff fe97 	bl	8001de4 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80020b8:	b11b      	cbz	r3, 80020c2 <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020ba:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80020be:	f000 fdad 	bl	8002c1c <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80020c2:	b148      	cbz	r0, 80020d8 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 80020c4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80020c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80020d0:	f3bf 8f4f 	dsb	sy
 80020d4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80020d8:	f001 f954 	bl	8003384 <vPortExitCritical>
				return pdPASS;
 80020dc:	2001      	movs	r0, #1
}
 80020de:	b004      	add	sp, #16
 80020e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80020e4:	9b01      	ldr	r3, [sp, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0d6      	beq.n	8002098 <xQueueGenericSend+0x5e>
 80020ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020ee:	f383 8811 	msr	BASEPRI, r3
 80020f2:	f3bf 8f6f 	isb	sy
 80020f6:	f3bf 8f4f 	dsb	sy
 80020fa:	e7fe      	b.n	80020fa <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 80020fc:	9b01      	ldr	r3, [sp, #4]
 80020fe:	b91b      	cbnz	r3, 8002108 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8002100:	f001 f940 	bl	8003384 <vPortExitCritical>
					return errQUEUE_FULL;
 8002104:	2000      	movs	r0, #0
 8002106:	e7ea      	b.n	80020de <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8002108:	b915      	cbnz	r5, 8002110 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800210a:	a802      	add	r0, sp, #8
 800210c:	f000 fdc8 	bl	8002ca0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002110:	f001 f938 	bl	8003384 <vPortExitCritical>
		vTaskSuspendAll();
 8002114:	f000 fbcc 	bl	80028b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002118:	f001 f914 	bl	8003344 <vPortEnterCritical>
 800211c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8002120:	2bff      	cmp	r3, #255	@ 0xff
 8002122:	bf08      	it	eq
 8002124:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8002128:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800212c:	2bff      	cmp	r3, #255	@ 0xff
 800212e:	bf08      	it	eq
 8002130:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 8002134:	f001 f926 	bl	8003384 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002138:	a901      	add	r1, sp, #4
 800213a:	a802      	add	r0, sp, #8
 800213c:	f000 fdbc 	bl	8002cb8 <xTaskCheckForTimeOut>
 8002140:	bb38      	cbnz	r0, 8002192 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002142:	f001 f8ff 	bl	8003344 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002146:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002148:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800214a:	429a      	cmp	r2, r3
 800214c:	d10e      	bne.n	800216c <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800214e:	f001 f919 	bl	8003384 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002152:	9901      	ldr	r1, [sp, #4]
 8002154:	f104 0010 	add.w	r0, r4, #16
 8002158:	f000 fd26 	bl	8002ba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800215c:	4620      	mov	r0, r4
 800215e:	f7ff fe88 	bl	8001e72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002162:	f000 fc4d 	bl	8002a00 <xTaskResumeAll>
 8002166:	b148      	cbz	r0, 800217c <xQueueGenericSend+0x142>
 8002168:	2501      	movs	r5, #1
 800216a:	e797      	b.n	800209c <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800216c:	f001 f90a 	bl	8003384 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 8002170:	4620      	mov	r0, r4
 8002172:	f7ff fe7e 	bl	8001e72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002176:	f000 fc43 	bl	8002a00 <xTaskResumeAll>
 800217a:	e7f5      	b.n	8002168 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800217c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002180:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002184:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	f3bf 8f6f 	isb	sy
 8002190:	e7ea      	b.n	8002168 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 8002192:	4620      	mov	r0, r4
 8002194:	f7ff fe6d 	bl	8001e72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002198:	f000 fc32 	bl	8002a00 <xTaskResumeAll>
			return errQUEUE_FULL;
 800219c:	e7b2      	b.n	8002104 <xQueueGenericSend+0xca>

0800219e <xQueueGenericSendFromISR>:
{
 800219e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021a2:	4689      	mov	r9, r1
 80021a4:	4617      	mov	r7, r2
 80021a6:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80021a8:	4604      	mov	r4, r0
 80021aa:	b940      	cbnz	r0, 80021be <xQueueGenericSendFromISR+0x20>
 80021ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021b0:	f383 8811 	msr	BASEPRI, r3
 80021b4:	f3bf 8f6f 	isb	sy
 80021b8:	f3bf 8f4f 	dsb	sy
 80021bc:	e7fe      	b.n	80021bc <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80021be:	b951      	cbnz	r1, 80021d6 <xQueueGenericSendFromISR+0x38>
 80021c0:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80021c2:	b143      	cbz	r3, 80021d6 <xQueueGenericSendFromISR+0x38>
 80021c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021c8:	f383 8811 	msr	BASEPRI, r3
 80021cc:	f3bf 8f6f 	isb	sy
 80021d0:	f3bf 8f4f 	dsb	sy
 80021d4:	e7fe      	b.n	80021d4 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80021d6:	2e02      	cmp	r6, #2
 80021d8:	d10b      	bne.n	80021f2 <xQueueGenericSendFromISR+0x54>
 80021da:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d008      	beq.n	80021f2 <xQueueGenericSendFromISR+0x54>
 80021e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021e4:	f383 8811 	msr	BASEPRI, r3
 80021e8:	f3bf 8f6f 	isb	sy
 80021ec:	f3bf 8f4f 	dsb	sy
 80021f0:	e7fe      	b.n	80021f0 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80021f2:	f001 f97f 	bl	80034f4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80021f6:	f3ef 8811 	mrs	r8, BASEPRI
 80021fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021fe:	f383 8811 	msr	BASEPRI, r3
 8002202:	f3bf 8f6f 	isb	sy
 8002206:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800220a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800220c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800220e:	429a      	cmp	r2, r3
 8002210:	d301      	bcc.n	8002216 <xQueueGenericSendFromISR+0x78>
 8002212:	2e02      	cmp	r6, #2
 8002214:	d11d      	bne.n	8002252 <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 8002216:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800221a:	4632      	mov	r2, r6
 800221c:	4649      	mov	r1, r9
 800221e:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 8002220:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002222:	f7ff fddf 	bl	8001de4 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8002226:	1c6b      	adds	r3, r5, #1
 8002228:	d10e      	bne.n	8002248 <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800222a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800222c:	b13b      	cbz	r3, 800223e <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800222e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002232:	f000 fcf3 	bl	8002c1c <xTaskRemoveFromEventList>
 8002236:	b110      	cbz	r0, 800223e <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 8002238:	b10f      	cbz	r7, 800223e <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800223a:	2301      	movs	r3, #1
 800223c:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800223e:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002240:	f388 8811 	msr	BASEPRI, r8
}
 8002244:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002248:	3501      	adds	r5, #1
 800224a:	b26d      	sxtb	r5, r5
 800224c:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 8002250:	e7f5      	b.n	800223e <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 8002252:	2000      	movs	r0, #0
 8002254:	e7f4      	b.n	8002240 <xQueueGenericSendFromISR+0xa2>

08002256 <xQueueReceive>:
{
 8002256:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800225a:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800225c:	4604      	mov	r4, r0
{
 800225e:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 8002260:	b940      	cbnz	r0, 8002274 <xQueueReceive+0x1e>
	__asm volatile
 8002262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002266:	f383 8811 	msr	BASEPRI, r3
 800226a:	f3bf 8f6f 	isb	sy
 800226e:	f3bf 8f4f 	dsb	sy
 8002272:	e7fe      	b.n	8002272 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002274:	b951      	cbnz	r1, 800228c <xQueueReceive+0x36>
 8002276:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002278:	b143      	cbz	r3, 800228c <xQueueReceive+0x36>
 800227a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800227e:	f383 8811 	msr	BASEPRI, r3
 8002282:	f3bf 8f6f 	isb	sy
 8002286:	f3bf 8f4f 	dsb	sy
 800228a:	e7fe      	b.n	800228a <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800228c:	f000 fd56 	bl	8002d3c <xTaskGetSchedulerState>
 8002290:	4605      	mov	r5, r0
 8002292:	b318      	cbz	r0, 80022dc <xQueueReceive+0x86>
 8002294:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8002296:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800229a:	f001 f853 	bl	8003344 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800229e:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022a0:	b347      	cbz	r7, 80022f4 <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80022a2:	4631      	mov	r1, r6
 80022a4:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80022a6:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80022a8:	f7ff fdcf 	bl	8001e4a <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80022ac:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022ae:	6923      	ldr	r3, [r4, #16]
 80022b0:	b173      	cbz	r3, 80022d0 <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022b2:	f104 0010 	add.w	r0, r4, #16
 80022b6:	f000 fcb1 	bl	8002c1c <xTaskRemoveFromEventList>
 80022ba:	b148      	cbz	r0, 80022d0 <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 80022bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80022c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80022c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80022c8:	f3bf 8f4f 	dsb	sy
 80022cc:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80022d0:	f001 f858 	bl	8003384 <vPortExitCritical>
				return pdPASS;
 80022d4:	2001      	movs	r0, #1
}
 80022d6:	b004      	add	sp, #16
 80022d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80022dc:	9b01      	ldr	r3, [sp, #4]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0d9      	beq.n	8002296 <xQueueReceive+0x40>
 80022e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022e6:	f383 8811 	msr	BASEPRI, r3
 80022ea:	f3bf 8f6f 	isb	sy
 80022ee:	f3bf 8f4f 	dsb	sy
 80022f2:	e7fe      	b.n	80022f2 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 80022f4:	9b01      	ldr	r3, [sp, #4]
 80022f6:	b91b      	cbnz	r3, 8002300 <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 80022f8:	f001 f844 	bl	8003384 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80022fc:	2000      	movs	r0, #0
 80022fe:	e7ea      	b.n	80022d6 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8002300:	b915      	cbnz	r5, 8002308 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002302:	a802      	add	r0, sp, #8
 8002304:	f000 fccc 	bl	8002ca0 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002308:	f001 f83c 	bl	8003384 <vPortExitCritical>
		vTaskSuspendAll();
 800230c:	f000 fad0 	bl	80028b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002310:	f001 f818 	bl	8003344 <vPortEnterCritical>
 8002314:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8002318:	2bff      	cmp	r3, #255	@ 0xff
 800231a:	bf08      	it	eq
 800231c:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 8002320:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8002324:	2bff      	cmp	r3, #255	@ 0xff
 8002326:	bf08      	it	eq
 8002328:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 800232c:	f001 f82a 	bl	8003384 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002330:	a901      	add	r1, sp, #4
 8002332:	a802      	add	r0, sp, #8
 8002334:	f000 fcc0 	bl	8002cb8 <xTaskCheckForTimeOut>
 8002338:	bb00      	cbnz	r0, 800237c <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800233a:	4620      	mov	r0, r4
 800233c:	f7ff fd47 	bl	8001dce <prvIsQueueEmpty>
 8002340:	b1b0      	cbz	r0, 8002370 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002342:	9901      	ldr	r1, [sp, #4]
 8002344:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002348:	f000 fc2e 	bl	8002ba8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800234c:	4620      	mov	r0, r4
 800234e:	f7ff fd90 	bl	8001e72 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002352:	f000 fb55 	bl	8002a00 <xTaskResumeAll>
 8002356:	b948      	cbnz	r0, 800236c <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 8002358:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800235c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002360:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002364:	f3bf 8f4f 	dsb	sy
 8002368:	f3bf 8f6f 	isb	sy
 800236c:	2501      	movs	r5, #1
 800236e:	e794      	b.n	800229a <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 8002370:	4620      	mov	r0, r4
 8002372:	f7ff fd7e 	bl	8001e72 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002376:	f000 fb43 	bl	8002a00 <xTaskResumeAll>
 800237a:	e7f7      	b.n	800236c <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800237c:	4620      	mov	r0, r4
 800237e:	f7ff fd78 	bl	8001e72 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002382:	f000 fb3d 	bl	8002a00 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002386:	4620      	mov	r0, r4
 8002388:	f7ff fd21 	bl	8001dce <prvIsQueueEmpty>
 800238c:	2800      	cmp	r0, #0
 800238e:	d0ed      	beq.n	800236c <xQueueReceive+0x116>
 8002390:	e7b4      	b.n	80022fc <xQueueReceive+0xa6>

08002392 <xQueueReceiveFromISR>:
{
 8002392:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002396:	4689      	mov	r9, r1
 8002398:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800239a:	4604      	mov	r4, r0
 800239c:	b940      	cbnz	r0, 80023b0 <xQueueReceiveFromISR+0x1e>
 800239e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	e7fe      	b.n	80023ae <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023b0:	b951      	cbnz	r1, 80023c8 <xQueueReceiveFromISR+0x36>
 80023b2:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80023b4:	b143      	cbz	r3, 80023c8 <xQueueReceiveFromISR+0x36>
 80023b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ba:	f383 8811 	msr	BASEPRI, r3
 80023be:	f3bf 8f6f 	isb	sy
 80023c2:	f3bf 8f4f 	dsb	sy
 80023c6:	e7fe      	b.n	80023c6 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80023c8:	f001 f894 	bl	80034f4 <vPortValidateInterruptPriority>
	__asm volatile
 80023cc:	f3ef 8711 	mrs	r7, BASEPRI
 80023d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023d4:	f383 8811 	msr	BASEPRI, r3
 80023d8:	f3bf 8f6f 	isb	sy
 80023dc:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023e0:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80023e2:	b30d      	cbz	r5, 8002428 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 80023e4:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023e8:	4649      	mov	r1, r9
 80023ea:	4620      	mov	r0, r4
			const int8_t cRxLock = pxQueue->cRxLock;
 80023ec:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80023ee:	f7ff fd2c 	bl	8001e4a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80023f2:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 80023f4:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80023f6:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 80023f8:	d111      	bne.n	800241e <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023fa:	6923      	ldr	r3, [r4, #16]
 80023fc:	b153      	cbz	r3, 8002414 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023fe:	f104 0010 	add.w	r0, r4, #16
 8002402:	f000 fc0b 	bl	8002c1c <xTaskRemoveFromEventList>
 8002406:	b128      	cbz	r0, 8002414 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8002408:	f1b8 0f00 	cmp.w	r8, #0
 800240c:	d002      	beq.n	8002414 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800240e:	2301      	movs	r3, #1
 8002410:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 8002414:	2001      	movs	r0, #1
	__asm volatile
 8002416:	f387 8811 	msr	BASEPRI, r7
}
 800241a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800241e:	3601      	adds	r6, #1
 8002420:	b276      	sxtb	r6, r6
 8002422:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 8002426:	e7f5      	b.n	8002414 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 8002428:	4628      	mov	r0, r5
 800242a:	e7f4      	b.n	8002416 <xQueueReceiveFromISR+0x84>

0800242c <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800242c:	2300      	movs	r3, #0
	{
 800242e:	b530      	push	{r4, r5, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002430:	4a06      	ldr	r2, [pc, #24]	@ (800244c <vQueueAddToRegistry+0x20>)
 8002432:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8002436:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800243a:	b91d      	cbnz	r5, 8002444 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800243c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002440:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002442:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002444:	3301      	adds	r3, #1
 8002446:	2b08      	cmp	r3, #8
 8002448:	d1f3      	bne.n	8002432 <vQueueAddToRegistry+0x6>
 800244a:	e7fa      	b.n	8002442 <vQueueAddToRegistry+0x16>
 800244c:	20000ba4 	.word	0x20000ba4

08002450 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002450:	b570      	push	{r4, r5, r6, lr}
 8002452:	4604      	mov	r4, r0
 8002454:	460d      	mov	r5, r1
 8002456:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002458:	f000 ff74 	bl	8003344 <vPortEnterCritical>
 800245c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8002460:	2bff      	cmp	r3, #255	@ 0xff
 8002462:	bf04      	itt	eq
 8002464:	2300      	moveq	r3, #0
 8002466:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 800246a:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800246e:	2bff      	cmp	r3, #255	@ 0xff
 8002470:	bf04      	itt	eq
 8002472:	2300      	moveq	r3, #0
 8002474:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8002478:	f000 ff84 	bl	8003384 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800247c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800247e:	b92b      	cbnz	r3, 800248c <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002480:	4632      	mov	r2, r6
 8002482:	4629      	mov	r1, r5
 8002484:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002488:	f000 fba8 	bl	8002bdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800248c:	4620      	mov	r0, r4
	}
 800248e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8002492:	f7ff bcee 	b.w	8001e72 <prvUnlockQueue>
	...

08002498 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800249c:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800249e:	f000 ff51 	bl	8003344 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80024a2:	4b2f      	ldr	r3, [pc, #188]	@ (8002560 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 80024a4:	4e2f      	ldr	r6, [pc, #188]	@ (8002564 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	4f2f      	ldr	r7, [pc, #188]	@ (8002568 <prvAddNewTaskToReadyList+0xd0>)
 80024aa:	3201      	adds	r2, #1
 80024ac:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80024ae:	6835      	ldr	r5, [r6, #0]
 80024b0:	2d00      	cmp	r5, #0
 80024b2:	d14a      	bne.n	800254a <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80024b4:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d11f      	bne.n	80024fc <prvAddNewTaskToReadyList+0x64>
 80024bc:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80024be:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024c0:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80024c2:	f7ff fc44 	bl	8001d4e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80024c6:	2d07      	cmp	r5, #7
 80024c8:	f108 0814 	add.w	r8, r8, #20
 80024cc:	d1f7      	bne.n	80024be <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 80024ce:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 800256c <prvAddNewTaskToReadyList+0xd4>
	vListInitialise( &xDelayedTaskList2 );
 80024d2:	4d27      	ldr	r5, [pc, #156]	@ (8002570 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 80024d4:	4640      	mov	r0, r8
 80024d6:	f7ff fc3a 	bl	8001d4e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80024da:	4628      	mov	r0, r5
 80024dc:	f7ff fc37 	bl	8001d4e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80024e0:	4824      	ldr	r0, [pc, #144]	@ (8002574 <prvAddNewTaskToReadyList+0xdc>)
 80024e2:	f7ff fc34 	bl	8001d4e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80024e6:	4824      	ldr	r0, [pc, #144]	@ (8002578 <prvAddNewTaskToReadyList+0xe0>)
 80024e8:	f7ff fc31 	bl	8001d4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80024ec:	4823      	ldr	r0, [pc, #140]	@ (800257c <prvAddNewTaskToReadyList+0xe4>)
 80024ee:	f7ff fc2e 	bl	8001d4e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80024f2:	4b23      	ldr	r3, [pc, #140]	@ (8002580 <prvAddNewTaskToReadyList+0xe8>)
 80024f4:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80024f8:	4b22      	ldr	r3, [pc, #136]	@ (8002584 <prvAddNewTaskToReadyList+0xec>)
 80024fa:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 80024fc:	4a22      	ldr	r2, [pc, #136]	@ (8002588 <prvAddNewTaskToReadyList+0xf0>)
		prvAddTaskToReadyList( pxNewTCB );
 80024fe:	4923      	ldr	r1, [pc, #140]	@ (800258c <prvAddNewTaskToReadyList+0xf4>)
		uxTaskNumber++;
 8002500:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002502:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 8002504:	3301      	adds	r3, #1
 8002506:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002508:	2301      	movs	r3, #1
 800250a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800250c:	4093      	lsls	r3, r2
 800250e:	4303      	orrs	r3, r0
 8002510:	2014      	movs	r0, #20
 8002512:	600b      	str	r3, [r1, #0]
 8002514:	fb00 7002 	mla	r0, r0, r2, r7
 8002518:	1d21      	adds	r1, r4, #4
 800251a:	f7ff fc26 	bl	8001d6a <vListInsertEnd>
	taskEXIT_CRITICAL();
 800251e:	f000 ff31 	bl	8003384 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8002522:	4b1b      	ldr	r3, [pc, #108]	@ (8002590 <prvAddNewTaskToReadyList+0xf8>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	b173      	cbz	r3, 8002546 <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002528:	6833      	ldr	r3, [r6, #0]
 800252a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800252c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800252e:	429a      	cmp	r2, r3
 8002530:	d209      	bcs.n	8002546 <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 8002532:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800253a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800253e:	f3bf 8f4f 	dsb	sy
 8002542:	f3bf 8f6f 	isb	sy
}
 8002546:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800254a:	4b11      	ldr	r3, [pc, #68]	@ (8002590 <prvAddNewTaskToReadyList+0xf8>)
 800254c:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800254e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 8002550:	2a00      	cmp	r2, #0
 8002552:	d1d3      	bne.n	80024fc <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002554:	6832      	ldr	r2, [r6, #0]
 8002556:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002558:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 800255a:	bf98      	it	ls
 800255c:	6034      	strls	r4, [r6, #0]
 800255e:	e7cd      	b.n	80024fc <prvAddNewTaskToReadyList+0x64>
 8002560:	20000c08 	.word	0x20000c08
 8002564:	20000d08 	.word	0x20000d08
 8002568:	20000c7c 	.word	0x20000c7c
 800256c:	20000c68 	.word	0x20000c68
 8002570:	20000c54 	.word	0x20000c54
 8002574:	20000c38 	.word	0x20000c38
 8002578:	20000c24 	.word	0x20000c24
 800257c:	20000c0c 	.word	0x20000c0c
 8002580:	20000c50 	.word	0x20000c50
 8002584:	20000c4c 	.word	0x20000c4c
 8002588:	20000bec 	.word	0x20000bec
 800258c:	20000c00 	.word	0x20000c00
 8002590:	20000bfc 	.word	0x20000bfc

08002594 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8002596:	4b1a      	ldr	r3, [pc, #104]	@ (8002600 <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002598:	4d1a      	ldr	r5, [pc, #104]	@ (8002604 <prvAddCurrentTaskToDelayedList+0x70>)
{
 800259a:	4606      	mov	r6, r0
const TickType_t xConstTickCount = xTickCount;
 800259c:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800259e:	6828      	ldr	r0, [r5, #0]
{
 80025a0:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80025a2:	3004      	adds	r0, #4
 80025a4:	f7ff fc03 	bl	8001dae <uxListRemove>
 80025a8:	b940      	cbnz	r0, 80025bc <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80025aa:	682a      	ldr	r2, [r5, #0]
 80025ac:	4916      	ldr	r1, [pc, #88]	@ (8002608 <prvAddCurrentTaskToDelayedList+0x74>)
 80025ae:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 80025b0:	2201      	movs	r2, #1
 80025b2:	680b      	ldr	r3, [r1, #0]
 80025b4:	4082      	lsls	r2, r0
 80025b6:	ea23 0302 	bic.w	r3, r3, r2
 80025ba:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80025bc:	1c73      	adds	r3, r6, #1
 80025be:	d107      	bne.n	80025d0 <prvAddCurrentTaskToDelayedList+0x3c>
 80025c0:	b137      	cbz	r7, 80025d0 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025c2:	6829      	ldr	r1, [r5, #0]
 80025c4:	4811      	ldr	r0, [pc, #68]	@ (800260c <prvAddCurrentTaskToDelayedList+0x78>)
 80025c6:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80025c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025cc:	f7ff bbcd 	b.w	8001d6a <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80025d0:	682b      	ldr	r3, [r5, #0]
 80025d2:	19a4      	adds	r4, r4, r6
 80025d4:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80025d6:	d307      	bcc.n	80025e8 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025d8:	4b0d      	ldr	r3, [pc, #52]	@ (8002610 <prvAddCurrentTaskToDelayedList+0x7c>)
 80025da:	6818      	ldr	r0, [r3, #0]
 80025dc:	6829      	ldr	r1, [r5, #0]
}
 80025de:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025e2:	3104      	adds	r1, #4
 80025e4:	f7ff bbcc 	b.w	8001d80 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80025e8:	4b0a      	ldr	r3, [pc, #40]	@ (8002614 <prvAddCurrentTaskToDelayedList+0x80>)
 80025ea:	6818      	ldr	r0, [r3, #0]
 80025ec:	6829      	ldr	r1, [r5, #0]
 80025ee:	3104      	adds	r1, #4
 80025f0:	f7ff fbc6 	bl	8001d80 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80025f4:	4b08      	ldr	r3, [pc, #32]	@ (8002618 <prvAddCurrentTaskToDelayedList+0x84>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 80025fa:	bf88      	it	hi
 80025fc:	601c      	strhi	r4, [r3, #0]
}
 80025fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002600:	20000c04 	.word	0x20000c04
 8002604:	20000d08 	.word	0x20000d08
 8002608:	20000c00 	.word	0x20000c00
 800260c:	20000c0c 	.word	0x20000c0c
 8002610:	20000c4c 	.word	0x20000c4c
 8002614:	20000c50 	.word	0x20000c50
 8002618:	20000be8 	.word	0x20000be8

0800261c <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800261c:	4a06      	ldr	r2, [pc, #24]	@ (8002638 <prvResetNextTaskUnblockTime+0x1c>)
 800261e:	6813      	ldr	r3, [r2, #0]
 8002620:	6819      	ldr	r1, [r3, #0]
 8002622:	4b06      	ldr	r3, [pc, #24]	@ (800263c <prvResetNextTaskUnblockTime+0x20>)
 8002624:	b919      	cbnz	r1, 800262e <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 8002626:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800262a:	601a      	str	r2, [r3, #0]
}
 800262c:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800262e:	6812      	ldr	r2, [r2, #0]
 8002630:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8002632:	68d2      	ldr	r2, [r2, #12]
 8002634:	6852      	ldr	r2, [r2, #4]
 8002636:	e7f8      	b.n	800262a <prvResetNextTaskUnblockTime+0xe>
 8002638:	20000c50 	.word	0x20000c50
 800263c:	20000be8 	.word	0x20000be8

08002640 <prvDeleteTCB>:
	{
 8002640:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002642:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
	{
 8002646:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002648:	b93b      	cbnz	r3, 800265a <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 800264a:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 800264c:	f001 f838 	bl	80036c0 <vPortFree>
				vPortFree( pxTCB );
 8002650:	4620      	mov	r0, r4
	}
 8002652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 8002656:	f001 b833 	b.w	80036c0 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800265a:	2b01      	cmp	r3, #1
 800265c:	d0f9      	beq.n	8002652 <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800265e:	2b02      	cmp	r3, #2
 8002660:	d008      	beq.n	8002674 <prvDeleteTCB+0x34>
	__asm volatile
 8002662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002666:	f383 8811 	msr	BASEPRI, r3
 800266a:	f3bf 8f6f 	isb	sy
 800266e:	f3bf 8f4f 	dsb	sy
 8002672:	e7fe      	b.n	8002672 <prvDeleteTCB+0x32>
	}
 8002674:	bd10      	pop	{r4, pc}
	...

08002678 <prvIdleTask>:
{
 8002678:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800267a:	4c13      	ldr	r4, [pc, #76]	@ (80026c8 <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800267c:	4f13      	ldr	r7, [pc, #76]	@ (80026cc <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 800267e:	4d14      	ldr	r5, [pc, #80]	@ (80026d0 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002680:	6823      	ldr	r3, [r4, #0]
 8002682:	b973      	cbnz	r3, 80026a2 <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002684:	4b13      	ldr	r3, [pc, #76]	@ (80026d4 <prvIdleTask+0x5c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d9f8      	bls.n	800267e <prvIdleTask+0x6>
				taskYIELD();
 800268c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002690:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002694:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002698:	f3bf 8f4f 	dsb	sy
 800269c:	f3bf 8f6f 	isb	sy
 80026a0:	e7ed      	b.n	800267e <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 80026a2:	f000 fe4f 	bl	8003344 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80026aa:	1d30      	adds	r0, r6, #4
 80026ac:	f7ff fb7f 	bl	8001dae <uxListRemove>
				--uxCurrentNumberOfTasks;
 80026b0:	682b      	ldr	r3, [r5, #0]
 80026b2:	3b01      	subs	r3, #1
 80026b4:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 80026b6:	6823      	ldr	r3, [r4, #0]
 80026b8:	3b01      	subs	r3, #1
 80026ba:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 80026bc:	f000 fe62 	bl	8003384 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 80026c0:	4630      	mov	r0, r6
 80026c2:	f7ff ffbd 	bl	8002640 <prvDeleteTCB>
 80026c6:	e7db      	b.n	8002680 <prvIdleTask+0x8>
 80026c8:	20000c20 	.word	0x20000c20
 80026cc:	20000c24 	.word	0x20000c24
 80026d0:	20000c08 	.word	0x20000c08
 80026d4:	20000c7c 	.word	0x20000c7c

080026d8 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80026d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026dc:	4607      	mov	r7, r0
 80026de:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	@ 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80026e2:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 80026e6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80026e8:	3a01      	subs	r2, #1
 80026ea:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 80026ee:	4699      	mov	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80026f0:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80026f4:	1e4b      	subs	r3, r1, #1
 80026f6:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 80026fa:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80026fc:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8002700:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 8002704:	b108      	cbz	r0, 800270a <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002706:	428b      	cmp	r3, r1
 8002708:	d1f8      	bne.n	80026fc <prvInitialiseNewTask.constprop.0+0x24>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800270a:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800270c:	f04f 0a00 	mov.w	sl, #0
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002710:	2d06      	cmp	r5, #6
 8002712:	bf28      	it	cs
 8002714:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002716:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 8002718:	e9c4 5a11 	strd	r5, sl, [r4, #68]	@ 0x44
	pxNewTCB->uxPriority = uxPriority;
 800271c:	62e5      	str	r5, [r4, #44]	@ 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800271e:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002722:	f7ff fb1f 	bl	8001d64 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002726:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800272a:	f104 0018 	add.w	r0, r4, #24
 800272e:	f7ff fb19 	bl	8001d64 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8002732:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002736:	464a      	mov	r2, r9
 8002738:	4639      	mov	r1, r7
 800273a:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800273c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800273e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002740:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002742:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002746:	f000 fdd3 	bl	80032f0 <pxPortInitialiseStack>
 800274a:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 800274c:	f1b8 0f00 	cmp.w	r8, #0
 8002750:	d001      	beq.n	8002756 <prvInitialiseNewTask.constprop.0+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002752:	f8c8 4000 	str.w	r4, [r8]
}
 8002756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800275a <xTaskCreateStatic>:
	{
 800275a:	b570      	push	{r4, r5, r6, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 8002762:	b945      	cbnz	r5, 8002776 <xTaskCreateStatic+0x1c>
 8002764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002768:	f383 8811 	msr	BASEPRI, r3
 800276c:	f3bf 8f6f 	isb	sy
 8002770:	f3bf 8f4f 	dsb	sy
 8002774:	e7fe      	b.n	8002774 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8002776:	b944      	cbnz	r4, 800278a <xTaskCreateStatic+0x30>
 8002778:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800277c:	f383 8811 	msr	BASEPRI, r3
 8002780:	f3bf 8f6f 	isb	sy
 8002784:	f3bf 8f4f 	dsb	sy
 8002788:	e7fe      	b.n	8002788 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800278a:	2654      	movs	r6, #84	@ 0x54
 800278c:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800278e:	9e05      	ldr	r6, [sp, #20]
 8002790:	2e54      	cmp	r6, #84	@ 0x54
 8002792:	d008      	beq.n	80027a6 <xTaskCreateStatic+0x4c>
 8002794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002798:	f383 8811 	msr	BASEPRI, r3
 800279c:	f3bf 8f6f 	isb	sy
 80027a0:	f3bf 8f4f 	dsb	sy
 80027a4:	e7fe      	b.n	80027a4 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80027a6:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80027a8:	2502      	movs	r5, #2
 80027aa:	f884 5051 	strb.w	r5, [r4, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80027ae:	ad04      	add	r5, sp, #16
 80027b0:	9501      	str	r5, [sp, #4]
 80027b2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80027b4:	9402      	str	r4, [sp, #8]
 80027b6:	9500      	str	r5, [sp, #0]
 80027b8:	f7ff ff8e 	bl	80026d8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027bc:	4620      	mov	r0, r4
 80027be:	f7ff fe6b 	bl	8002498 <prvAddNewTaskToReadyList>
	}
 80027c2:	9804      	ldr	r0, [sp, #16]
 80027c4:	b006      	add	sp, #24
 80027c6:	bd70      	pop	{r4, r5, r6, pc}

080027c8 <xTaskCreate>:
	{
 80027c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027cc:	4607      	mov	r7, r0
 80027ce:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027d0:	0090      	lsls	r0, r2, #2
	{
 80027d2:	4688      	mov	r8, r1
 80027d4:	4616      	mov	r6, r2
 80027d6:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027d8:	f000 fee0 	bl	800359c <pvPortMalloc>
			if( pxStack != NULL )
 80027dc:	4605      	mov	r5, r0
 80027de:	b920      	cbnz	r0, 80027ea <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80027e0:	f04f 30ff 	mov.w	r0, #4294967295
	}
 80027e4:	b005      	add	sp, #20
 80027e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80027ea:	2054      	movs	r0, #84	@ 0x54
 80027ec:	f000 fed6 	bl	800359c <pvPortMalloc>
				if( pxNewTCB != NULL )
 80027f0:	4604      	mov	r4, r0
 80027f2:	b198      	cbz	r0, 800281c <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80027f4:	2300      	movs	r3, #0
 80027f6:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027fa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 80027fc:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027fe:	9301      	str	r3, [sp, #4]
 8002800:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8002802:	4632      	mov	r2, r6
 8002804:	4641      	mov	r1, r8
 8002806:	9002      	str	r0, [sp, #8]
 8002808:	9300      	str	r3, [sp, #0]
 800280a:	4638      	mov	r0, r7
 800280c:	464b      	mov	r3, r9
 800280e:	f7ff ff63 	bl	80026d8 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002812:	4620      	mov	r0, r4
 8002814:	f7ff fe40 	bl	8002498 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002818:	2001      	movs	r0, #1
 800281a:	e7e3      	b.n	80027e4 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800281c:	4628      	mov	r0, r5
 800281e:	f000 ff4f 	bl	80036c0 <vPortFree>
		if( pxNewTCB != NULL )
 8002822:	e7dd      	b.n	80027e0 <xTaskCreate+0x18>

08002824 <vTaskStartScheduler>:
{
 8002824:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002826:	2400      	movs	r4, #0
{
 8002828:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800282a:	aa07      	add	r2, sp, #28
 800282c:	a906      	add	r1, sp, #24
 800282e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002830:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002834:	f7fd fc8c 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002838:	9b05      	ldr	r3, [sp, #20]
 800283a:	9a07      	ldr	r2, [sp, #28]
 800283c:	9302      	str	r3, [sp, #8]
 800283e:	9b06      	ldr	r3, [sp, #24]
 8002840:	4916      	ldr	r1, [pc, #88]	@ (800289c <vTaskStartScheduler+0x78>)
 8002842:	e9cd 4300 	strd	r4, r3, [sp]
 8002846:	4816      	ldr	r0, [pc, #88]	@ (80028a0 <vTaskStartScheduler+0x7c>)
 8002848:	4623      	mov	r3, r4
 800284a:	f7ff ff86 	bl	800275a <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800284e:	b318      	cbz	r0, 8002898 <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 8002850:	f000 fb26 	bl	8002ea0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8002854:	2801      	cmp	r0, #1
 8002856:	d114      	bne.n	8002882 <vTaskStartScheduler+0x5e>
 8002858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800285c:	f383 8811 	msr	BASEPRI, r3
 8002860:	f3bf 8f6f 	isb	sy
 8002864:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8002868:	f04f 32ff 	mov.w	r2, #4294967295
 800286c:	4b0d      	ldr	r3, [pc, #52]	@ (80028a4 <vTaskStartScheduler+0x80>)
 800286e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002870:	4b0d      	ldr	r3, [pc, #52]	@ (80028a8 <vTaskStartScheduler+0x84>)
 8002872:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8002874:	4b0d      	ldr	r3, [pc, #52]	@ (80028ac <vTaskStartScheduler+0x88>)
 8002876:	601c      	str	r4, [r3, #0]
}
 8002878:	b008      	add	sp, #32
 800287a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800287e:	f000 bde1 	b.w	8003444 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002882:	3001      	adds	r0, #1
 8002884:	d108      	bne.n	8002898 <vTaskStartScheduler+0x74>
 8002886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800288a:	f383 8811 	msr	BASEPRI, r3
 800288e:	f3bf 8f6f 	isb	sy
 8002892:	f3bf 8f4f 	dsb	sy
 8002896:	e7fe      	b.n	8002896 <vTaskStartScheduler+0x72>
}
 8002898:	b008      	add	sp, #32
 800289a:	bd10      	pop	{r4, pc}
 800289c:	0800599a 	.word	0x0800599a
 80028a0:	08002679 	.word	0x08002679
 80028a4:	20000be8 	.word	0x20000be8
 80028a8:	20000bfc 	.word	0x20000bfc
 80028ac:	20000c04 	.word	0x20000c04

080028b0 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80028b0:	4a02      	ldr	r2, [pc, #8]	@ (80028bc <vTaskSuspendAll+0xc>)
 80028b2:	6813      	ldr	r3, [r2, #0]
 80028b4:	3301      	adds	r3, #1
 80028b6:	6013      	str	r3, [r2, #0]
}
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	20000be4 	.word	0x20000be4

080028c0 <xTaskGetTickCount>:
		xTicks = xTickCount;
 80028c0:	4b01      	ldr	r3, [pc, #4]	@ (80028c8 <xTaskGetTickCount+0x8>)
 80028c2:	6818      	ldr	r0, [r3, #0]
}
 80028c4:	4770      	bx	lr
 80028c6:	bf00      	nop
 80028c8:	20000c04 	.word	0x20000c04

080028cc <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028cc:	4b41      	ldr	r3, [pc, #260]	@ (80029d4 <xTaskIncrementTick+0x108>)
{
 80028ce:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d175      	bne.n	80029c4 <xTaskIncrementTick+0xf8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80028d8:	4b3f      	ldr	r3, [pc, #252]	@ (80029d8 <xTaskIncrementTick+0x10c>)
 80028da:	681c      	ldr	r4, [r3, #0]
 80028dc:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80028de:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80028e0:	b9bc      	cbnz	r4, 8002912 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80028e2:	4b3e      	ldr	r3, [pc, #248]	@ (80029dc <xTaskIncrementTick+0x110>)
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	b142      	cbz	r2, 80028fc <xTaskIncrementTick+0x30>
 80028ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ee:	f383 8811 	msr	BASEPRI, r3
 80028f2:	f3bf 8f6f 	isb	sy
 80028f6:	f3bf 8f4f 	dsb	sy
 80028fa:	e7fe      	b.n	80028fa <xTaskIncrementTick+0x2e>
 80028fc:	4a38      	ldr	r2, [pc, #224]	@ (80029e0 <xTaskIncrementTick+0x114>)
 80028fe:	6819      	ldr	r1, [r3, #0]
 8002900:	6810      	ldr	r0, [r2, #0]
 8002902:	6018      	str	r0, [r3, #0]
 8002904:	6011      	str	r1, [r2, #0]
 8002906:	4a37      	ldr	r2, [pc, #220]	@ (80029e4 <xTaskIncrementTick+0x118>)
 8002908:	6813      	ldr	r3, [r2, #0]
 800290a:	3301      	adds	r3, #1
 800290c:	6013      	str	r3, [r2, #0]
 800290e:	f7ff fe85 	bl	800261c <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002912:	4d35      	ldr	r5, [pc, #212]	@ (80029e8 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 8002914:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002918:	682b      	ldr	r3, [r5, #0]
 800291a:	4e34      	ldr	r6, [pc, #208]	@ (80029ec <xTaskIncrementTick+0x120>)
 800291c:	42a3      	cmp	r3, r4
 800291e:	4f34      	ldr	r7, [pc, #208]	@ (80029f0 <xTaskIncrementTick+0x124>)
 8002920:	d911      	bls.n	8002946 <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002922:	2114      	movs	r1, #20
 8002924:	683a      	ldr	r2, [r7, #0]
 8002926:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002928:	434a      	muls	r2, r1
 800292a:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800292c:	2a02      	cmp	r2, #2
 800292e:	bf28      	it	cs
 8002930:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8002934:	4a2f      	ldr	r2, [pc, #188]	@ (80029f4 <xTaskIncrementTick+0x128>)
 8002936:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8002938:	2a00      	cmp	r2, #0
}
 800293a:	bf0c      	ite	eq
 800293c:	4658      	moveq	r0, fp
 800293e:	2001      	movne	r0, #1
 8002940:	b003      	add	sp, #12
 8002942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002946:	f8df a094 	ldr.w	sl, [pc, #148]	@ 80029dc <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 800294a:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 80029f8 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800294e:	f8da 2000 	ldr.w	r2, [sl]
 8002952:	6812      	ldr	r2, [r2, #0]
 8002954:	b91a      	cbnz	r2, 800295e <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002956:	f04f 32ff 	mov.w	r2, #4294967295
 800295a:	602a      	str	r2, [r5, #0]
					break;
 800295c:	e7e1      	b.n	8002922 <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800295e:	f8da 2000 	ldr.w	r2, [sl]
 8002962:	68d2      	ldr	r2, [r2, #12]
 8002964:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002968:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800296c:	428c      	cmp	r4, r1
 800296e:	d201      	bcs.n	8002974 <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 8002970:	6029      	str	r1, [r5, #0]
						break;
 8002972:	e7d6      	b.n	8002922 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002974:	f108 0304 	add.w	r3, r8, #4
 8002978:	4618      	mov	r0, r3
 800297a:	9301      	str	r3, [sp, #4]
 800297c:	f7ff fa17 	bl	8001dae <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002980:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8002984:	b119      	cbz	r1, 800298e <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002986:	f108 0018 	add.w	r0, r8, #24
 800298a:	f7ff fa10 	bl	8001dae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800298e:	2201      	movs	r2, #1
 8002990:	f04f 0c14 	mov.w	ip, #20
 8002994:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8002998:	f8d9 3000 	ldr.w	r3, [r9]
 800299c:	fa02 f100 	lsl.w	r1, r2, r0
 80029a0:	4319      	orrs	r1, r3
 80029a2:	fb0c 6000 	mla	r0, ip, r0, r6
 80029a6:	f8c9 1000 	str.w	r1, [r9]
 80029aa:	f108 0104 	add.w	r1, r8, #4
 80029ae:	f7ff f9dc 	bl	8001d6a <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80029b2:	6838      	ldr	r0, [r7, #0]
 80029b4:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 80029b8:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 80029ba:	4291      	cmp	r1, r2
 80029bc:	bf28      	it	cs
 80029be:	f04f 0b01 	movcs.w	fp, #1
 80029c2:	e7c4      	b.n	800294e <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 80029c4:	4a0d      	ldr	r2, [pc, #52]	@ (80029fc <xTaskIncrementTick+0x130>)
BaseType_t xSwitchRequired = pdFALSE;
 80029c6:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80029ca:	6813      	ldr	r3, [r2, #0]
 80029cc:	3301      	adds	r3, #1
 80029ce:	6013      	str	r3, [r2, #0]
 80029d0:	e7b0      	b.n	8002934 <xTaskIncrementTick+0x68>
 80029d2:	bf00      	nop
 80029d4:	20000be4 	.word	0x20000be4
 80029d8:	20000c04 	.word	0x20000c04
 80029dc:	20000c50 	.word	0x20000c50
 80029e0:	20000c4c 	.word	0x20000c4c
 80029e4:	20000bf0 	.word	0x20000bf0
 80029e8:	20000be8 	.word	0x20000be8
 80029ec:	20000c7c 	.word	0x20000c7c
 80029f0:	20000d08 	.word	0x20000d08
 80029f4:	20000bf4 	.word	0x20000bf4
 80029f8:	20000c00 	.word	0x20000c00
 80029fc:	20000bf8 	.word	0x20000bf8

08002a00 <xTaskResumeAll>:
{
 8002a00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002a04:	4c31      	ldr	r4, [pc, #196]	@ (8002acc <xTaskResumeAll+0xcc>)
 8002a06:	6823      	ldr	r3, [r4, #0]
 8002a08:	b943      	cbnz	r3, 8002a1c <xTaskResumeAll+0x1c>
 8002a0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a0e:	f383 8811 	msr	BASEPRI, r3
 8002a12:	f3bf 8f6f 	isb	sy
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	e7fe      	b.n	8002a1a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002a1c:	f000 fc92 	bl	8003344 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002a26:	6824      	ldr	r4, [r4, #0]
 8002a28:	b12c      	cbz	r4, 8002a36 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002a2a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002a2c:	f000 fcaa 	bl	8003384 <vPortExitCritical>
}
 8002a30:	4620      	mov	r0, r4
 8002a32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002a36:	4b26      	ldr	r3, [pc, #152]	@ (8002ad0 <xTaskResumeAll+0xd0>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f5      	beq.n	8002a2a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a3e:	4d25      	ldr	r5, [pc, #148]	@ (8002ad4 <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8002a40:	4e25      	ldr	r6, [pc, #148]	@ (8002ad8 <xTaskResumeAll+0xd8>)
 8002a42:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8002adc <xTaskResumeAll+0xdc>
 8002a46:	e01f      	b.n	8002a88 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002a48:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 8002a4a:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002a4c:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a4e:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a52:	f104 0018 	add.w	r0, r4, #24
 8002a56:	f7ff f9aa 	bl	8001dae <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002a5a:	4648      	mov	r0, r9
 8002a5c:	f7ff f9a7 	bl	8001dae <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a60:	2014      	movs	r0, #20
 8002a62:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002a64:	6831      	ldr	r1, [r6, #0]
 8002a66:	fa07 f302 	lsl.w	r3, r7, r2
 8002a6a:	430b      	orrs	r3, r1
 8002a6c:	fb00 8002 	mla	r0, r0, r2, r8
 8002a70:	4649      	mov	r1, r9
 8002a72:	6033      	str	r3, [r6, #0]
 8002a74:	f7ff f979 	bl	8001d6a <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a78:	4b19      	ldr	r3, [pc, #100]	@ (8002ae0 <xTaskResumeAll+0xe0>)
 8002a7a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d301      	bcc.n	8002a88 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8002a84:	4b17      	ldr	r3, [pc, #92]	@ (8002ae4 <xTaskResumeAll+0xe4>)
 8002a86:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002a88:	682b      	ldr	r3, [r5, #0]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d1dc      	bne.n	8002a48 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8002a8e:	b10c      	cbz	r4, 8002a94 <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8002a90:	f7ff fdc4 	bl	800261c <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002a94:	4d14      	ldr	r5, [pc, #80]	@ (8002ae8 <xTaskResumeAll+0xe8>)
 8002a96:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002a98:	b144      	cbz	r4, 8002aac <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8002a9a:	2701      	movs	r7, #1
 8002a9c:	4e11      	ldr	r6, [pc, #68]	@ (8002ae4 <xTaskResumeAll+0xe4>)
							if( xTaskIncrementTick() != pdFALSE )
 8002a9e:	f7ff ff15 	bl	80028cc <xTaskIncrementTick>
 8002aa2:	b100      	cbz	r0, 8002aa6 <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8002aa4:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002aa6:	3c01      	subs	r4, #1
 8002aa8:	d1f9      	bne.n	8002a9e <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8002aaa:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002aac:	4b0d      	ldr	r3, [pc, #52]	@ (8002ae4 <xTaskResumeAll+0xe4>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d0ba      	beq.n	8002a2a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002ab4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002ab8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002abc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002ac8:	2401      	movs	r4, #1
 8002aca:	e7af      	b.n	8002a2c <xTaskResumeAll+0x2c>
 8002acc:	20000be4 	.word	0x20000be4
 8002ad0:	20000c08 	.word	0x20000c08
 8002ad4:	20000c38 	.word	0x20000c38
 8002ad8:	20000c00 	.word	0x20000c00
 8002adc:	20000c7c 	.word	0x20000c7c
 8002ae0:	20000d08 	.word	0x20000d08
 8002ae4:	20000bf4 	.word	0x20000bf4
 8002ae8:	20000bf8 	.word	0x20000bf8

08002aec <vTaskDelay>:
	{
 8002aec:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002aee:	b950      	cbnz	r0, 8002b06 <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8002af0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002af4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002af8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002afc:	f3bf 8f4f 	dsb	sy
 8002b00:	f3bf 8f6f 	isb	sy
	}
 8002b04:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002b06:	4b0a      	ldr	r3, [pc, #40]	@ (8002b30 <vTaskDelay+0x44>)
 8002b08:	6819      	ldr	r1, [r3, #0]
 8002b0a:	b141      	cbz	r1, 8002b1e <vTaskDelay+0x32>
 8002b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	e7fe      	b.n	8002b1c <vTaskDelay+0x30>
			vTaskSuspendAll();
 8002b1e:	f7ff fec7 	bl	80028b0 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002b22:	f7ff fd37 	bl	8002594 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002b26:	f7ff ff6b 	bl	8002a00 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002b2a:	2800      	cmp	r0, #0
 8002b2c:	d0e0      	beq.n	8002af0 <vTaskDelay+0x4>
 8002b2e:	e7e9      	b.n	8002b04 <vTaskDelay+0x18>
 8002b30:	20000be4 	.word	0x20000be4

08002b34 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b34:	4b17      	ldr	r3, [pc, #92]	@ (8002b94 <vTaskSwitchContext+0x60>)
{
 8002b36:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	4b17      	ldr	r3, [pc, #92]	@ (8002b98 <vTaskSwitchContext+0x64>)
 8002b3c:	b112      	cbz	r2, 8002b44 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002b3e:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002b40:	601a      	str	r2, [r3, #0]
}
 8002b42:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002b44:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002b46:	4b15      	ldr	r3, [pc, #84]	@ (8002b9c <vTaskSwitchContext+0x68>)
 8002b48:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b4a:	fab2 f282 	clz	r2, r2
 8002b4e:	2314      	movs	r3, #20
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	f1c2 021f 	rsb	r2, r2, #31
 8002b56:	4353      	muls	r3, r2
 8002b58:	4911      	ldr	r1, [pc, #68]	@ (8002ba0 <vTaskSwitchContext+0x6c>)
 8002b5a:	58cc      	ldr	r4, [r1, r3]
 8002b5c:	18c8      	adds	r0, r1, r3
 8002b5e:	b944      	cbnz	r4, 8002b72 <vTaskSwitchContext+0x3e>
	__asm volatile
 8002b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b64:	f383 8811 	msr	BASEPRI, r3
 8002b68:	f3bf 8f6f 	isb	sy
 8002b6c:	f3bf 8f4f 	dsb	sy
 8002b70:	e7fe      	b.n	8002b70 <vTaskSwitchContext+0x3c>
 8002b72:	6844      	ldr	r4, [r0, #4]
 8002b74:	3308      	adds	r3, #8
 8002b76:	6864      	ldr	r4, [r4, #4]
 8002b78:	440b      	add	r3, r1
 8002b7a:	429c      	cmp	r4, r3
 8002b7c:	bf08      	it	eq
 8002b7e:	6863      	ldreq	r3, [r4, #4]
 8002b80:	6044      	str	r4, [r0, #4]
 8002b82:	bf08      	it	eq
 8002b84:	6043      	streq	r3, [r0, #4]
 8002b86:	2314      	movs	r3, #20
 8002b88:	fb03 1102 	mla	r1, r3, r2, r1
 8002b8c:	684b      	ldr	r3, [r1, #4]
 8002b8e:	68da      	ldr	r2, [r3, #12]
 8002b90:	4b04      	ldr	r3, [pc, #16]	@ (8002ba4 <vTaskSwitchContext+0x70>)
 8002b92:	e7d5      	b.n	8002b40 <vTaskSwitchContext+0xc>
 8002b94:	20000be4 	.word	0x20000be4
 8002b98:	20000bf4 	.word	0x20000bf4
 8002b9c:	20000c00 	.word	0x20000c00
 8002ba0:	20000c7c 	.word	0x20000c7c
 8002ba4:	20000d08 	.word	0x20000d08

08002ba8 <vTaskPlaceOnEventList>:
{
 8002ba8:	b510      	push	{r4, lr}
 8002baa:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8002bac:	b940      	cbnz	r0, 8002bc0 <vTaskPlaceOnEventList+0x18>
 8002bae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bb2:	f383 8811 	msr	BASEPRI, r3
 8002bb6:	f3bf 8f6f 	isb	sy
 8002bba:	f3bf 8f4f 	dsb	sy
 8002bbe:	e7fe      	b.n	8002bbe <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002bc0:	4b05      	ldr	r3, [pc, #20]	@ (8002bd8 <vTaskPlaceOnEventList+0x30>)
 8002bc2:	6819      	ldr	r1, [r3, #0]
 8002bc4:	3118      	adds	r1, #24
 8002bc6:	f7ff f8db 	bl	8001d80 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002bca:	4620      	mov	r0, r4
}
 8002bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002bd0:	2101      	movs	r1, #1
 8002bd2:	f7ff bcdf 	b.w	8002594 <prvAddCurrentTaskToDelayedList>
 8002bd6:	bf00      	nop
 8002bd8:	20000d08 	.word	0x20000d08

08002bdc <vTaskPlaceOnEventListRestricted>:
	{
 8002bdc:	b538      	push	{r3, r4, r5, lr}
 8002bde:	460d      	mov	r5, r1
 8002be0:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8002be2:	b940      	cbnz	r0, 8002bf6 <vTaskPlaceOnEventListRestricted+0x1a>
 8002be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002be8:	f383 8811 	msr	BASEPRI, r3
 8002bec:	f3bf 8f6f 	isb	sy
 8002bf0:	f3bf 8f4f 	dsb	sy
 8002bf4:	e7fe      	b.n	8002bf4 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002bf6:	4b08      	ldr	r3, [pc, #32]	@ (8002c18 <vTaskPlaceOnEventListRestricted+0x3c>)
 8002bf8:	6819      	ldr	r1, [r3, #0]
 8002bfa:	3118      	adds	r1, #24
 8002bfc:	f7ff f8b5 	bl	8001d6a <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8002c00:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002c02:	4621      	mov	r1, r4
 8002c04:	bf08      	it	eq
 8002c06:	4628      	moveq	r0, r5
	}
 8002c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002c0c:	bf18      	it	ne
 8002c0e:	f04f 30ff 	movne.w	r0, #4294967295
 8002c12:	f7ff bcbf 	b.w	8002594 <prvAddCurrentTaskToDelayedList>
 8002c16:	bf00      	nop
 8002c18:	20000d08 	.word	0x20000d08

08002c1c <xTaskRemoveFromEventList>:
{
 8002c1c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002c1e:	68c3      	ldr	r3, [r0, #12]
 8002c20:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002c22:	b944      	cbnz	r4, 8002c36 <xTaskRemoveFromEventList+0x1a>
 8002c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c28:	f383 8811 	msr	BASEPRI, r3
 8002c2c:	f3bf 8f6f 	isb	sy
 8002c30:	f3bf 8f4f 	dsb	sy
 8002c34:	e7fe      	b.n	8002c34 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002c36:	f104 0518 	add.w	r5, r4, #24
 8002c3a:	4628      	mov	r0, r5
 8002c3c:	f7ff f8b7 	bl	8001dae <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c40:	4b11      	ldr	r3, [pc, #68]	@ (8002c88 <xTaskRemoveFromEventList+0x6c>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	b9e3      	cbnz	r3, 8002c80 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002c46:	1d25      	adds	r5, r4, #4
 8002c48:	4628      	mov	r0, r5
 8002c4a:	f7ff f8b0 	bl	8001dae <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002c4e:	2301      	movs	r3, #1
 8002c50:	490e      	ldr	r1, [pc, #56]	@ (8002c8c <xTaskRemoveFromEventList+0x70>)
 8002c52:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002c54:	6808      	ldr	r0, [r1, #0]
 8002c56:	4093      	lsls	r3, r2
 8002c58:	4303      	orrs	r3, r0
 8002c5a:	2014      	movs	r0, #20
 8002c5c:	600b      	str	r3, [r1, #0]
 8002c5e:	4629      	mov	r1, r5
 8002c60:	4b0b      	ldr	r3, [pc, #44]	@ (8002c90 <xTaskRemoveFromEventList+0x74>)
 8002c62:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002c66:	f7ff f880 	bl	8001d6a <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c94 <xTaskRemoveFromEventList+0x78>)
 8002c6c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c72:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8002c74:	bf85      	ittet	hi
 8002c76:	2001      	movhi	r0, #1
 8002c78:	4b07      	ldrhi	r3, [pc, #28]	@ (8002c98 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8002c7a:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8002c7c:	6018      	strhi	r0, [r3, #0]
}
 8002c7e:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002c80:	4629      	mov	r1, r5
 8002c82:	4806      	ldr	r0, [pc, #24]	@ (8002c9c <xTaskRemoveFromEventList+0x80>)
 8002c84:	e7ef      	b.n	8002c66 <xTaskRemoveFromEventList+0x4a>
 8002c86:	bf00      	nop
 8002c88:	20000be4 	.word	0x20000be4
 8002c8c:	20000c00 	.word	0x20000c00
 8002c90:	20000c7c 	.word	0x20000c7c
 8002c94:	20000d08 	.word	0x20000d08
 8002c98:	20000bf4 	.word	0x20000bf4
 8002c9c:	20000c38 	.word	0x20000c38

08002ca0 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002ca0:	4b03      	ldr	r3, [pc, #12]	@ (8002cb0 <vTaskInternalSetTimeOutState+0x10>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002ca6:	4b03      	ldr	r3, [pc, #12]	@ (8002cb4 <vTaskInternalSetTimeOutState+0x14>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	6043      	str	r3, [r0, #4]
}
 8002cac:	4770      	bx	lr
 8002cae:	bf00      	nop
 8002cb0:	20000bf0 	.word	0x20000bf0
 8002cb4:	20000c04 	.word	0x20000c04

08002cb8 <xTaskCheckForTimeOut>:
{
 8002cb8:	b570      	push	{r4, r5, r6, lr}
 8002cba:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8002cbc:	4605      	mov	r5, r0
 8002cbe:	b940      	cbnz	r0, 8002cd2 <xTaskCheckForTimeOut+0x1a>
 8002cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cc4:	f383 8811 	msr	BASEPRI, r3
 8002cc8:	f3bf 8f6f 	isb	sy
 8002ccc:	f3bf 8f4f 	dsb	sy
 8002cd0:	e7fe      	b.n	8002cd0 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8002cd2:	b941      	cbnz	r1, 8002ce6 <xTaskCheckForTimeOut+0x2e>
 8002cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cd8:	f383 8811 	msr	BASEPRI, r3
 8002cdc:	f3bf 8f6f 	isb	sy
 8002ce0:	f3bf 8f4f 	dsb	sy
 8002ce4:	e7fe      	b.n	8002ce4 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8002ce6:	f000 fb2d 	bl	8003344 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8002cea:	4b0f      	ldr	r3, [pc, #60]	@ (8002d28 <xTaskCheckForTimeOut+0x70>)
 8002cec:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8002cee:	6823      	ldr	r3, [r4, #0]
 8002cf0:	1c5a      	adds	r2, r3, #1
 8002cf2:	d010      	beq.n	8002d16 <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002cf4:	480d      	ldr	r0, [pc, #52]	@ (8002d2c <xTaskCheckForTimeOut+0x74>)
 8002cf6:	682e      	ldr	r6, [r5, #0]
 8002cf8:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002cfa:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002cfc:	4286      	cmp	r6, r0
 8002cfe:	d001      	beq.n	8002d04 <xTaskCheckForTimeOut+0x4c>
 8002d00:	428a      	cmp	r2, r1
 8002d02:	d90f      	bls.n	8002d24 <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002d04:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002d06:	4283      	cmp	r3, r0
 8002d08:	d90a      	bls.n	8002d20 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8002d0a:	1a5b      	subs	r3, r3, r1
 8002d0c:	4413      	add	r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002d0e:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8002d10:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002d12:	f7ff ffc5 	bl	8002ca0 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8002d16:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002d18:	f000 fb34 	bl	8003384 <vPortExitCritical>
}
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8002d20:	2300      	movs	r3, #0
 8002d22:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8002d24:	2401      	movs	r4, #1
 8002d26:	e7f7      	b.n	8002d18 <xTaskCheckForTimeOut+0x60>
 8002d28:	20000c04 	.word	0x20000c04
 8002d2c:	20000bf0 	.word	0x20000bf0

08002d30 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002d30:	2201      	movs	r2, #1
 8002d32:	4b01      	ldr	r3, [pc, #4]	@ (8002d38 <vTaskMissedYield+0x8>)
 8002d34:	601a      	str	r2, [r3, #0]
}
 8002d36:	4770      	bx	lr
 8002d38:	20000bf4 	.word	0x20000bf4

08002d3c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002d3c:	4b05      	ldr	r3, [pc, #20]	@ (8002d54 <xTaskGetSchedulerState+0x18>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	b133      	cbz	r3, 8002d50 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d42:	4b05      	ldr	r3, [pc, #20]	@ (8002d58 <xTaskGetSchedulerState+0x1c>)
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	fab0 f080 	clz	r0, r0
 8002d4a:	0940      	lsrs	r0, r0, #5
 8002d4c:	0040      	lsls	r0, r0, #1
 8002d4e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002d50:	2001      	movs	r0, #1
	}
 8002d52:	4770      	bx	lr
 8002d54:	20000bfc 	.word	0x20000bfc
 8002d58:	20000be4 	.word	0x20000be4

08002d5c <xTaskPriorityDisinherit>:
	{
 8002d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8002d5e:	4604      	mov	r4, r0
 8002d60:	b908      	cbnz	r0, 8002d66 <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8002d62:	2000      	movs	r0, #0
	}
 8002d64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8002d66:	4b22      	ldr	r3, [pc, #136]	@ (8002df0 <xTaskPriorityDisinherit+0x94>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4283      	cmp	r3, r0
 8002d6c:	d008      	beq.n	8002d80 <xTaskPriorityDisinherit+0x24>
 8002d6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d72:	f383 8811 	msr	BASEPRI, r3
 8002d76:	f3bf 8f6f 	isb	sy
 8002d7a:	f3bf 8f4f 	dsb	sy
 8002d7e:	e7fe      	b.n	8002d7e <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8002d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d82:	b943      	cbnz	r3, 8002d96 <xTaskPriorityDisinherit+0x3a>
 8002d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d88:	f383 8811 	msr	BASEPRI, r3
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	f3bf 8f4f 	dsb	sy
 8002d94:	e7fe      	b.n	8002d94 <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d96:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8002d98:	6c42      	ldr	r2, [r0, #68]	@ 0x44
			( pxTCB->uxMutexesHeld )--;
 8002d9a:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002d9c:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8002d9e:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002da0:	d0df      	beq.n	8002d62 <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1dd      	bne.n	8002d62 <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002da6:	1d06      	adds	r6, r0, #4
 8002da8:	4630      	mov	r0, r6
 8002daa:	f7ff f800 	bl	8001dae <uxListRemove>
 8002dae:	4f11      	ldr	r7, [pc, #68]	@ (8002df4 <xTaskPriorityDisinherit+0x98>)
 8002db0:	4a11      	ldr	r2, [pc, #68]	@ (8002df8 <xTaskPriorityDisinherit+0x9c>)
 8002db2:	b950      	cbnz	r0, 8002dca <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002db4:	2314      	movs	r3, #20
 8002db6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002db8:	434b      	muls	r3, r1
 8002dba:	58fb      	ldr	r3, [r7, r3]
 8002dbc:	b92b      	cbnz	r3, 8002dca <xTaskPriorityDisinherit+0x6e>
 8002dbe:	2501      	movs	r5, #1
 8002dc0:	6813      	ldr	r3, [r2, #0]
 8002dc2:	408d      	lsls	r5, r1
 8002dc4:	ea23 0305 	bic.w	r3, r3, r5
 8002dc8:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002dca:	6c63      	ldr	r3, [r4, #68]	@ 0x44
					prvAddTaskToReadyList( pxTCB );
 8002dcc:	2014      	movs	r0, #20
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002dce:	f1c3 0107 	rsb	r1, r3, #7
 8002dd2:	61a1      	str	r1, [r4, #24]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002dd4:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002dd6:	2401      	movs	r4, #1
 8002dd8:	6811      	ldr	r1, [r2, #0]
 8002dda:	fa04 f503 	lsl.w	r5, r4, r3
 8002dde:	fb00 7003 	mla	r0, r0, r3, r7
 8002de2:	430d      	orrs	r5, r1
 8002de4:	4631      	mov	r1, r6
 8002de6:	6015      	str	r5, [r2, #0]
 8002de8:	f7fe ffbf 	bl	8001d6a <vListInsertEnd>
					xReturn = pdTRUE;
 8002dec:	4620      	mov	r0, r4
		return xReturn;
 8002dee:	e7b9      	b.n	8002d64 <xTaskPriorityDisinherit+0x8>
 8002df0:	20000d08 	.word	0x20000d08
 8002df4:	20000c7c 	.word	0x20000c7c
 8002df8:	20000c00 	.word	0x20000c00

08002dfc <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8002dfc:	4291      	cmp	r1, r2
{
 8002dfe:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002e00:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002e02:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8002e04:	d80a      	bhi.n	8002e1c <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e06:	1ad2      	subs	r2, r2, r3
 8002e08:	6983      	ldr	r3, [r0, #24]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d20d      	bcs.n	8002e2a <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002e0e:	4b08      	ldr	r3, [pc, #32]	@ (8002e30 <prvInsertTimerInActiveList+0x34>)
 8002e10:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e12:	6818      	ldr	r0, [r3, #0]
 8002e14:	f7fe ffb4 	bl	8001d80 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8002e18:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8002e1a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d201      	bcs.n	8002e24 <prvInsertTimerInActiveList+0x28>
 8002e20:	4299      	cmp	r1, r3
 8002e22:	d202      	bcs.n	8002e2a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e24:	4b03      	ldr	r3, [pc, #12]	@ (8002e34 <prvInsertTimerInActiveList+0x38>)
 8002e26:	1d01      	adds	r1, r0, #4
 8002e28:	e7f3      	b.n	8002e12 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8002e2a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8002e2c:	e7f5      	b.n	8002e1a <prvInsertTimerInActiveList+0x1e>
 8002e2e:	bf00      	nop
 8002e30:	20000dd8 	.word	0x20000dd8
 8002e34:	20000ddc 	.word	0x20000ddc

08002e38 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002e38:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8002e3a:	4c11      	ldr	r4, [pc, #68]	@ (8002e80 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8002e3c:	f000 fa82 	bl	8003344 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8002e40:	6825      	ldr	r5, [r4, #0]
 8002e42:	b9bd      	cbnz	r5, 8002e74 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002e44:	4f0f      	ldr	r7, [pc, #60]	@ (8002e84 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8002e46:	4e10      	ldr	r6, [pc, #64]	@ (8002e88 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8002e48:	4638      	mov	r0, r7
 8002e4a:	f7fe ff80 	bl	8001d4e <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002e4e:	4630      	mov	r0, r6
 8002e50:	f7fe ff7d 	bl	8001d4e <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002e54:	4b0d      	ldr	r3, [pc, #52]	@ (8002e8c <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002e56:	210c      	movs	r1, #12
			pxCurrentTimerList = &xActiveTimerList1;
 8002e58:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e90 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002e5c:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8002e5e:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002e60:	4a0c      	ldr	r2, [pc, #48]	@ (8002e94 <prvCheckForValidListAndQueue+0x5c>)
 8002e62:	4b0d      	ldr	r3, [pc, #52]	@ (8002e98 <prvCheckForValidListAndQueue+0x60>)
 8002e64:	9500      	str	r5, [sp, #0]
 8002e66:	f7ff f87b 	bl	8001f60 <xQueueGenericCreateStatic>
 8002e6a:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002e6c:	b110      	cbz	r0, 8002e74 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002e6e:	490b      	ldr	r1, [pc, #44]	@ (8002e9c <prvCheckForValidListAndQueue+0x64>)
 8002e70:	f7ff fadc 	bl	800242c <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8002e74:	b003      	add	sp, #12
 8002e76:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8002e7a:	f000 ba83 	b.w	8003384 <vPortExitCritical>
 8002e7e:	bf00      	nop
 8002e80:	20000dd4 	.word	0x20000dd4
 8002e84:	20000df4 	.word	0x20000df4
 8002e88:	20000de0 	.word	0x20000de0
 8002e8c:	20000ddc 	.word	0x20000ddc
 8002e90:	20000dd8 	.word	0x20000dd8
 8002e94:	20000d54 	.word	0x20000d54
 8002e98:	20000d0c 	.word	0x20000d0c
 8002e9c:	0800599f 	.word	0x0800599f

08002ea0 <xTimerCreateTimerTask>:
{
 8002ea0:	b510      	push	{r4, lr}
 8002ea2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8002ea4:	f7ff ffc8 	bl	8002e38 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8002ea8:	4b12      	ldr	r3, [pc, #72]	@ (8002ef4 <xTimerCreateTimerTask+0x54>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	b1b3      	cbz	r3, 8002edc <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002eae:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002eb0:	aa07      	add	r2, sp, #28
 8002eb2:	a906      	add	r1, sp, #24
 8002eb4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002eb6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002eba:	f7fd f955 	bl	8000168 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002ebe:	9b05      	ldr	r3, [sp, #20]
 8002ec0:	9a07      	ldr	r2, [sp, #28]
 8002ec2:	9302      	str	r3, [sp, #8]
 8002ec4:	9b06      	ldr	r3, [sp, #24]
 8002ec6:	490c      	ldr	r1, [pc, #48]	@ (8002ef8 <xTimerCreateTimerTask+0x58>)
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	2302      	movs	r3, #2
 8002ecc:	480b      	ldr	r0, [pc, #44]	@ (8002efc <xTimerCreateTimerTask+0x5c>)
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	4623      	mov	r3, r4
 8002ed2:	f7ff fc42 	bl	800275a <xTaskCreateStatic>
 8002ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8002f00 <xTimerCreateTimerTask+0x60>)
 8002ed8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8002eda:	b940      	cbnz	r0, 8002eee <xTimerCreateTimerTask+0x4e>
 8002edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ee0:	f383 8811 	msr	BASEPRI, r3
 8002ee4:	f3bf 8f6f 	isb	sy
 8002ee8:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8002eec:	e7fe      	b.n	8002eec <xTimerCreateTimerTask+0x4c>
}
 8002eee:	2001      	movs	r0, #1
 8002ef0:	b008      	add	sp, #32
 8002ef2:	bd10      	pop	{r4, pc}
 8002ef4:	20000dd4 	.word	0x20000dd4
 8002ef8:	080059a4 	.word	0x080059a4
 8002efc:	080030c1 	.word	0x080030c1
 8002f00:	20000dd0 	.word	0x20000dd0

08002f04 <xTimerCreate>:
	{
 8002f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f08:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8002f0a:	202c      	movs	r0, #44	@ 0x2c
	{
 8002f0c:	460d      	mov	r5, r1
 8002f0e:	4617      	mov	r7, r2
 8002f10:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8002f12:	f000 fb43 	bl	800359c <pvPortMalloc>
		if( pxNewTimer != NULL )
 8002f16:	4604      	mov	r4, r0
 8002f18:	b1c0      	cbz	r0, 8002f4c <xTimerCreate+0x48>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002f1a:	b945      	cbnz	r5, 8002f2e <xTimerCreate+0x2a>
 8002f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f20:	f383 8811 	msr	BASEPRI, r3
 8002f24:	f3bf 8f6f 	isb	sy
 8002f28:	f3bf 8f4f 	dsb	sy
 8002f2c:	e7fe      	b.n	8002f2c <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
 8002f2e:	f7ff ff83 	bl	8002e38 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002f32:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8002f34:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002f38:	6263      	str	r3, [r4, #36]	@ 0x24
		pxNewTimer->pcTimerName = pcTimerName;
 8002f3a:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 8002f3e:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002f40:	1d20      	adds	r0, r4, #4
 8002f42:	f7fe ff0f 	bl	8001d64 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8002f46:	2300      	movs	r3, #0
 8002f48:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
	}
 8002f4c:	4620      	mov	r0, r4
 8002f4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002f52 <xTimerCreateStatic>:
	{
 8002f52:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002f56:	461e      	mov	r6, r3
			volatile size_t xSize = sizeof( StaticTimer_t );
 8002f58:	232c      	movs	r3, #44	@ 0x2c
 8002f5a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Timer_t ) );
 8002f5c:	9b01      	ldr	r3, [sp, #4]
	{
 8002f5e:	4680      	mov	r8, r0
			configASSERT( xSize == sizeof( Timer_t ) );
 8002f60:	2b2c      	cmp	r3, #44	@ 0x2c
	{
 8002f62:	460d      	mov	r5, r1
 8002f64:	4617      	mov	r7, r2
 8002f66:	9c09      	ldr	r4, [sp, #36]	@ 0x24
			configASSERT( xSize == sizeof( Timer_t ) );
 8002f68:	d008      	beq.n	8002f7c <xTimerCreateStatic+0x2a>
 8002f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f6e:	f383 8811 	msr	BASEPRI, r3
 8002f72:	f3bf 8f6f 	isb	sy
 8002f76:	f3bf 8f4f 	dsb	sy
 8002f7a:	e7fe      	b.n	8002f7a <xTimerCreateStatic+0x28>
		configASSERT( pxTimerBuffer );
 8002f7c:	b944      	cbnz	r4, 8002f90 <xTimerCreateStatic+0x3e>
 8002f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f82:	f383 8811 	msr	BASEPRI, r3
 8002f86:	f3bf 8f6f 	isb	sy
 8002f8a:	f3bf 8f4f 	dsb	sy
 8002f8e:	e7fe      	b.n	8002f8e <xTimerCreateStatic+0x3c>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002f90:	b941      	cbnz	r1, 8002fa4 <xTimerCreateStatic+0x52>
 8002f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f96:	f383 8811 	msr	BASEPRI, r3
 8002f9a:	f3bf 8f6f 	isb	sy
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	e7fe      	b.n	8002fa2 <xTimerCreateStatic+0x50>
		prvCheckForValidListAndQueue();
 8002fa4:	f7ff ff48 	bl	8002e38 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002fa8:	9b08      	ldr	r3, [sp, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002faa:	1d20      	adds	r0, r4, #4
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002fac:	6263      	str	r3, [r4, #36]	@ 0x24
		pxNewTimer->uxAutoReload = uxAutoReload;
 8002fae:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 8002fb2:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 8002fb6:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002fb8:	f7fe fed4 	bl	8001d64 <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8002fbc:	2301      	movs	r3, #1
	}
 8002fbe:	4620      	mov	r0, r4
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8002fc0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
	}
 8002fc4:	b002      	add	sp, #8
 8002fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08002fcc <xTimerGenericCommand>:
{
 8002fcc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8002fce:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8002fd0:	4604      	mov	r4, r0
{
 8002fd2:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8002fd4:	b940      	cbnz	r0, 8002fe8 <xTimerGenericCommand+0x1c>
 8002fd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	e7fe      	b.n	8002fe6 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8002fe8:	4d0c      	ldr	r5, [pc, #48]	@ (800301c <xTimerGenericCommand+0x50>)
 8002fea:	6828      	ldr	r0, [r5, #0]
 8002fec:	b178      	cbz	r0, 800300e <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002fee:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8002ff0:	e9cd 1601 	strd	r1, r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8002ff4:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8002ff6:	dc0c      	bgt.n	8003012 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002ff8:	f7ff fea0 	bl	8002d3c <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8002ffc:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8002ffe:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003000:	bf14      	ite	ne
 8003002:	461a      	movne	r2, r3
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003004:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003006:	6828      	ldr	r0, [r5, #0]
 8003008:	a901      	add	r1, sp, #4
 800300a:	f7ff f816 	bl	800203a <xQueueGenericSend>
}
 800300e:	b004      	add	sp, #16
 8003010:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003012:	2300      	movs	r3, #0
 8003014:	a901      	add	r1, sp, #4
 8003016:	f7ff f8c2 	bl	800219e <xQueueGenericSendFromISR>
 800301a:	e7f8      	b.n	800300e <xTimerGenericCommand+0x42>
 800301c:	20000dd4 	.word	0x20000dd4

08003020 <prvSampleTimeNow>:
{
 8003020:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8003024:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 8003026:	f7ff fc4b 	bl	80028c0 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 800302a:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 80030b4 <prvSampleTimeNow+0x94>
	xTimeNow = xTaskGetTickCount();
 800302e:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 8003030:	f8d8 3000 	ldr.w	r3, [r8]
 8003034:	4283      	cmp	r3, r0
 8003036:	d909      	bls.n	800304c <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003038:	4f1f      	ldr	r7, [pc, #124]	@ (80030b8 <prvSampleTimeNow+0x98>)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	b96a      	cbnz	r2, 800305c <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 8003040:	4a1e      	ldr	r2, [pc, #120]	@ (80030bc <prvSampleTimeNow+0x9c>)
 8003042:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003044:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8003046:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 8003048:	2301      	movs	r3, #1
 800304a:	e000      	b.n	800304e <prvSampleTimeNow+0x2e>
 800304c:	2300      	movs	r3, #0
}
 800304e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 8003050:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 8003052:	f8c8 5000 	str.w	r5, [r8]
}
 8003056:	b002      	add	sp, #8
 8003058:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800305c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800305e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003060:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003064:	f104 0a04 	add.w	sl, r4, #4
 8003068:	4650      	mov	r0, sl
 800306a:	f7fe fea0 	bl	8001dae <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800306e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003070:	4620      	mov	r0, r4
 8003072:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003074:	69e3      	ldr	r3, [r4, #28]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d1df      	bne.n	800303a <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800307a:	69a3      	ldr	r3, [r4, #24]
 800307c:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800307e:	4599      	cmp	r9, r3
 8003080:	d206      	bcs.n	8003090 <prvSampleTimeNow+0x70>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003082:	4651      	mov	r1, sl
 8003084:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003086:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003088:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800308a:	f7fe fe79 	bl	8001d80 <vListInsert>
 800308e:	e7d4      	b.n	800303a <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003090:	2300      	movs	r3, #0
 8003092:	464a      	mov	r2, r9
 8003094:	4619      	mov	r1, r3
 8003096:	4620      	mov	r0, r4
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	f7ff ff97 	bl	8002fcc <xTimerGenericCommand>
				configASSERT( xResult );
 800309e:	2800      	cmp	r0, #0
 80030a0:	d1cb      	bne.n	800303a <prvSampleTimeNow+0x1a>
 80030a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030a6:	f383 8811 	msr	BASEPRI, r3
 80030aa:	f3bf 8f6f 	isb	sy
 80030ae:	f3bf 8f4f 	dsb	sy
 80030b2:	e7fe      	b.n	80030b2 <prvSampleTimeNow+0x92>
 80030b4:	20000dcc 	.word	0x20000dcc
 80030b8:	20000ddc 	.word	0x20000ddc
 80030bc:	20000dd8 	.word	0x20000dd8

080030c0 <prvTimerTask>:
{
 80030c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80030c4:	4e64      	ldr	r6, [pc, #400]	@ (8003258 <prvTimerTask+0x198>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80030c6:	4f65      	ldr	r7, [pc, #404]	@ (800325c <prvTimerTask+0x19c>)
{
 80030c8:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80030ca:	6833      	ldr	r3, [r6, #0]
 80030cc:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80030ce:	2d00      	cmp	r5, #0
 80030d0:	d033      	beq.n	800313a <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 80030d8:	f7ff fbea 	bl	80028b0 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80030dc:	a803      	add	r0, sp, #12
 80030de:	f7ff ff9f 	bl	8003020 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 80030e2:	9c03      	ldr	r4, [sp, #12]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80030e4:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 80030e6:	2c00      	cmp	r4, #0
 80030e8:	d175      	bne.n	80031d6 <prvTimerTask+0x116>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80030ea:	2d00      	cmp	r5, #0
 80030ec:	d058      	beq.n	80031a0 <prvTimerTask+0xe0>
 80030ee:	4540      	cmp	r0, r8
 80030f0:	d35c      	bcc.n	80031ac <prvTimerTask+0xec>
				( void ) xTaskResumeAll();
 80030f2:	f7ff fc85 	bl	8002a00 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030f6:	6833      	ldr	r3, [r6, #0]
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80030fc:	1d28      	adds	r0, r5, #4
 80030fe:	f7fe fe56 	bl	8001dae <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8003102:	69eb      	ldr	r3, [r5, #28]
 8003104:	2b01      	cmp	r3, #1
 8003106:	d11a      	bne.n	800313e <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003108:	69a9      	ldr	r1, [r5, #24]
 800310a:	4643      	mov	r3, r8
 800310c:	464a      	mov	r2, r9
 800310e:	4628      	mov	r0, r5
 8003110:	4441      	add	r1, r8
 8003112:	f7ff fe73 	bl	8002dfc <prvInsertTimerInActiveList>
 8003116:	b190      	cbz	r0, 800313e <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003118:	4623      	mov	r3, r4
 800311a:	4642      	mov	r2, r8
 800311c:	4621      	mov	r1, r4
 800311e:	4628      	mov	r0, r5
 8003120:	9400      	str	r4, [sp, #0]
 8003122:	f7ff ff53 	bl	8002fcc <xTimerGenericCommand>
			configASSERT( xResult );
 8003126:	b950      	cbnz	r0, 800313e <prvTimerTask+0x7e>
 8003128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800312c:	f383 8811 	msr	BASEPRI, r3
 8003130:	f3bf 8f6f 	isb	sy
 8003134:	f3bf 8f4f 	dsb	sy
 8003138:	e7fe      	b.n	8003138 <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 800313a:	46a8      	mov	r8, r5
 800313c:	e7cc      	b.n	80030d8 <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800313e:	4628      	mov	r0, r5
 8003140:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8003142:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003144:	2200      	movs	r2, #0
 8003146:	6838      	ldr	r0, [r7, #0]
 8003148:	a903      	add	r1, sp, #12
 800314a:	f7ff f884 	bl	8002256 <xQueueReceive>
 800314e:	2800      	cmp	r0, #0
 8003150:	d0bb      	beq.n	80030ca <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003152:	9b03      	ldr	r3, [sp, #12]
 8003154:	2b00      	cmp	r3, #0
 8003156:	dbf5      	blt.n	8003144 <prvTimerTask+0x84>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003158:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800315a:	6963      	ldr	r3, [r4, #20]
 800315c:	b113      	cbz	r3, 8003164 <prvTimerTask+0xa4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800315e:	1d20      	adds	r0, r4, #4
 8003160:	f7fe fe25 	bl	8001dae <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003164:	a802      	add	r0, sp, #8
 8003166:	f7ff ff5b 	bl	8003020 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800316a:	9b03      	ldr	r3, [sp, #12]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800316c:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800316e:	2b09      	cmp	r3, #9
 8003170:	d8e8      	bhi.n	8003144 <prvTimerTask+0x84>
 8003172:	a101      	add	r1, pc, #4	@ (adr r1, 8003178 <prvTimerTask+0xb8>)
 8003174:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003178:	080031dd 	.word	0x080031dd
 800317c:	080031dd 	.word	0x080031dd
 8003180:	080031dd 	.word	0x080031dd
 8003184:	08003145 	.word	0x08003145
 8003188:	08003221 	.word	0x08003221
 800318c:	08003245 	.word	0x08003245
 8003190:	080031dd 	.word	0x080031dd
 8003194:	080031dd 	.word	0x080031dd
 8003198:	08003145 	.word	0x08003145
 800319c:	08003221 	.word	0x08003221
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80031a0:	4b2f      	ldr	r3, [pc, #188]	@ (8003260 <prvTimerTask+0x1a0>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681c      	ldr	r4, [r3, #0]
 80031a6:	fab4 f484 	clz	r4, r4
 80031aa:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80031ac:	4622      	mov	r2, r4
 80031ae:	6838      	ldr	r0, [r7, #0]
 80031b0:	eba8 0109 	sub.w	r1, r8, r9
 80031b4:	f7ff f94c 	bl	8002450 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80031b8:	f7ff fc22 	bl	8002a00 <xTaskResumeAll>
 80031bc:	2800      	cmp	r0, #0
 80031be:	d1c1      	bne.n	8003144 <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 80031c0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80031c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031c8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	e7b6      	b.n	8003144 <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 80031d6:	f7ff fc13 	bl	8002a00 <xTaskResumeAll>
}
 80031da:	e7b3      	b.n	8003144 <prvTimerTask+0x84>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80031dc:	69a1      	ldr	r1, [r4, #24]
 80031de:	9b04      	ldr	r3, [sp, #16]
 80031e0:	4620      	mov	r0, r4
 80031e2:	4419      	add	r1, r3
 80031e4:	f7ff fe0a 	bl	8002dfc <prvInsertTimerInActiveList>
 80031e8:	2800      	cmp	r0, #0
 80031ea:	d0ab      	beq.n	8003144 <prvTimerTask+0x84>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80031ec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80031ee:	4620      	mov	r0, r4
 80031f0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80031f2:	69e3      	ldr	r3, [r4, #28]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d1a5      	bne.n	8003144 <prvTimerTask+0x84>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80031f8:	2300      	movs	r3, #0
 80031fa:	69a2      	ldr	r2, [r4, #24]
 80031fc:	9904      	ldr	r1, [sp, #16]
 80031fe:	4620      	mov	r0, r4
 8003200:	440a      	add	r2, r1
 8003202:	9300      	str	r3, [sp, #0]
 8003204:	4619      	mov	r1, r3
 8003206:	f7ff fee1 	bl	8002fcc <xTimerGenericCommand>
							configASSERT( xResult );
 800320a:	2800      	cmp	r0, #0
 800320c:	d19a      	bne.n	8003144 <prvTimerTask+0x84>
 800320e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003212:	f383 8811 	msr	BASEPRI, r3
 8003216:	f3bf 8f6f 	isb	sy
 800321a:	f3bf 8f4f 	dsb	sy
 800321e:	e7fe      	b.n	800321e <prvTimerTask+0x15e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003220:	9904      	ldr	r1, [sp, #16]
 8003222:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003224:	b941      	cbnz	r1, 8003238 <prvTimerTask+0x178>
 8003226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	e7fe      	b.n	8003236 <prvTimerTask+0x176>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003238:	4603      	mov	r3, r0
 800323a:	4401      	add	r1, r0
 800323c:	4620      	mov	r0, r4
 800323e:	f7ff fddd 	bl	8002dfc <prvInsertTimerInActiveList>
					break;
 8003242:	e77f      	b.n	8003144 <prvTimerTask+0x84>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003244:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8003248:	2b00      	cmp	r3, #0
 800324a:	f47f af7b 	bne.w	8003144 <prvTimerTask+0x84>
							vPortFree( pxTimer );
 800324e:	4620      	mov	r0, r4
 8003250:	f000 fa36 	bl	80036c0 <vPortFree>
 8003254:	e776      	b.n	8003144 <prvTimerTask+0x84>
 8003256:	bf00      	nop
 8003258:	20000ddc 	.word	0x20000ddc
 800325c:	20000dd4 	.word	0x20000dd4
 8003260:	20000dd8 	.word	0x20000dd8

08003264 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8003264:	b510      	push	{r4, lr}
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );
 8003266:	4604      	mov	r4, r0
 8003268:	b940      	cbnz	r0, 800327c <xTimerIsTimerActive+0x18>
 800326a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326e:	f383 8811 	msr	BASEPRI, r3
 8003272:	f3bf 8f6f 	isb	sy
 8003276:	f3bf 8f4f 	dsb	sy
 800327a:	e7fe      	b.n	800327a <xTimerIsTimerActive+0x16>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 800327c:	f000 f862 	bl	8003344 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 8003280:	6964      	ldr	r4, [r4, #20]
 8003282:	3c00      	subs	r4, #0
 8003284:	bf18      	it	ne
 8003286:	2401      	movne	r4, #1
	}
	taskEXIT_CRITICAL();
 8003288:	f000 f87c 	bl	8003384 <vPortExitCritical>

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800328c:	4620      	mov	r0, r4
 800328e:	bd10      	pop	{r4, pc}

08003290 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003290:	4806      	ldr	r0, [pc, #24]	@ (80032ac <prvPortStartFirstTask+0x1c>)
 8003292:	6800      	ldr	r0, [r0, #0]
 8003294:	6800      	ldr	r0, [r0, #0]
 8003296:	f380 8808 	msr	MSP, r0
 800329a:	b662      	cpsie	i
 800329c:	b661      	cpsie	f
 800329e:	f3bf 8f4f 	dsb	sy
 80032a2:	f3bf 8f6f 	isb	sy
 80032a6:	df00      	svc	0
 80032a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80032aa:	0000      	.short	0x0000
 80032ac:	e000ed08 	.word	0xe000ed08

080032b0 <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 80032b0:	2300      	movs	r3, #0
{
 80032b2:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 80032b4:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 80032b6:	4b0d      	ldr	r3, [pc, #52]	@ (80032ec <prvTaskExitError+0x3c>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3301      	adds	r3, #1
 80032bc:	d008      	beq.n	80032d0 <prvTaskExitError+0x20>
 80032be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	e7fe      	b.n	80032ce <prvTaskExitError+0x1e>
 80032d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032d4:	f383 8811 	msr	BASEPRI, r3
 80032d8:	f3bf 8f6f 	isb	sy
 80032dc:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 80032e0:	9b01      	ldr	r3, [sp, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d0fc      	beq.n	80032e0 <prvTaskExitError+0x30>
}
 80032e6:	b002      	add	sp, #8
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	20000014 	.word	0x20000014

080032f0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80032f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80032f4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80032f8:	4b05      	ldr	r3, [pc, #20]	@ (8003310 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80032fa:	f021 0101 	bic.w	r1, r1, #1
 80032fe:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003302:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003306:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800330a:	3840      	subs	r0, #64	@ 0x40
 800330c:	4770      	bx	lr
 800330e:	bf00      	nop
 8003310:	080032b1 	.word	0x080032b1
	...

08003320 <SVC_Handler>:
	__asm volatile (
 8003320:	4b07      	ldr	r3, [pc, #28]	@ (8003340 <pxCurrentTCBConst2>)
 8003322:	6819      	ldr	r1, [r3, #0]
 8003324:	6808      	ldr	r0, [r1, #0]
 8003326:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800332a:	f380 8809 	msr	PSP, r0
 800332e:	f3bf 8f6f 	isb	sy
 8003332:	f04f 0000 	mov.w	r0, #0
 8003336:	f380 8811 	msr	BASEPRI, r0
 800333a:	f04e 0e0d 	orr.w	lr, lr, #13
 800333e:	4770      	bx	lr

08003340 <pxCurrentTCBConst2>:
 8003340:	20000d08 	.word	0x20000d08

08003344 <vPortEnterCritical>:
 8003344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003348:	f383 8811 	msr	BASEPRI, r3
 800334c:	f3bf 8f6f 	isb	sy
 8003350:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003354:	4a0a      	ldr	r2, [pc, #40]	@ (8003380 <vPortEnterCritical+0x3c>)
 8003356:	6813      	ldr	r3, [r2, #0]
 8003358:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800335a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800335c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800335e:	d10e      	bne.n	800337e <vPortEnterCritical+0x3a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003360:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003364:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 8003368:	b2db      	uxtb	r3, r3
 800336a:	b143      	cbz	r3, 800337e <vPortEnterCritical+0x3a>
 800336c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003370:	f383 8811 	msr	BASEPRI, r3
 8003374:	f3bf 8f6f 	isb	sy
 8003378:	f3bf 8f4f 	dsb	sy
 800337c:	e7fe      	b.n	800337c <vPortEnterCritical+0x38>
	}
}
 800337e:	4770      	bx	lr
 8003380:	20000014 	.word	0x20000014

08003384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8003384:	4a08      	ldr	r2, [pc, #32]	@ (80033a8 <vPortExitCritical+0x24>)
 8003386:	6813      	ldr	r3, [r2, #0]
 8003388:	b943      	cbnz	r3, 800339c <vPortExitCritical+0x18>
 800338a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	e7fe      	b.n	800339a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800339c:	3b01      	subs	r3, #1
 800339e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80033a0:	b90b      	cbnz	r3, 80033a6 <vPortExitCritical+0x22>
	__asm volatile
 80033a2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80033a6:	4770      	bx	lr
 80033a8:	20000014 	.word	0x20000014
 80033ac:	00000000 	.word	0x00000000

080033b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80033b0:	f3ef 8009 	mrs	r0, PSP
 80033b4:	f3bf 8f6f 	isb	sy
 80033b8:	4b0d      	ldr	r3, [pc, #52]	@ (80033f0 <pxCurrentTCBConst>)
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80033c0:	6010      	str	r0, [r2, #0]
 80033c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80033c6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80033ca:	f380 8811 	msr	BASEPRI, r0
 80033ce:	f7ff fbb1 	bl	8002b34 <vTaskSwitchContext>
 80033d2:	f04f 0000 	mov.w	r0, #0
 80033d6:	f380 8811 	msr	BASEPRI, r0
 80033da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80033de:	6819      	ldr	r1, [r3, #0]
 80033e0:	6808      	ldr	r0, [r1, #0]
 80033e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80033e6:	f380 8809 	msr	PSP, r0
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	4770      	bx	lr

080033f0 <pxCurrentTCBConst>:
 80033f0:	20000d08 	.word	0x20000d08

080033f4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80033f4:	b508      	push	{r3, lr}
	__asm volatile
 80033f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033fa:	f383 8811 	msr	BASEPRI, r3
 80033fe:	f3bf 8f6f 	isb	sy
 8003402:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003406:	f7ff fa61 	bl	80028cc <xTaskIncrementTick>
 800340a:	b128      	cbz	r0, 8003418 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800340c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003414:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8003418:	2300      	movs	r3, #0
 800341a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800341e:	bd08      	pop	{r3, pc}

08003420 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003420:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 8003424:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003426:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800342a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800342c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800342e:	4b04      	ldr	r3, [pc, #16]	@ (8003440 <vPortSetupTimerInterrupt+0x20>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	fbb3 f3f1 	udiv	r3, r3, r1
 8003436:	3b01      	subs	r3, #1
 8003438:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800343a:	2307      	movs	r3, #7
 800343c:	6113      	str	r3, [r2, #16]
}
 800343e:	4770      	bx	lr
 8003440:	20000008 	.word	0x20000008

08003444 <xPortStartScheduler>:
{
 8003444:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003446:	4b27      	ldr	r3, [pc, #156]	@ (80034e4 <xPortStartScheduler+0xa0>)
 8003448:	781a      	ldrb	r2, [r3, #0]
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800344e:	22ff      	movs	r2, #255	@ 0xff
 8003450:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003452:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003454:	4a24      	ldr	r2, [pc, #144]	@ (80034e8 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800345c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003460:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003464:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003466:	2307      	movs	r3, #7
 8003468:	4a20      	ldr	r2, [pc, #128]	@ (80034ec <xPortStartScheduler+0xa8>)
 800346a:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800346c:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 8003470:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003472:	0609      	lsls	r1, r1, #24
 8003474:	d40a      	bmi.n	800348c <xPortStartScheduler+0x48>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003476:	2b03      	cmp	r3, #3
 8003478:	d011      	beq.n	800349e <xPortStartScheduler+0x5a>
	__asm volatile
 800347a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347e:	f383 8811 	msr	BASEPRI, r3
 8003482:	f3bf 8f6f 	isb	sy
 8003486:	f3bf 8f4f 	dsb	sy
 800348a:	e7fe      	b.n	800348a <xPortStartScheduler+0x46>
			ulMaxPRIGROUPValue--;
 800348c:	3b01      	subs	r3, #1
 800348e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003490:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	b2db      	uxtb	r3, r3
 8003498:	f88d 3003 	strb.w	r3, [sp, #3]
 800349c:	e7e6      	b.n	800346c <xPortStartScheduler+0x28>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800349e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80034a2:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80034a4:	9b01      	ldr	r3, [sp, #4]
 80034a6:	4a0f      	ldr	r2, [pc, #60]	@ (80034e4 <xPortStartScheduler+0xa0>)
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80034ac:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 80034b0:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80034b2:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 80034b6:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 80034ba:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80034be:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 80034c2:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 80034c6:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 80034ca:	f7ff ffa9 	bl	8003420 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <xPortStartScheduler+0xac>)
 80034d0:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 80034d2:	f7ff fedd 	bl	8003290 <prvPortStartFirstTask>
	vTaskSwitchContext();
 80034d6:	f7ff fb2d 	bl	8002b34 <vTaskSwitchContext>
}
 80034da:	4620      	mov	r0, r4
	prvTaskExitError();
 80034dc:	f7ff fee8 	bl	80032b0 <prvTaskExitError>
}
 80034e0:	b002      	add	sp, #8
 80034e2:	bd10      	pop	{r4, pc}
 80034e4:	e000e400 	.word	0xe000e400
 80034e8:	20000e0c 	.word	0x20000e0c
 80034ec:	20000e08 	.word	0x20000e08
 80034f0:	20000014 	.word	0x20000014

080034f4 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80034f4:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80034f8:	2b0f      	cmp	r3, #15
 80034fa:	d90e      	bls.n	800351a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80034fc:	4a11      	ldr	r2, [pc, #68]	@ (8003544 <vPortValidateInterruptPriority+0x50>)
 80034fe:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003500:	4a11      	ldr	r2, [pc, #68]	@ (8003548 <vPortValidateInterruptPriority+0x54>)
 8003502:	7812      	ldrb	r2, [r2, #0]
 8003504:	429a      	cmp	r2, r3
 8003506:	d908      	bls.n	800351a <vPortValidateInterruptPriority+0x26>
 8003508:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800350c:	f383 8811 	msr	BASEPRI, r3
 8003510:	f3bf 8f6f 	isb	sy
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	e7fe      	b.n	8003518 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800351a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800351e:	4a0b      	ldr	r2, [pc, #44]	@ (800354c <vPortValidateInterruptPriority+0x58>)
 8003520:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 8003524:	6812      	ldr	r2, [r2, #0]
 8003526:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800352a:	4293      	cmp	r3, r2
 800352c:	d908      	bls.n	8003540 <vPortValidateInterruptPriority+0x4c>
 800352e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003532:	f383 8811 	msr	BASEPRI, r3
 8003536:	f3bf 8f6f 	isb	sy
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	e7fe      	b.n	800353e <vPortValidateInterruptPriority+0x4a>
	}
 8003540:	4770      	bx	lr
 8003542:	bf00      	nop
 8003544:	e000e3f0 	.word	0xe000e3f0
 8003548:	20000e0c 	.word	0x20000e0c
 800354c:	20000e08 	.word	0x20000e08

08003550 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003550:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003552:	4b10      	ldr	r3, [pc, #64]	@ (8003594 <prvInsertBlockIntoFreeList+0x44>)
 8003554:	461a      	mov	r2, r3
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4283      	cmp	r3, r0
 800355a:	d3fb      	bcc.n	8003554 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800355c:	6854      	ldr	r4, [r2, #4]
 800355e:	1911      	adds	r1, r2, r4
 8003560:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003562:	bf01      	itttt	eq
 8003564:	6841      	ldreq	r1, [r0, #4]
 8003566:	4610      	moveq	r0, r2
 8003568:	1909      	addeq	r1, r1, r4
 800356a:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800356c:	6844      	ldr	r4, [r0, #4]
 800356e:	1901      	adds	r1, r0, r4
 8003570:	428b      	cmp	r3, r1
 8003572:	d10c      	bne.n	800358e <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003574:	4908      	ldr	r1, [pc, #32]	@ (8003598 <prvInsertBlockIntoFreeList+0x48>)
 8003576:	6809      	ldr	r1, [r1, #0]
 8003578:	428b      	cmp	r3, r1
 800357a:	d003      	beq.n	8003584 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800357c:	6859      	ldr	r1, [r3, #4]
 800357e:	4421      	add	r1, r4
 8003580:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003582:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003584:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003586:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003588:	bf18      	it	ne
 800358a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800358c:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800358e:	4619      	mov	r1, r3
 8003590:	e7f8      	b.n	8003584 <prvInsertBlockIntoFreeList+0x34>
 8003592:	bf00      	nop
 8003594:	20000e20 	.word	0x20000e20
 8003598:	20000e1c 	.word	0x20000e1c

0800359c <pvPortMalloc>:
{
 800359c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035a0:	4604      	mov	r4, r0
	vTaskSuspendAll();
 80035a2:	f7ff f985 	bl	80028b0 <vTaskSuspendAll>
		if( pxEnd == NULL )
 80035a6:	4940      	ldr	r1, [pc, #256]	@ (80036a8 <pvPortMalloc+0x10c>)
 80035a8:	4d40      	ldr	r5, [pc, #256]	@ (80036ac <pvPortMalloc+0x110>)
 80035aa:	680b      	ldr	r3, [r1, #0]
 80035ac:	bb0b      	cbnz	r3, 80035f2 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 80035ae:	4a40      	ldr	r2, [pc, #256]	@ (80036b0 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80035b0:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80035b2:	bf1f      	itttt	ne
 80035b4:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80035b6:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80035ba:	f502 6240 	addne.w	r2, r2, #3072	@ 0xc00
 80035be:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80035c0:	bf0c      	ite	eq
 80035c2:	f44f 6340 	moveq.w	r3, #3072	@ 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80035c6:	4602      	movne	r2, r0
	xStart.xBlockSize = ( size_t ) 0;
 80035c8:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80035ca:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80035cc:	4e39      	ldr	r6, [pc, #228]	@ (80036b4 <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 80035ce:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80035d0:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 80035d4:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80035d6:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 80035d8:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80035dc:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80035de:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 80035e2:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035e4:	4b34      	ldr	r3, [pc, #208]	@ (80036b8 <pvPortMalloc+0x11c>)
 80035e6:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80035e8:	4b34      	ldr	r3, [pc, #208]	@ (80036bc <pvPortMalloc+0x120>)
 80035ea:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80035ec:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80035f0:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80035f2:	682e      	ldr	r6, [r5, #0]
 80035f4:	4226      	tst	r6, r4
 80035f6:	d151      	bne.n	800369c <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 80035f8:	2c00      	cmp	r4, #0
 80035fa:	d042      	beq.n	8003682 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 80035fc:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003600:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003602:	bf1c      	itt	ne
 8003604:	f023 0307 	bicne.w	r3, r3, #7
 8003608:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800360a:	2b00      	cmp	r3, #0
 800360c:	d046      	beq.n	800369c <pvPortMalloc+0x100>
 800360e:	4f2b      	ldr	r7, [pc, #172]	@ (80036bc <pvPortMalloc+0x120>)
 8003610:	683c      	ldr	r4, [r7, #0]
 8003612:	429c      	cmp	r4, r3
 8003614:	d342      	bcc.n	800369c <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 8003616:	4a27      	ldr	r2, [pc, #156]	@ (80036b4 <pvPortMalloc+0x118>)
 8003618:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800361a:	6868      	ldr	r0, [r5, #4]
 800361c:	4298      	cmp	r0, r3
 800361e:	d204      	bcs.n	800362a <pvPortMalloc+0x8e>
 8003620:	f8d5 c000 	ldr.w	ip, [r5]
 8003624:	f1bc 0f00 	cmp.w	ip, #0
 8003628:	d115      	bne.n	8003656 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 800362a:	6809      	ldr	r1, [r1, #0]
 800362c:	42a9      	cmp	r1, r5
 800362e:	d035      	beq.n	800369c <pvPortMalloc+0x100>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003630:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003632:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003636:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003638:	1ac2      	subs	r2, r0, r3
 800363a:	2a10      	cmp	r2, #16
 800363c:	d912      	bls.n	8003664 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800363e:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003640:	0741      	lsls	r1, r0, #29
 8003642:	d00b      	beq.n	800365c <pvPortMalloc+0xc0>
 8003644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003648:	f383 8811 	msr	BASEPRI, r3
 800364c:	f3bf 8f6f 	isb	sy
 8003650:	f3bf 8f4f 	dsb	sy
 8003654:	e7fe      	b.n	8003654 <pvPortMalloc+0xb8>
 8003656:	462a      	mov	r2, r5
 8003658:	4665      	mov	r5, ip
 800365a:	e7de      	b.n	800361a <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800365c:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800365e:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003660:	f7ff ff76 	bl	8003550 <prvInsertBlockIntoFreeList>
					pxBlock->pxNextFreeBlock = NULL;
 8003664:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003666:	4914      	ldr	r1, [pc, #80]	@ (80036b8 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003668:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800366a:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800366c:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800366e:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003670:	ea46 0602 	orr.w	r6, r6, r2
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003674:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003676:	bf38      	it	cc
 8003678:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800367a:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800367c:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8003680:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8003682:	f7ff f9bd 	bl	8002a00 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003686:	0763      	lsls	r3, r4, #29
 8003688:	d00a      	beq.n	80036a0 <pvPortMalloc+0x104>
 800368a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800368e:	f383 8811 	msr	BASEPRI, r3
 8003692:	f3bf 8f6f 	isb	sy
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	e7fe      	b.n	800369a <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 800369c:	2400      	movs	r4, #0
 800369e:	e7f0      	b.n	8003682 <pvPortMalloc+0xe6>
}
 80036a0:	4620      	mov	r0, r4
 80036a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036a6:	bf00      	nop
 80036a8:	20000e1c 	.word	0x20000e1c
 80036ac:	20000e10 	.word	0x20000e10
 80036b0:	20000e28 	.word	0x20000e28
 80036b4:	20000e20 	.word	0x20000e20
 80036b8:	20000e14 	.word	0x20000e14
 80036bc:	20000e18 	.word	0x20000e18

080036c0 <vPortFree>:
{
 80036c0:	b510      	push	{r4, lr}
	if( pv != NULL )
 80036c2:	4604      	mov	r4, r0
 80036c4:	b370      	cbz	r0, 8003724 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80036c6:	4a18      	ldr	r2, [pc, #96]	@ (8003728 <vPortFree+0x68>)
 80036c8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80036cc:	6812      	ldr	r2, [r2, #0]
 80036ce:	4213      	tst	r3, r2
 80036d0:	d108      	bne.n	80036e4 <vPortFree+0x24>
 80036d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d6:	f383 8811 	msr	BASEPRI, r3
 80036da:	f3bf 8f6f 	isb	sy
 80036de:	f3bf 8f4f 	dsb	sy
 80036e2:	e7fe      	b.n	80036e2 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80036e4:	f850 1c08 	ldr.w	r1, [r0, #-8]
 80036e8:	b141      	cbz	r1, 80036fc <vPortFree+0x3c>
 80036ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ee:	f383 8811 	msr	BASEPRI, r3
 80036f2:	f3bf 8f6f 	isb	sy
 80036f6:	f3bf 8f4f 	dsb	sy
 80036fa:	e7fe      	b.n	80036fa <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80036fc:	ea23 0302 	bic.w	r3, r3, r2
 8003700:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003704:	f7ff f8d4 	bl	80028b0 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003708:	4a08      	ldr	r2, [pc, #32]	@ (800372c <vPortFree+0x6c>)
 800370a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800370e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003710:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003714:	440b      	add	r3, r1
 8003716:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003718:	f7ff ff1a 	bl	8003550 <prvInsertBlockIntoFreeList>
}
 800371c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 8003720:	f7ff b96e 	b.w	8002a00 <xTaskResumeAll>
}
 8003724:	bd10      	pop	{r4, pc}
 8003726:	bf00      	nop
 8003728:	20000e10 	.word	0x20000e10
 800372c:	20000e18 	.word	0x20000e18

08003730 <siprintf>:
 8003730:	b40e      	push	{r1, r2, r3}
 8003732:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003736:	b500      	push	{lr}
 8003738:	b09c      	sub	sp, #112	@ 0x70
 800373a:	ab1d      	add	r3, sp, #116	@ 0x74
 800373c:	9002      	str	r0, [sp, #8]
 800373e:	9006      	str	r0, [sp, #24]
 8003740:	9107      	str	r1, [sp, #28]
 8003742:	9104      	str	r1, [sp, #16]
 8003744:	4808      	ldr	r0, [pc, #32]	@ (8003768 <siprintf+0x38>)
 8003746:	4909      	ldr	r1, [pc, #36]	@ (800376c <siprintf+0x3c>)
 8003748:	f853 2b04 	ldr.w	r2, [r3], #4
 800374c:	9105      	str	r1, [sp, #20]
 800374e:	6800      	ldr	r0, [r0, #0]
 8003750:	a902      	add	r1, sp, #8
 8003752:	9301      	str	r3, [sp, #4]
 8003754:	f000 f9a0 	bl	8003a98 <_svfiprintf_r>
 8003758:	2200      	movs	r2, #0
 800375a:	9b02      	ldr	r3, [sp, #8]
 800375c:	701a      	strb	r2, [r3, #0]
 800375e:	b01c      	add	sp, #112	@ 0x70
 8003760:	f85d eb04 	ldr.w	lr, [sp], #4
 8003764:	b003      	add	sp, #12
 8003766:	4770      	bx	lr
 8003768:	20000018 	.word	0x20000018
 800376c:	ffff0208 	.word	0xffff0208

08003770 <memset>:
 8003770:	4603      	mov	r3, r0
 8003772:	4402      	add	r2, r0
 8003774:	4293      	cmp	r3, r2
 8003776:	d100      	bne.n	800377a <memset+0xa>
 8003778:	4770      	bx	lr
 800377a:	f803 1b01 	strb.w	r1, [r3], #1
 800377e:	e7f9      	b.n	8003774 <memset+0x4>

08003780 <__errno>:
 8003780:	4b01      	ldr	r3, [pc, #4]	@ (8003788 <__errno+0x8>)
 8003782:	6818      	ldr	r0, [r3, #0]
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	20000018 	.word	0x20000018

0800378c <__libc_init_array>:
 800378c:	b570      	push	{r4, r5, r6, lr}
 800378e:	2600      	movs	r6, #0
 8003790:	4d0c      	ldr	r5, [pc, #48]	@ (80037c4 <__libc_init_array+0x38>)
 8003792:	4c0d      	ldr	r4, [pc, #52]	@ (80037c8 <__libc_init_array+0x3c>)
 8003794:	1b64      	subs	r4, r4, r5
 8003796:	10a4      	asrs	r4, r4, #2
 8003798:	42a6      	cmp	r6, r4
 800379a:	d109      	bne.n	80037b0 <__libc_init_array+0x24>
 800379c:	f000 fc78 	bl	8004090 <_init>
 80037a0:	2600      	movs	r6, #0
 80037a2:	4d0a      	ldr	r5, [pc, #40]	@ (80037cc <__libc_init_array+0x40>)
 80037a4:	4c0a      	ldr	r4, [pc, #40]	@ (80037d0 <__libc_init_array+0x44>)
 80037a6:	1b64      	subs	r4, r4, r5
 80037a8:	10a4      	asrs	r4, r4, #2
 80037aa:	42a6      	cmp	r6, r4
 80037ac:	d105      	bne.n	80037ba <__libc_init_array+0x2e>
 80037ae:	bd70      	pop	{r4, r5, r6, pc}
 80037b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80037b4:	4798      	blx	r3
 80037b6:	3601      	adds	r6, #1
 80037b8:	e7ee      	b.n	8003798 <__libc_init_array+0xc>
 80037ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80037be:	4798      	blx	r3
 80037c0:	3601      	adds	r6, #1
 80037c2:	e7f2      	b.n	80037aa <__libc_init_array+0x1e>
 80037c4:	080059e0 	.word	0x080059e0
 80037c8:	080059e0 	.word	0x080059e0
 80037cc:	080059e0 	.word	0x080059e0
 80037d0:	080059e4 	.word	0x080059e4

080037d4 <__retarget_lock_acquire_recursive>:
 80037d4:	4770      	bx	lr

080037d6 <__retarget_lock_release_recursive>:
 80037d6:	4770      	bx	lr

080037d8 <memcpy>:
 80037d8:	440a      	add	r2, r1
 80037da:	4291      	cmp	r1, r2
 80037dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80037e0:	d100      	bne.n	80037e4 <memcpy+0xc>
 80037e2:	4770      	bx	lr
 80037e4:	b510      	push	{r4, lr}
 80037e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037ea:	4291      	cmp	r1, r2
 80037ec:	f803 4f01 	strb.w	r4, [r3, #1]!
 80037f0:	d1f9      	bne.n	80037e6 <memcpy+0xe>
 80037f2:	bd10      	pop	{r4, pc}

080037f4 <_free_r>:
 80037f4:	b538      	push	{r3, r4, r5, lr}
 80037f6:	4605      	mov	r5, r0
 80037f8:	2900      	cmp	r1, #0
 80037fa:	d040      	beq.n	800387e <_free_r+0x8a>
 80037fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003800:	1f0c      	subs	r4, r1, #4
 8003802:	2b00      	cmp	r3, #0
 8003804:	bfb8      	it	lt
 8003806:	18e4      	addlt	r4, r4, r3
 8003808:	f000 f8de 	bl	80039c8 <__malloc_lock>
 800380c:	4a1c      	ldr	r2, [pc, #112]	@ (8003880 <_free_r+0x8c>)
 800380e:	6813      	ldr	r3, [r2, #0]
 8003810:	b933      	cbnz	r3, 8003820 <_free_r+0x2c>
 8003812:	6063      	str	r3, [r4, #4]
 8003814:	6014      	str	r4, [r2, #0]
 8003816:	4628      	mov	r0, r5
 8003818:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800381c:	f000 b8da 	b.w	80039d4 <__malloc_unlock>
 8003820:	42a3      	cmp	r3, r4
 8003822:	d908      	bls.n	8003836 <_free_r+0x42>
 8003824:	6820      	ldr	r0, [r4, #0]
 8003826:	1821      	adds	r1, r4, r0
 8003828:	428b      	cmp	r3, r1
 800382a:	bf01      	itttt	eq
 800382c:	6819      	ldreq	r1, [r3, #0]
 800382e:	685b      	ldreq	r3, [r3, #4]
 8003830:	1809      	addeq	r1, r1, r0
 8003832:	6021      	streq	r1, [r4, #0]
 8003834:	e7ed      	b.n	8003812 <_free_r+0x1e>
 8003836:	461a      	mov	r2, r3
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	b10b      	cbz	r3, 8003840 <_free_r+0x4c>
 800383c:	42a3      	cmp	r3, r4
 800383e:	d9fa      	bls.n	8003836 <_free_r+0x42>
 8003840:	6811      	ldr	r1, [r2, #0]
 8003842:	1850      	adds	r0, r2, r1
 8003844:	42a0      	cmp	r0, r4
 8003846:	d10b      	bne.n	8003860 <_free_r+0x6c>
 8003848:	6820      	ldr	r0, [r4, #0]
 800384a:	4401      	add	r1, r0
 800384c:	1850      	adds	r0, r2, r1
 800384e:	4283      	cmp	r3, r0
 8003850:	6011      	str	r1, [r2, #0]
 8003852:	d1e0      	bne.n	8003816 <_free_r+0x22>
 8003854:	6818      	ldr	r0, [r3, #0]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	4408      	add	r0, r1
 800385a:	6010      	str	r0, [r2, #0]
 800385c:	6053      	str	r3, [r2, #4]
 800385e:	e7da      	b.n	8003816 <_free_r+0x22>
 8003860:	d902      	bls.n	8003868 <_free_r+0x74>
 8003862:	230c      	movs	r3, #12
 8003864:	602b      	str	r3, [r5, #0]
 8003866:	e7d6      	b.n	8003816 <_free_r+0x22>
 8003868:	6820      	ldr	r0, [r4, #0]
 800386a:	1821      	adds	r1, r4, r0
 800386c:	428b      	cmp	r3, r1
 800386e:	bf01      	itttt	eq
 8003870:	6819      	ldreq	r1, [r3, #0]
 8003872:	685b      	ldreq	r3, [r3, #4]
 8003874:	1809      	addeq	r1, r1, r0
 8003876:	6021      	streq	r1, [r4, #0]
 8003878:	6063      	str	r3, [r4, #4]
 800387a:	6054      	str	r4, [r2, #4]
 800387c:	e7cb      	b.n	8003816 <_free_r+0x22>
 800387e:	bd38      	pop	{r3, r4, r5, pc}
 8003880:	20001b6c 	.word	0x20001b6c

08003884 <sbrk_aligned>:
 8003884:	b570      	push	{r4, r5, r6, lr}
 8003886:	4e0f      	ldr	r6, [pc, #60]	@ (80038c4 <sbrk_aligned+0x40>)
 8003888:	460c      	mov	r4, r1
 800388a:	6831      	ldr	r1, [r6, #0]
 800388c:	4605      	mov	r5, r0
 800388e:	b911      	cbnz	r1, 8003896 <sbrk_aligned+0x12>
 8003890:	f000 fbaa 	bl	8003fe8 <_sbrk_r>
 8003894:	6030      	str	r0, [r6, #0]
 8003896:	4621      	mov	r1, r4
 8003898:	4628      	mov	r0, r5
 800389a:	f000 fba5 	bl	8003fe8 <_sbrk_r>
 800389e:	1c43      	adds	r3, r0, #1
 80038a0:	d103      	bne.n	80038aa <sbrk_aligned+0x26>
 80038a2:	f04f 34ff 	mov.w	r4, #4294967295
 80038a6:	4620      	mov	r0, r4
 80038a8:	bd70      	pop	{r4, r5, r6, pc}
 80038aa:	1cc4      	adds	r4, r0, #3
 80038ac:	f024 0403 	bic.w	r4, r4, #3
 80038b0:	42a0      	cmp	r0, r4
 80038b2:	d0f8      	beq.n	80038a6 <sbrk_aligned+0x22>
 80038b4:	1a21      	subs	r1, r4, r0
 80038b6:	4628      	mov	r0, r5
 80038b8:	f000 fb96 	bl	8003fe8 <_sbrk_r>
 80038bc:	3001      	adds	r0, #1
 80038be:	d1f2      	bne.n	80038a6 <sbrk_aligned+0x22>
 80038c0:	e7ef      	b.n	80038a2 <sbrk_aligned+0x1e>
 80038c2:	bf00      	nop
 80038c4:	20001b68 	.word	0x20001b68

080038c8 <_malloc_r>:
 80038c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80038cc:	1ccd      	adds	r5, r1, #3
 80038ce:	f025 0503 	bic.w	r5, r5, #3
 80038d2:	3508      	adds	r5, #8
 80038d4:	2d0c      	cmp	r5, #12
 80038d6:	bf38      	it	cc
 80038d8:	250c      	movcc	r5, #12
 80038da:	2d00      	cmp	r5, #0
 80038dc:	4606      	mov	r6, r0
 80038de:	db01      	blt.n	80038e4 <_malloc_r+0x1c>
 80038e0:	42a9      	cmp	r1, r5
 80038e2:	d904      	bls.n	80038ee <_malloc_r+0x26>
 80038e4:	230c      	movs	r3, #12
 80038e6:	6033      	str	r3, [r6, #0]
 80038e8:	2000      	movs	r0, #0
 80038ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80038ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80039c4 <_malloc_r+0xfc>
 80038f2:	f000 f869 	bl	80039c8 <__malloc_lock>
 80038f6:	f8d8 3000 	ldr.w	r3, [r8]
 80038fa:	461c      	mov	r4, r3
 80038fc:	bb44      	cbnz	r4, 8003950 <_malloc_r+0x88>
 80038fe:	4629      	mov	r1, r5
 8003900:	4630      	mov	r0, r6
 8003902:	f7ff ffbf 	bl	8003884 <sbrk_aligned>
 8003906:	1c43      	adds	r3, r0, #1
 8003908:	4604      	mov	r4, r0
 800390a:	d158      	bne.n	80039be <_malloc_r+0xf6>
 800390c:	f8d8 4000 	ldr.w	r4, [r8]
 8003910:	4627      	mov	r7, r4
 8003912:	2f00      	cmp	r7, #0
 8003914:	d143      	bne.n	800399e <_malloc_r+0xd6>
 8003916:	2c00      	cmp	r4, #0
 8003918:	d04b      	beq.n	80039b2 <_malloc_r+0xea>
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	4639      	mov	r1, r7
 800391e:	4630      	mov	r0, r6
 8003920:	eb04 0903 	add.w	r9, r4, r3
 8003924:	f000 fb60 	bl	8003fe8 <_sbrk_r>
 8003928:	4581      	cmp	r9, r0
 800392a:	d142      	bne.n	80039b2 <_malloc_r+0xea>
 800392c:	6821      	ldr	r1, [r4, #0]
 800392e:	4630      	mov	r0, r6
 8003930:	1a6d      	subs	r5, r5, r1
 8003932:	4629      	mov	r1, r5
 8003934:	f7ff ffa6 	bl	8003884 <sbrk_aligned>
 8003938:	3001      	adds	r0, #1
 800393a:	d03a      	beq.n	80039b2 <_malloc_r+0xea>
 800393c:	6823      	ldr	r3, [r4, #0]
 800393e:	442b      	add	r3, r5
 8003940:	6023      	str	r3, [r4, #0]
 8003942:	f8d8 3000 	ldr.w	r3, [r8]
 8003946:	685a      	ldr	r2, [r3, #4]
 8003948:	bb62      	cbnz	r2, 80039a4 <_malloc_r+0xdc>
 800394a:	f8c8 7000 	str.w	r7, [r8]
 800394e:	e00f      	b.n	8003970 <_malloc_r+0xa8>
 8003950:	6822      	ldr	r2, [r4, #0]
 8003952:	1b52      	subs	r2, r2, r5
 8003954:	d420      	bmi.n	8003998 <_malloc_r+0xd0>
 8003956:	2a0b      	cmp	r2, #11
 8003958:	d917      	bls.n	800398a <_malloc_r+0xc2>
 800395a:	1961      	adds	r1, r4, r5
 800395c:	42a3      	cmp	r3, r4
 800395e:	6025      	str	r5, [r4, #0]
 8003960:	bf18      	it	ne
 8003962:	6059      	strne	r1, [r3, #4]
 8003964:	6863      	ldr	r3, [r4, #4]
 8003966:	bf08      	it	eq
 8003968:	f8c8 1000 	streq.w	r1, [r8]
 800396c:	5162      	str	r2, [r4, r5]
 800396e:	604b      	str	r3, [r1, #4]
 8003970:	4630      	mov	r0, r6
 8003972:	f000 f82f 	bl	80039d4 <__malloc_unlock>
 8003976:	f104 000b 	add.w	r0, r4, #11
 800397a:	1d23      	adds	r3, r4, #4
 800397c:	f020 0007 	bic.w	r0, r0, #7
 8003980:	1ac2      	subs	r2, r0, r3
 8003982:	bf1c      	itt	ne
 8003984:	1a1b      	subne	r3, r3, r0
 8003986:	50a3      	strne	r3, [r4, r2]
 8003988:	e7af      	b.n	80038ea <_malloc_r+0x22>
 800398a:	6862      	ldr	r2, [r4, #4]
 800398c:	42a3      	cmp	r3, r4
 800398e:	bf0c      	ite	eq
 8003990:	f8c8 2000 	streq.w	r2, [r8]
 8003994:	605a      	strne	r2, [r3, #4]
 8003996:	e7eb      	b.n	8003970 <_malloc_r+0xa8>
 8003998:	4623      	mov	r3, r4
 800399a:	6864      	ldr	r4, [r4, #4]
 800399c:	e7ae      	b.n	80038fc <_malloc_r+0x34>
 800399e:	463c      	mov	r4, r7
 80039a0:	687f      	ldr	r7, [r7, #4]
 80039a2:	e7b6      	b.n	8003912 <_malloc_r+0x4a>
 80039a4:	461a      	mov	r2, r3
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	42a3      	cmp	r3, r4
 80039aa:	d1fb      	bne.n	80039a4 <_malloc_r+0xdc>
 80039ac:	2300      	movs	r3, #0
 80039ae:	6053      	str	r3, [r2, #4]
 80039b0:	e7de      	b.n	8003970 <_malloc_r+0xa8>
 80039b2:	230c      	movs	r3, #12
 80039b4:	4630      	mov	r0, r6
 80039b6:	6033      	str	r3, [r6, #0]
 80039b8:	f000 f80c 	bl	80039d4 <__malloc_unlock>
 80039bc:	e794      	b.n	80038e8 <_malloc_r+0x20>
 80039be:	6005      	str	r5, [r0, #0]
 80039c0:	e7d6      	b.n	8003970 <_malloc_r+0xa8>
 80039c2:	bf00      	nop
 80039c4:	20001b6c 	.word	0x20001b6c

080039c8 <__malloc_lock>:
 80039c8:	4801      	ldr	r0, [pc, #4]	@ (80039d0 <__malloc_lock+0x8>)
 80039ca:	f7ff bf03 	b.w	80037d4 <__retarget_lock_acquire_recursive>
 80039ce:	bf00      	nop
 80039d0:	20001b64 	.word	0x20001b64

080039d4 <__malloc_unlock>:
 80039d4:	4801      	ldr	r0, [pc, #4]	@ (80039dc <__malloc_unlock+0x8>)
 80039d6:	f7ff befe 	b.w	80037d6 <__retarget_lock_release_recursive>
 80039da:	bf00      	nop
 80039dc:	20001b64 	.word	0x20001b64

080039e0 <__ssputs_r>:
 80039e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039e4:	461f      	mov	r7, r3
 80039e6:	688e      	ldr	r6, [r1, #8]
 80039e8:	4682      	mov	sl, r0
 80039ea:	42be      	cmp	r6, r7
 80039ec:	460c      	mov	r4, r1
 80039ee:	4690      	mov	r8, r2
 80039f0:	680b      	ldr	r3, [r1, #0]
 80039f2:	d82d      	bhi.n	8003a50 <__ssputs_r+0x70>
 80039f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80039f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80039fc:	d026      	beq.n	8003a4c <__ssputs_r+0x6c>
 80039fe:	6965      	ldr	r5, [r4, #20]
 8003a00:	6909      	ldr	r1, [r1, #16]
 8003a02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a06:	eba3 0901 	sub.w	r9, r3, r1
 8003a0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a0e:	1c7b      	adds	r3, r7, #1
 8003a10:	444b      	add	r3, r9
 8003a12:	106d      	asrs	r5, r5, #1
 8003a14:	429d      	cmp	r5, r3
 8003a16:	bf38      	it	cc
 8003a18:	461d      	movcc	r5, r3
 8003a1a:	0553      	lsls	r3, r2, #21
 8003a1c:	d527      	bpl.n	8003a6e <__ssputs_r+0x8e>
 8003a1e:	4629      	mov	r1, r5
 8003a20:	f7ff ff52 	bl	80038c8 <_malloc_r>
 8003a24:	4606      	mov	r6, r0
 8003a26:	b360      	cbz	r0, 8003a82 <__ssputs_r+0xa2>
 8003a28:	464a      	mov	r2, r9
 8003a2a:	6921      	ldr	r1, [r4, #16]
 8003a2c:	f7ff fed4 	bl	80037d8 <memcpy>
 8003a30:	89a3      	ldrh	r3, [r4, #12]
 8003a32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a3a:	81a3      	strh	r3, [r4, #12]
 8003a3c:	6126      	str	r6, [r4, #16]
 8003a3e:	444e      	add	r6, r9
 8003a40:	6026      	str	r6, [r4, #0]
 8003a42:	463e      	mov	r6, r7
 8003a44:	6165      	str	r5, [r4, #20]
 8003a46:	eba5 0509 	sub.w	r5, r5, r9
 8003a4a:	60a5      	str	r5, [r4, #8]
 8003a4c:	42be      	cmp	r6, r7
 8003a4e:	d900      	bls.n	8003a52 <__ssputs_r+0x72>
 8003a50:	463e      	mov	r6, r7
 8003a52:	4632      	mov	r2, r6
 8003a54:	4641      	mov	r1, r8
 8003a56:	6820      	ldr	r0, [r4, #0]
 8003a58:	f000 faac 	bl	8003fb4 <memmove>
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	68a3      	ldr	r3, [r4, #8]
 8003a60:	1b9b      	subs	r3, r3, r6
 8003a62:	60a3      	str	r3, [r4, #8]
 8003a64:	6823      	ldr	r3, [r4, #0]
 8003a66:	4433      	add	r3, r6
 8003a68:	6023      	str	r3, [r4, #0]
 8003a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a6e:	462a      	mov	r2, r5
 8003a70:	f000 fad8 	bl	8004024 <_realloc_r>
 8003a74:	4606      	mov	r6, r0
 8003a76:	2800      	cmp	r0, #0
 8003a78:	d1e0      	bne.n	8003a3c <__ssputs_r+0x5c>
 8003a7a:	4650      	mov	r0, sl
 8003a7c:	6921      	ldr	r1, [r4, #16]
 8003a7e:	f7ff feb9 	bl	80037f4 <_free_r>
 8003a82:	230c      	movs	r3, #12
 8003a84:	f8ca 3000 	str.w	r3, [sl]
 8003a88:	89a3      	ldrh	r3, [r4, #12]
 8003a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003a92:	81a3      	strh	r3, [r4, #12]
 8003a94:	e7e9      	b.n	8003a6a <__ssputs_r+0x8a>
	...

08003a98 <_svfiprintf_r>:
 8003a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a9c:	4698      	mov	r8, r3
 8003a9e:	898b      	ldrh	r3, [r1, #12]
 8003aa0:	4607      	mov	r7, r0
 8003aa2:	061b      	lsls	r3, r3, #24
 8003aa4:	460d      	mov	r5, r1
 8003aa6:	4614      	mov	r4, r2
 8003aa8:	b09d      	sub	sp, #116	@ 0x74
 8003aaa:	d510      	bpl.n	8003ace <_svfiprintf_r+0x36>
 8003aac:	690b      	ldr	r3, [r1, #16]
 8003aae:	b973      	cbnz	r3, 8003ace <_svfiprintf_r+0x36>
 8003ab0:	2140      	movs	r1, #64	@ 0x40
 8003ab2:	f7ff ff09 	bl	80038c8 <_malloc_r>
 8003ab6:	6028      	str	r0, [r5, #0]
 8003ab8:	6128      	str	r0, [r5, #16]
 8003aba:	b930      	cbnz	r0, 8003aca <_svfiprintf_r+0x32>
 8003abc:	230c      	movs	r3, #12
 8003abe:	603b      	str	r3, [r7, #0]
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	b01d      	add	sp, #116	@ 0x74
 8003ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003aca:	2340      	movs	r3, #64	@ 0x40
 8003acc:	616b      	str	r3, [r5, #20]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ad2:	2320      	movs	r3, #32
 8003ad4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003ad8:	2330      	movs	r3, #48	@ 0x30
 8003ada:	f04f 0901 	mov.w	r9, #1
 8003ade:	f8cd 800c 	str.w	r8, [sp, #12]
 8003ae2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003c7c <_svfiprintf_r+0x1e4>
 8003ae6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003aea:	4623      	mov	r3, r4
 8003aec:	469a      	mov	sl, r3
 8003aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003af2:	b10a      	cbz	r2, 8003af8 <_svfiprintf_r+0x60>
 8003af4:	2a25      	cmp	r2, #37	@ 0x25
 8003af6:	d1f9      	bne.n	8003aec <_svfiprintf_r+0x54>
 8003af8:	ebba 0b04 	subs.w	fp, sl, r4
 8003afc:	d00b      	beq.n	8003b16 <_svfiprintf_r+0x7e>
 8003afe:	465b      	mov	r3, fp
 8003b00:	4622      	mov	r2, r4
 8003b02:	4629      	mov	r1, r5
 8003b04:	4638      	mov	r0, r7
 8003b06:	f7ff ff6b 	bl	80039e0 <__ssputs_r>
 8003b0a:	3001      	adds	r0, #1
 8003b0c:	f000 80a7 	beq.w	8003c5e <_svfiprintf_r+0x1c6>
 8003b10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b12:	445a      	add	r2, fp
 8003b14:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b16:	f89a 3000 	ldrb.w	r3, [sl]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	f000 809f 	beq.w	8003c5e <_svfiprintf_r+0x1c6>
 8003b20:	2300      	movs	r3, #0
 8003b22:	f04f 32ff 	mov.w	r2, #4294967295
 8003b26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b2a:	f10a 0a01 	add.w	sl, sl, #1
 8003b2e:	9304      	str	r3, [sp, #16]
 8003b30:	9307      	str	r3, [sp, #28]
 8003b32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b36:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b38:	4654      	mov	r4, sl
 8003b3a:	2205      	movs	r2, #5
 8003b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b40:	484e      	ldr	r0, [pc, #312]	@ (8003c7c <_svfiprintf_r+0x1e4>)
 8003b42:	f000 fa61 	bl	8004008 <memchr>
 8003b46:	9a04      	ldr	r2, [sp, #16]
 8003b48:	b9d8      	cbnz	r0, 8003b82 <_svfiprintf_r+0xea>
 8003b4a:	06d0      	lsls	r0, r2, #27
 8003b4c:	bf44      	itt	mi
 8003b4e:	2320      	movmi	r3, #32
 8003b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b54:	0711      	lsls	r1, r2, #28
 8003b56:	bf44      	itt	mi
 8003b58:	232b      	movmi	r3, #43	@ 0x2b
 8003b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b62:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b64:	d015      	beq.n	8003b92 <_svfiprintf_r+0xfa>
 8003b66:	4654      	mov	r4, sl
 8003b68:	2000      	movs	r0, #0
 8003b6a:	f04f 0c0a 	mov.w	ip, #10
 8003b6e:	9a07      	ldr	r2, [sp, #28]
 8003b70:	4621      	mov	r1, r4
 8003b72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003b76:	3b30      	subs	r3, #48	@ 0x30
 8003b78:	2b09      	cmp	r3, #9
 8003b7a:	d94b      	bls.n	8003c14 <_svfiprintf_r+0x17c>
 8003b7c:	b1b0      	cbz	r0, 8003bac <_svfiprintf_r+0x114>
 8003b7e:	9207      	str	r2, [sp, #28]
 8003b80:	e014      	b.n	8003bac <_svfiprintf_r+0x114>
 8003b82:	eba0 0308 	sub.w	r3, r0, r8
 8003b86:	fa09 f303 	lsl.w	r3, r9, r3
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	46a2      	mov	sl, r4
 8003b8e:	9304      	str	r3, [sp, #16]
 8003b90:	e7d2      	b.n	8003b38 <_svfiprintf_r+0xa0>
 8003b92:	9b03      	ldr	r3, [sp, #12]
 8003b94:	1d19      	adds	r1, r3, #4
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	9103      	str	r1, [sp, #12]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	bfbb      	ittet	lt
 8003b9e:	425b      	neglt	r3, r3
 8003ba0:	f042 0202 	orrlt.w	r2, r2, #2
 8003ba4:	9307      	strge	r3, [sp, #28]
 8003ba6:	9307      	strlt	r3, [sp, #28]
 8003ba8:	bfb8      	it	lt
 8003baa:	9204      	strlt	r2, [sp, #16]
 8003bac:	7823      	ldrb	r3, [r4, #0]
 8003bae:	2b2e      	cmp	r3, #46	@ 0x2e
 8003bb0:	d10a      	bne.n	8003bc8 <_svfiprintf_r+0x130>
 8003bb2:	7863      	ldrb	r3, [r4, #1]
 8003bb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bb6:	d132      	bne.n	8003c1e <_svfiprintf_r+0x186>
 8003bb8:	9b03      	ldr	r3, [sp, #12]
 8003bba:	3402      	adds	r4, #2
 8003bbc:	1d1a      	adds	r2, r3, #4
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	9203      	str	r2, [sp, #12]
 8003bc2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003bc6:	9305      	str	r3, [sp, #20]
 8003bc8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003c80 <_svfiprintf_r+0x1e8>
 8003bcc:	2203      	movs	r2, #3
 8003bce:	4650      	mov	r0, sl
 8003bd0:	7821      	ldrb	r1, [r4, #0]
 8003bd2:	f000 fa19 	bl	8004008 <memchr>
 8003bd6:	b138      	cbz	r0, 8003be8 <_svfiprintf_r+0x150>
 8003bd8:	2240      	movs	r2, #64	@ 0x40
 8003bda:	9b04      	ldr	r3, [sp, #16]
 8003bdc:	eba0 000a 	sub.w	r0, r0, sl
 8003be0:	4082      	lsls	r2, r0
 8003be2:	4313      	orrs	r3, r2
 8003be4:	3401      	adds	r4, #1
 8003be6:	9304      	str	r3, [sp, #16]
 8003be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bec:	2206      	movs	r2, #6
 8003bee:	4825      	ldr	r0, [pc, #148]	@ (8003c84 <_svfiprintf_r+0x1ec>)
 8003bf0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003bf4:	f000 fa08 	bl	8004008 <memchr>
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	d036      	beq.n	8003c6a <_svfiprintf_r+0x1d2>
 8003bfc:	4b22      	ldr	r3, [pc, #136]	@ (8003c88 <_svfiprintf_r+0x1f0>)
 8003bfe:	bb1b      	cbnz	r3, 8003c48 <_svfiprintf_r+0x1b0>
 8003c00:	9b03      	ldr	r3, [sp, #12]
 8003c02:	3307      	adds	r3, #7
 8003c04:	f023 0307 	bic.w	r3, r3, #7
 8003c08:	3308      	adds	r3, #8
 8003c0a:	9303      	str	r3, [sp, #12]
 8003c0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c0e:	4433      	add	r3, r6
 8003c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c12:	e76a      	b.n	8003aea <_svfiprintf_r+0x52>
 8003c14:	460c      	mov	r4, r1
 8003c16:	2001      	movs	r0, #1
 8003c18:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c1c:	e7a8      	b.n	8003b70 <_svfiprintf_r+0xd8>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f04f 0c0a 	mov.w	ip, #10
 8003c24:	4619      	mov	r1, r3
 8003c26:	3401      	adds	r4, #1
 8003c28:	9305      	str	r3, [sp, #20]
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c30:	3a30      	subs	r2, #48	@ 0x30
 8003c32:	2a09      	cmp	r2, #9
 8003c34:	d903      	bls.n	8003c3e <_svfiprintf_r+0x1a6>
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d0c6      	beq.n	8003bc8 <_svfiprintf_r+0x130>
 8003c3a:	9105      	str	r1, [sp, #20]
 8003c3c:	e7c4      	b.n	8003bc8 <_svfiprintf_r+0x130>
 8003c3e:	4604      	mov	r4, r0
 8003c40:	2301      	movs	r3, #1
 8003c42:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c46:	e7f0      	b.n	8003c2a <_svfiprintf_r+0x192>
 8003c48:	ab03      	add	r3, sp, #12
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	462a      	mov	r2, r5
 8003c4e:	4638      	mov	r0, r7
 8003c50:	4b0e      	ldr	r3, [pc, #56]	@ (8003c8c <_svfiprintf_r+0x1f4>)
 8003c52:	a904      	add	r1, sp, #16
 8003c54:	f3af 8000 	nop.w
 8003c58:	1c42      	adds	r2, r0, #1
 8003c5a:	4606      	mov	r6, r0
 8003c5c:	d1d6      	bne.n	8003c0c <_svfiprintf_r+0x174>
 8003c5e:	89ab      	ldrh	r3, [r5, #12]
 8003c60:	065b      	lsls	r3, r3, #25
 8003c62:	f53f af2d 	bmi.w	8003ac0 <_svfiprintf_r+0x28>
 8003c66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c68:	e72c      	b.n	8003ac4 <_svfiprintf_r+0x2c>
 8003c6a:	ab03      	add	r3, sp, #12
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	462a      	mov	r2, r5
 8003c70:	4638      	mov	r0, r7
 8003c72:	4b06      	ldr	r3, [pc, #24]	@ (8003c8c <_svfiprintf_r+0x1f4>)
 8003c74:	a904      	add	r1, sp, #16
 8003c76:	f000 f87d 	bl	8003d74 <_printf_i>
 8003c7a:	e7ed      	b.n	8003c58 <_svfiprintf_r+0x1c0>
 8003c7c:	080059ac 	.word	0x080059ac
 8003c80:	080059b2 	.word	0x080059b2
 8003c84:	080059b6 	.word	0x080059b6
 8003c88:	00000000 	.word	0x00000000
 8003c8c:	080039e1 	.word	0x080039e1

08003c90 <_printf_common>:
 8003c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003c94:	4616      	mov	r6, r2
 8003c96:	4698      	mov	r8, r3
 8003c98:	688a      	ldr	r2, [r1, #8]
 8003c9a:	690b      	ldr	r3, [r1, #16]
 8003c9c:	4607      	mov	r7, r0
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	bfb8      	it	lt
 8003ca2:	4613      	movlt	r3, r2
 8003ca4:	6033      	str	r3, [r6, #0]
 8003ca6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003caa:	460c      	mov	r4, r1
 8003cac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003cb0:	b10a      	cbz	r2, 8003cb6 <_printf_common+0x26>
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	6033      	str	r3, [r6, #0]
 8003cb6:	6823      	ldr	r3, [r4, #0]
 8003cb8:	0699      	lsls	r1, r3, #26
 8003cba:	bf42      	ittt	mi
 8003cbc:	6833      	ldrmi	r3, [r6, #0]
 8003cbe:	3302      	addmi	r3, #2
 8003cc0:	6033      	strmi	r3, [r6, #0]
 8003cc2:	6825      	ldr	r5, [r4, #0]
 8003cc4:	f015 0506 	ands.w	r5, r5, #6
 8003cc8:	d106      	bne.n	8003cd8 <_printf_common+0x48>
 8003cca:	f104 0a19 	add.w	sl, r4, #25
 8003cce:	68e3      	ldr	r3, [r4, #12]
 8003cd0:	6832      	ldr	r2, [r6, #0]
 8003cd2:	1a9b      	subs	r3, r3, r2
 8003cd4:	42ab      	cmp	r3, r5
 8003cd6:	dc2b      	bgt.n	8003d30 <_printf_common+0xa0>
 8003cd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003cdc:	6822      	ldr	r2, [r4, #0]
 8003cde:	3b00      	subs	r3, #0
 8003ce0:	bf18      	it	ne
 8003ce2:	2301      	movne	r3, #1
 8003ce4:	0692      	lsls	r2, r2, #26
 8003ce6:	d430      	bmi.n	8003d4a <_printf_common+0xba>
 8003ce8:	4641      	mov	r1, r8
 8003cea:	4638      	mov	r0, r7
 8003cec:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003cf0:	47c8      	blx	r9
 8003cf2:	3001      	adds	r0, #1
 8003cf4:	d023      	beq.n	8003d3e <_printf_common+0xae>
 8003cf6:	6823      	ldr	r3, [r4, #0]
 8003cf8:	6922      	ldr	r2, [r4, #16]
 8003cfa:	f003 0306 	and.w	r3, r3, #6
 8003cfe:	2b04      	cmp	r3, #4
 8003d00:	bf14      	ite	ne
 8003d02:	2500      	movne	r5, #0
 8003d04:	6833      	ldreq	r3, [r6, #0]
 8003d06:	f04f 0600 	mov.w	r6, #0
 8003d0a:	bf08      	it	eq
 8003d0c:	68e5      	ldreq	r5, [r4, #12]
 8003d0e:	f104 041a 	add.w	r4, r4, #26
 8003d12:	bf08      	it	eq
 8003d14:	1aed      	subeq	r5, r5, r3
 8003d16:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d1a:	bf08      	it	eq
 8003d1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003d20:	4293      	cmp	r3, r2
 8003d22:	bfc4      	itt	gt
 8003d24:	1a9b      	subgt	r3, r3, r2
 8003d26:	18ed      	addgt	r5, r5, r3
 8003d28:	42b5      	cmp	r5, r6
 8003d2a:	d11a      	bne.n	8003d62 <_printf_common+0xd2>
 8003d2c:	2000      	movs	r0, #0
 8003d2e:	e008      	b.n	8003d42 <_printf_common+0xb2>
 8003d30:	2301      	movs	r3, #1
 8003d32:	4652      	mov	r2, sl
 8003d34:	4641      	mov	r1, r8
 8003d36:	4638      	mov	r0, r7
 8003d38:	47c8      	blx	r9
 8003d3a:	3001      	adds	r0, #1
 8003d3c:	d103      	bne.n	8003d46 <_printf_common+0xb6>
 8003d3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d46:	3501      	adds	r5, #1
 8003d48:	e7c1      	b.n	8003cce <_printf_common+0x3e>
 8003d4a:	2030      	movs	r0, #48	@ 0x30
 8003d4c:	18e1      	adds	r1, r4, r3
 8003d4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003d52:	1c5a      	adds	r2, r3, #1
 8003d54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003d58:	4422      	add	r2, r4
 8003d5a:	3302      	adds	r3, #2
 8003d5c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003d60:	e7c2      	b.n	8003ce8 <_printf_common+0x58>
 8003d62:	2301      	movs	r3, #1
 8003d64:	4622      	mov	r2, r4
 8003d66:	4641      	mov	r1, r8
 8003d68:	4638      	mov	r0, r7
 8003d6a:	47c8      	blx	r9
 8003d6c:	3001      	adds	r0, #1
 8003d6e:	d0e6      	beq.n	8003d3e <_printf_common+0xae>
 8003d70:	3601      	adds	r6, #1
 8003d72:	e7d9      	b.n	8003d28 <_printf_common+0x98>

08003d74 <_printf_i>:
 8003d74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003d78:	7e0f      	ldrb	r7, [r1, #24]
 8003d7a:	4691      	mov	r9, r2
 8003d7c:	2f78      	cmp	r7, #120	@ 0x78
 8003d7e:	4680      	mov	r8, r0
 8003d80:	460c      	mov	r4, r1
 8003d82:	469a      	mov	sl, r3
 8003d84:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003d86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003d8a:	d807      	bhi.n	8003d9c <_printf_i+0x28>
 8003d8c:	2f62      	cmp	r7, #98	@ 0x62
 8003d8e:	d80a      	bhi.n	8003da6 <_printf_i+0x32>
 8003d90:	2f00      	cmp	r7, #0
 8003d92:	f000 80d3 	beq.w	8003f3c <_printf_i+0x1c8>
 8003d96:	2f58      	cmp	r7, #88	@ 0x58
 8003d98:	f000 80ba 	beq.w	8003f10 <_printf_i+0x19c>
 8003d9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003da0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003da4:	e03a      	b.n	8003e1c <_printf_i+0xa8>
 8003da6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003daa:	2b15      	cmp	r3, #21
 8003dac:	d8f6      	bhi.n	8003d9c <_printf_i+0x28>
 8003dae:	a101      	add	r1, pc, #4	@ (adr r1, 8003db4 <_printf_i+0x40>)
 8003db0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003db4:	08003e0d 	.word	0x08003e0d
 8003db8:	08003e21 	.word	0x08003e21
 8003dbc:	08003d9d 	.word	0x08003d9d
 8003dc0:	08003d9d 	.word	0x08003d9d
 8003dc4:	08003d9d 	.word	0x08003d9d
 8003dc8:	08003d9d 	.word	0x08003d9d
 8003dcc:	08003e21 	.word	0x08003e21
 8003dd0:	08003d9d 	.word	0x08003d9d
 8003dd4:	08003d9d 	.word	0x08003d9d
 8003dd8:	08003d9d 	.word	0x08003d9d
 8003ddc:	08003d9d 	.word	0x08003d9d
 8003de0:	08003f23 	.word	0x08003f23
 8003de4:	08003e4b 	.word	0x08003e4b
 8003de8:	08003edd 	.word	0x08003edd
 8003dec:	08003d9d 	.word	0x08003d9d
 8003df0:	08003d9d 	.word	0x08003d9d
 8003df4:	08003f45 	.word	0x08003f45
 8003df8:	08003d9d 	.word	0x08003d9d
 8003dfc:	08003e4b 	.word	0x08003e4b
 8003e00:	08003d9d 	.word	0x08003d9d
 8003e04:	08003d9d 	.word	0x08003d9d
 8003e08:	08003ee5 	.word	0x08003ee5
 8003e0c:	6833      	ldr	r3, [r6, #0]
 8003e0e:	1d1a      	adds	r2, r3, #4
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6032      	str	r2, [r6, #0]
 8003e14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e09e      	b.n	8003f5e <_printf_i+0x1ea>
 8003e20:	6833      	ldr	r3, [r6, #0]
 8003e22:	6820      	ldr	r0, [r4, #0]
 8003e24:	1d19      	adds	r1, r3, #4
 8003e26:	6031      	str	r1, [r6, #0]
 8003e28:	0606      	lsls	r6, r0, #24
 8003e2a:	d501      	bpl.n	8003e30 <_printf_i+0xbc>
 8003e2c:	681d      	ldr	r5, [r3, #0]
 8003e2e:	e003      	b.n	8003e38 <_printf_i+0xc4>
 8003e30:	0645      	lsls	r5, r0, #25
 8003e32:	d5fb      	bpl.n	8003e2c <_printf_i+0xb8>
 8003e34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003e38:	2d00      	cmp	r5, #0
 8003e3a:	da03      	bge.n	8003e44 <_printf_i+0xd0>
 8003e3c:	232d      	movs	r3, #45	@ 0x2d
 8003e3e:	426d      	negs	r5, r5
 8003e40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003e44:	230a      	movs	r3, #10
 8003e46:	4859      	ldr	r0, [pc, #356]	@ (8003fac <_printf_i+0x238>)
 8003e48:	e011      	b.n	8003e6e <_printf_i+0xfa>
 8003e4a:	6821      	ldr	r1, [r4, #0]
 8003e4c:	6833      	ldr	r3, [r6, #0]
 8003e4e:	0608      	lsls	r0, r1, #24
 8003e50:	f853 5b04 	ldr.w	r5, [r3], #4
 8003e54:	d402      	bmi.n	8003e5c <_printf_i+0xe8>
 8003e56:	0649      	lsls	r1, r1, #25
 8003e58:	bf48      	it	mi
 8003e5a:	b2ad      	uxthmi	r5, r5
 8003e5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8003e5e:	6033      	str	r3, [r6, #0]
 8003e60:	bf14      	ite	ne
 8003e62:	230a      	movne	r3, #10
 8003e64:	2308      	moveq	r3, #8
 8003e66:	4851      	ldr	r0, [pc, #324]	@ (8003fac <_printf_i+0x238>)
 8003e68:	2100      	movs	r1, #0
 8003e6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003e6e:	6866      	ldr	r6, [r4, #4]
 8003e70:	2e00      	cmp	r6, #0
 8003e72:	bfa8      	it	ge
 8003e74:	6821      	ldrge	r1, [r4, #0]
 8003e76:	60a6      	str	r6, [r4, #8]
 8003e78:	bfa4      	itt	ge
 8003e7a:	f021 0104 	bicge.w	r1, r1, #4
 8003e7e:	6021      	strge	r1, [r4, #0]
 8003e80:	b90d      	cbnz	r5, 8003e86 <_printf_i+0x112>
 8003e82:	2e00      	cmp	r6, #0
 8003e84:	d04b      	beq.n	8003f1e <_printf_i+0x1aa>
 8003e86:	4616      	mov	r6, r2
 8003e88:	fbb5 f1f3 	udiv	r1, r5, r3
 8003e8c:	fb03 5711 	mls	r7, r3, r1, r5
 8003e90:	5dc7      	ldrb	r7, [r0, r7]
 8003e92:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003e96:	462f      	mov	r7, r5
 8003e98:	42bb      	cmp	r3, r7
 8003e9a:	460d      	mov	r5, r1
 8003e9c:	d9f4      	bls.n	8003e88 <_printf_i+0x114>
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d10b      	bne.n	8003eba <_printf_i+0x146>
 8003ea2:	6823      	ldr	r3, [r4, #0]
 8003ea4:	07df      	lsls	r7, r3, #31
 8003ea6:	d508      	bpl.n	8003eba <_printf_i+0x146>
 8003ea8:	6923      	ldr	r3, [r4, #16]
 8003eaa:	6861      	ldr	r1, [r4, #4]
 8003eac:	4299      	cmp	r1, r3
 8003eae:	bfde      	ittt	le
 8003eb0:	2330      	movle	r3, #48	@ 0x30
 8003eb2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003eb6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003eba:	1b92      	subs	r2, r2, r6
 8003ebc:	6122      	str	r2, [r4, #16]
 8003ebe:	464b      	mov	r3, r9
 8003ec0:	4621      	mov	r1, r4
 8003ec2:	4640      	mov	r0, r8
 8003ec4:	f8cd a000 	str.w	sl, [sp]
 8003ec8:	aa03      	add	r2, sp, #12
 8003eca:	f7ff fee1 	bl	8003c90 <_printf_common>
 8003ece:	3001      	adds	r0, #1
 8003ed0:	d14a      	bne.n	8003f68 <_printf_i+0x1f4>
 8003ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8003ed6:	b004      	add	sp, #16
 8003ed8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	f043 0320 	orr.w	r3, r3, #32
 8003ee2:	6023      	str	r3, [r4, #0]
 8003ee4:	2778      	movs	r7, #120	@ 0x78
 8003ee6:	4832      	ldr	r0, [pc, #200]	@ (8003fb0 <_printf_i+0x23c>)
 8003ee8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003eec:	6823      	ldr	r3, [r4, #0]
 8003eee:	6831      	ldr	r1, [r6, #0]
 8003ef0:	061f      	lsls	r7, r3, #24
 8003ef2:	f851 5b04 	ldr.w	r5, [r1], #4
 8003ef6:	d402      	bmi.n	8003efe <_printf_i+0x18a>
 8003ef8:	065f      	lsls	r7, r3, #25
 8003efa:	bf48      	it	mi
 8003efc:	b2ad      	uxthmi	r5, r5
 8003efe:	6031      	str	r1, [r6, #0]
 8003f00:	07d9      	lsls	r1, r3, #31
 8003f02:	bf44      	itt	mi
 8003f04:	f043 0320 	orrmi.w	r3, r3, #32
 8003f08:	6023      	strmi	r3, [r4, #0]
 8003f0a:	b11d      	cbz	r5, 8003f14 <_printf_i+0x1a0>
 8003f0c:	2310      	movs	r3, #16
 8003f0e:	e7ab      	b.n	8003e68 <_printf_i+0xf4>
 8003f10:	4826      	ldr	r0, [pc, #152]	@ (8003fac <_printf_i+0x238>)
 8003f12:	e7e9      	b.n	8003ee8 <_printf_i+0x174>
 8003f14:	6823      	ldr	r3, [r4, #0]
 8003f16:	f023 0320 	bic.w	r3, r3, #32
 8003f1a:	6023      	str	r3, [r4, #0]
 8003f1c:	e7f6      	b.n	8003f0c <_printf_i+0x198>
 8003f1e:	4616      	mov	r6, r2
 8003f20:	e7bd      	b.n	8003e9e <_printf_i+0x12a>
 8003f22:	6833      	ldr	r3, [r6, #0]
 8003f24:	6825      	ldr	r5, [r4, #0]
 8003f26:	1d18      	adds	r0, r3, #4
 8003f28:	6961      	ldr	r1, [r4, #20]
 8003f2a:	6030      	str	r0, [r6, #0]
 8003f2c:	062e      	lsls	r6, r5, #24
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	d501      	bpl.n	8003f36 <_printf_i+0x1c2>
 8003f32:	6019      	str	r1, [r3, #0]
 8003f34:	e002      	b.n	8003f3c <_printf_i+0x1c8>
 8003f36:	0668      	lsls	r0, r5, #25
 8003f38:	d5fb      	bpl.n	8003f32 <_printf_i+0x1be>
 8003f3a:	8019      	strh	r1, [r3, #0]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	4616      	mov	r6, r2
 8003f40:	6123      	str	r3, [r4, #16]
 8003f42:	e7bc      	b.n	8003ebe <_printf_i+0x14a>
 8003f44:	6833      	ldr	r3, [r6, #0]
 8003f46:	2100      	movs	r1, #0
 8003f48:	1d1a      	adds	r2, r3, #4
 8003f4a:	6032      	str	r2, [r6, #0]
 8003f4c:	681e      	ldr	r6, [r3, #0]
 8003f4e:	6862      	ldr	r2, [r4, #4]
 8003f50:	4630      	mov	r0, r6
 8003f52:	f000 f859 	bl	8004008 <memchr>
 8003f56:	b108      	cbz	r0, 8003f5c <_printf_i+0x1e8>
 8003f58:	1b80      	subs	r0, r0, r6
 8003f5a:	6060      	str	r0, [r4, #4]
 8003f5c:	6863      	ldr	r3, [r4, #4]
 8003f5e:	6123      	str	r3, [r4, #16]
 8003f60:	2300      	movs	r3, #0
 8003f62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003f66:	e7aa      	b.n	8003ebe <_printf_i+0x14a>
 8003f68:	4632      	mov	r2, r6
 8003f6a:	4649      	mov	r1, r9
 8003f6c:	4640      	mov	r0, r8
 8003f6e:	6923      	ldr	r3, [r4, #16]
 8003f70:	47d0      	blx	sl
 8003f72:	3001      	adds	r0, #1
 8003f74:	d0ad      	beq.n	8003ed2 <_printf_i+0x15e>
 8003f76:	6823      	ldr	r3, [r4, #0]
 8003f78:	079b      	lsls	r3, r3, #30
 8003f7a:	d413      	bmi.n	8003fa4 <_printf_i+0x230>
 8003f7c:	68e0      	ldr	r0, [r4, #12]
 8003f7e:	9b03      	ldr	r3, [sp, #12]
 8003f80:	4298      	cmp	r0, r3
 8003f82:	bfb8      	it	lt
 8003f84:	4618      	movlt	r0, r3
 8003f86:	e7a6      	b.n	8003ed6 <_printf_i+0x162>
 8003f88:	2301      	movs	r3, #1
 8003f8a:	4632      	mov	r2, r6
 8003f8c:	4649      	mov	r1, r9
 8003f8e:	4640      	mov	r0, r8
 8003f90:	47d0      	blx	sl
 8003f92:	3001      	adds	r0, #1
 8003f94:	d09d      	beq.n	8003ed2 <_printf_i+0x15e>
 8003f96:	3501      	adds	r5, #1
 8003f98:	68e3      	ldr	r3, [r4, #12]
 8003f9a:	9903      	ldr	r1, [sp, #12]
 8003f9c:	1a5b      	subs	r3, r3, r1
 8003f9e:	42ab      	cmp	r3, r5
 8003fa0:	dcf2      	bgt.n	8003f88 <_printf_i+0x214>
 8003fa2:	e7eb      	b.n	8003f7c <_printf_i+0x208>
 8003fa4:	2500      	movs	r5, #0
 8003fa6:	f104 0619 	add.w	r6, r4, #25
 8003faa:	e7f5      	b.n	8003f98 <_printf_i+0x224>
 8003fac:	080059bd 	.word	0x080059bd
 8003fb0:	080059ce 	.word	0x080059ce

08003fb4 <memmove>:
 8003fb4:	4288      	cmp	r0, r1
 8003fb6:	b510      	push	{r4, lr}
 8003fb8:	eb01 0402 	add.w	r4, r1, r2
 8003fbc:	d902      	bls.n	8003fc4 <memmove+0x10>
 8003fbe:	4284      	cmp	r4, r0
 8003fc0:	4623      	mov	r3, r4
 8003fc2:	d807      	bhi.n	8003fd4 <memmove+0x20>
 8003fc4:	1e43      	subs	r3, r0, #1
 8003fc6:	42a1      	cmp	r1, r4
 8003fc8:	d008      	beq.n	8003fdc <memmove+0x28>
 8003fca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003fce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003fd2:	e7f8      	b.n	8003fc6 <memmove+0x12>
 8003fd4:	4601      	mov	r1, r0
 8003fd6:	4402      	add	r2, r0
 8003fd8:	428a      	cmp	r2, r1
 8003fda:	d100      	bne.n	8003fde <memmove+0x2a>
 8003fdc:	bd10      	pop	{r4, pc}
 8003fde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003fe2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003fe6:	e7f7      	b.n	8003fd8 <memmove+0x24>

08003fe8 <_sbrk_r>:
 8003fe8:	b538      	push	{r3, r4, r5, lr}
 8003fea:	2300      	movs	r3, #0
 8003fec:	4d05      	ldr	r5, [pc, #20]	@ (8004004 <_sbrk_r+0x1c>)
 8003fee:	4604      	mov	r4, r0
 8003ff0:	4608      	mov	r0, r1
 8003ff2:	602b      	str	r3, [r5, #0]
 8003ff4:	f7fc fed4 	bl	8000da0 <_sbrk>
 8003ff8:	1c43      	adds	r3, r0, #1
 8003ffa:	d102      	bne.n	8004002 <_sbrk_r+0x1a>
 8003ffc:	682b      	ldr	r3, [r5, #0]
 8003ffe:	b103      	cbz	r3, 8004002 <_sbrk_r+0x1a>
 8004000:	6023      	str	r3, [r4, #0]
 8004002:	bd38      	pop	{r3, r4, r5, pc}
 8004004:	20001b60 	.word	0x20001b60

08004008 <memchr>:
 8004008:	4603      	mov	r3, r0
 800400a:	b510      	push	{r4, lr}
 800400c:	b2c9      	uxtb	r1, r1
 800400e:	4402      	add	r2, r0
 8004010:	4293      	cmp	r3, r2
 8004012:	4618      	mov	r0, r3
 8004014:	d101      	bne.n	800401a <memchr+0x12>
 8004016:	2000      	movs	r0, #0
 8004018:	e003      	b.n	8004022 <memchr+0x1a>
 800401a:	7804      	ldrb	r4, [r0, #0]
 800401c:	3301      	adds	r3, #1
 800401e:	428c      	cmp	r4, r1
 8004020:	d1f6      	bne.n	8004010 <memchr+0x8>
 8004022:	bd10      	pop	{r4, pc}

08004024 <_realloc_r>:
 8004024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004028:	4680      	mov	r8, r0
 800402a:	4615      	mov	r5, r2
 800402c:	460c      	mov	r4, r1
 800402e:	b921      	cbnz	r1, 800403a <_realloc_r+0x16>
 8004030:	4611      	mov	r1, r2
 8004032:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004036:	f7ff bc47 	b.w	80038c8 <_malloc_r>
 800403a:	b92a      	cbnz	r2, 8004048 <_realloc_r+0x24>
 800403c:	f7ff fbda 	bl	80037f4 <_free_r>
 8004040:	2400      	movs	r4, #0
 8004042:	4620      	mov	r0, r4
 8004044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004048:	f000 f81a 	bl	8004080 <_malloc_usable_size_r>
 800404c:	4285      	cmp	r5, r0
 800404e:	4606      	mov	r6, r0
 8004050:	d802      	bhi.n	8004058 <_realloc_r+0x34>
 8004052:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004056:	d8f4      	bhi.n	8004042 <_realloc_r+0x1e>
 8004058:	4629      	mov	r1, r5
 800405a:	4640      	mov	r0, r8
 800405c:	f7ff fc34 	bl	80038c8 <_malloc_r>
 8004060:	4607      	mov	r7, r0
 8004062:	2800      	cmp	r0, #0
 8004064:	d0ec      	beq.n	8004040 <_realloc_r+0x1c>
 8004066:	42b5      	cmp	r5, r6
 8004068:	462a      	mov	r2, r5
 800406a:	4621      	mov	r1, r4
 800406c:	bf28      	it	cs
 800406e:	4632      	movcs	r2, r6
 8004070:	f7ff fbb2 	bl	80037d8 <memcpy>
 8004074:	4621      	mov	r1, r4
 8004076:	4640      	mov	r0, r8
 8004078:	f7ff fbbc 	bl	80037f4 <_free_r>
 800407c:	463c      	mov	r4, r7
 800407e:	e7e0      	b.n	8004042 <_realloc_r+0x1e>

08004080 <_malloc_usable_size_r>:
 8004080:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004084:	1f18      	subs	r0, r3, #4
 8004086:	2b00      	cmp	r3, #0
 8004088:	bfbc      	itt	lt
 800408a:	580b      	ldrlt	r3, [r1, r0]
 800408c:	18c0      	addlt	r0, r0, r3
 800408e:	4770      	bx	lr

08004090 <_init>:
 8004090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004092:	bf00      	nop
 8004094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004096:	bc08      	pop	{r3}
 8004098:	469e      	mov	lr, r3
 800409a:	4770      	bx	lr

0800409c <_fini>:
 800409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409e:	bf00      	nop
 80040a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040a2:	bc08      	pop	{r3}
 80040a4:	469e      	mov	lr, r3
 80040a6:	4770      	bx	lr
