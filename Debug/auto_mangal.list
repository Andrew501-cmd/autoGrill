
auto_mangal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004018  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001938  08004128  08004128  00005128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a60  08005a60  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  08005a60  08005a60  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a60  08005a60  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a60  08005a60  00006a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a64  08005a64  00006a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005a68  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b08  20000068  08005ad0  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b70  08005ad0  00007b70  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014c38  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003762  00000000  00000000  0001bcc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  0001f430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f52  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a9a  00000000  00000000  0002100a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000168c6  00000000  00000000  00039aa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089781  00000000  00000000  0005036a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9aeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028a8  00000000  00000000  000d9b30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loclists 00007205  00000000  00000000  000dc3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  000e35dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08004110 	.word	0x08004110

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08004110 	.word	0x08004110

08000150 <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000150:	4b03      	ldr	r3, [pc, #12]	@ (8000160 <vApplicationGetIdleTaskMemory+0x10>)
 8000152:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000154:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <vApplicationGetIdleTaskMemory+0x14>)
 8000156:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000158:	2380      	movs	r3, #128	@ 0x80
 800015a:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 800015c:	4770      	bx	lr
 800015e:	bf00      	nop
 8000160:	200006d8 	.word	0x200006d8
 8000164:	200004d8 	.word	0x200004d8

08000168 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCBBuffer;
static StackType_t xTimerStack[configTIMER_TASK_STACK_DEPTH];

void vApplicationGetTimerTaskMemory( StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize )
{
  *ppxTimerTaskTCBBuffer = &xTimerTaskTCBBuffer;
 8000168:	4b03      	ldr	r3, [pc, #12]	@ (8000178 <vApplicationGetTimerTaskMemory+0x10>)
 800016a:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &xTimerStack[0];
 800016c:	4b03      	ldr	r3, [pc, #12]	@ (800017c <vApplicationGetTimerTaskMemory+0x14>)
 800016e:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
 8000170:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000174:	6013      	str	r3, [r2, #0]
  /* place for user code */
}
 8000176:	4770      	bx	lr
 8000178:	20000484 	.word	0x20000484
 800017c:	20000084 	.word	0x20000084

08000180 <StartReadKeyTask>:
/* USER CODE END Header_StartReadKeyTask */
void StartReadKeyTask(void const * argument)
{
  /* USER CODE BEGIN 5 */
  #define SCREEN_TIMEOUT 30000
  osTimerStart(screenTimeoutTimerHandle, SCREEN_TIMEOUT);
 8000180:	4c55      	ldr	r4, [pc, #340]	@ (80002d8 <StartReadKeyTask+0x158>)
{
 8000182:	b580      	push	{r7, lr}
  osTimerStart(screenTimeoutTimerHandle, SCREEN_TIMEOUT);
 8000184:	f247 5130 	movw	r1, #30000	@ 0x7530
 8000188:	6820      	ldr	r0, [r4, #0]
 800018a:	f001 fd5f 	bl	8001c4c <osTimerStart>
  /* Infinite loop */
  for(;;)
  {

	if (HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0) {
 800018e:	4f53      	ldr	r7, [pc, #332]	@ (80002dc <StartReadKeyTask+0x15c>)
		    osDelay(1);
	    }
	    osTimerStart(screenTimeoutTimerHandle, SCREEN_TIMEOUT);
	}
	else if (HAL_GPIO_ReadPin(btn_ok_GPIO_Port, btn_ok_Pin) == 0) {
	    osTimerStart(cancelButtonHandle, 1000);
 8000190:	4e53      	ldr	r6, [pc, #332]	@ (80002e0 <StartReadKeyTask+0x160>)
	if (HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0) {
 8000192:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000196:	4638      	mov	r0, r7
 8000198:	f001 f810 	bl	80011bc <HAL_GPIO_ReadPin>
 800019c:	4605      	mov	r5, r0
 800019e:	b9e8      	cbnz	r0, 80001dc <StartReadKeyTask+0x5c>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 0, 100);
 80001a0:	f000 fdc6 	bl	8000d30 <ssd1306_GetDisplayOn>
 80001a4:	2264      	movs	r2, #100	@ 0x64
 80001a6:	4b4f      	ldr	r3, [pc, #316]	@ (80002e4 <StartReadKeyTask+0x164>)
 80001a8:	b990      	cbnz	r0, 80001d0 <StartReadKeyTask+0x50>
 80001aa:	2106      	movs	r1, #6
 80001ac:	6818      	ldr	r0, [r3, #0]
 80001ae:	f001 fdaf 	bl	8001d10 <osMessagePut>
	    while(HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0)
 80001b2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80001b6:	4638      	mov	r0, r7
 80001b8:	f001 f800 	bl	80011bc <HAL_GPIO_ReadPin>
 80001bc:	b150      	cbz	r0, 80001d4 <StartReadKeyTask+0x54>
	    osTimerStart(screenTimeoutTimerHandle, SCREEN_TIMEOUT);
 80001be:	f247 5130 	movw	r1, #30000	@ 0x7530
 80001c2:	6820      	ldr	r0, [r4, #0]
 80001c4:	f001 fd42 	bl	8001c4c <osTimerStart>
		//short press
	    }
	    osTimerStop(cancelButtonHandle);
	}

    osDelay(10);
 80001c8:	200a      	movs	r0, #10
 80001ca:	f001 fd1e 	bl	8001c0a <osDelay>
	if (HAL_GPIO_ReadPin(btn_bottom_GPIO_Port, btn_bottom_Pin) == 0) {
 80001ce:	e7e0      	b.n	8000192 <StartReadKeyTask+0x12>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 0, 100);
 80001d0:	4629      	mov	r1, r5
 80001d2:	e7eb      	b.n	80001ac <StartReadKeyTask+0x2c>
		    osDelay(1);
 80001d4:	2001      	movs	r0, #1
 80001d6:	f001 fd18 	bl	8001c0a <osDelay>
 80001da:	e7ea      	b.n	80001b2 <StartReadKeyTask+0x32>
	else if (HAL_GPIO_ReadPin(btn_top_GPIO_Port, btn_top_Pin) == 0) {
 80001dc:	2180      	movs	r1, #128	@ 0x80
 80001de:	4842      	ldr	r0, [pc, #264]	@ (80002e8 <StartReadKeyTask+0x168>)
 80001e0:	f000 ffec 	bl	80011bc <HAL_GPIO_ReadPin>
 80001e4:	b9a8      	cbnz	r0, 8000212 <StartReadKeyTask+0x92>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 1, 100);
 80001e6:	f000 fda3 	bl	8000d30 <ssd1306_GetDisplayOn>
 80001ea:	2264      	movs	r2, #100	@ 0x64
 80001ec:	4b3d      	ldr	r3, [pc, #244]	@ (80002e4 <StartReadKeyTask+0x164>)
 80001ee:	b970      	cbnz	r0, 800020e <StartReadKeyTask+0x8e>
 80001f0:	2106      	movs	r1, #6
 80001f2:	6818      	ldr	r0, [r3, #0]
 80001f4:	f001 fd8c 	bl	8001d10 <osMessagePut>
	    while(HAL_GPIO_ReadPin(btn_top_GPIO_Port, btn_top_Pin) == 0)
 80001f8:	4d3b      	ldr	r5, [pc, #236]	@ (80002e8 <StartReadKeyTask+0x168>)
 80001fa:	2180      	movs	r1, #128	@ 0x80
 80001fc:	4628      	mov	r0, r5
 80001fe:	f000 ffdd 	bl	80011bc <HAL_GPIO_ReadPin>
 8000202:	2800      	cmp	r0, #0
 8000204:	d1db      	bne.n	80001be <StartReadKeyTask+0x3e>
		    osDelay(1);
 8000206:	2001      	movs	r0, #1
 8000208:	f001 fcff 	bl	8001c0a <osDelay>
 800020c:	e7f5      	b.n	80001fa <StartReadKeyTask+0x7a>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 1, 100);
 800020e:	2101      	movs	r1, #1
 8000210:	e7ef      	b.n	80001f2 <StartReadKeyTask+0x72>
	else if (HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin) == 0) {
 8000212:	2110      	movs	r1, #16
 8000214:	4834      	ldr	r0, [pc, #208]	@ (80002e8 <StartReadKeyTask+0x168>)
 8000216:	f000 ffd1 	bl	80011bc <HAL_GPIO_ReadPin>
 800021a:	b9a8      	cbnz	r0, 8000248 <StartReadKeyTask+0xc8>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 2, 100);
 800021c:	f000 fd88 	bl	8000d30 <ssd1306_GetDisplayOn>
 8000220:	2264      	movs	r2, #100	@ 0x64
 8000222:	4b30      	ldr	r3, [pc, #192]	@ (80002e4 <StartReadKeyTask+0x164>)
 8000224:	b970      	cbnz	r0, 8000244 <StartReadKeyTask+0xc4>
 8000226:	2106      	movs	r1, #6
 8000228:	6818      	ldr	r0, [r3, #0]
 800022a:	f001 fd71 	bl	8001d10 <osMessagePut>
	    while(HAL_GPIO_ReadPin(btn_left_GPIO_Port, btn_left_Pin) == 0)
 800022e:	4d2e      	ldr	r5, [pc, #184]	@ (80002e8 <StartReadKeyTask+0x168>)
 8000230:	2110      	movs	r1, #16
 8000232:	4628      	mov	r0, r5
 8000234:	f000 ffc2 	bl	80011bc <HAL_GPIO_ReadPin>
 8000238:	2800      	cmp	r0, #0
 800023a:	d1c0      	bne.n	80001be <StartReadKeyTask+0x3e>
		    osDelay(1);
 800023c:	2001      	movs	r0, #1
 800023e:	f001 fce4 	bl	8001c0a <osDelay>
 8000242:	e7f5      	b.n	8000230 <StartReadKeyTask+0xb0>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 2, 100);
 8000244:	2102      	movs	r1, #2
 8000246:	e7ef      	b.n	8000228 <StartReadKeyTask+0xa8>
	else if (HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin) == 0) {
 8000248:	2140      	movs	r1, #64	@ 0x40
 800024a:	4827      	ldr	r0, [pc, #156]	@ (80002e8 <StartReadKeyTask+0x168>)
 800024c:	f000 ffb6 	bl	80011bc <HAL_GPIO_ReadPin>
 8000250:	b9a8      	cbnz	r0, 800027e <StartReadKeyTask+0xfe>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 3, 100);
 8000252:	f000 fd6d 	bl	8000d30 <ssd1306_GetDisplayOn>
 8000256:	2264      	movs	r2, #100	@ 0x64
 8000258:	4b22      	ldr	r3, [pc, #136]	@ (80002e4 <StartReadKeyTask+0x164>)
 800025a:	b970      	cbnz	r0, 800027a <StartReadKeyTask+0xfa>
 800025c:	2106      	movs	r1, #6
 800025e:	6818      	ldr	r0, [r3, #0]
 8000260:	f001 fd56 	bl	8001d10 <osMessagePut>
	    while(HAL_GPIO_ReadPin(btn_right_GPIO_Port, btn_right_Pin) == 0)
 8000264:	4d20      	ldr	r5, [pc, #128]	@ (80002e8 <StartReadKeyTask+0x168>)
 8000266:	2140      	movs	r1, #64	@ 0x40
 8000268:	4628      	mov	r0, r5
 800026a:	f000 ffa7 	bl	80011bc <HAL_GPIO_ReadPin>
 800026e:	2800      	cmp	r0, #0
 8000270:	d1a5      	bne.n	80001be <StartReadKeyTask+0x3e>
		    osDelay(1);
 8000272:	2001      	movs	r0, #1
 8000274:	f001 fcc9 	bl	8001c0a <osDelay>
 8000278:	e7f5      	b.n	8000266 <StartReadKeyTask+0xe6>
	    if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 3, 100);
 800027a:	2103      	movs	r1, #3
 800027c:	e7ef      	b.n	800025e <StartReadKeyTask+0xde>
	else if (HAL_GPIO_ReadPin(btn_ok_GPIO_Port, btn_ok_Pin) == 0) {
 800027e:	2120      	movs	r1, #32
 8000280:	4819      	ldr	r0, [pc, #100]	@ (80002e8 <StartReadKeyTask+0x168>)
 8000282:	f000 ff9b 	bl	80011bc <HAL_GPIO_ReadPin>
 8000286:	2800      	cmp	r0, #0
 8000288:	d19e      	bne.n	80001c8 <StartReadKeyTask+0x48>
	    osTimerStart(cancelButtonHandle, 1000);
 800028a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800028e:	6830      	ldr	r0, [r6, #0]
 8000290:	f001 fcdc 	bl	8001c4c <osTimerStart>
	    while(HAL_GPIO_ReadPin(btn_ok_GPIO_Port, btn_ok_Pin) == 0)
 8000294:	4d14      	ldr	r5, [pc, #80]	@ (80002e8 <StartReadKeyTask+0x168>)
 8000296:	2120      	movs	r1, #32
 8000298:	4628      	mov	r0, r5
 800029a:	f000 ff8f 	bl	80011bc <HAL_GPIO_ReadPin>
 800029e:	b1a8      	cbz	r0, 80002cc <StartReadKeyTask+0x14c>
	    osTimerStart(screenTimeoutTimerHandle, SCREEN_TIMEOUT);
 80002a0:	f247 5130 	movw	r1, #30000	@ 0x7530
 80002a4:	6820      	ldr	r0, [r4, #0]
 80002a6:	f001 fcd1 	bl	8001c4c <osTimerStart>
	    if (xTimerIsTimerActive(cancelButtonHandle) != pdFALSE) {
 80002aa:	6830      	ldr	r0, [r6, #0]
 80002ac:	f003 f81e 	bl	80032ec <xTimerIsTimerActive>
 80002b0:	b140      	cbz	r0, 80002c4 <StartReadKeyTask+0x144>
		if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 4, 100);
 80002b2:	f000 fd3d 	bl	8000d30 <ssd1306_GetDisplayOn>
 80002b6:	2264      	movs	r2, #100	@ 0x64
 80002b8:	4b0a      	ldr	r3, [pc, #40]	@ (80002e4 <StartReadKeyTask+0x164>)
 80002ba:	b958      	cbnz	r0, 80002d4 <StartReadKeyTask+0x154>
 80002bc:	2106      	movs	r1, #6
 80002be:	6818      	ldr	r0, [r3, #0]
 80002c0:	f001 fd26 	bl	8001d10 <osMessagePut>
	    osTimerStop(cancelButtonHandle);
 80002c4:	6830      	ldr	r0, [r6, #0]
 80002c6:	f001 fcea 	bl	8001c9e <osTimerStop>
 80002ca:	e77d      	b.n	80001c8 <StartReadKeyTask+0x48>
		    osDelay(1);
 80002cc:	2001      	movs	r0, #1
 80002ce:	f001 fc9c 	bl	8001c0a <osDelay>
 80002d2:	e7e0      	b.n	8000296 <StartReadKeyTask+0x116>
		if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 4, 100);
 80002d4:	2104      	movs	r1, #4
 80002d6:	e7f2      	b.n	80002be <StartReadKeyTask+0x13e>
 80002d8:	2000072c 	.word	0x2000072c
 80002dc:	40010800 	.word	0x40010800
 80002e0:	20000730 	.word	0x20000730
 80002e4:	20000734 	.word	0x20000734
 80002e8:	40010c00 	.word	0x40010c00

080002ec <StartGuiTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGuiTask */
void StartGuiTask(void const * argument)
{
 80002ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* USER CODE BEGIN StartGuiTask */
  osEvent btnEvent;
  uint8_t guiState = 0;
  uint8_t selectedMode = 0;
  uint8_t intermittentModeMenuPointer = 0;
 80002f0:	f04f 0b00 	mov.w	fp, #0
  uint8_t speed = 5;
  uint8_t sleep = 60;
  uint8_t corner = 45;
 80002f4:	f04f 082d 	mov.w	r8, #45	@ 0x2d
  uint8_t sleep = 60;
 80002f8:	263c      	movs	r6, #60	@ 0x3c
  uint8_t speed = 5;
 80002fa:	2705      	movs	r7, #5
  uint8_t guiState = 0;
 80002fc:	465d      	mov	r5, fp
{
 80002fe:	b091      	sub	sp, #68	@ 0x44
	  break;
	case 1:
	  ssd1306_Fill(Black);
	  ssd1306_DrawRectangle(0, 0, 127, 63, White);
	  ssd1306_SetCursor(1,1);
	  ssd1306_WriteString("Постоянный реж.", RuFont_7x13, Black);
 8000300:	4cc9      	ldr	r4, [pc, #804]	@ (8000628 <StartGuiTask+0x33c>)
  uint8_t selectedMode = 0;
 8000302:	f8cd b010 	str.w	fp, [sp, #16]
      btnEvent = osMessageGet(buttonPressedQueueHandle, 100);
 8000306:	4bc9      	ldr	r3, [pc, #804]	@ (800062c <StartGuiTask+0x340>)
 8000308:	2264      	movs	r2, #100	@ 0x64
 800030a:	6819      	ldr	r1, [r3, #0]
 800030c:	a80d      	add	r0, sp, #52	@ 0x34
 800030e:	f001 fd28 	bl	8001d62 <osMessageGet>
 8000312:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
      switch (guiState) {
 8000314:	2d01      	cmp	r5, #1
      btnEvent = osMessageGet(buttonPressedQueueHandle, 100);
 8000316:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800031a:	9303      	str	r3, [sp, #12]
      switch (guiState) {
 800031c:	d06b      	beq.n	80003f6 <StartGuiTask+0x10a>
 800031e:	2d02      	cmp	r5, #2
 8000320:	f000 80af 	beq.w	8000482 <StartGuiTask+0x196>
 8000324:	2d00      	cmp	r5, #0
 8000326:	d157      	bne.n	80003d8 <StartGuiTask+0xec>
	  ssd1306_DrawRectangle(0, 0, 127, 63, White);
 8000328:	f04f 0901 	mov.w	r9, #1
	  ssd1306_Fill(Black);
 800032c:	4628      	mov	r0, r5
 800032e:	f000 fb2f 	bl	8000990 <ssd1306_Fill>
	  ssd1306_DrawRectangle(0, 0, 127, 63, White);
 8000332:	233f      	movs	r3, #63	@ 0x3f
 8000334:	227f      	movs	r2, #127	@ 0x7f
 8000336:	4629      	mov	r1, r5
 8000338:	4628      	mov	r0, r5
 800033a:	f8cd 9000 	str.w	r9, [sp]
 800033e:	f000 fc19 	bl	8000b74 <ssd1306_DrawRectangle>
	  ssd1306_SetCursor(1,1);
 8000342:	4649      	mov	r1, r9
 8000344:	4648      	mov	r0, r9
 8000346:	f000 fbc9 	bl	8000adc <ssd1306_SetCursor>
	  ssd1306_WriteString("Выбор режима", RuFont_7x13, Black);
 800034a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800034e:	462b      	mov	r3, r5
 8000350:	48b7      	ldr	r0, [pc, #732]	@ (8000630 <StartGuiTask+0x344>)
 8000352:	f000 fbaf 	bl	8000ab4 <ssd1306_WriteString>
	  if (selectedMode == 0) {
 8000356:	9b04      	ldr	r3, [sp, #16]
	    ssd1306_SetCursor(4,16);
 8000358:	2110      	movs	r1, #16
 800035a:	2004      	movs	r0, #4
	  if (selectedMode == 0) {
 800035c:	bb3b      	cbnz	r3, 80003ae <StartGuiTask+0xc2>
	    ssd1306_SetCursor(4,16);
 800035e:	f000 fbbd 	bl	8000adc <ssd1306_SetCursor>
	    ssd1306_WriteString("> Постоянный", RuFont_7x13, White);
 8000362:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000366:	464b      	mov	r3, r9
 8000368:	48b2      	ldr	r0, [pc, #712]	@ (8000634 <StartGuiTask+0x348>)
 800036a:	f000 fba3 	bl	8000ab4 <ssd1306_WriteString>
	    ssd1306_SetCursor(4,30);
 800036e:	211e      	movs	r1, #30
 8000370:	2004      	movs	r0, #4
 8000372:	f000 fbb3 	bl	8000adc <ssd1306_SetCursor>
	    ssd1306_WriteString("  Прерывистый", RuFont_7x13, White);
 8000376:	e894 0006 	ldmia.w	r4, {r1, r2}
 800037a:	464b      	mov	r3, r9
 800037c:	48ae      	ldr	r0, [pc, #696]	@ (8000638 <StartGuiTask+0x34c>)
	    ssd1306_WriteString("> Прерывистый", RuFont_7x13, White);
 800037e:	f000 fb99 	bl	8000ab4 <ssd1306_WriteString>
	  if (btnEvent.status == osEventMessage)
 8000382:	9b03      	ldr	r3, [sp, #12]
 8000384:	2b10      	cmp	r3, #16
 8000386:	d126      	bne.n	80003d6 <StartGuiTask+0xea>
	    if (btnEvent.value.v == 0 || btnEvent.value.v == 1)
 8000388:	f1ba 0f01 	cmp.w	sl, #1
 800038c:	d820      	bhi.n	80003d0 <StartGuiTask+0xe4>
	      selectedMode = !selectedMode;
 800038e:	9b04      	ldr	r3, [sp, #16]
 8000390:	f083 0301 	eor.w	r3, r3, #1
 8000394:	9304      	str	r3, [sp, #16]

	}

	if (btnEvent.status == osEventMessage)
	{
	  if (btnEvent.value.v == 0) { //bottom
 8000396:	f1ba 0f06 	cmp.w	sl, #6
 800039a:	d820      	bhi.n	80003de <StartGuiTask+0xf2>
 800039c:	e8df f01a 	tbh	[pc, sl, lsl #1]
 80003a0:	01980198 	.word	0x01980198
 80003a4:	01980198 	.word	0x01980198
 80003a8:	01a60188 	.word	0x01a60188
 80003ac:	01ad      	.short	0x01ad
	    ssd1306_SetCursor(4,16);
 80003ae:	f000 fb95 	bl	8000adc <ssd1306_SetCursor>
	    ssd1306_WriteString("  Постоянный", RuFont_7x13, White);
 80003b2:	e894 0006 	ldmia.w	r4, {r1, r2}
 80003b6:	464b      	mov	r3, r9
 80003b8:	48a0      	ldr	r0, [pc, #640]	@ (800063c <StartGuiTask+0x350>)
 80003ba:	f000 fb7b 	bl	8000ab4 <ssd1306_WriteString>
	    ssd1306_SetCursor(4,30);
 80003be:	211e      	movs	r1, #30
 80003c0:	2004      	movs	r0, #4
 80003c2:	f000 fb8b 	bl	8000adc <ssd1306_SetCursor>
	    ssd1306_WriteString("> Прерывистый", RuFont_7x13, White);
 80003c6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80003ca:	464b      	mov	r3, r9
 80003cc:	489c      	ldr	r0, [pc, #624]	@ (8000640 <StartGuiTask+0x354>)
 80003ce:	e7d6      	b.n	800037e <StartGuiTask+0x92>
	    } else if (btnEvent.value.v == 4)
 80003d0:	f1ba 0f04 	cmp.w	sl, #4
 80003d4:	d009      	beq.n	80003ea <StartGuiTask+0xfe>
  uint8_t guiState = 0;
 80003d6:	2500      	movs	r5, #0
	if (btnEvent.status == osEventMessage)
 80003d8:	9b03      	ldr	r3, [sp, #12]
 80003da:	2b10      	cmp	r3, #16
 80003dc:	d0db      	beq.n	8000396 <StartGuiTask+0xaa>
		  ssd1306_SetDisplayOn(1);
	  }

	}

	ssd1306_UpdateScreen();
 80003de:	f000 fae3 	bl	80009a8 <ssd1306_UpdateScreen>
	osDelay(10);//
 80003e2:	200a      	movs	r0, #10
 80003e4:	f001 fc11 	bl	8001c0a <osDelay>
      btnEvent = osMessageGet(buttonPressedQueueHandle, 100);
 80003e8:	e78d      	b.n	8000306 <StartGuiTask+0x1a>
		  guiState = 1;
 80003ea:	9b04      	ldr	r3, [sp, #16]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	bf14      	ite	ne
 80003f0:	2502      	movne	r5, #2
 80003f2:	2501      	moveq	r5, #1
 80003f4:	e7cf      	b.n	8000396 <StartGuiTask+0xaa>
	  ssd1306_Fill(Black);
 80003f6:	2000      	movs	r0, #0
 80003f8:	f000 faca 	bl	8000990 <ssd1306_Fill>
	  ssd1306_DrawRectangle(0, 0, 127, 63, White);
 80003fc:	2100      	movs	r1, #0
 80003fe:	233f      	movs	r3, #63	@ 0x3f
 8000400:	227f      	movs	r2, #127	@ 0x7f
 8000402:	4608      	mov	r0, r1
 8000404:	9500      	str	r5, [sp, #0]
 8000406:	f000 fbb5 	bl	8000b74 <ssd1306_DrawRectangle>
	  ssd1306_SetCursor(1,1);
 800040a:	4629      	mov	r1, r5
 800040c:	4628      	mov	r0, r5
 800040e:	f000 fb65 	bl	8000adc <ssd1306_SetCursor>
	  ssd1306_WriteString("Постоянный реж.", RuFont_7x13, Black);
 8000412:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000416:	2300      	movs	r3, #0
 8000418:	488a      	ldr	r0, [pc, #552]	@ (8000644 <StartGuiTask+0x358>)
 800041a:	f000 fb4b 	bl	8000ab4 <ssd1306_WriteString>
	  ssd1306_SetCursor(4,16);
 800041e:	2110      	movs	r1, #16
 8000420:	2004      	movs	r0, #4
 8000422:	f000 fb5b 	bl	8000adc <ssd1306_SetCursor>
	  ssd1306_WriteString("> Скорость: ", RuFont_7x13, White);
 8000426:	e894 0006 	ldmia.w	r4, {r1, r2}
 800042a:	462b      	mov	r3, r5
 800042c:	4886      	ldr	r0, [pc, #536]	@ (8000648 <StartGuiTask+0x35c>)
 800042e:	f000 fb41 	bl	8000ab4 <ssd1306_WriteString>
	  ssd1306_SetCursor(88,16);
 8000432:	2110      	movs	r1, #16
 8000434:	2058      	movs	r0, #88	@ 0x58
 8000436:	f000 fb51 	bl	8000adc <ssd1306_SetCursor>
	  sprintf(speedStr, "%d", speed);
 800043a:	463a      	mov	r2, r7
 800043c:	4983      	ldr	r1, [pc, #524]	@ (800064c <StartGuiTask+0x360>)
 800043e:	a80b      	add	r0, sp, #44	@ 0x2c
 8000440:	f003 f9b6 	bl	80037b0 <siprintf>
	  ssd1306_WriteString(speedStr, RuFont_7x13, White);
 8000444:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000448:	462b      	mov	r3, r5
 800044a:	a80b      	add	r0, sp, #44	@ 0x2c
 800044c:	f000 fb32 	bl	8000ab4 <ssd1306_WriteString>
	  if (btnEvent.status == osEventMessage)
 8000450:	9b03      	ldr	r3, [sp, #12]
 8000452:	2b10      	cmp	r3, #16
 8000454:	d1c3      	bne.n	80003de <StartGuiTask+0xf2>
	    if (btnEvent.value.v == 2)
 8000456:	f1ba 0f02 	cmp.w	sl, #2
 800045a:	d105      	bne.n	8000468 <StartGuiTask+0x17c>
		if(speed == 1)
 800045c:	2f01      	cmp	r7, #1
 800045e:	f000 811c 	beq.w	800069a <StartGuiTask+0x3ae>
		  speed--;
 8000462:	3f01      	subs	r7, #1
		  speed++;
 8000464:	b2ff      	uxtb	r7, r7
 8000466:	e796      	b.n	8000396 <StartGuiTask+0xaa>
	    } else if ( btnEvent.value.v == 3)
 8000468:	f1ba 0f03 	cmp.w	sl, #3
 800046c:	d104      	bne.n	8000478 <StartGuiTask+0x18c>
		if(speed == 10)
 800046e:	2f0a      	cmp	r7, #10
 8000470:	f000 8115 	beq.w	800069e <StartGuiTask+0x3b2>
		  speed++;
 8000474:	3701      	adds	r7, #1
 8000476:	e7f5      	b.n	8000464 <StartGuiTask+0x178>
	      else if (btnEvent.value.v == 5)
 8000478:	f1ba 0505 	subs.w	r5, sl, #5
 800047c:	bf18      	it	ne
 800047e:	2501      	movne	r5, #1
 8000480:	e789      	b.n	8000396 <StartGuiTask+0xaa>
	  ssd1306_Fill(Black);
 8000482:	2000      	movs	r0, #0
 8000484:	f000 fa84 	bl	8000990 <ssd1306_Fill>
	  ssd1306_DrawRectangle(0, 0, 127, 63, White);
 8000488:	2100      	movs	r1, #0
 800048a:	2301      	movs	r3, #1
 800048c:	227f      	movs	r2, #127	@ 0x7f
 800048e:	4608      	mov	r0, r1
 8000490:	9300      	str	r3, [sp, #0]
 8000492:	233f      	movs	r3, #63	@ 0x3f
 8000494:	f000 fb6e 	bl	8000b74 <ssd1306_DrawRectangle>
	  ssd1306_SetCursor(1,1);
 8000498:	2101      	movs	r1, #1
 800049a:	4608      	mov	r0, r1
 800049c:	f000 fb1e 	bl	8000adc <ssd1306_SetCursor>
	  ssd1306_WriteString("Прерывистый реж.", RuFont_7x13, Black);
 80004a0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80004a4:	2300      	movs	r3, #0
 80004a6:	486a      	ldr	r0, [pc, #424]	@ (8000650 <StartGuiTask+0x364>)
 80004a8:	f000 fb04 	bl	8000ab4 <ssd1306_WriteString>
	      uint8_t min = sleep / 60;
 80004ac:	233c      	movs	r3, #60	@ 0x3c
 80004ae:	fbb6 f9f3 	udiv	r9, r6, r3
	      sprintf(minStr, "%d", min);
 80004b2:	fa5f f289 	uxtb.w	r2, r9
	      uint8_t sec = sleep % 60;
 80004b6:	fb03 6919 	mls	r9, r3, r9, r6
	      ssd1306_SetCursor(4,16);
 80004ba:	2110      	movs	r1, #16
 80004bc:	2004      	movs	r0, #4
	      sprintf(minStr, "%d", min);
 80004be:	9205      	str	r2, [sp, #20]
	      uint8_t sec = sleep % 60;
 80004c0:	fa5f f989 	uxtb.w	r9, r9
	  if(intermittentModeMenuPointer == 0)
 80004c4:	f1bb 0f00 	cmp.w	fp, #0
 80004c8:	d162      	bne.n	8000590 <StartGuiTask+0x2a4>
	      ssd1306_SetCursor(4,16);
 80004ca:	f000 fb07 	bl	8000adc <ssd1306_SetCursor>
	      ssd1306_WriteString("> Задержка: ", RuFont_7x13, White);
 80004ce:	e894 0006 	ldmia.w	r4, {r1, r2}
 80004d2:	2301      	movs	r3, #1
 80004d4:	485f      	ldr	r0, [pc, #380]	@ (8000654 <StartGuiTask+0x368>)
 80004d6:	f000 faed 	bl	8000ab4 <ssd1306_WriteString>
	      ssd1306_SetCursor(88,16);
 80004da:	2110      	movs	r1, #16
 80004dc:	2058      	movs	r0, #88	@ 0x58
 80004de:	f000 fafd 	bl	8000adc <ssd1306_SetCursor>
	      sprintf(minStr, "%d", min);
 80004e2:	9a05      	ldr	r2, [sp, #20]
 80004e4:	4959      	ldr	r1, [pc, #356]	@ (800064c <StartGuiTask+0x360>)
 80004e6:	a807      	add	r0, sp, #28
 80004e8:	f003 f962 	bl	80037b0 <siprintf>
	      sprintf(secStr, "%d", sec);
 80004ec:	464a      	mov	r2, r9
 80004ee:	4957      	ldr	r1, [pc, #348]	@ (800064c <StartGuiTask+0x360>)
 80004f0:	a808      	add	r0, sp, #32
 80004f2:	f003 f95d 	bl	80037b0 <siprintf>
		timeStr[1] = minStr[0];
 80004f6:	f89d 301c 	ldrb.w	r3, [sp, #28]
		timeStr[0] = '0';
 80004fa:	2230      	movs	r2, #48	@ 0x30
		timeStr[1] = minStr[0];
 80004fc:	f88d 3025 	strb.w	r3, [sp, #37]	@ 0x25
	      timeStr[2] = ':';
 8000500:	233a      	movs	r3, #58	@ 0x3a
 8000502:	f88d 3026 	strb.w	r3, [sp, #38]	@ 0x26
 8000506:	f89d 3020 	ldrb.w	r3, [sp, #32]
	      if(sec <= 9)
 800050a:	f1b9 0f09 	cmp.w	r9, #9
		timeStr[3] = secStr[0];
 800050e:	bf86      	itte	hi
 8000510:	f88d 3027 	strbhi.w	r3, [sp, #39]	@ 0x27
		timeStr[4] = secStr[1];
 8000514:	f89d 3021 	ldrbhi.w	r3, [sp, #33]	@ 0x21
		timeStr[3] = '0';
 8000518:	f88d 2027 	strbls.w	r2, [sp, #39]	@ 0x27
		timeStr[0] = '0';
 800051c:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
		timeStr[4] = secStr[0];
 8000520:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
	      ssd1306_WriteString(timeStr, RuFont_7x13, White);
 8000524:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000528:	2301      	movs	r3, #1
 800052a:	a809      	add	r0, sp, #36	@ 0x24
 800052c:	f000 fac2 	bl	8000ab4 <ssd1306_WriteString>
	      ssd1306_SetCursor(4,30);
 8000530:	211e      	movs	r1, #30
 8000532:	2004      	movs	r0, #4
 8000534:	f000 fad2 	bl	8000adc <ssd1306_SetCursor>
	      ssd1306_WriteString("  Угол: ", RuFont_7x13, White);
 8000538:	e894 0006 	ldmia.w	r4, {r1, r2}
 800053c:	2301      	movs	r3, #1
 800053e:	4846      	ldr	r0, [pc, #280]	@ (8000658 <StartGuiTask+0x36c>)
 8000540:	f000 fab8 	bl	8000ab4 <ssd1306_WriteString>
	      ssd1306_SetCursor(56, 30);
 8000544:	211e      	movs	r1, #30
 8000546:	2038      	movs	r0, #56	@ 0x38
 8000548:	f000 fac8 	bl	8000adc <ssd1306_SetCursor>
	      sprintf(cornerStr, "%d", corner);
 800054c:	4642      	mov	r2, r8
 800054e:	493f      	ldr	r1, [pc, #252]	@ (800064c <StartGuiTask+0x360>)
 8000550:	a80b      	add	r0, sp, #44	@ 0x2c
 8000552:	f003 f92d 	bl	80037b0 <siprintf>
	      ssd1306_WriteString(cornerStr, RuFont_7x13, White);
 8000556:	e894 0006 	ldmia.w	r4, {r1, r2}
 800055a:	2301      	movs	r3, #1
 800055c:	a80b      	add	r0, sp, #44	@ 0x2c
	      ssd1306_WriteString(cornerStr, RuFont_7x13, White);
 800055e:	f000 faa9 	bl	8000ab4 <ssd1306_WriteString>
	  if (btnEvent.status == osEventMessage)
 8000562:	9b03      	ldr	r3, [sp, #12]
 8000564:	2b10      	cmp	r3, #16
 8000566:	f47f af3a 	bne.w	80003de <StartGuiTask+0xf2>
	    if (btnEvent.value.v == 0 || btnEvent.value.v == 1)
 800056a:	f1ba 0f05 	cmp.w	sl, #5
 800056e:	f63f af12 	bhi.w	8000396 <StartGuiTask+0xaa>
 8000572:	a301      	add	r3, pc, #4	@ (adr r3, 8000578 <StartGuiTask+0x28c>)
 8000574:	f853 f02a 	ldr.w	pc, [r3, sl, lsl #2]
 8000578:	08000665 	.word	0x08000665
 800057c:	08000665 	.word	0x08000665
 8000580:	0800067b 	.word	0x0800067b
 8000584:	0800066b 	.word	0x0800066b
 8000588:	08000397 	.word	0x08000397
 800058c:	080003d7 	.word	0x080003d7
	      ssd1306_SetCursor(4,16);
 8000590:	f000 faa4 	bl	8000adc <ssd1306_SetCursor>
	      ssd1306_WriteString("  Задержка: ", RuFont_7x13, White);
 8000594:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000598:	2301      	movs	r3, #1
 800059a:	4830      	ldr	r0, [pc, #192]	@ (800065c <StartGuiTask+0x370>)
 800059c:	f000 fa8a 	bl	8000ab4 <ssd1306_WriteString>
	      ssd1306_SetCursor(88,16);
 80005a0:	2110      	movs	r1, #16
 80005a2:	2058      	movs	r0, #88	@ 0x58
 80005a4:	f000 fa9a 	bl	8000adc <ssd1306_SetCursor>
	      sprintf(minStr, "%d", min);
 80005a8:	9a05      	ldr	r2, [sp, #20]
 80005aa:	4928      	ldr	r1, [pc, #160]	@ (800064c <StartGuiTask+0x360>)
 80005ac:	a807      	add	r0, sp, #28
 80005ae:	f003 f8ff 	bl	80037b0 <siprintf>
	      sprintf(secStr, "%d", sec);
 80005b2:	464a      	mov	r2, r9
 80005b4:	4925      	ldr	r1, [pc, #148]	@ (800064c <StartGuiTask+0x360>)
 80005b6:	a808      	add	r0, sp, #32
 80005b8:	f003 f8fa 	bl	80037b0 <siprintf>
		timeStr[1] = minStr[0];
 80005bc:	f89d 301c 	ldrb.w	r3, [sp, #28]
		timeStr[0] = '0';
 80005c0:	2230      	movs	r2, #48	@ 0x30
		timeStr[1] = minStr[0];
 80005c2:	f88d 302d 	strb.w	r3, [sp, #45]	@ 0x2d
	      timeStr[2] = ':';
 80005c6:	233a      	movs	r3, #58	@ 0x3a
 80005c8:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 80005cc:	f89d 3020 	ldrb.w	r3, [sp, #32]
	      if(sec <= 9)
 80005d0:	f1b9 0f09 	cmp.w	r9, #9
		timeStr[3] = secStr[0];
 80005d4:	bf86      	itte	hi
 80005d6:	f88d 302f 	strbhi.w	r3, [sp, #47]	@ 0x2f
		timeStr[4] = secStr[1];
 80005da:	f89d 3021 	ldrbhi.w	r3, [sp, #33]	@ 0x21
		timeStr[3] = '0';
 80005de:	f88d 202f 	strbls.w	r2, [sp, #47]	@ 0x2f
		timeStr[0] = '0';
 80005e2:	f88d 202c 	strb.w	r2, [sp, #44]	@ 0x2c
		timeStr[4] = secStr[0];
 80005e6:	f88d 3030 	strb.w	r3, [sp, #48]	@ 0x30
	      ssd1306_WriteString(timeStr, RuFont_7x13, White);
 80005ea:	e894 0006 	ldmia.w	r4, {r1, r2}
 80005ee:	2301      	movs	r3, #1
 80005f0:	a80b      	add	r0, sp, #44	@ 0x2c
 80005f2:	f000 fa5f 	bl	8000ab4 <ssd1306_WriteString>
	      ssd1306_SetCursor(4,30);
 80005f6:	211e      	movs	r1, #30
 80005f8:	2004      	movs	r0, #4
 80005fa:	f000 fa6f 	bl	8000adc <ssd1306_SetCursor>
	      ssd1306_WriteString("> Угол: ", RuFont_7x13, White);
 80005fe:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000602:	2301      	movs	r3, #1
 8000604:	4816      	ldr	r0, [pc, #88]	@ (8000660 <StartGuiTask+0x374>)
 8000606:	f000 fa55 	bl	8000ab4 <ssd1306_WriteString>
	      ssd1306_SetCursor(56, 30);
 800060a:	211e      	movs	r1, #30
 800060c:	2038      	movs	r0, #56	@ 0x38
 800060e:	f000 fa65 	bl	8000adc <ssd1306_SetCursor>
	      sprintf(cornerStr, "%d", corner);
 8000612:	4642      	mov	r2, r8
 8000614:	490d      	ldr	r1, [pc, #52]	@ (800064c <StartGuiTask+0x360>)
 8000616:	a809      	add	r0, sp, #36	@ 0x24
 8000618:	f003 f8ca 	bl	80037b0 <siprintf>
	      ssd1306_WriteString(cornerStr, RuFont_7x13, White);
 800061c:	e894 0006 	ldmia.w	r4, {r1, r2}
 8000620:	2301      	movs	r3, #1
 8000622:	a809      	add	r0, sp, #36	@ 0x24
 8000624:	e79b      	b.n	800055e <StartGuiTask+0x272>
 8000626:	bf00      	nop
 8000628:	20000000 	.word	0x20000000
 800062c:	20000734 	.word	0x20000734
 8000630:	08004170 	.word	0x08004170
 8000634:	0800417d 	.word	0x0800417d
 8000638:	0800418a 	.word	0x0800418a
 800063c:	08004198 	.word	0x08004198
 8000640:	080041a5 	.word	0x080041a5
 8000644:	080041b3 	.word	0x080041b3
 8000648:	080041c3 	.word	0x080041c3
 800064c:	080041d0 	.word	0x080041d0
 8000650:	080041d3 	.word	0x080041d3
 8000654:	080041e4 	.word	0x080041e4
 8000658:	080041f1 	.word	0x080041f1
 800065c:	080041fa 	.word	0x080041fa
 8000660:	08004207 	.word	0x08004207
		intermittentModeMenuPointer = !intermittentModeMenuPointer;
 8000664:	f08b 0b01 	eor.w	fp, fp, #1
 8000668:	e695      	b.n	8000396 <StartGuiTask+0xaa>
		if(intermittentModeMenuPointer == 0)
 800066a:	f1bb 0f00 	cmp.w	fp, #0
 800066e:	d10b      	bne.n	8000688 <StartGuiTask+0x39c>
		    if(sleep == 250)
 8000670:	2efa      	cmp	r6, #250	@ 0xfa
 8000672:	d016      	beq.n	80006a2 <StartGuiTask+0x3b6>
		      sleep+=10;
 8000674:	360a      	adds	r6, #10
		      sleep-=10;
 8000676:	b2f6      	uxtb	r6, r6
 8000678:	e68d      	b.n	8000396 <StartGuiTask+0xaa>
		if(intermittentModeMenuPointer == 0)
 800067a:	f1bb 0f00 	cmp.w	fp, #0
 800067e:	d103      	bne.n	8000688 <StartGuiTask+0x39c>
		    if(sleep == 10)
 8000680:	2e0a      	cmp	r6, #10
 8000682:	d010      	beq.n	80006a6 <StartGuiTask+0x3ba>
		      sleep-=10;
 8000684:	3e0a      	subs	r6, #10
 8000686:	e7f6      	b.n	8000676 <StartGuiTask+0x38a>
		    if(corner == 45)
 8000688:	f1b8 0f2d 	cmp.w	r8, #45	@ 0x2d
 800068c:	d00d      	beq.n	80006aa <StartGuiTask+0x3be>
		      corner = 45;
 800068e:	f1b8 0f5a 	cmp.w	r8, #90	@ 0x5a
 8000692:	bf08      	it	eq
 8000694:	f04f 082d 	moveq.w	r8, #45	@ 0x2d
 8000698:	e67d      	b.n	8000396 <StartGuiTask+0xaa>
		  speed = 10;
 800069a:	270a      	movs	r7, #10
 800069c:	e67b      	b.n	8000396 <StartGuiTask+0xaa>
		  speed = 1;
 800069e:	462f      	mov	r7, r5
 80006a0:	e679      	b.n	8000396 <StartGuiTask+0xaa>
		      sleep = 10;
 80006a2:	260a      	movs	r6, #10
 80006a4:	e677      	b.n	8000396 <StartGuiTask+0xaa>
		      sleep = 250;
 80006a6:	26fa      	movs	r6, #250	@ 0xfa
 80006a8:	e675      	b.n	8000396 <StartGuiTask+0xaa>
			corner = 90;
 80006aa:	f04f 085a 	mov.w	r8, #90	@ 0x5a
 80006ae:	e672      	b.n	8000396 <StartGuiTask+0xaa>
		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 80006b0:	2201      	movs	r2, #1
 80006b2:	2110      	movs	r1, #16
 80006b4:	4813      	ldr	r0, [pc, #76]	@ (8000704 <StartGuiTask+0x418>)
 80006b6:	f000 fd87 	bl	80011c8 <HAL_GPIO_WritePin>
		  osDelay(50);
 80006ba:	2032      	movs	r0, #50	@ 0x32
 80006bc:	f001 faa5 	bl	8001c0a <osDelay>
		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 80006c0:	4810      	ldr	r0, [pc, #64]	@ (8000704 <StartGuiTask+0x418>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	2110      	movs	r1, #16
 80006c6:	f000 fd7f 	bl	80011c8 <HAL_GPIO_WritePin>
		  osDelay(50);
 80006ca:	2032      	movs	r0, #50	@ 0x32
 80006cc:	f001 fa9d 	bl	8001c0a <osDelay>
		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 80006d0:	480c      	ldr	r0, [pc, #48]	@ (8000704 <StartGuiTask+0x418>)
 80006d2:	2201      	movs	r2, #1
 80006d4:	2110      	movs	r1, #16
 80006d6:	f000 fd77 	bl	80011c8 <HAL_GPIO_WritePin>
		  osDelay(30);
 80006da:	201e      	movs	r0, #30
		  osDelay(250);
 80006dc:	f001 fa95 	bl	8001c0a <osDelay>
		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2110      	movs	r1, #16
 80006e4:	4807      	ldr	r0, [pc, #28]	@ (8000704 <StartGuiTask+0x418>)
 80006e6:	f000 fd6f 	bl	80011c8 <HAL_GPIO_WritePin>
 80006ea:	e678      	b.n	80003de <StartGuiTask+0xf2>
		  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, 1);
 80006ec:	4805      	ldr	r0, [pc, #20]	@ (8000704 <StartGuiTask+0x418>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	2110      	movs	r1, #16
 80006f2:	f000 fd69 	bl	80011c8 <HAL_GPIO_WritePin>
		  osDelay(250);
 80006f6:	20fa      	movs	r0, #250	@ 0xfa
 80006f8:	e7f0      	b.n	80006dc <StartGuiTask+0x3f0>
		  ssd1306_SetDisplayOn(1);
 80006fa:	2001      	movs	r0, #1
 80006fc:	f000 faa6 	bl	8000c4c <ssd1306_SetDisplayOn>
 8000700:	e66d      	b.n	80003de <StartGuiTask+0xf2>
 8000702:	bf00      	nop
 8000704:	40010800 	.word	0x40010800

08000708 <screenTimeoutCallback>:

/* screenTimeoutCallback function */
void screenTimeoutCallback(void const * argument)
{
  /* USER CODE BEGIN screenTimeoutCallback */
  ssd1306_SetDisplayOn(0);
 8000708:	2000      	movs	r0, #0
 800070a:	f000 ba9f 	b.w	8000c4c <ssd1306_SetDisplayOn>
	...

08000710 <cancelButtonCallback>:
{
 8000710:	b508      	push	{r3, lr}
  if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 5, 100);
 8000712:	f000 fb0d 	bl	8000d30 <ssd1306_GetDisplayOn>
 8000716:	2264      	movs	r2, #100	@ 0x64
 8000718:	4b04      	ldr	r3, [pc, #16]	@ (800072c <cancelButtonCallback+0x1c>)
 800071a:	b928      	cbnz	r0, 8000728 <cancelButtonCallback+0x18>
 800071c:	2106      	movs	r1, #6
 800071e:	6818      	ldr	r0, [r3, #0]
}
 8000720:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  if (ssd1306_GetDisplayOn()==0) osMessagePut(buttonPressedQueueHandle, 6, 100); else osMessagePut(buttonPressedQueueHandle, 5, 100);
 8000724:	f001 baf4 	b.w	8001d10 <osMessagePut>
 8000728:	2105      	movs	r1, #5
 800072a:	e7f8      	b.n	800071e <cancelButtonCallback+0xe>
 800072c:	20000734 	.word	0x20000734

08000730 <SystemClock_Config>:
{
 8000730:	b510      	push	{r4, lr}
 8000732:	b090      	sub	sp, #64	@ 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000734:	2214      	movs	r2, #20
 8000736:	2100      	movs	r1, #0
 8000738:	a808      	add	r0, sp, #32
 800073a:	f003 f859 	bl	80037f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073e:	2214      	movs	r2, #20
 8000740:	2100      	movs	r1, #0
 8000742:	a801      	add	r0, sp, #4
 8000744:	f003 f854 	bl	80037f0 <memset>
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000748:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800074a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800074e:	2201      	movs	r2, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000750:	e9cd 430d 	strd	r4, r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000754:	e9cd 2306 	strd	r2, r3, [sp, #24]
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000758:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075e:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000760:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000762:	f000 ffb7 	bl	80016d4 <HAL_RCC_OscConfig>
 8000766:	b108      	cbz	r0, 800076c <SystemClock_Config+0x3c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000768:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800076a:	e7fe      	b.n	800076a <SystemClock_Config+0x3a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800076c:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800076e:	e9cd 3401 	strd	r3, r4, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000772:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000776:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000778:	e9cd 3004 	strd	r3, r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800077c:	4621      	mov	r1, r4
 800077e:	a801      	add	r0, sp, #4
 8000780:	f001 f96a 	bl	8001a58 <HAL_RCC_ClockConfig>
 8000784:	b108      	cbz	r0, 800078a <SystemClock_Config+0x5a>
 8000786:	b672      	cpsid	i
  while (1)
 8000788:	e7fe      	b.n	8000788 <SystemClock_Config+0x58>
}
 800078a:	b010      	add	sp, #64	@ 0x40
 800078c:	bd10      	pop	{r4, pc}
	...

08000790 <main>:
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000790:	2410      	movs	r4, #16
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b09c      	sub	sp, #112	@ 0x70
  HAL_Init();
 8000796:	f000 fbb3 	bl	8000f00 <HAL_Init>
  SystemClock_Config();
 800079a:	f7ff ffc9 	bl	8000730 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800079e:	4622      	mov	r2, r4
 80007a0:	2100      	movs	r1, #0
 80007a2:	a815      	add	r0, sp, #84	@ 0x54
 80007a4:	f003 f824 	bl	80037f0 <memset>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007a8:	4b54      	ldr	r3, [pc, #336]	@ (80008fc <main+0x16c>)
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 80007aa:	4621      	mov	r1, r4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ac:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 80007ae:	4854      	ldr	r0, [pc, #336]	@ (8000900 <main+0x170>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007b0:	f042 0220 	orr.w	r2, r2, #32
 80007b4:	619a      	str	r2, [r3, #24]
 80007b6:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ba:	f002 0220 	and.w	r2, r2, #32
 80007be:	9203      	str	r2, [sp, #12]
 80007c0:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c2:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c4:	2702      	movs	r7, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007c6:	f042 0204 	orr.w	r2, r2, #4
 80007ca:	619a      	str	r2, [r3, #24]
 80007cc:	699a      	ldr	r2, [r3, #24]
 80007ce:	f002 0204 	and.w	r2, r2, #4
 80007d2:	9204      	str	r2, [sp, #16]
 80007d4:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d6:	699a      	ldr	r2, [r3, #24]
 80007d8:	f042 0208 	orr.w	r2, r2, #8
 80007dc:	619a      	str	r2, [r3, #24]
 80007de:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e2:	f003 0308 	and.w	r3, r3, #8
 80007e6:	9305      	str	r3, [sp, #20]
 80007e8:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(buzzer_GPIO_Port, buzzer_Pin, GPIO_PIN_RESET);
 80007ea:	f000 fced 	bl	80011c8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = buzzer_Pin;
 80007ee:	9415      	str	r4, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2400      	movs	r4, #0
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 80007f2:	4843      	ldr	r0, [pc, #268]	@ (8000900 <main+0x170>)
 80007f4:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f6:	e9cd 6416 	strd	r6, r4, [sp, #88]	@ 0x58
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007fa:	9718      	str	r7, [sp, #96]	@ 0x60
  HAL_GPIO_Init(buzzer_GPIO_Port, &GPIO_InitStruct);
 80007fc:	f000 fc0c 	bl	8001018 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = btn_bottom_Pin;
 8000800:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
  HAL_GPIO_Init(btn_bottom_GPIO_Port, &GPIO_InitStruct);
 8000804:	483e      	ldr	r0, [pc, #248]	@ (8000900 <main+0x170>)
 8000806:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000808:	e9cd 3415 	strd	r3, r4, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800080c:	9617      	str	r6, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(btn_bottom_GPIO_Port, &GPIO_InitStruct);
 800080e:	f000 fc03 	bl	8001018 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = btn_left_Pin|btn_ok_Pin|btn_right_Pin|btn_top_Pin;
 8000812:	23f0      	movs	r3, #240	@ 0xf0
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000814:	483b      	ldr	r0, [pc, #236]	@ (8000904 <main+0x174>)
 8000816:	a915      	add	r1, sp, #84	@ 0x54
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000818:	e9cd 3415 	strd	r3, r4, [sp, #84]	@ 0x54
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800081c:	9617      	str	r6, [sp, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800081e:	f000 fbfb 	bl	8001018 <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8000822:	4839      	ldr	r0, [pc, #228]	@ (8000908 <main+0x178>)
  hi2c1.Init.ClockSpeed = 100000;
 8000824:	4a39      	ldr	r2, [pc, #228]	@ (800090c <main+0x17c>)
 8000826:	4b3a      	ldr	r3, [pc, #232]	@ (8000910 <main+0x180>)
  hi2c1.Init.OwnAddress1 = 0;
 8000828:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hi2c1.Init.ClockSpeed = 100000;
 800082c:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000830:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000834:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000838:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800083c:	6204      	str	r4, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083e:	f000 fe11 	bl	8001464 <HAL_I2C_Init>
 8000842:	4605      	mov	r5, r0
 8000844:	b108      	cbz	r0, 800084a <main+0xba>
 8000846:	b672      	cpsid	i
  while (1)
 8000848:	e7fe      	b.n	8000848 <main+0xb8>
  ssd1306_Init();
 800084a:	f000 fa0d 	bl	8000c68 <ssd1306_Init>
  ssd1306_Fill(Black);
 800084e:	4628      	mov	r0, r5
 8000850:	f000 f89e 	bl	8000990 <ssd1306_Fill>
  ssd1306_DrawBitmap(43, 2, logo, 42, 42, White);
 8000854:	232a      	movs	r3, #42	@ 0x2a
 8000856:	4639      	mov	r1, r7
 8000858:	4a2e      	ldr	r2, [pc, #184]	@ (8000914 <main+0x184>)
 800085a:	9300      	str	r3, [sp, #0]
 800085c:	202b      	movs	r0, #43	@ 0x2b
 800085e:	9601      	str	r6, [sp, #4]
 8000860:	f000 f9b0 	bl	8000bc4 <ssd1306_DrawBitmap>
  ssd1306_SetCursor(11, 46);
 8000864:	212e      	movs	r1, #46	@ 0x2e
 8000866:	200b      	movs	r0, #11
 8000868:	f000 f938 	bl	8000adc <ssd1306_SetCursor>
  ssd1306_WriteString("АвтоШашлык V0.1", RuFont_7x13, White);
 800086c:	4a2a      	ldr	r2, [pc, #168]	@ (8000918 <main+0x188>)
 800086e:	4633      	mov	r3, r6
 8000870:	ca06      	ldmia	r2, {r1, r2}
 8000872:	482a      	ldr	r0, [pc, #168]	@ (800091c <main+0x18c>)
 8000874:	f000 f91e 	bl	8000ab4 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8000878:	f000 f896 	bl	80009a8 <ssd1306_UpdateScreen>
  osTimerDef(cancelButton, cancelButtonCallback);
 800087c:	4b28      	ldr	r3, [pc, #160]	@ (8000920 <main+0x190>)
  cancelButtonHandle = osTimerCreate(osTimer(cancelButton), osTimerOnce, NULL);
 800087e:	462a      	mov	r2, r5
 8000880:	4629      	mov	r1, r5
 8000882:	a806      	add	r0, sp, #24
  osTimerDef(cancelButton, cancelButtonCallback);
 8000884:	e9cd 3506 	strd	r3, r5, [sp, #24]
  cancelButtonHandle = osTimerCreate(osTimer(cancelButton), osTimerOnce, NULL);
 8000888:	f001 f9c8 	bl	8001c1c <osTimerCreate>
 800088c:	4b25      	ldr	r3, [pc, #148]	@ (8000924 <main+0x194>)
  screenTimeoutTimerHandle = osTimerCreate(osTimer(screenTimeoutTimer), osTimerOnce, NULL);
 800088e:	462a      	mov	r2, r5
  cancelButtonHandle = osTimerCreate(osTimer(cancelButton), osTimerOnce, NULL);
 8000890:	6018      	str	r0, [r3, #0]
  osTimerDef(screenTimeoutTimer, screenTimeoutCallback);
 8000892:	4b25      	ldr	r3, [pc, #148]	@ (8000928 <main+0x198>)
  screenTimeoutTimerHandle = osTimerCreate(osTimer(screenTimeoutTimer), osTimerOnce, NULL);
 8000894:	4629      	mov	r1, r5
 8000896:	a808      	add	r0, sp, #32
  osTimerDef(screenTimeoutTimer, screenTimeoutCallback);
 8000898:	e9cd 3508 	strd	r3, r5, [sp, #32]
  screenTimeoutTimerHandle = osTimerCreate(osTimer(screenTimeoutTimer), osTimerOnce, NULL);
 800089c:	f001 f9be 	bl	8001c1c <osTimerCreate>
  osMessageQDef(buttonPressedQueue, 8, uint8_t);
 80008a0:	4c22      	ldr	r4, [pc, #136]	@ (800092c <main+0x19c>)
  screenTimeoutTimerHandle = osTimerCreate(osTimer(screenTimeoutTimer), osTimerOnce, NULL);
 80008a2:	4b23      	ldr	r3, [pc, #140]	@ (8000930 <main+0x1a0>)
  osMessageQDef(buttonPressedQueue, 8, uint8_t);
 80008a4:	ae0a      	add	r6, sp, #40	@ 0x28
  screenTimeoutTimerHandle = osTimerCreate(osTimer(screenTimeoutTimer), osTimerOnce, NULL);
 80008a6:	6018      	str	r0, [r3, #0]
  osMessageQDef(buttonPressedQueue, 8, uint8_t);
 80008a8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008ac:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
  buttonPressedQueueHandle = osMessageCreate(osMessageQ(buttonPressedQueue), NULL);
 80008b0:	4629      	mov	r1, r5
 80008b2:	4630      	mov	r0, r6
 80008b4:	f001 fa1a 	bl	8001cec <osMessageCreate>
 80008b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000934 <main+0x1a4>)
  osThreadDef(readKeyTask, StartReadKeyTask, osPriorityAboveNormal, 0, 128);
 80008ba:	f104 0710 	add.w	r7, r4, #16
 80008be:	ae0e      	add	r6, sp, #56	@ 0x38
  buttonPressedQueueHandle = osMessageCreate(osMessageQ(buttonPressedQueue), NULL);
 80008c0:	6018      	str	r0, [r3, #0]
  osThreadDef(readKeyTask, StartReadKeyTask, osPriorityAboveNormal, 0, 128);
 80008c2:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 80008c4:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80008c6:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 80008ca:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  readKeyTaskHandle = osThreadCreate(osThread(readKeyTask), NULL);
 80008ce:	4629      	mov	r1, r5
 80008d0:	a80e      	add	r0, sp, #56	@ 0x38
 80008d2:	f001 f972 	bl	8001bba <osThreadCreate>
 80008d6:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <main+0x1a8>)
  osThreadDef(guiTask, StartGuiTask, osPriorityNormal, 0, 128);
 80008d8:	ae15      	add	r6, sp, #84	@ 0x54
 80008da:	342c      	adds	r4, #44	@ 0x2c
  readKeyTaskHandle = osThreadCreate(osThread(readKeyTask), NULL);
 80008dc:	6018      	str	r0, [r3, #0]
  osThreadDef(guiTask, StartGuiTask, osPriorityNormal, 0, 128);
 80008de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80008e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80008e6:	e886 0007 	stmia.w	r6, {r0, r1, r2}
  guiTaskHandle = osThreadCreate(osThread(guiTask), NULL);
 80008ea:	4629      	mov	r1, r5
 80008ec:	a815      	add	r0, sp, #84	@ 0x54
 80008ee:	f001 f964 	bl	8001bba <osThreadCreate>
 80008f2:	4b12      	ldr	r3, [pc, #72]	@ (800093c <main+0x1ac>)
 80008f4:	6018      	str	r0, [r3, #0]
  osKernelStart();
 80008f6:	f001 f95b 	bl	8001bb0 <osKernelStart>
  while (1)
 80008fa:	e7fe      	b.n	80008fa <main+0x16a>
 80008fc:	40021000 	.word	0x40021000
 8000900:	40010800 	.word	0x40010800
 8000904:	40010c00 	.word	0x40010c00
 8000908:	20000740 	.word	0x20000740
 800090c:	40005400 	.word	0x40005400
 8000910:	000186a0 	.word	0x000186a0
 8000914:	08004234 	.word	0x08004234
 8000918:	20000000 	.word	0x20000000
 800091c:	08004210 	.word	0x08004210
 8000920:	08000711 	.word	0x08000711
 8000924:	20000730 	.word	0x20000730
 8000928:	08000709 	.word	0x08000709
 800092c:	08004128 	.word	0x08004128
 8000930:	2000072c 	.word	0x2000072c
 8000934:	20000734 	.word	0x20000734
 8000938:	2000073c 	.word	0x2000073c
 800093c:	20000738 	.word	0x20000738

08000940 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000940:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000942:	2301      	movs	r3, #1
 8000944:	f04f 32ff 	mov.w	r2, #4294967295
 8000948:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800094c:	f10d 0217 	add.w	r2, sp, #23
void ssd1306_WriteCommand(uint8_t byte) {
 8000950:	f88d 0017 	strb.w	r0, [sp, #23]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000954:	9200      	str	r2, [sp, #0]
 8000956:	2178      	movs	r1, #120	@ 0x78
 8000958:	2200      	movs	r2, #0
 800095a:	4803      	ldr	r0, [pc, #12]	@ (8000968 <ssd1306_WriteCommand+0x28>)
 800095c:	f000 fe2a 	bl	80015b4 <HAL_I2C_Mem_Write>
}
 8000960:	b007      	add	sp, #28
 8000962:	f85d fb04 	ldr.w	pc, [sp], #4
 8000966:	bf00      	nop
 8000968:	20000740 	.word	0x20000740

0800096c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800096c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800096e:	f04f 33ff 	mov.w	r3, #4294967295
 8000972:	b289      	uxth	r1, r1
 8000974:	e9cd 0100 	strd	r0, r1, [sp]
 8000978:	9302      	str	r3, [sp, #8]
 800097a:	2240      	movs	r2, #64	@ 0x40
 800097c:	2301      	movs	r3, #1
 800097e:	2178      	movs	r1, #120	@ 0x78
 8000980:	4802      	ldr	r0, [pc, #8]	@ (800098c <ssd1306_WriteData+0x20>)
 8000982:	f000 fe17 	bl	80015b4 <HAL_I2C_Mem_Write>
}
 8000986:	b005      	add	sp, #20
 8000988:	f85d fb04 	ldr.w	pc, [sp], #4
 800098c:	20000740 	.word	0x20000740

08000990 <ssd1306_Fill>:
    SSD1306.Initialized = 1;
}

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000990:	2800      	cmp	r0, #0
 8000992:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000996:	bf14      	ite	ne
 8000998:	21ff      	movne	r1, #255	@ 0xff
 800099a:	2100      	moveq	r1, #0
 800099c:	4801      	ldr	r0, [pc, #4]	@ (80009a4 <ssd1306_Fill+0x14>)
 800099e:	f002 bf27 	b.w	80037f0 <memset>
 80009a2:	bf00      	nop
 80009a4:	2000079a 	.word	0x2000079a

080009a8 <ssd1306_UpdateScreen>:
}

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80009a8:	b538      	push	{r3, r4, r5, lr}
 80009aa:	24b0      	movs	r4, #176	@ 0xb0
 80009ac:	4d0a      	ldr	r5, [pc, #40]	@ (80009d8 <ssd1306_UpdateScreen+0x30>)
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80009ae:	4620      	mov	r0, r4
 80009b0:	f7ff ffc6 	bl	8000940 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80009b4:	2000      	movs	r0, #0
 80009b6:	f7ff ffc3 	bl	8000940 <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80009ba:	3401      	adds	r4, #1
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80009bc:	2010      	movs	r0, #16
 80009be:	f7ff ffbf 	bl	8000940 <ssd1306_WriteCommand>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80009c2:	b2e4      	uxtb	r4, r4
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80009c4:	4628      	mov	r0, r5
 80009c6:	2180      	movs	r1, #128	@ 0x80
 80009c8:	f7ff ffd0 	bl	800096c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80009cc:	2cb8      	cmp	r4, #184	@ 0xb8
 80009ce:	f105 0580 	add.w	r5, r5, #128	@ 0x80
 80009d2:	d1ec      	bne.n	80009ae <ssd1306_UpdateScreen+0x6>
    }
}
 80009d4:	bd38      	pop	{r3, r4, r5, pc}
 80009d6:	bf00      	nop
 80009d8:	2000079a 	.word	0x2000079a

080009dc <ssd1306_DrawPixel>:
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80009dc:	0603      	lsls	r3, r0, #24
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80009de:	b530      	push	{r4, r5, lr}
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80009e0:	d410      	bmi.n	8000a04 <ssd1306_DrawPixel+0x28>
 80009e2:	293f      	cmp	r1, #63	@ 0x3f
 80009e4:	d80e      	bhi.n	8000a04 <ssd1306_DrawPixel+0x28>
        return;
    }
   
    // Draw in the right color
    if(color == White) {
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80009e6:	2401      	movs	r4, #1
 80009e8:	08cb      	lsrs	r3, r1, #3
 80009ea:	4d07      	ldr	r5, [pc, #28]	@ (8000a08 <ssd1306_DrawPixel+0x2c>)
 80009ec:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
 80009f0:	5c2b      	ldrb	r3, [r5, r0]
 80009f2:	f001 0107 	and.w	r1, r1, #7
 80009f6:	fa04 f101 	lsl.w	r1, r4, r1
    if(color == White) {
 80009fa:	42a2      	cmp	r2, r4
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80009fc:	bf0c      	ite	eq
 80009fe:	430b      	orreq	r3, r1
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000a00:	438b      	bicne	r3, r1
 8000a02:	542b      	strb	r3, [r5, r0]
    }
}
 8000a04:	bd30      	pop	{r4, r5, pc}
 8000a06:	bf00      	nop
 8000a08:	2000079a 	.word	0x2000079a

08000a0c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000a0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a10:	4604      	mov	r4, r0
 8000a12:	b087      	sub	sp, #28
 8000a14:	a806      	add	r0, sp, #24
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 255)
 8000a16:	2c1f      	cmp	r4, #31
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000a18:	e900 0006 	stmdb	r0, {r1, r2}
 8000a1c:	9301      	str	r3, [sp, #4]
    if (ch < 32 || ch > 255)
 8000a1e:	d944      	bls.n	8000aaa <ssd1306_WriteChar+0x9e>
        return 0;

    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000a20:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 8000ab0 <ssd1306_WriteChar+0xa4>
 8000a24:	f89d 6010 	ldrb.w	r6, [sp, #16]
 8000a28:	f8b9 a000 	ldrh.w	sl, [r9]
 8000a2c:	eb0a 0306 	add.w	r3, sl, r6
 8000a30:	2b80      	cmp	r3, #128	@ 0x80
 8000a32:	dc3a      	bgt.n	8000aaa <ssd1306_WriteChar+0x9e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000a34:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 8000a38:	f89d b011 	ldrb.w	fp, [sp, #17]
 8000a3c:	9300      	str	r3, [sp, #0]
 8000a3e:	eb03 020b 	add.w	r2, r3, fp
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000a42:	2a40      	cmp	r2, #64	@ 0x40
 8000a44:	dc31      	bgt.n	8000aaa <ssd1306_WriteChar+0x9e>
        // Not enough space on current line
        return 0;
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000a46:	f04f 0800 	mov.w	r8, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000a4a:	f1a4 0520 	sub.w	r5, r4, #32
 8000a4e:	fb0b f505 	mul.w	r5, fp, r5
 8000a52:	006d      	lsls	r5, r5, #1
    for(i = 0; i < Font.FontHeight; i++) {
 8000a54:	45c3      	cmp	fp, r8
 8000a56:	d806      	bhi.n	8000a66 <ssd1306_WriteChar+0x5a>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000a58:	4456      	add	r6, sl
 8000a5a:	f8a9 6000 	strh.w	r6, [r9]
    
    // Return written char for validation
    return ch;
}
 8000a5e:	4620      	mov	r0, r4
 8000a60:	b007      	add	sp, #28
 8000a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        for(j = 0; j < Font.FontWidth; j++) {
 8000a66:	2700      	movs	r7, #0
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000a68:	9a05      	ldr	r2, [sp, #20]
 8000a6a:	5b53      	ldrh	r3, [r2, r5]
 8000a6c:	9303      	str	r3, [sp, #12]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000a6e:	9b00      	ldr	r3, [sp, #0]
 8000a70:	eb08 0203 	add.w	r2, r8, r3
 8000a74:	b2d3      	uxtb	r3, r2
 8000a76:	9302      	str	r3, [sp, #8]
        for(j = 0; j < Font.FontWidth; j++) {
 8000a78:	42be      	cmp	r6, r7
 8000a7a:	d803      	bhi.n	8000a84 <ssd1306_WriteChar+0x78>
    for(i = 0; i < Font.FontHeight; i++) {
 8000a7c:	f108 0801 	add.w	r8, r8, #1
 8000a80:	3502      	adds	r5, #2
 8000a82:	e7e7      	b.n	8000a54 <ssd1306_WriteChar+0x48>
            if((b << j) & 0x8000)  {
 8000a84:	9b03      	ldr	r3, [sp, #12]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000a86:	eb07 000a 	add.w	r0, r7, sl
            if((b << j) & 0x8000)  {
 8000a8a:	fa03 f207 	lsl.w	r2, r3, r7
 8000a8e:	0413      	lsls	r3, r2, #16
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000a90:	bf56      	itet	pl
 8000a92:	9b01      	ldrpl	r3, [sp, #4]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000a94:	9a01      	ldrmi	r2, [sp, #4]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000a96:	fab3 f283 	clzpl	r2, r3
 8000a9a:	9902      	ldr	r1, [sp, #8]
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000a9c:	b2c0      	uxtb	r0, r0
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000a9e:	bf58      	it	pl
 8000aa0:	0952      	lsrpl	r2, r2, #5
 8000aa2:	f7ff ff9b 	bl	80009dc <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000aa6:	3701      	adds	r7, #1
 8000aa8:	e7e6      	b.n	8000a78 <ssd1306_WriteChar+0x6c>
        return 0;
 8000aaa:	2400      	movs	r4, #0
 8000aac:	e7d7      	b.n	8000a5e <ssd1306_WriteChar+0x52>
 8000aae:	bf00      	nop
 8000ab0:	20000794 	.word	0x20000794

08000ab4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000ab4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000ab6:	466d      	mov	r5, sp
 8000ab8:	461e      	mov	r6, r3
 8000aba:	e885 0006 	stmia.w	r5, {r1, r2}
 8000abe:	1e44      	subs	r4, r0, #1
    while (*str) {
 8000ac0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
 8000ac4:	b140      	cbz	r0, 8000ad8 <ssd1306_WriteString+0x24>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000ac6:	e895 0006 	ldmia.w	r5, {r1, r2}
 8000aca:	4633      	mov	r3, r6
 8000acc:	f7ff ff9e 	bl	8000a0c <ssd1306_WriteChar>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	7820      	ldrb	r0, [r4, #0]
 8000ad4:	4283      	cmp	r3, r0
 8000ad6:	d0f3      	beq.n	8000ac0 <ssd1306_WriteString+0xc>
        str++;
    }
    
    // Everything ok
    return *str;
}
 8000ad8:	b002      	add	sp, #8
 8000ada:	bd70      	pop	{r4, r5, r6, pc}

08000adc <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
    SSD1306.CurrentX = x;
 8000adc:	4b01      	ldr	r3, [pc, #4]	@ (8000ae4 <ssd1306_SetCursor+0x8>)
 8000ade:	8018      	strh	r0, [r3, #0]
    SSD1306.CurrentY = y;
 8000ae0:	8059      	strh	r1, [r3, #2]
}
 8000ae2:	4770      	bx	lr
 8000ae4:	20000794 	.word	0x20000794

08000ae8 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000ae8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000aec:	4690      	mov	r8, r2
    int32_t deltaX = abs(x2 - x1);
 8000aee:	eba8 0900 	sub.w	r9, r8, r0
    int32_t deltaY = abs(y2 - y1);
 8000af2:	eba3 0a01 	sub.w	sl, r3, r1
    int32_t deltaX = abs(x2 - x1);
 8000af6:	f1b9 0f00 	cmp.w	r9, #0
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000afa:	461e      	mov	r6, r3
    int32_t deltaX = abs(x2 - x1);
 8000afc:	bfb8      	it	lt
 8000afe:	f1c9 0900 	rsblt	r9, r9, #0
    int32_t deltaY = abs(y2 - y1);
 8000b02:	f1ba 0f00 	cmp.w	sl, #0
 8000b06:	bfb8      	it	lt
 8000b08:	f1ca 0a00 	rsblt	sl, sl, #0
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8000b0c:	4580      	cmp	r8, r0
 8000b0e:	bf8c      	ite	hi
 8000b10:	2301      	movhi	r3, #1
 8000b12:	f04f 33ff 	movls.w	r3, #4294967295
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000b16:	4605      	mov	r5, r0
 8000b18:	460c      	mov	r4, r1
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8000b1a:	428e      	cmp	r6, r1
 8000b1c:	bf8c      	ite	hi
 8000b1e:	f04f 0b01 	movhi.w	fp, #1
 8000b22:	f04f 3bff 	movls.w	fp, #4294967295
    int32_t error = deltaX - deltaY;
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8000b26:	4640      	mov	r0, r8
 8000b28:	4631      	mov	r1, r6
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000b2a:	f89d 2030 	ldrb.w	r2, [sp, #48]	@ 0x30
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8000b2e:	9300      	str	r3, [sp, #0]
    int32_t error = deltaX - deltaY;
 8000b30:	eba9 070a 	sub.w	r7, r9, sl
    ssd1306_DrawPixel(x2, y2, color);
 8000b34:	f7ff ff52 	bl	80009dc <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
        ssd1306_DrawPixel(x1, y1, color);
        error2 = error * 2;
        if(error2 > -deltaY) {
 8000b38:	f1ca 0300 	rsb	r3, sl, #0
    while((x1 != x2) || (y1 != y2)) {
 8000b3c:	4545      	cmp	r5, r8
 8000b3e:	d104      	bne.n	8000b4a <ssd1306_Line+0x62>
 8000b40:	42b4      	cmp	r4, r6
 8000b42:	d102      	bne.n	8000b4a <ssd1306_Line+0x62>
            error += deltaX;
            y1 += signY;
        }
    }
    return;
}
 8000b44:	b003      	add	sp, #12
 8000b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        ssd1306_DrawPixel(x1, y1, color);
 8000b4a:	4621      	mov	r1, r4
 8000b4c:	4628      	mov	r0, r5
 8000b4e:	9301      	str	r3, [sp, #4]
 8000b50:	f7ff ff44 	bl	80009dc <ssd1306_DrawPixel>
        if(error2 > -deltaY) {
 8000b54:	9b01      	ldr	r3, [sp, #4]
        error2 = error * 2;
 8000b56:	0079      	lsls	r1, r7, #1
        if(error2 > -deltaY) {
 8000b58:	ebb3 0f47 	cmp.w	r3, r7, lsl #1
            x1 += signX;
 8000b5c:	bfbf      	itttt	lt
 8000b5e:	9800      	ldrlt	r0, [sp, #0]
            error -= deltaY;
 8000b60:	eba7 070a 	sublt.w	r7, r7, sl
            x1 += signX;
 8000b64:	182d      	addlt	r5, r5, r0
 8000b66:	b2ed      	uxtblt	r5, r5
        if(error2 < deltaX) {
 8000b68:	4589      	cmp	r9, r1
            y1 += signY;
 8000b6a:	bfc2      	ittt	gt
 8000b6c:	445c      	addgt	r4, fp
            error += deltaX;
 8000b6e:	444f      	addgt	r7, r9
            y1 += signY;
 8000b70:	b2e4      	uxtbgt	r4, r4
 8000b72:	e7e3      	b.n	8000b3c <ssd1306_Line+0x54>

08000b74 <ssd1306_DrawRectangle>:

    return;
}

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8000b74:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000b78:	461c      	mov	r4, r3
 8000b7a:	4616      	mov	r6, r2
 8000b7c:	460d      	mov	r5, r1
 8000b7e:	4607      	mov	r7, r0
 8000b80:	f89d 8020 	ldrb.w	r8, [sp, #32]
    ssd1306_Line(x1,y1,x2,y1,color);
 8000b84:	460b      	mov	r3, r1
 8000b86:	f8cd 8000 	str.w	r8, [sp]
 8000b8a:	f7ff ffad 	bl	8000ae8 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8000b8e:	4623      	mov	r3, r4
 8000b90:	4632      	mov	r2, r6
 8000b92:	4629      	mov	r1, r5
 8000b94:	4630      	mov	r0, r6
 8000b96:	f8cd 8000 	str.w	r8, [sp]
 8000b9a:	f7ff ffa5 	bl	8000ae8 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8000b9e:	4623      	mov	r3, r4
 8000ba0:	463a      	mov	r2, r7
 8000ba2:	4621      	mov	r1, r4
 8000ba4:	4630      	mov	r0, r6
 8000ba6:	f8cd 8000 	str.w	r8, [sp]
 8000baa:	f7ff ff9d 	bl	8000ae8 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8000bae:	462b      	mov	r3, r5
 8000bb0:	463a      	mov	r2, r7
 8000bb2:	4621      	mov	r1, r4
 8000bb4:	4638      	mov	r0, r7
 8000bb6:	f8cd 8020 	str.w	r8, [sp, #32]

    return;
}
 8000bba:	b002      	add	sp, #8
 8000bbc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    ssd1306_Line(x1,y2,x1,y1,color);
 8000bc0:	f7ff bf92 	b.w	8000ae8 <ssd1306_Line>

08000bc4 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000bc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
    uint8_t byte = 0;

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000bc8:	f010 0f80 	tst.w	r0, #128	@ 0x80
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000bcc:	9200      	str	r2, [sp, #0]
 8000bce:	4681      	mov	r9, r0
 8000bd0:	460c      	mov	r4, r1
 8000bd2:	469a      	mov	sl, r3
 8000bd4:	f89d 2034 	ldrb.w	r2, [sp, #52]	@ 0x34
    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000bd8:	d12b      	bne.n	8000c32 <ssd1306_DrawBitmap+0x6e>
 8000bda:	293f      	cmp	r1, #63	@ 0x3f
 8000bdc:	d829      	bhi.n	8000c32 <ssd1306_DrawBitmap+0x6e>
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000bde:	2700      	movs	r7, #0
    uint8_t byte = 0;
 8000be0:	463d      	mov	r5, r7
 8000be2:	f89d 6030 	ldrb.w	r6, [sp, #48]	@ 0x30
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000be6:	f103 0b07 	add.w	fp, r3, #7
 8000bea:	440e      	add	r6, r1
 8000bec:	ea4f 0beb 	mov.w	fp, fp, asr #3
 8000bf0:	b2f6      	uxtb	r6, r6
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000bf2:	42b4      	cmp	r4, r6
 8000bf4:	d01d      	beq.n	8000c32 <ssd1306_DrawBitmap+0x6e>
        for (uint8_t i = 0; i < w; i++) {
            if (i & 7) {
                byte <<= 1;
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000bf6:	9b00      	ldr	r3, [sp, #0]
    for (uint8_t j = 0; j < h; j++, y++) {
 8000bf8:	f04f 0800 	mov.w	r8, #0
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000bfc:	443b      	add	r3, r7
 8000bfe:	e010      	b.n	8000c22 <ssd1306_DrawBitmap+0x5e>
            if (i & 7) {
 8000c00:	0741      	lsls	r1, r0, #29
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000c02:	bf0b      	itete	eq
 8000c04:	08c1      	lsreq	r1, r0, #3
                byte <<= 1;
 8000c06:	006d      	lslne	r5, r5, #1
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000c08:	5c5d      	ldrbeq	r5, [r3, r1]
                byte <<= 1;
 8000c0a:	b2ed      	uxtbne	r5, r5
            }

            if (byte & 0x80) {
 8000c0c:	0629      	lsls	r1, r5, #24
 8000c0e:	d506      	bpl.n	8000c1e <ssd1306_DrawBitmap+0x5a>
                ssd1306_DrawPixel(x + i, y, color);
 8000c10:	4448      	add	r0, r9
 8000c12:	4621      	mov	r1, r4
 8000c14:	b2c0      	uxtb	r0, r0
 8000c16:	9301      	str	r3, [sp, #4]
 8000c18:	f7ff fee0 	bl	80009dc <ssd1306_DrawPixel>
 8000c1c:	9b01      	ldr	r3, [sp, #4]
        for (uint8_t i = 0; i < w; i++) {
 8000c1e:	f108 0801 	add.w	r8, r8, #1
 8000c22:	45d0      	cmp	r8, sl
 8000c24:	fa5f f088 	uxtb.w	r0, r8
 8000c28:	d1ea      	bne.n	8000c00 <ssd1306_DrawBitmap+0x3c>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000c2a:	3401      	adds	r4, #1
 8000c2c:	b2e4      	uxtb	r4, r4
 8000c2e:	445f      	add	r7, fp
 8000c30:	e7df      	b.n	8000bf2 <ssd1306_DrawBitmap+0x2e>
            }
        }
    }
    return;
}
 8000c32:	b003      	add	sp, #12
 8000c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000c38 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000c38:	b510      	push	{r4, lr}
 8000c3a:	4604      	mov	r4, r0
    const uint8_t kSetContrastControlRegister = 0x81;
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000c3c:	2081      	movs	r0, #129	@ 0x81
 8000c3e:	f7ff fe7f 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000c42:	4620      	mov	r0, r4
}
 8000c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ssd1306_WriteCommand(value);
 8000c48:	f7ff be7a 	b.w	8000940 <ssd1306_WriteCommand>

08000c4c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
    uint8_t value;
    if (on) {
        value = 0xAF;   // Display on
        SSD1306.DisplayOn = 1;
 8000c4c:	2800      	cmp	r0, #0
    if (on) {
 8000c4e:	4603      	mov	r3, r0
        SSD1306.DisplayOn = 1;
 8000c50:	bf0c      	ite	eq
 8000c52:	4603      	moveq	r3, r0
 8000c54:	2301      	movne	r3, #1
 8000c56:	4a03      	ldr	r2, [pc, #12]	@ (8000c64 <ssd1306_SetDisplayOn+0x18>)
 8000c58:	bf0c      	ite	eq
 8000c5a:	20ae      	moveq	r0, #174	@ 0xae
 8000c5c:	20af      	movne	r0, #175	@ 0xaf
 8000c5e:	7153      	strb	r3, [r2, #5]
    } else {
        value = 0xAE;   // Display off
        SSD1306.DisplayOn = 0;
    }
    ssd1306_WriteCommand(value);
 8000c60:	f7ff be6e 	b.w	8000940 <ssd1306_WriteCommand>
 8000c64:	20000794 	.word	0x20000794

08000c68 <ssd1306_Init>:
void ssd1306_Init(void) {
 8000c68:	b508      	push	{r3, lr}
    HAL_Delay(100);
 8000c6a:	2064      	movs	r0, #100	@ 0x64
 8000c6c:	f000 f96c 	bl	8000f48 <HAL_Delay>
    ssd1306_SetDisplayOn(0); //display off
 8000c70:	2000      	movs	r0, #0
 8000c72:	f7ff ffeb 	bl	8000c4c <ssd1306_SetDisplayOn>
    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000c76:	2020      	movs	r0, #32
 8000c78:	f7ff fe62 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000c7c:	2000      	movs	r0, #0
 8000c7e:	f7ff fe5f 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000c82:	20b0      	movs	r0, #176	@ 0xb0
 8000c84:	f7ff fe5c 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000c88:	20c8      	movs	r0, #200	@ 0xc8
 8000c8a:	f7ff fe59 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //---set low column address
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f7ff fe56 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000c94:	2010      	movs	r0, #16
 8000c96:	f7ff fe53 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000c9a:	2040      	movs	r0, #64	@ 0x40
 8000c9c:	f7ff fe50 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_SetContrast(0xFF);
 8000ca0:	20ff      	movs	r0, #255	@ 0xff
 8000ca2:	f7ff ffc9 	bl	8000c38 <ssd1306_SetContrast>
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000ca6:	20a1      	movs	r0, #161	@ 0xa1
 8000ca8:	f7ff fe4a 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000cac:	20a6      	movs	r0, #166	@ 0xa6
 8000cae:	f7ff fe47 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000cb2:	20a8      	movs	r0, #168	@ 0xa8
 8000cb4:	f7ff fe44 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); //
 8000cb8:	203f      	movs	r0, #63	@ 0x3f
 8000cba:	f7ff fe41 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000cbe:	20a4      	movs	r0, #164	@ 0xa4
 8000cc0:	f7ff fe3e 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000cc4:	20d3      	movs	r0, #211	@ 0xd3
 8000cc6:	f7ff fe3b 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fe38 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000cd0:	20d5      	movs	r0, #213	@ 0xd5
 8000cd2:	f7ff fe35 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000cd6:	20f0      	movs	r0, #240	@ 0xf0
 8000cd8:	f7ff fe32 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000cdc:	20d9      	movs	r0, #217	@ 0xd9
 8000cde:	f7ff fe2f 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000ce2:	2022      	movs	r0, #34	@ 0x22
 8000ce4:	f7ff fe2c 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000ce8:	20da      	movs	r0, #218	@ 0xda
 8000cea:	f7ff fe29 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
 8000cee:	2012      	movs	r0, #18
 8000cf0:	f7ff fe26 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000cf4:	20db      	movs	r0, #219	@ 0xdb
 8000cf6:	f7ff fe23 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000cfa:	2020      	movs	r0, #32
 8000cfc:	f7ff fe20 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000d00:	208d      	movs	r0, #141	@ 0x8d
 8000d02:	f7ff fe1d 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000d06:	2014      	movs	r0, #20
 8000d08:	f7ff fe1a 	bl	8000940 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f7ff ff9d 	bl	8000c4c <ssd1306_SetDisplayOn>
    ssd1306_Fill(Black);
 8000d12:	2000      	movs	r0, #0
 8000d14:	f7ff fe3c 	bl	8000990 <ssd1306_Fill>
    ssd1306_UpdateScreen();
 8000d18:	f7ff fe46 	bl	80009a8 <ssd1306_UpdateScreen>
    SSD1306.CurrentX = 0;
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	4b03      	ldr	r3, [pc, #12]	@ (8000d2c <ssd1306_Init+0xc4>)
 8000d20:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000d22:	805a      	strh	r2, [r3, #2]
    SSD1306.Initialized = 1;
 8000d24:	2201      	movs	r2, #1
 8000d26:	711a      	strb	r2, [r3, #4]
}
 8000d28:	bd08      	pop	{r3, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000794 	.word	0x20000794

08000d30 <ssd1306_GetDisplayOn>:
}

uint8_t ssd1306_GetDisplayOn() {
    return SSD1306.DisplayOn;
}
 8000d30:	4b01      	ldr	r3, [pc, #4]	@ (8000d38 <ssd1306_GetDisplayOn+0x8>)
 8000d32:	7958      	ldrb	r0, [r3, #5]
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000794 	.word	0x20000794

08000d3c <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d3c:	4b11      	ldr	r3, [pc, #68]	@ (8000d84 <HAL_MspInit+0x48>)
{
 8000d3e:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d40:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d42:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d44:	f042 0201 	orr.w	r2, r2, #1
 8000d48:	619a      	str	r2, [r3, #24]
 8000d4a:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d4c:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8000d50:	f002 0201 	and.w	r2, r2, #1
 8000d54:	9200      	str	r2, [sp, #0]
 8000d56:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d58:	69da      	ldr	r2, [r3, #28]
 8000d5a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8000d5e:	61da      	str	r2, [r3, #28]
 8000d60:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d62:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d68:	9301      	str	r3, [sp, #4]
 8000d6a:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d6c:	f000 f910 	bl	8000f90 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000d70:	4a05      	ldr	r2, [pc, #20]	@ (8000d88 <HAL_MspInit+0x4c>)
 8000d72:	6853      	ldr	r3, [r2, #4]
 8000d74:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000d78:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	b003      	add	sp, #12
 8000d80:	f85d fb04 	ldr.w	pc, [sp], #4
 8000d84:	40021000 	.word	0x40021000
 8000d88:	40010000 	.word	0x40010000

08000d8c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d8c:	b510      	push	{r4, lr}
 8000d8e:	4604      	mov	r4, r0
 8000d90:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	2210      	movs	r2, #16
 8000d94:	2100      	movs	r1, #0
 8000d96:	a802      	add	r0, sp, #8
 8000d98:	f002 fd2a 	bl	80037f0 <memset>
  if(hi2c->Instance==I2C1)
 8000d9c:	6822      	ldr	r2, [r4, #0]
 8000d9e:	4b15      	ldr	r3, [pc, #84]	@ (8000df4 <HAL_I2C_MspInit+0x68>)
 8000da0:	429a      	cmp	r2, r3
 8000da2:	d124      	bne.n	8000dee <HAL_I2C_MspInit+0x62>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da4:	4c14      	ldr	r4, [pc, #80]	@ (8000df8 <HAL_I2C_MspInit+0x6c>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000da6:	f44f 7240 	mov.w	r2, #768	@ 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000daa:	69a3      	ldr	r3, [r4, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	4813      	ldr	r0, [pc, #76]	@ (8000dfc <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dae:	f043 0308 	orr.w	r3, r3, #8
 8000db2:	61a3      	str	r3, [r4, #24]
 8000db4:	69a3      	ldr	r3, [r4, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	f003 0308 	and.w	r3, r3, #8
 8000dbc:	9300      	str	r3, [sp, #0]
 8000dbe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000dc0:	2312      	movs	r3, #18
 8000dc2:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dc6:	2303      	movs	r3, #3
 8000dc8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dca:	f000 f925 	bl	8001018 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000dce:	4a0c      	ldr	r2, [pc, #48]	@ (8000e00 <HAL_I2C_MspInit+0x74>)
 8000dd0:	6853      	ldr	r3, [r2, #4]
 8000dd2:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000dd6:	f043 0302 	orr.w	r3, r3, #2
 8000dda:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ddc:	69e3      	ldr	r3, [r4, #28]
 8000dde:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000de2:	61e3      	str	r3, [r4, #28]
 8000de4:	69e3      	ldr	r3, [r4, #28]
 8000de6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000dea:	9301      	str	r3, [sp, #4]
 8000dec:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000dee:	b006      	add	sp, #24
 8000df0:	bd10      	pop	{r4, pc}
 8000df2:	bf00      	nop
 8000df4:	40005400 	.word	0x40005400
 8000df8:	40021000 	.word	0x40021000
 8000dfc:	40010c00 	.word	0x40010c00
 8000e00:	40010000 	.word	0x40010000

08000e04 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e04:	e7fe      	b.n	8000e04 <NMI_Handler>

08000e06 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e06:	e7fe      	b.n	8000e06 <HardFault_Handler>

08000e08 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <MemManage_Handler>

08000e0a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0a:	e7fe      	b.n	8000e0a <BusFault_Handler>

08000e0c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e0c:	e7fe      	b.n	8000e0c <UsageFault_Handler>

08000e0e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e0e:	4770      	bx	lr

08000e10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e10:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e12:	f000 f887 	bl	8000f24 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000e16:	f001 ffd5 	bl	8002dc4 <xTaskGetSchedulerState>
 8000e1a:	2801      	cmp	r0, #1
 8000e1c:	d003      	beq.n	8000e26 <SysTick_Handler+0x16>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  xPortSysTickHandler();
 8000e22:	f002 bb27 	b.w	8003474 <xPortSysTickHandler>
}
 8000e26:	bd08      	pop	{r3, pc}

08000e28 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e28:	4a0b      	ldr	r2, [pc, #44]	@ (8000e58 <_sbrk+0x30>)
{
 8000e2a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8000e2c:	6811      	ldr	r1, [r2, #0]
{
 8000e2e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000e30:	b909      	cbnz	r1, 8000e36 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8000e32:	490a      	ldr	r1, [pc, #40]	@ (8000e5c <_sbrk+0x34>)
 8000e34:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e36:	6810      	ldr	r0, [r2, #0]
 8000e38:	4909      	ldr	r1, [pc, #36]	@ (8000e60 <_sbrk+0x38>)
 8000e3a:	4c0a      	ldr	r4, [pc, #40]	@ (8000e64 <_sbrk+0x3c>)
 8000e3c:	4403      	add	r3, r0
 8000e3e:	1b09      	subs	r1, r1, r4
 8000e40:	428b      	cmp	r3, r1
 8000e42:	d906      	bls.n	8000e52 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8000e44:	f002 fcdc 	bl	8003800 <__errno>
 8000e48:	230c      	movs	r3, #12
 8000e4a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000e4c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8000e50:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8000e52:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8000e54:	e7fc      	b.n	8000e50 <_sbrk+0x28>
 8000e56:	bf00      	nop
 8000e58:	20000b9c 	.word	0x20000b9c
 8000e5c:	20001b70 	.word	0x20001b70
 8000e60:	20002800 	.word	0x20002800
 8000e64:	00000400 	.word	0x00000400

08000e68 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e68:	4770      	bx	lr
	...

08000e6c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e6c:	f7ff fffc 	bl	8000e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e70:	480b      	ldr	r0, [pc, #44]	@ (8000ea0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000e72:	490c      	ldr	r1, [pc, #48]	@ (8000ea4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000e74:	4a0c      	ldr	r2, [pc, #48]	@ (8000ea8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e78:	e002      	b.n	8000e80 <LoopCopyDataInit>

08000e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7e:	3304      	adds	r3, #4

08000e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e84:	d3f9      	bcc.n	8000e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e86:	4a09      	ldr	r2, [pc, #36]	@ (8000eac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000e88:	4c09      	ldr	r4, [pc, #36]	@ (8000eb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e8c:	e001      	b.n	8000e92 <LoopFillZerobss>

08000e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e90:	3204      	adds	r2, #4

08000e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e94:	d3fb      	bcc.n	8000e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e96:	f002 fcb9 	bl	800380c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e9a:	f7ff fc79 	bl	8000790 <main>
  bx lr
 8000e9e:	4770      	bx	lr
  ldr r0, =_sdata
 8000ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ea4:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000ea8:	08005a68 	.word	0x08005a68
  ldr r2, =_sbss
 8000eac:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000eb0:	20001b70 	.word	0x20001b70

08000eb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC1_2_IRQHandler>
	...

08000eb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000eba:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef4 <HAL_InitTick+0x3c>)
{
 8000ebc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ebe:	781a      	ldrb	r2, [r3, #0]
 8000ec0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ec8:	4a0b      	ldr	r2, [pc, #44]	@ (8000ef8 <HAL_InitTick+0x40>)
 8000eca:	6810      	ldr	r0, [r2, #0]
 8000ecc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ed0:	f000 f88e 	bl	8000ff0 <HAL_SYSTICK_Config>
 8000ed4:	4604      	mov	r4, r0
 8000ed6:	b958      	cbnz	r0, 8000ef0 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed8:	2d0f      	cmp	r5, #15
 8000eda:	d809      	bhi.n	8000ef0 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000edc:	4602      	mov	r2, r0
 8000ede:	4629      	mov	r1, r5
 8000ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee4:	f000 f854 	bl	8000f90 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee8:	4620      	mov	r0, r4
 8000eea:	4b04      	ldr	r3, [pc, #16]	@ (8000efc <HAL_InitTick+0x44>)
 8000eec:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000eee:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	e7fc      	b.n	8000eee <HAL_InitTick+0x36>
 8000ef4:	2000000c 	.word	0x2000000c
 8000ef8:	20000008 	.word	0x20000008
 8000efc:	20000010 	.word	0x20000010

08000f00 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f00:	4a07      	ldr	r2, [pc, #28]	@ (8000f20 <HAL_Init+0x20>)
{
 8000f02:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f04:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f06:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f08:	f043 0310 	orr.w	r3, r3, #16
 8000f0c:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f0e:	f000 f82d 	bl	8000f6c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f12:	200f      	movs	r0, #15
 8000f14:	f7ff ffd0 	bl	8000eb8 <HAL_InitTick>
  HAL_MspInit();
 8000f18:	f7ff ff10 	bl	8000d3c <HAL_MspInit>
}
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	bd08      	pop	{r3, pc}
 8000f20:	40022000 	.word	0x40022000

08000f24 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000f24:	4a03      	ldr	r2, [pc, #12]	@ (8000f34 <HAL_IncTick+0x10>)
 8000f26:	4b04      	ldr	r3, [pc, #16]	@ (8000f38 <HAL_IncTick+0x14>)
 8000f28:	6811      	ldr	r1, [r2, #0]
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	440b      	add	r3, r1
 8000f2e:	6013      	str	r3, [r2, #0]
}
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000ba0 	.word	0x20000ba0
 8000f38:	2000000c 	.word	0x2000000c

08000f3c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000f3c:	4b01      	ldr	r3, [pc, #4]	@ (8000f44 <HAL_GetTick+0x8>)
 8000f3e:	6818      	ldr	r0, [r3, #0]
}
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	20000ba0 	.word	0x20000ba0

08000f48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f48:	b538      	push	{r3, r4, r5, lr}
 8000f4a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000f4c:	f7ff fff6 	bl	8000f3c <HAL_GetTick>
 8000f50:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f52:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000f54:	bf1e      	ittt	ne
 8000f56:	4b04      	ldrne	r3, [pc, #16]	@ (8000f68 <HAL_Delay+0x20>)
 8000f58:	781b      	ldrbne	r3, [r3, #0]
 8000f5a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5c:	f7ff ffee 	bl	8000f3c <HAL_GetTick>
 8000f60:	1b43      	subs	r3, r0, r5
 8000f62:	42a3      	cmp	r3, r4
 8000f64:	d3fa      	bcc.n	8000f5c <HAL_Delay+0x14>
  {
  }
}
 8000f66:	bd38      	pop	{r3, r4, r5, pc}
 8000f68:	2000000c 	.word	0x2000000c

08000f6c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f6c:	4907      	ldr	r1, [pc, #28]	@ (8000f8c <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f6e:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f70:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f72:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f76:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8000f7a:	0412      	lsls	r2, r2, #16
 8000f7c:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8000f88:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8000f8a:	4770      	bx	lr
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f90:	4b15      	ldr	r3, [pc, #84]	@ (8000fe8 <HAL_NVIC_SetPriority+0x58>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f92:	b530      	push	{r4, r5, lr}
 8000f94:	68dc      	ldr	r4, [r3, #12]
 8000f96:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f9a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f9e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa0:	2b04      	cmp	r3, #4
 8000fa2:	bf28      	it	cs
 8000fa4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fac:	bf94      	ite	ls
 8000fae:	2400      	movls	r4, #0
 8000fb0:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb2:	fa05 f303 	lsl.w	r3, r5, r3
 8000fb6:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fba:	40a5      	lsls	r5, r4
 8000fbc:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc0:	40a3      	lsls	r3, r4
  if ((int32_t)(IRQn) >= 0)
 8000fc2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc8:	bfac      	ite	ge
 8000fca:	f100 4060 	addge.w	r0, r0, #3758096384	@ 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fce:	4a07      	ldrlt	r2, [pc, #28]	@ (8000fec <HAL_NVIC_SetPriority+0x5c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	bfab      	itete	ge
 8000fd8:	f500 4061 	addge.w	r0, r0, #57600	@ 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fdc:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe0:	f880 3300 	strbge.w	r3, [r0, #768]	@ 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe4:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000fe6:	bd30      	pop	{r4, r5, pc}
 8000fe8:	e000ed00 	.word	0xe000ed00
 8000fec:	e000ed14 	.word	0xe000ed14

08000ff0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ff6:	d20b      	bcs.n	8001010 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ff8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffc:	21f0      	movs	r1, #240	@ 0xf0
 8000ffe:	4a05      	ldr	r2, [pc, #20]	@ (8001014 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001000:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001006:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001008:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800100a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800100c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800100e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001010:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001012:	4770      	bx	lr
 8001014:	e000ed00 	.word	0xe000ed00

08001018 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001018:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800101c:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 800101e:	4616      	mov	r6, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001020:	f8df c17c 	ldr.w	ip, [pc, #380]	@ 80011a0 <HAL_GPIO_Init+0x188>
 8001024:	4b5f      	ldr	r3, [pc, #380]	@ (80011a4 <HAL_GPIO_Init+0x18c>)
      switch (GPIO_Init->Mode)
 8001026:	f8df e180 	ldr.w	lr, [pc, #384]	@ 80011a8 <HAL_GPIO_Init+0x190>
 800102a:	f8df 8180 	ldr.w	r8, [pc, #384]	@ 80011ac <HAL_GPIO_Init+0x194>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800102e:	680d      	ldr	r5, [r1, #0]
 8001030:	fa35 f406 	lsrs.w	r4, r5, r6
 8001034:	d102      	bne.n	800103c <HAL_GPIO_Init+0x24>
      }
    }

	position++;
  }
}
 8001036:	b003      	add	sp, #12
 8001038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 800103c:	2701      	movs	r7, #1
 800103e:	40b7      	lsls	r7, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001040:	ea05 0407 	and.w	r4, r5, r7
    if (iocurrent == ioposition)
 8001044:	ea37 0505 	bics.w	r5, r7, r5
 8001048:	d175      	bne.n	8001136 <HAL_GPIO_Init+0x11e>
      switch (GPIO_Init->Mode)
 800104a:	684d      	ldr	r5, [r1, #4]
 800104c:	2d03      	cmp	r5, #3
 800104e:	d806      	bhi.n	800105e <HAL_GPIO_Init+0x46>
 8001050:	3d01      	subs	r5, #1
 8001052:	2d02      	cmp	r5, #2
 8001054:	d87e      	bhi.n	8001154 <HAL_GPIO_Init+0x13c>
 8001056:	e8df f005 	tbb	[pc, r5]
 800105a:	948f      	.short	0x948f
 800105c:	9a          	.byte	0x9a
 800105d:	00          	.byte	0x00
 800105e:	2d12      	cmp	r5, #18
 8001060:	f000 8092 	beq.w	8001188 <HAL_GPIO_Init+0x170>
 8001064:	d869      	bhi.n	800113a <HAL_GPIO_Init+0x122>
 8001066:	2d11      	cmp	r5, #17
 8001068:	f000 8088 	beq.w	800117c <HAL_GPIO_Init+0x164>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800106c:	2cff      	cmp	r4, #255	@ 0xff
 800106e:	bf98      	it	ls
 8001070:	4681      	movls	r9, r0
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001072:	f04f 0b0f 	mov.w	fp, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001076:	bf88      	it	hi
 8001078:	f100 0904 	addhi.w	r9, r0, #4
 800107c:	ea4f 0586 	mov.w	r5, r6, lsl #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001080:	f8d9 7000 	ldr.w	r7, [r9]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001084:	bf88      	it	hi
 8001086:	3d20      	subhi	r5, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001088:	fa0b fa05 	lsl.w	sl, fp, r5
 800108c:	ea27 070a 	bic.w	r7, r7, sl
 8001090:	fa02 f505 	lsl.w	r5, r2, r5
 8001094:	432f      	orrs	r7, r5
 8001096:	f8c9 7000 	str.w	r7, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800109a:	f8d1 9004 	ldr.w	r9, [r1, #4]
 800109e:	f019 5f80 	tst.w	r9, #268435456	@ 0x10000000
 80010a2:	d048      	beq.n	8001136 <HAL_GPIO_Init+0x11e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010a4:	f8dc 5018 	ldr.w	r5, [ip, #24]
 80010a8:	f026 0703 	bic.w	r7, r6, #3
 80010ac:	f045 0501 	orr.w	r5, r5, #1
 80010b0:	f8cc 5018 	str.w	r5, [ip, #24]
 80010b4:	f8dc 5018 	ldr.w	r5, [ip, #24]
 80010b8:	f107 4780 	add.w	r7, r7, #1073741824	@ 0x40000000
 80010bc:	f005 0501 	and.w	r5, r5, #1
 80010c0:	9501      	str	r5, [sp, #4]
 80010c2:	f507 3780 	add.w	r7, r7, #65536	@ 0x10000
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010c6:	f006 0a03 	and.w	sl, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010ca:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010cc:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 80010d0:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010d2:	fa0b fb0a 	lsl.w	fp, fp, sl
 80010d6:	ea25 0b0b 	bic.w	fp, r5, fp
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010da:	4d35      	ldr	r5, [pc, #212]	@ (80011b0 <HAL_GPIO_Init+0x198>)
 80010dc:	42a8      	cmp	r0, r5
 80010de:	d05a      	beq.n	8001196 <HAL_GPIO_Init+0x17e>
 80010e0:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80010e4:	42a8      	cmp	r0, r5
 80010e6:	d058      	beq.n	800119a <HAL_GPIO_Init+0x182>
 80010e8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80010ec:	42a8      	cmp	r0, r5
 80010ee:	bf14      	ite	ne
 80010f0:	2503      	movne	r5, #3
 80010f2:	2502      	moveq	r5, #2
 80010f4:	fa05 f50a 	lsl.w	r5, r5, sl
 80010f8:	ea45 050b 	orr.w	r5, r5, fp
        AFIO->EXTICR[position >> 2u] = temp;
 80010fc:	60bd      	str	r5, [r7, #8]
          SET_BIT(EXTI->RTSR, iocurrent);
 80010fe:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001100:	f419 1f80 	tst.w	r9, #1048576	@ 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8001104:	bf14      	ite	ne
 8001106:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001108:	43a5      	biceq	r5, r4
 800110a:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 800110c:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800110e:	f419 1f00 	tst.w	r9, #2097152	@ 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8001112:	bf14      	ite	ne
 8001114:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001116:	43a5      	biceq	r5, r4
 8001118:	60dd      	str	r5, [r3, #12]
          SET_BIT(EXTI->EMR, iocurrent);
 800111a:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800111c:	f419 3f00 	tst.w	r9, #131072	@ 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8001120:	bf14      	ite	ne
 8001122:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001124:	43a5      	biceq	r5, r4
 8001126:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->IMR, iocurrent);
 8001128:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800112a:	f419 3f80 	tst.w	r9, #65536	@ 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800112e:	bf14      	ite	ne
 8001130:	4325      	orrne	r5, r4
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001132:	43a5      	biceq	r5, r4
 8001134:	601d      	str	r5, [r3, #0]
	position++;
 8001136:	3601      	adds	r6, #1
 8001138:	e779      	b.n	800102e <HAL_GPIO_Init+0x16>
      switch (GPIO_Init->Mode)
 800113a:	f8df 9078 	ldr.w	r9, [pc, #120]	@ 80011b4 <HAL_GPIO_Init+0x19c>
 800113e:	454d      	cmp	r5, r9
 8001140:	d008      	beq.n	8001154 <HAL_GPIO_Init+0x13c>
 8001142:	d811      	bhi.n	8001168 <HAL_GPIO_Init+0x150>
 8001144:	f5a9 1980 	sub.w	r9, r9, #1048576	@ 0x100000
 8001148:	454d      	cmp	r5, r9
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x13c>
 800114c:	4575      	cmp	r5, lr
 800114e:	d001      	beq.n	8001154 <HAL_GPIO_Init+0x13c>
 8001150:	4545      	cmp	r5, r8
 8001152:	d18b      	bne.n	800106c <HAL_GPIO_Init+0x54>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001154:	688a      	ldr	r2, [r1, #8]
 8001156:	b1e2      	cbz	r2, 8001192 <HAL_GPIO_Init+0x17a>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001158:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800115a:	bf08      	it	eq
 800115c:	6107      	streq	r7, [r0, #16]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800115e:	f04f 0208 	mov.w	r2, #8
            GPIOx->BRR = ioposition;
 8001162:	bf18      	it	ne
 8001164:	6147      	strne	r7, [r0, #20]
 8001166:	e781      	b.n	800106c <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 8001168:	f8df 904c 	ldr.w	r9, [pc, #76]	@ 80011b8 <HAL_GPIO_Init+0x1a0>
 800116c:	454d      	cmp	r5, r9
 800116e:	d0f1      	beq.n	8001154 <HAL_GPIO_Init+0x13c>
 8001170:	f509 3980 	add.w	r9, r9, #65536	@ 0x10000
 8001174:	454d      	cmp	r5, r9
 8001176:	e7ec      	b.n	8001152 <HAL_GPIO_Init+0x13a>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001178:	68ca      	ldr	r2, [r1, #12]
          break;
 800117a:	e777      	b.n	800106c <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800117c:	68ca      	ldr	r2, [r1, #12]
 800117e:	3204      	adds	r2, #4
          break;
 8001180:	e774      	b.n	800106c <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001182:	68ca      	ldr	r2, [r1, #12]
 8001184:	3208      	adds	r2, #8
          break;
 8001186:	e771      	b.n	800106c <HAL_GPIO_Init+0x54>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001188:	68ca      	ldr	r2, [r1, #12]
 800118a:	320c      	adds	r2, #12
          break;
 800118c:	e76e      	b.n	800106c <HAL_GPIO_Init+0x54>
      switch (GPIO_Init->Mode)
 800118e:	2200      	movs	r2, #0
 8001190:	e76c      	b.n	800106c <HAL_GPIO_Init+0x54>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001192:	2204      	movs	r2, #4
 8001194:	e76a      	b.n	800106c <HAL_GPIO_Init+0x54>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001196:	2500      	movs	r5, #0
 8001198:	e7ac      	b.n	80010f4 <HAL_GPIO_Init+0xdc>
 800119a:	2501      	movs	r5, #1
 800119c:	e7aa      	b.n	80010f4 <HAL_GPIO_Init+0xdc>
 800119e:	bf00      	nop
 80011a0:	40021000 	.word	0x40021000
 80011a4:	40010400 	.word	0x40010400
 80011a8:	10210000 	.word	0x10210000
 80011ac:	10110000 	.word	0x10110000
 80011b0:	40010800 	.word	0x40010800
 80011b4:	10220000 	.word	0x10220000
 80011b8:	10310000 	.word	0x10310000

080011bc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80011bc:	6883      	ldr	r3, [r0, #8]
 80011be:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80011c0:	bf14      	ite	ne
 80011c2:	2001      	movne	r0, #1
 80011c4:	2000      	moveq	r0, #0
 80011c6:	4770      	bx	lr

080011c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80011c8:	b10a      	cbz	r2, 80011ce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ca:	6101      	str	r1, [r0, #16]
  }
}
 80011cc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ce:	0409      	lsls	r1, r1, #16
 80011d0:	e7fb      	b.n	80011ca <HAL_GPIO_WritePin+0x2>

080011d2 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80011d2:	6801      	ldr	r1, [r0, #0]
 80011d4:	2200      	movs	r2, #0
 80011d6:	694b      	ldr	r3, [r1, #20]
 80011d8:	f413 6380 	ands.w	r3, r3, #1024	@ 0x400
 80011dc:	d010      	beq.n	8001200 <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011de:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 80011e2:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80011e4:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 80011e6:	6302      	str	r2, [r0, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80011e8:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80011ec:	f880 203e 	strb.w	r2, [r0, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80011f0:	6c03      	ldr	r3, [r0, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80011f2:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80011f6:	f043 0304 	orr.w	r3, r3, #4
 80011fa:	6403      	str	r3, [r0, #64]	@ 0x40

    return HAL_ERROR;
 80011fc:	2001      	movs	r0, #1
 80011fe:	4770      	bx	lr
  }
  return HAL_OK;
 8001200:	4618      	mov	r0, r3
}
 8001202:	4770      	bx	lr

08001204 <I2C_WaitOnFlagUntilTimeout>:
{
 8001204:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8001208:	4606      	mov	r6, r0
 800120a:	460f      	mov	r7, r1
 800120c:	4691      	mov	r9, r2
 800120e:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001210:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8001214:	6833      	ldr	r3, [r6, #0]
 8001216:	f1ba 0f01 	cmp.w	sl, #1
 800121a:	bf0c      	ite	eq
 800121c:	695c      	ldreq	r4, [r3, #20]
 800121e:	699c      	ldrne	r4, [r3, #24]
 8001220:	ea27 0404 	bic.w	r4, r7, r4
 8001224:	b2a4      	uxth	r4, r4
 8001226:	fab4 f484 	clz	r4, r4
 800122a:	0964      	lsrs	r4, r4, #5
 800122c:	45a1      	cmp	r9, r4
 800122e:	d001      	beq.n	8001234 <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8001230:	2000      	movs	r0, #0
 8001232:	e025      	b.n	8001280 <I2C_WaitOnFlagUntilTimeout+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 8001234:	1c6a      	adds	r2, r5, #1
 8001236:	d0ee      	beq.n	8001216 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001238:	f7ff fe80 	bl	8000f3c <HAL_GetTick>
 800123c:	9b08      	ldr	r3, [sp, #32]
 800123e:	1ac0      	subs	r0, r0, r3
 8001240:	42a8      	cmp	r0, r5
 8001242:	d801      	bhi.n	8001248 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001244:	2d00      	cmp	r5, #0
 8001246:	d1e5      	bne.n	8001214 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001248:	6833      	ldr	r3, [r6, #0]
 800124a:	f1ba 0f01 	cmp.w	sl, #1
 800124e:	bf0c      	ite	eq
 8001250:	695b      	ldreq	r3, [r3, #20]
 8001252:	699b      	ldrne	r3, [r3, #24]
 8001254:	ea27 0303 	bic.w	r3, r7, r3
 8001258:	b29b      	uxth	r3, r3
 800125a:	fab3 f383 	clz	r3, r3
 800125e:	095b      	lsrs	r3, r3, #5
 8001260:	4599      	cmp	r9, r3
 8001262:	d1d7      	bne.n	8001214 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->PreviousState     = I2C_STATE_NONE;
 8001264:	2300      	movs	r3, #0
          hi2c->State             = HAL_I2C_STATE_READY;
 8001266:	2220      	movs	r2, #32
          return HAL_ERROR;
 8001268:	2001      	movs	r0, #1
          hi2c->PreviousState     = I2C_STATE_NONE;
 800126a:	6333      	str	r3, [r6, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800126c:	f886 203d 	strb.w	r2, [r6, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001270:	f886 303e 	strb.w	r3, [r6, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001274:	6c32      	ldr	r2, [r6, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001276:	f886 303c 	strb.w	r3, [r6, #60]	@ 0x3c
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800127a:	f042 0220 	orr.w	r2, r2, #32
 800127e:	6432      	str	r2, [r6, #64]	@ 0x40
}
 8001280:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08001284 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001288:	4604      	mov	r4, r0
 800128a:	460f      	mov	r7, r1
 800128c:	4616      	mov	r6, r2
 800128e:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001290:	6825      	ldr	r5, [r4, #0]
 8001292:	6968      	ldr	r0, [r5, #20]
 8001294:	ea27 0000 	bic.w	r0, r7, r0
 8001298:	b280      	uxth	r0, r0
 800129a:	b1c0      	cbz	r0, 80012ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800129c:	696b      	ldr	r3, [r5, #20]
 800129e:	055a      	lsls	r2, r3, #21
 80012a0:	d517      	bpl.n	80012d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012a2:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 80012a4:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80012a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012aa:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80012ac:	f46f 6380 	mvn.w	r3, #1024	@ 0x400
 80012b0:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80012b2:	2300      	movs	r3, #0
 80012b4:	6323      	str	r3, [r4, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80012b6:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012ba:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80012be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80012c0:	f043 0304 	orr.w	r3, r3, #4
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80012c4:	6423      	str	r3, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 80012c6:	2300      	movs	r3, #0
      return HAL_ERROR;
 80012c8:	2001      	movs	r0, #1
          __HAL_UNLOCK(hi2c);
 80012ca:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
}
 80012ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80012d2:	1c73      	adds	r3, r6, #1
 80012d4:	d0dd      	beq.n	8001292 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012d6:	f7ff fe31 	bl	8000f3c <HAL_GetTick>
 80012da:	eba0 0008 	sub.w	r0, r0, r8
 80012de:	42b0      	cmp	r0, r6
 80012e0:	d801      	bhi.n	80012e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x62>
 80012e2:	2e00      	cmp	r6, #0
 80012e4:	d1d4      	bne.n	8001290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80012e6:	6823      	ldr	r3, [r4, #0]
 80012e8:	695a      	ldr	r2, [r3, #20]
 80012ea:	ea27 0202 	bic.w	r2, r7, r2
 80012ee:	b292      	uxth	r2, r2
 80012f0:	2a00      	cmp	r2, #0
 80012f2:	d0cd      	beq.n	8001290 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
          hi2c->PreviousState       = I2C_STATE_NONE;
 80012f4:	2300      	movs	r3, #0
          hi2c->State               = HAL_I2C_STATE_READY;
 80012f6:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 80012f8:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80012fa:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80012fe:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001302:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001304:	4313      	orrs	r3, r2
 8001306:	e7dd      	b.n	80012c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08001308 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8001308:	b570      	push	{r4, r5, r6, lr}
 800130a:	4604      	mov	r4, r0
 800130c:	460d      	mov	r5, r1
 800130e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001310:	6823      	ldr	r3, [r4, #0]
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	061b      	lsls	r3, r3, #24
 8001316:	d501      	bpl.n	800131c <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8001318:	2000      	movs	r0, #0
 800131a:	e01e      	b.n	800135a <I2C_WaitOnTXEFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800131c:	4620      	mov	r0, r4
 800131e:	f7ff ff58 	bl	80011d2 <I2C_IsAcknowledgeFailed>
 8001322:	b9c8      	cbnz	r0, 8001358 <I2C_WaitOnTXEFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001324:	1c6a      	adds	r2, r5, #1
 8001326:	d0f3      	beq.n	8001310 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001328:	f7ff fe08 	bl	8000f3c <HAL_GetTick>
 800132c:	1b80      	subs	r0, r0, r6
 800132e:	42a8      	cmp	r0, r5
 8001330:	d801      	bhi.n	8001336 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 8001332:	2d00      	cmp	r5, #0
 8001334:	d1ec      	bne.n	8001310 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8001336:	6823      	ldr	r3, [r4, #0]
 8001338:	695b      	ldr	r3, [r3, #20]
 800133a:	f013 0380 	ands.w	r3, r3, #128	@ 0x80
 800133e:	d1e7      	bne.n	8001310 <I2C_WaitOnTXEFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8001340:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 8001342:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8001344:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001348:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800134c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 800134e:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001352:	f042 0220 	orr.w	r2, r2, #32
 8001356:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8001358:	2001      	movs	r0, #1
}
 800135a:	bd70      	pop	{r4, r5, r6, pc}

0800135c <I2C_RequestMemoryWrite>:
{
 800135c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001360:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001362:	6802      	ldr	r2, [r0, #0]
{
 8001364:	4699      	mov	r9, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001366:	6813      	ldr	r3, [r2, #0]
{
 8001368:	b085      	sub	sp, #20
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800136a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800136e:	6013      	str	r3, [r2, #0]
{
 8001370:	e9dd 780c 	ldrd	r7, r8, [sp, #48]	@ 0x30
 8001374:	460e      	mov	r6, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001376:	463b      	mov	r3, r7
 8001378:	2200      	movs	r2, #0
 800137a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800137e:	f8cd 8000 	str.w	r8, [sp]
{
 8001382:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001384:	f7ff ff3e 	bl	8001204 <I2C_WaitOnFlagUntilTimeout>
 8001388:	6823      	ldr	r3, [r4, #0]
 800138a:	b138      	cbz	r0, 800139c <I2C_RequestMemoryWrite+0x40>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	05db      	lsls	r3, r3, #23
 8001390:	d502      	bpl.n	8001398 <I2C_RequestMemoryWrite+0x3c>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001392:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001396:	6423      	str	r3, [r4, #64]	@ 0x40
    return HAL_TIMEOUT;
 8001398:	2603      	movs	r6, #3
 800139a:	e020      	b.n	80013de <I2C_RequestMemoryWrite+0x82>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800139c:	f006 06fe 	and.w	r6, r6, #254	@ 0xfe
 80013a0:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80013a2:	463a      	mov	r2, r7
 80013a4:	4643      	mov	r3, r8
 80013a6:	4620      	mov	r0, r4
 80013a8:	4918      	ldr	r1, [pc, #96]	@ (800140c <I2C_RequestMemoryWrite+0xb0>)
 80013aa:	f7ff ff6b 	bl	8001284 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80013ae:	b9a8      	cbnz	r0, 80013dc <I2C_RequestMemoryWrite+0x80>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	9003      	str	r0, [sp, #12]
 80013b4:	695a      	ldr	r2, [r3, #20]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013b6:	4639      	mov	r1, r7
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013b8:	9203      	str	r2, [sp, #12]
 80013ba:	699b      	ldr	r3, [r3, #24]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013bc:	4642      	mov	r2, r8
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013be:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013c0:	4620      	mov	r0, r4
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80013c2:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013c4:	f7ff ffa0 	bl	8001308 <I2C_WaitOnTXEFlagUntilTimeout>
 80013c8:	4606      	mov	r6, r0
 80013ca:	b160      	cbz	r0, 80013e6 <I2C_RequestMemoryWrite+0x8a>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80013cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80013ce:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013d0:	bf01      	itttt	eq
 80013d2:	6822      	ldreq	r2, [r4, #0]
 80013d4:	6813      	ldreq	r3, [r2, #0]
 80013d6:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 80013da:	6013      	streq	r3, [r2, #0]
    return HAL_ERROR;
 80013dc:	2601      	movs	r6, #1
}
 80013de:	4630      	mov	r0, r6
 80013e0:	b005      	add	sp, #20
 80013e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013e6:	f1b9 0f01 	cmp.w	r9, #1
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80013ea:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80013ec:	d102      	bne.n	80013f4 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80013ee:	b2ed      	uxtb	r5, r5
 80013f0:	611d      	str	r5, [r3, #16]
 80013f2:	e7f4      	b.n	80013de <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80013f4:	0a2a      	lsrs	r2, r5, #8
 80013f6:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80013f8:	4639      	mov	r1, r7
 80013fa:	4642      	mov	r2, r8
 80013fc:	4620      	mov	r0, r4
 80013fe:	f7ff ff83 	bl	8001308 <I2C_WaitOnTXEFlagUntilTimeout>
 8001402:	2800      	cmp	r0, #0
 8001404:	d1e2      	bne.n	80013cc <I2C_RequestMemoryWrite+0x70>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001406:	6823      	ldr	r3, [r4, #0]
 8001408:	e7f1      	b.n	80013ee <I2C_RequestMemoryWrite+0x92>
 800140a:	bf00      	nop
 800140c:	00010002 	.word	0x00010002

08001410 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001410:	b570      	push	{r4, r5, r6, lr}
 8001412:	4604      	mov	r4, r0
 8001414:	460d      	mov	r5, r1
 8001416:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001418:	6823      	ldr	r3, [r4, #0]
 800141a:	695b      	ldr	r3, [r3, #20]
 800141c:	075b      	lsls	r3, r3, #29
 800141e:	d501      	bpl.n	8001424 <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001420:	2000      	movs	r0, #0
 8001422:	e01e      	b.n	8001462 <I2C_WaitOnBTFFlagUntilTimeout+0x52>
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001424:	4620      	mov	r0, r4
 8001426:	f7ff fed4 	bl	80011d2 <I2C_IsAcknowledgeFailed>
 800142a:	b9c8      	cbnz	r0, 8001460 <I2C_WaitOnBTFFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 800142c:	1c6a      	adds	r2, r5, #1
 800142e:	d0f3      	beq.n	8001418 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001430:	f7ff fd84 	bl	8000f3c <HAL_GetTick>
 8001434:	1b80      	subs	r0, r0, r6
 8001436:	42a8      	cmp	r0, r5
 8001438:	d801      	bhi.n	800143e <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 800143a:	2d00      	cmp	r5, #0
 800143c:	d1ec      	bne.n	8001418 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800143e:	6823      	ldr	r3, [r4, #0]
 8001440:	695b      	ldr	r3, [r3, #20]
 8001442:	f013 0304 	ands.w	r3, r3, #4
 8001446:	d1e7      	bne.n	8001418 <I2C_WaitOnBTFFlagUntilTimeout+0x8>
          hi2c->State               = HAL_I2C_STATE_READY;
 8001448:	2220      	movs	r2, #32
          hi2c->PreviousState       = I2C_STATE_NONE;
 800144a:	6323      	str	r3, [r4, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800144c:	f884 203d 	strb.w	r2, [r4, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001450:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001454:	6c22      	ldr	r2, [r4, #64]	@ 0x40
          __HAL_UNLOCK(hi2c);
 8001456:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800145a:	f042 0220 	orr.w	r2, r2, #32
 800145e:	6422      	str	r2, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8001460:	2001      	movs	r0, #1
}
 8001462:	bd70      	pop	{r4, r5, r6, pc}

08001464 <HAL_I2C_Init>:
{
 8001464:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8001466:	4604      	mov	r4, r0
 8001468:	b908      	cbnz	r0, 800146e <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800146a:	2001      	movs	r0, #1
}
 800146c:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800146e:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8001472:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8001476:	b91b      	cbnz	r3, 8001480 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8001478:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_I2C_MspInit(hi2c);
 800147c:	f7ff fc86 	bl	8000d8c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001480:	2324      	movs	r3, #36	@ 0x24
 8001482:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8001486:	6823      	ldr	r3, [r4, #0]
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	f022 0201 	bic.w	r2, r2, #1
 800148e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001496:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800149e:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014a0:	f000 fb76 	bl	8001b90 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014a4:	4b3f      	ldr	r3, [pc, #252]	@ (80015a4 <HAL_I2C_Init+0x140>)
 80014a6:	6865      	ldr	r5, [r4, #4]
 80014a8:	429d      	cmp	r5, r3
 80014aa:	bf94      	ite	ls
 80014ac:	4b3e      	ldrls	r3, [pc, #248]	@ (80015a8 <HAL_I2C_Init+0x144>)
 80014ae:	4b3f      	ldrhi	r3, [pc, #252]	@ (80015ac <HAL_I2C_Init+0x148>)
 80014b0:	4298      	cmp	r0, r3
 80014b2:	bf8c      	ite	hi
 80014b4:	2300      	movhi	r3, #0
 80014b6:	2301      	movls	r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1d6      	bne.n	800146a <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014bc:	4e39      	ldr	r6, [pc, #228]	@ (80015a4 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 80014be:	4b3c      	ldr	r3, [pc, #240]	@ (80015b0 <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014c0:	42b5      	cmp	r5, r6
  freqrange = I2C_FREQRANGE(pclk1);
 80014c2:	fbb0 f3f3 	udiv	r3, r0, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014c6:	bf88      	it	hi
 80014c8:	f44f 7696 	movhi.w	r6, #300	@ 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014cc:	6822      	ldr	r2, [r4, #0]
 80014ce:	6851      	ldr	r1, [r2, #4]
 80014d0:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80014d4:	ea41 0103 	orr.w	r1, r1, r3
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014d8:	bf82      	ittt	hi
 80014da:	4373      	mulhi	r3, r6
 80014dc:	f44f 767a 	movhi.w	r6, #1000	@ 0x3e8
 80014e0:	fbb3 f3f6 	udivhi	r3, r3, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80014e4:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80014e6:	6a11      	ldr	r1, [r2, #32]
 80014e8:	3301      	adds	r3, #1
 80014ea:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80014ee:	430b      	orrs	r3, r1
 80014f0:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80014f2:	69d1      	ldr	r1, [r2, #28]
 80014f4:	1e43      	subs	r3, r0, #1
 80014f6:	482b      	ldr	r0, [pc, #172]	@ (80015a4 <HAL_I2C_Init+0x140>)
 80014f8:	f421 414f 	bic.w	r1, r1, #52992	@ 0xcf00
 80014fc:	4285      	cmp	r5, r0
 80014fe:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 8001502:	d832      	bhi.n	800156a <HAL_I2C_Init+0x106>
 8001504:	006d      	lsls	r5, r5, #1
 8001506:	fbb3 f3f5 	udiv	r3, r3, r5
 800150a:	f640 70fc 	movw	r0, #4092	@ 0xffc
 800150e:	3301      	adds	r3, #1
 8001510:	4203      	tst	r3, r0
 8001512:	d042      	beq.n	800159a <HAL_I2C_Init+0x136>
 8001514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001518:	4319      	orrs	r1, r3
 800151a:	61d1      	str	r1, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800151c:	6811      	ldr	r1, [r2, #0]
 800151e:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8001522:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 8001526:	4303      	orrs	r3, r0
 8001528:	430b      	orrs	r3, r1
 800152a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800152c:	6891      	ldr	r1, [r2, #8]
 800152e:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8001532:	f421 4103 	bic.w	r1, r1, #33536	@ 0x8300
 8001536:	4303      	orrs	r3, r0
 8001538:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800153c:	430b      	orrs	r3, r1
 800153e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001540:	68d1      	ldr	r1, [r2, #12]
 8001542:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8001546:	f021 01ff 	bic.w	r1, r1, #255	@ 0xff
 800154a:	4303      	orrs	r3, r0
 800154c:	430b      	orrs	r3, r1
 800154e:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 8001550:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001552:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 800155a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800155c:	6420      	str	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800155e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001562:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001564:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
  return HAL_OK;
 8001568:	e780      	b.n	800146c <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800156a:	68a0      	ldr	r0, [r4, #8]
 800156c:	b950      	cbnz	r0, 8001584 <HAL_I2C_Init+0x120>
 800156e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001572:	fbb3 f3f5 	udiv	r3, r3, r5
 8001576:	3301      	adds	r3, #1
 8001578:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800157c:	b17b      	cbz	r3, 800159e <HAL_I2C_Init+0x13a>
 800157e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001582:	e7c9      	b.n	8001518 <HAL_I2C_Init+0xb4>
 8001584:	2019      	movs	r0, #25
 8001586:	4368      	muls	r0, r5
 8001588:	fbb3 f3f0 	udiv	r3, r3, r0
 800158c:	3301      	adds	r3, #1
 800158e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001592:	b123      	cbz	r3, 800159e <HAL_I2C_Init+0x13a>
 8001594:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001598:	e7be      	b.n	8001518 <HAL_I2C_Init+0xb4>
 800159a:	2304      	movs	r3, #4
 800159c:	e7bc      	b.n	8001518 <HAL_I2C_Init+0xb4>
 800159e:	2301      	movs	r3, #1
 80015a0:	e7ba      	b.n	8001518 <HAL_I2C_Init+0xb4>
 80015a2:	bf00      	nop
 80015a4:	000186a0 	.word	0x000186a0
 80015a8:	001e847f 	.word	0x001e847f
 80015ac:	003d08ff 	.word	0x003d08ff
 80015b0:	000f4240 	.word	0x000f4240

080015b4 <HAL_I2C_Mem_Write>:
{
 80015b4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80015b8:	4604      	mov	r4, r0
 80015ba:	4699      	mov	r9, r3
 80015bc:	460f      	mov	r7, r1
 80015be:	4690      	mov	r8, r2
 80015c0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
  uint32_t tickstart = HAL_GetTick();
 80015c2:	f7ff fcbb 	bl	8000f3c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015c6:	f894 303d 	ldrb.w	r3, [r4, #61]	@ 0x3d
  uint32_t tickstart = HAL_GetTick();
 80015ca:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80015cc:	2b20      	cmp	r3, #32
 80015ce:	d003      	beq.n	80015d8 <HAL_I2C_Mem_Write+0x24>
      return HAL_BUSY;
 80015d0:	2002      	movs	r0, #2
}
 80015d2:	b003      	add	sp, #12
 80015d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80015d8:	9000      	str	r0, [sp, #0]
 80015da:	2319      	movs	r3, #25
 80015dc:	2201      	movs	r2, #1
 80015de:	4620      	mov	r0, r4
 80015e0:	493a      	ldr	r1, [pc, #232]	@ (80016cc <HAL_I2C_Mem_Write+0x118>)
 80015e2:	f7ff fe0f 	bl	8001204 <I2C_WaitOnFlagUntilTimeout>
 80015e6:	2800      	cmp	r0, #0
 80015e8:	d1f2      	bne.n	80015d0 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 80015ea:	f894 303c 	ldrb.w	r3, [r4, #60]	@ 0x3c
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d0ee      	beq.n	80015d0 <HAL_I2C_Mem_Write+0x1c>
 80015f2:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015f4:	6820      	ldr	r0, [r4, #0]
    __HAL_LOCK(hi2c);
 80015f6:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015fa:	6803      	ldr	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80015fc:	4642      	mov	r2, r8
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80015fe:	07d9      	lsls	r1, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 8001600:	bf58      	it	pl
 8001602:	6803      	ldrpl	r3, [r0, #0]
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001604:	4639      	mov	r1, r7
      __HAL_I2C_ENABLE(hi2c);
 8001606:	bf5c      	itt	pl
 8001608:	f043 0301 	orrpl.w	r3, r3, #1
 800160c:	6003      	strpl	r3, [r0, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800160e:	6803      	ldr	r3, [r0, #0]
 8001610:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8001614:	6003      	str	r3, [r0, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001616:	2321      	movs	r3, #33	@ 0x21
 8001618:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800161c:	2340      	movs	r3, #64	@ 0x40
 800161e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001622:	2300      	movs	r3, #0
 8001624:	6423      	str	r3, [r4, #64]	@ 0x40
    hi2c->pBuffPtr    = pData;
 8001626:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001628:	4620      	mov	r0, r4
    hi2c->pBuffPtr    = pData;
 800162a:	6263      	str	r3, [r4, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800162c:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8001630:	8563      	strh	r3, [r4, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001632:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8001634:	8523      	strh	r3, [r4, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001636:	4b26      	ldr	r3, [pc, #152]	@ (80016d0 <HAL_I2C_Mem_Write+0x11c>)
 8001638:	62e3      	str	r3, [r4, #44]	@ 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800163a:	464b      	mov	r3, r9
 800163c:	e9cd 6500 	strd	r6, r5, [sp]
 8001640:	f7ff fe8c 	bl	800135c <I2C_RequestMemoryWrite>
 8001644:	2800      	cmp	r0, #0
 8001646:	d02a      	beq.n	800169e <HAL_I2C_Mem_Write+0xea>
      return HAL_ERROR;
 8001648:	2001      	movs	r0, #1
 800164a:	e7c2      	b.n	80015d2 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800164c:	f7ff fe5c 	bl	8001308 <I2C_WaitOnTXEFlagUntilTimeout>
 8001650:	b140      	cbz	r0, 8001664 <HAL_I2C_Mem_Write+0xb0>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001652:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001654:	2b04      	cmp	r3, #4
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001656:	bf01      	itttt	eq
 8001658:	6822      	ldreq	r2, [r4, #0]
 800165a:	6813      	ldreq	r3, [r2, #0]
 800165c:	f443 7300 	orreq.w	r3, r3, #512	@ 0x200
 8001660:	6013      	streq	r3, [r2, #0]
 8001662:	e7f1      	b.n	8001648 <HAL_I2C_Mem_Write+0x94>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001664:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001666:	6827      	ldr	r7, [r4, #0]
 8001668:	461a      	mov	r2, r3
 800166a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800166e:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8001670:	6262      	str	r2, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8001672:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8001674:	8d21      	ldrh	r1, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8001676:	3a01      	subs	r2, #1
 8001678:	b292      	uxth	r2, r2
 800167a:	8562      	strh	r2, [r4, #42]	@ 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800167c:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 800167e:	1e48      	subs	r0, r1, #1
 8001680:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001682:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8001684:	8520      	strh	r0, [r4, #40]	@ 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001686:	d50a      	bpl.n	800169e <HAL_I2C_Mem_Write+0xea>
 8001688:	b148      	cbz	r0, 800169e <HAL_I2C_Mem_Write+0xea>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800168a:	785a      	ldrb	r2, [r3, #1]
        hi2c->pBuffPtr++;
 800168c:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800168e:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8001690:	6263      	str	r3, [r4, #36]	@ 0x24
        hi2c->XferCount--;
 8001692:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
        hi2c->XferSize--;
 8001694:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8001696:	3b01      	subs	r3, #1
 8001698:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 800169a:	8521      	strh	r1, [r4, #40]	@ 0x28
        hi2c->XferCount--;
 800169c:	8563      	strh	r3, [r4, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800169e:	8d23      	ldrh	r3, [r4, #40]	@ 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016a0:	462a      	mov	r2, r5
 80016a2:	4631      	mov	r1, r6
 80016a4:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d1d0      	bne.n	800164c <HAL_I2C_Mem_Write+0x98>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016aa:	f7ff feb1 	bl	8001410 <I2C_WaitOnBTFFlagUntilTimeout>
 80016ae:	2800      	cmp	r0, #0
 80016b0:	d1cf      	bne.n	8001652 <HAL_I2C_Mem_Write+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80016b2:	6822      	ldr	r2, [r4, #0]
 80016b4:	6813      	ldr	r3, [r2, #0]
 80016b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016ba:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80016bc:	2320      	movs	r3, #32
    __HAL_UNLOCK(hi2c);
 80016be:	f884 003c 	strb.w	r0, [r4, #60]	@ 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80016c2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80016c6:	f884 003e 	strb.w	r0, [r4, #62]	@ 0x3e
    return HAL_OK;
 80016ca:	e782      	b.n	80015d2 <HAL_I2C_Mem_Write+0x1e>
 80016cc:	00100002 	.word	0x00100002
 80016d0:	ffff0000 	.word	0xffff0000

080016d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016d8:	4605      	mov	r5, r0
 80016da:	b338      	cbz	r0, 800172c <HAL_RCC_OscConfig+0x58>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016dc:	6803      	ldr	r3, [r0, #0]
 80016de:	07db      	lsls	r3, r3, #31
 80016e0:	d410      	bmi.n	8001704 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016e2:	682b      	ldr	r3, [r5, #0]
 80016e4:	079f      	lsls	r7, r3, #30
 80016e6:	d45e      	bmi.n	80017a6 <HAL_RCC_OscConfig+0xd2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016e8:	682b      	ldr	r3, [r5, #0]
 80016ea:	0719      	lsls	r1, r3, #28
 80016ec:	f100 8095 	bmi.w	800181a <HAL_RCC_OscConfig+0x146>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f0:	682b      	ldr	r3, [r5, #0]
 80016f2:	075a      	lsls	r2, r3, #29
 80016f4:	f100 80c1 	bmi.w	800187a <HAL_RCC_OscConfig+0x1a6>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016f8:	69eb      	ldr	r3, [r5, #28]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	f040 812c 	bne.w	8001958 <HAL_RCC_OscConfig+0x284>
        }
      }
    }
  }

  return HAL_OK;
 8001700:	2000      	movs	r0, #0
 8001702:	e029      	b.n	8001758 <HAL_RCC_OscConfig+0x84>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001704:	4c90      	ldr	r4, [pc, #576]	@ (8001948 <HAL_RCC_OscConfig+0x274>)
 8001706:	6863      	ldr	r3, [r4, #4]
 8001708:	f003 030c 	and.w	r3, r3, #12
 800170c:	2b04      	cmp	r3, #4
 800170e:	d007      	beq.n	8001720 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001710:	6863      	ldr	r3, [r4, #4]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b08      	cmp	r3, #8
 8001718:	d10a      	bne.n	8001730 <HAL_RCC_OscConfig+0x5c>
 800171a:	6863      	ldr	r3, [r4, #4]
 800171c:	03de      	lsls	r6, r3, #15
 800171e:	d507      	bpl.n	8001730 <HAL_RCC_OscConfig+0x5c>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001720:	6823      	ldr	r3, [r4, #0]
 8001722:	039c      	lsls	r4, r3, #14
 8001724:	d5dd      	bpl.n	80016e2 <HAL_RCC_OscConfig+0xe>
 8001726:	686b      	ldr	r3, [r5, #4]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d1da      	bne.n	80016e2 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800172c:	2001      	movs	r0, #1
 800172e:	e013      	b.n	8001758 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001730:	686b      	ldr	r3, [r5, #4]
 8001732:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001736:	d112      	bne.n	800175e <HAL_RCC_OscConfig+0x8a>
 8001738:	6823      	ldr	r3, [r4, #0]
 800173a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800173e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001740:	f7ff fbfc 	bl	8000f3c <HAL_GetTick>
 8001744:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001746:	6823      	ldr	r3, [r4, #0]
 8001748:	0398      	lsls	r0, r3, #14
 800174a:	d4ca      	bmi.n	80016e2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800174c:	f7ff fbf6 	bl	8000f3c <HAL_GetTick>
 8001750:	1b80      	subs	r0, r0, r6
 8001752:	2864      	cmp	r0, #100	@ 0x64
 8001754:	d9f7      	bls.n	8001746 <HAL_RCC_OscConfig+0x72>
            return HAL_TIMEOUT;
 8001756:	2003      	movs	r0, #3
}
 8001758:	b002      	add	sp, #8
 800175a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800175e:	b99b      	cbnz	r3, 8001788 <HAL_RCC_OscConfig+0xb4>
 8001760:	6823      	ldr	r3, [r4, #0]
 8001762:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001766:	6023      	str	r3, [r4, #0]
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800176e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001770:	f7ff fbe4 	bl	8000f3c <HAL_GetTick>
 8001774:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001776:	6823      	ldr	r3, [r4, #0]
 8001778:	0399      	lsls	r1, r3, #14
 800177a:	d5b2      	bpl.n	80016e2 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800177c:	f7ff fbde 	bl	8000f3c <HAL_GetTick>
 8001780:	1b80      	subs	r0, r0, r6
 8001782:	2864      	cmp	r0, #100	@ 0x64
 8001784:	d9f7      	bls.n	8001776 <HAL_RCC_OscConfig+0xa2>
 8001786:	e7e6      	b.n	8001756 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001788:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800178c:	6823      	ldr	r3, [r4, #0]
 800178e:	d103      	bne.n	8001798 <HAL_RCC_OscConfig+0xc4>
 8001790:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001794:	6023      	str	r3, [r4, #0]
 8001796:	e7cf      	b.n	8001738 <HAL_RCC_OscConfig+0x64>
 8001798:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800179c:	6023      	str	r3, [r4, #0]
 800179e:	6823      	ldr	r3, [r4, #0]
 80017a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80017a4:	e7cb      	b.n	800173e <HAL_RCC_OscConfig+0x6a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017a6:	4c68      	ldr	r4, [pc, #416]	@ (8001948 <HAL_RCC_OscConfig+0x274>)
 80017a8:	6863      	ldr	r3, [r4, #4]
 80017aa:	f013 0f0c 	tst.w	r3, #12
 80017ae:	d007      	beq.n	80017c0 <HAL_RCC_OscConfig+0xec>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017b0:	6863      	ldr	r3, [r4, #4]
 80017b2:	f003 030c 	and.w	r3, r3, #12
 80017b6:	2b08      	cmp	r3, #8
 80017b8:	d110      	bne.n	80017dc <HAL_RCC_OscConfig+0x108>
 80017ba:	6863      	ldr	r3, [r4, #4]
 80017bc:	03da      	lsls	r2, r3, #15
 80017be:	d40d      	bmi.n	80017dc <HAL_RCC_OscConfig+0x108>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017c0:	6823      	ldr	r3, [r4, #0]
 80017c2:	079b      	lsls	r3, r3, #30
 80017c4:	d502      	bpl.n	80017cc <HAL_RCC_OscConfig+0xf8>
 80017c6:	692b      	ldr	r3, [r5, #16]
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d1af      	bne.n	800172c <HAL_RCC_OscConfig+0x58>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	696a      	ldr	r2, [r5, #20]
 80017d0:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80017d4:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80017d8:	6023      	str	r3, [r4, #0]
 80017da:	e785      	b.n	80016e8 <HAL_RCC_OscConfig+0x14>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017dc:	692a      	ldr	r2, [r5, #16]
 80017de:	4b5b      	ldr	r3, [pc, #364]	@ (800194c <HAL_RCC_OscConfig+0x278>)
 80017e0:	b16a      	cbz	r2, 80017fe <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_ENABLE();
 80017e2:	2201      	movs	r2, #1
 80017e4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80017e6:	f7ff fba9 	bl	8000f3c <HAL_GetTick>
 80017ea:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ec:	6823      	ldr	r3, [r4, #0]
 80017ee:	079f      	lsls	r7, r3, #30
 80017f0:	d4ec      	bmi.n	80017cc <HAL_RCC_OscConfig+0xf8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017f2:	f7ff fba3 	bl	8000f3c <HAL_GetTick>
 80017f6:	1b80      	subs	r0, r0, r6
 80017f8:	2802      	cmp	r0, #2
 80017fa:	d9f7      	bls.n	80017ec <HAL_RCC_OscConfig+0x118>
 80017fc:	e7ab      	b.n	8001756 <HAL_RCC_OscConfig+0x82>
        __HAL_RCC_HSI_DISABLE();
 80017fe:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001800:	f7ff fb9c 	bl	8000f3c <HAL_GetTick>
 8001804:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001806:	6823      	ldr	r3, [r4, #0]
 8001808:	0798      	lsls	r0, r3, #30
 800180a:	f57f af6d 	bpl.w	80016e8 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800180e:	f7ff fb95 	bl	8000f3c <HAL_GetTick>
 8001812:	1b80      	subs	r0, r0, r6
 8001814:	2802      	cmp	r0, #2
 8001816:	d9f6      	bls.n	8001806 <HAL_RCC_OscConfig+0x132>
 8001818:	e79d      	b.n	8001756 <HAL_RCC_OscConfig+0x82>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800181a:	69aa      	ldr	r2, [r5, #24]
 800181c:	4e4a      	ldr	r6, [pc, #296]	@ (8001948 <HAL_RCC_OscConfig+0x274>)
 800181e:	4b4b      	ldr	r3, [pc, #300]	@ (800194c <HAL_RCC_OscConfig+0x278>)
 8001820:	b1e2      	cbz	r2, 800185c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8001822:	2201      	movs	r2, #1
 8001824:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001828:	f7ff fb88 	bl	8000f3c <HAL_GetTick>
 800182c:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800182e:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001830:	079b      	lsls	r3, r3, #30
 8001832:	d50d      	bpl.n	8001850 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001834:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001838:	4b45      	ldr	r3, [pc, #276]	@ (8001950 <HAL_RCC_OscConfig+0x27c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001840:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8001842:	bf00      	nop
  }
  while (Delay --);
 8001844:	9b01      	ldr	r3, [sp, #4]
 8001846:	1e5a      	subs	r2, r3, #1
 8001848:	9201      	str	r2, [sp, #4]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f9      	bne.n	8001842 <HAL_RCC_OscConfig+0x16e>
 800184e:	e74f      	b.n	80016f0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001850:	f7ff fb74 	bl	8000f3c <HAL_GetTick>
 8001854:	1b00      	subs	r0, r0, r4
 8001856:	2802      	cmp	r0, #2
 8001858:	d9e9      	bls.n	800182e <HAL_RCC_OscConfig+0x15a>
 800185a:	e77c      	b.n	8001756 <HAL_RCC_OscConfig+0x82>
      __HAL_RCC_LSI_DISABLE();
 800185c:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8001860:	f7ff fb6c 	bl	8000f3c <HAL_GetTick>
 8001864:	4604      	mov	r4, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001866:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8001868:	079f      	lsls	r7, r3, #30
 800186a:	f57f af41 	bpl.w	80016f0 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800186e:	f7ff fb65 	bl	8000f3c <HAL_GetTick>
 8001872:	1b00      	subs	r0, r0, r4
 8001874:	2802      	cmp	r0, #2
 8001876:	d9f6      	bls.n	8001866 <HAL_RCC_OscConfig+0x192>
 8001878:	e76d      	b.n	8001756 <HAL_RCC_OscConfig+0x82>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800187a:	4c33      	ldr	r4, [pc, #204]	@ (8001948 <HAL_RCC_OscConfig+0x274>)
 800187c:	69e3      	ldr	r3, [r4, #28]
 800187e:	00d8      	lsls	r0, r3, #3
 8001880:	d424      	bmi.n	80018cc <HAL_RCC_OscConfig+0x1f8>
      pwrclkchanged = SET;
 8001882:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001884:	69e3      	ldr	r3, [r4, #28]
 8001886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800188a:	61e3      	str	r3, [r4, #28]
 800188c:	69e3      	ldr	r3, [r4, #28]
 800188e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001896:	4e2f      	ldr	r6, [pc, #188]	@ (8001954 <HAL_RCC_OscConfig+0x280>)
 8001898:	6833      	ldr	r3, [r6, #0]
 800189a:	05d9      	lsls	r1, r3, #23
 800189c:	d518      	bpl.n	80018d0 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800189e:	68eb      	ldr	r3, [r5, #12]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d126      	bne.n	80018f2 <HAL_RCC_OscConfig+0x21e>
 80018a4:	6a23      	ldr	r3, [r4, #32]
 80018a6:	f043 0301 	orr.w	r3, r3, #1
 80018aa:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80018ac:	f7ff fb46 	bl	8000f3c <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b0:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 80018b4:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b6:	6a23      	ldr	r3, [r4, #32]
 80018b8:	079b      	lsls	r3, r3, #30
 80018ba:	d53f      	bpl.n	800193c <HAL_RCC_OscConfig+0x268>
    if (pwrclkchanged == SET)
 80018bc:	2f00      	cmp	r7, #0
 80018be:	f43f af1b 	beq.w	80016f8 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80018c2:	69e3      	ldr	r3, [r4, #28]
 80018c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80018c8:	61e3      	str	r3, [r4, #28]
 80018ca:	e715      	b.n	80016f8 <HAL_RCC_OscConfig+0x24>
    FlagStatus       pwrclkchanged = RESET;
 80018cc:	2700      	movs	r7, #0
 80018ce:	e7e2      	b.n	8001896 <HAL_RCC_OscConfig+0x1c2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018d0:	6833      	ldr	r3, [r6, #0]
 80018d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018d6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80018d8:	f7ff fb30 	bl	8000f3c <HAL_GetTick>
 80018dc:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018de:	6833      	ldr	r3, [r6, #0]
 80018e0:	05da      	lsls	r2, r3, #23
 80018e2:	d4dc      	bmi.n	800189e <HAL_RCC_OscConfig+0x1ca>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e4:	f7ff fb2a 	bl	8000f3c <HAL_GetTick>
 80018e8:	eba0 0008 	sub.w	r0, r0, r8
 80018ec:	2864      	cmp	r0, #100	@ 0x64
 80018ee:	d9f6      	bls.n	80018de <HAL_RCC_OscConfig+0x20a>
 80018f0:	e731      	b.n	8001756 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018f2:	b9ab      	cbnz	r3, 8001920 <HAL_RCC_OscConfig+0x24c>
 80018f4:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018f6:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018fa:	f023 0301 	bic.w	r3, r3, #1
 80018fe:	6223      	str	r3, [r4, #32]
 8001900:	6a23      	ldr	r3, [r4, #32]
 8001902:	f023 0304 	bic.w	r3, r3, #4
 8001906:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001908:	f7ff fb18 	bl	8000f3c <HAL_GetTick>
 800190c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800190e:	6a23      	ldr	r3, [r4, #32]
 8001910:	0798      	lsls	r0, r3, #30
 8001912:	d5d3      	bpl.n	80018bc <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001914:	f7ff fb12 	bl	8000f3c <HAL_GetTick>
 8001918:	1b80      	subs	r0, r0, r6
 800191a:	4540      	cmp	r0, r8
 800191c:	d9f7      	bls.n	800190e <HAL_RCC_OscConfig+0x23a>
 800191e:	e71a      	b.n	8001756 <HAL_RCC_OscConfig+0x82>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001920:	2b05      	cmp	r3, #5
 8001922:	6a23      	ldr	r3, [r4, #32]
 8001924:	d103      	bne.n	800192e <HAL_RCC_OscConfig+0x25a>
 8001926:	f043 0304 	orr.w	r3, r3, #4
 800192a:	6223      	str	r3, [r4, #32]
 800192c:	e7ba      	b.n	80018a4 <HAL_RCC_OscConfig+0x1d0>
 800192e:	f023 0301 	bic.w	r3, r3, #1
 8001932:	6223      	str	r3, [r4, #32]
 8001934:	6a23      	ldr	r3, [r4, #32]
 8001936:	f023 0304 	bic.w	r3, r3, #4
 800193a:	e7b6      	b.n	80018aa <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193c:	f7ff fafe 	bl	8000f3c <HAL_GetTick>
 8001940:	1b80      	subs	r0, r0, r6
 8001942:	4540      	cmp	r0, r8
 8001944:	d9b7      	bls.n	80018b6 <HAL_RCC_OscConfig+0x1e2>
 8001946:	e706      	b.n	8001756 <HAL_RCC_OscConfig+0x82>
 8001948:	40021000 	.word	0x40021000
 800194c:	42420000 	.word	0x42420000
 8001950:	20000008 	.word	0x20000008
 8001954:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001958:	4c2a      	ldr	r4, [pc, #168]	@ (8001a04 <HAL_RCC_OscConfig+0x330>)
 800195a:	6862      	ldr	r2, [r4, #4]
 800195c:	f002 020c 	and.w	r2, r2, #12
 8001960:	2a08      	cmp	r2, #8
 8001962:	d03e      	beq.n	80019e2 <HAL_RCC_OscConfig+0x30e>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001964:	2200      	movs	r2, #0
 8001966:	2b02      	cmp	r3, #2
 8001968:	4b27      	ldr	r3, [pc, #156]	@ (8001a08 <HAL_RCC_OscConfig+0x334>)
        __HAL_RCC_PLL_DISABLE();
 800196a:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800196c:	d12c      	bne.n	80019c8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 800196e:	f7ff fae5 	bl	8000f3c <HAL_GetTick>
 8001972:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001974:	6823      	ldr	r3, [r4, #0]
 8001976:	0199      	lsls	r1, r3, #6
 8001978:	d420      	bmi.n	80019bc <HAL_RCC_OscConfig+0x2e8>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800197a:	6a2b      	ldr	r3, [r5, #32]
 800197c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001980:	d105      	bne.n	800198e <HAL_RCC_OscConfig+0x2ba>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001982:	6862      	ldr	r2, [r4, #4]
 8001984:	68a9      	ldr	r1, [r5, #8]
 8001986:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800198a:	430a      	orrs	r2, r1
 800198c:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800198e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8001990:	6862      	ldr	r2, [r4, #4]
 8001992:	430b      	orrs	r3, r1
 8001994:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8001998:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 800199a:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800199c:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 800199e:	4b1a      	ldr	r3, [pc, #104]	@ (8001a08 <HAL_RCC_OscConfig+0x334>)
 80019a0:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80019a2:	f7ff facb 	bl	8000f3c <HAL_GetTick>
 80019a6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80019a8:	6823      	ldr	r3, [r4, #0]
 80019aa:	019a      	lsls	r2, r3, #6
 80019ac:	f53f aea8 	bmi.w	8001700 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019b0:	f7ff fac4 	bl	8000f3c <HAL_GetTick>
 80019b4:	1b40      	subs	r0, r0, r5
 80019b6:	2802      	cmp	r0, #2
 80019b8:	d9f6      	bls.n	80019a8 <HAL_RCC_OscConfig+0x2d4>
 80019ba:	e6cc      	b.n	8001756 <HAL_RCC_OscConfig+0x82>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019bc:	f7ff fabe 	bl	8000f3c <HAL_GetTick>
 80019c0:	1b80      	subs	r0, r0, r6
 80019c2:	2802      	cmp	r0, #2
 80019c4:	d9d6      	bls.n	8001974 <HAL_RCC_OscConfig+0x2a0>
 80019c6:	e6c6      	b.n	8001756 <HAL_RCC_OscConfig+0x82>
        tickstart = HAL_GetTick();
 80019c8:	f7ff fab8 	bl	8000f3c <HAL_GetTick>
 80019cc:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ce:	6823      	ldr	r3, [r4, #0]
 80019d0:	019b      	lsls	r3, r3, #6
 80019d2:	f57f ae95 	bpl.w	8001700 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d6:	f7ff fab1 	bl	8000f3c <HAL_GetTick>
 80019da:	1b40      	subs	r0, r0, r5
 80019dc:	2802      	cmp	r0, #2
 80019de:	d9f6      	bls.n	80019ce <HAL_RCC_OscConfig+0x2fa>
 80019e0:	e6b9      	b.n	8001756 <HAL_RCC_OscConfig+0x82>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	f43f aea2 	beq.w	800172c <HAL_RCC_OscConfig+0x58>
        pll_config = RCC->CFGR;
 80019e8:	6860      	ldr	r0, [r4, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ea:	6a2b      	ldr	r3, [r5, #32]
 80019ec:	f400 3280 	and.w	r2, r0, #65536	@ 0x10000
 80019f0:	429a      	cmp	r2, r3
 80019f2:	f47f ae9b 	bne.w	800172c <HAL_RCC_OscConfig+0x58>
 80019f6:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80019f8:	f400 1070 	and.w	r0, r0, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019fc:	1ac0      	subs	r0, r0, r3
 80019fe:	bf18      	it	ne
 8001a00:	2001      	movne	r0, #1
 8001a02:	e6a9      	b.n	8001758 <HAL_RCC_OscConfig+0x84>
 8001a04:	40021000 	.word	0x40021000
 8001a08:	42420000 	.word	0x42420000

08001a0c <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8001a0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a44 <HAL_RCC_GetSysClockFreq+0x38>)
 8001a0e:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8001a10:	f003 010c 	and.w	r1, r3, #12
 8001a14:	2908      	cmp	r1, #8
 8001a16:	d112      	bne.n	8001a3e <HAL_RCC_GetSysClockFreq+0x32>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a18:	480b      	ldr	r0, [pc, #44]	@ (8001a48 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001a1a:	f3c3 4183 	ubfx	r1, r3, #18, #4
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a1e:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a20:	5c40      	ldrb	r0, [r0, r1]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a22:	d509      	bpl.n	8001a38 <HAL_RCC_GetSysClockFreq+0x2c>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a24:	6853      	ldr	r3, [r2, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a26:	4a09      	ldr	r2, [pc, #36]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x40>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a28:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a2c:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a2e:	4a08      	ldr	r2, [pc, #32]	@ (8001a50 <HAL_RCC_GetSysClockFreq+0x44>)
 8001a30:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a32:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a36:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <HAL_RCC_GetSysClockFreq+0x48>)
 8001a3a:	4358      	muls	r0, r3
 8001a3c:	4770      	bx	lr
      sysclockfreq = HSE_VALUE;
 8001a3e:	4803      	ldr	r0, [pc, #12]	@ (8001a4c <HAL_RCC_GetSysClockFreq+0x40>)
}
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000
 8001a48:	08005a0a 	.word	0x08005a0a
 8001a4c:	007a1200 	.word	0x007a1200
 8001a50:	08005a08 	.word	0x08005a08
 8001a54:	003d0900 	.word	0x003d0900

08001a58 <HAL_RCC_ClockConfig>:
{
 8001a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001a5c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001a5e:	4604      	mov	r4, r0
 8001a60:	b910      	cbnz	r0, 8001a68 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001a62:	2001      	movs	r0, #1
}
 8001a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a68:	4a44      	ldr	r2, [pc, #272]	@ (8001b7c <HAL_RCC_ClockConfig+0x124>)
 8001a6a:	6813      	ldr	r3, [r2, #0]
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	428b      	cmp	r3, r1
 8001a72:	d328      	bcc.n	8001ac6 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a74:	6821      	ldr	r1, [r4, #0]
 8001a76:	078e      	lsls	r6, r1, #30
 8001a78:	d430      	bmi.n	8001adc <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7a:	07ca      	lsls	r2, r1, #31
 8001a7c:	d443      	bmi.n	8001b06 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a7e:	4a3f      	ldr	r2, [pc, #252]	@ (8001b7c <HAL_RCC_ClockConfig+0x124>)
 8001a80:	6813      	ldr	r3, [r2, #0]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	42ab      	cmp	r3, r5
 8001a88:	d865      	bhi.n	8001b56 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8a:	6822      	ldr	r2, [r4, #0]
 8001a8c:	4d3c      	ldr	r5, [pc, #240]	@ (8001b80 <HAL_RCC_ClockConfig+0x128>)
 8001a8e:	f012 0f04 	tst.w	r2, #4
 8001a92:	d16c      	bne.n	8001b6e <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a94:	0713      	lsls	r3, r2, #28
 8001a96:	d506      	bpl.n	8001aa6 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a98:	686b      	ldr	r3, [r5, #4]
 8001a9a:	6922      	ldr	r2, [r4, #16]
 8001a9c:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8001aa0:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001aa4:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aa6:	f7ff ffb1 	bl	8001a0c <HAL_RCC_GetSysClockFreq>
 8001aaa:	686b      	ldr	r3, [r5, #4]
 8001aac:	4a35      	ldr	r2, [pc, #212]	@ (8001b84 <HAL_RCC_ClockConfig+0x12c>)
 8001aae:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ab2:	5cd3      	ldrb	r3, [r2, r3]
 8001ab4:	40d8      	lsrs	r0, r3
 8001ab6:	4b34      	ldr	r3, [pc, #208]	@ (8001b88 <HAL_RCC_ClockConfig+0x130>)
 8001ab8:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001aba:	4b34      	ldr	r3, [pc, #208]	@ (8001b8c <HAL_RCC_ClockConfig+0x134>)
 8001abc:	6818      	ldr	r0, [r3, #0]
 8001abe:	f7ff f9fb 	bl	8000eb8 <HAL_InitTick>
  return HAL_OK;
 8001ac2:	2000      	movs	r0, #0
 8001ac4:	e7ce      	b.n	8001a64 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ac6:	6813      	ldr	r3, [r2, #0]
 8001ac8:	f023 0307 	bic.w	r3, r3, #7
 8001acc:	430b      	orrs	r3, r1
 8001ace:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ad0:	6813      	ldr	r3, [r2, #0]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	428b      	cmp	r3, r1
 8001ad8:	d1c3      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xa>
 8001ada:	e7cb      	b.n	8001a74 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001adc:	4b28      	ldr	r3, [pc, #160]	@ (8001b80 <HAL_RCC_ClockConfig+0x128>)
 8001ade:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ae2:	bf1e      	ittt	ne
 8001ae4:	685a      	ldrne	r2, [r3, #4]
 8001ae6:	f442 62e0 	orrne.w	r2, r2, #1792	@ 0x700
 8001aea:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aec:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aee:	bf42      	ittt	mi
 8001af0:	685a      	ldrmi	r2, [r3, #4]
 8001af2:	f442 5260 	orrmi.w	r2, r2, #14336	@ 0x3800
 8001af6:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	68a0      	ldr	r0, [r4, #8]
 8001afc:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8001b00:	4302      	orrs	r2, r0
 8001b02:	605a      	str	r2, [r3, #4]
 8001b04:	e7b9      	b.n	8001a7a <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b06:	6862      	ldr	r2, [r4, #4]
 8001b08:	4e1d      	ldr	r6, [pc, #116]	@ (8001b80 <HAL_RCC_ClockConfig+0x128>)
 8001b0a:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b0c:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0e:	d11a      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b10:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b14:	d0a5      	beq.n	8001a62 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b16:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b18:	f241 3888 	movw	r8, #5000	@ 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b1c:	f023 0303 	bic.w	r3, r3, #3
 8001b20:	4313      	orrs	r3, r2
 8001b22:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8001b24:	f7ff fa0a 	bl	8000f3c <HAL_GetTick>
 8001b28:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b2a:	6873      	ldr	r3, [r6, #4]
 8001b2c:	6862      	ldr	r2, [r4, #4]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001b36:	d0a2      	beq.n	8001a7e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b38:	f7ff fa00 	bl	8000f3c <HAL_GetTick>
 8001b3c:	1bc0      	subs	r0, r0, r7
 8001b3e:	4540      	cmp	r0, r8
 8001b40:	d9f3      	bls.n	8001b2a <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 8001b42:	2003      	movs	r0, #3
 8001b44:	e78e      	b.n	8001a64 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b46:	2a02      	cmp	r2, #2
 8001b48:	d102      	bne.n	8001b50 <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b4a:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8001b4e:	e7e1      	b.n	8001b14 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b50:	f013 0f02 	tst.w	r3, #2
 8001b54:	e7de      	b.n	8001b14 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b56:	6813      	ldr	r3, [r2, #0]
 8001b58:	f023 0307 	bic.w	r3, r3, #7
 8001b5c:	432b      	orrs	r3, r5
 8001b5e:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b60:	6813      	ldr	r3, [r2, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	42ab      	cmp	r3, r5
 8001b68:	f47f af7b 	bne.w	8001a62 <HAL_RCC_ClockConfig+0xa>
 8001b6c:	e78d      	b.n	8001a8a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b6e:	686b      	ldr	r3, [r5, #4]
 8001b70:	68e1      	ldr	r1, [r4, #12]
 8001b72:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001b76:	430b      	orrs	r3, r1
 8001b78:	606b      	str	r3, [r5, #4]
 8001b7a:	e78b      	b.n	8001a94 <HAL_RCC_ClockConfig+0x3c>
 8001b7c:	40022000 	.word	0x40022000
 8001b80:	40021000 	.word	0x40021000
 8001b84:	080059f8 	.word	0x080059f8
 8001b88:	20000008 	.word	0x20000008
 8001b8c:	20000010 	.word	0x20000010

08001b90 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b90:	4b04      	ldr	r3, [pc, #16]	@ (8001ba4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b92:	4a05      	ldr	r2, [pc, #20]	@ (8001ba8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001b9a:	5cd3      	ldrb	r3, [r2, r3]
 8001b9c:	4a03      	ldr	r2, [pc, #12]	@ (8001bac <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b9e:	6810      	ldr	r0, [r2, #0]
}
 8001ba0:	40d8      	lsrs	r0, r3
 8001ba2:	4770      	bx	lr
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	080059f0 	.word	0x080059f0
 8001bac:	20000008 	.word	0x20000008

08001bb0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001bb0:	b508      	push	{r3, lr}
  vTaskStartScheduler();
 8001bb2:	f000 fe7b 	bl	80028ac <vTaskStartScheduler>
  
  return osOK;
}
 8001bb6:	2000      	movs	r0, #0
 8001bb8:	bd08      	pop	{r3, pc}

08001bba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8001bba:	b570      	push	{r4, r5, r6, lr}
 8001bbc:	4605      	mov	r5, r0
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001bbe:	6946      	ldr	r6, [r0, #20]
{
 8001bc0:	460b      	mov	r3, r1
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bc2:	e9d0 1000 	ldrd	r1, r0, [r0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001bc6:	692a      	ldr	r2, [r5, #16]
 8001bc8:	f9b5 4008 	ldrsh.w	r4, [r5, #8]
{
 8001bcc:	b086      	sub	sp, #24
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8001bce:	b176      	cbz	r6, 8001bee <osThreadCreate+0x34>
 8001bd0:	69ad      	ldr	r5, [r5, #24]
 8001bd2:	b165      	cbz	r5, 8001bee <osThreadCreate+0x34>
  if (priority != osPriorityError) {
 8001bd4:	2c84      	cmp	r4, #132	@ 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001bd6:	bf0c      	ite	eq
 8001bd8:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8001bda:	3403      	addne	r4, #3
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bdc:	e9cd 6501 	strd	r6, r5, [sp, #4]
 8001be0:	9400      	str	r4, [sp, #0]
 8001be2:	f000 fdfe 	bl	80027e2 <xTaskCreateStatic>
 8001be6:	9005      	str	r0, [sp, #20]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001be8:	9805      	ldr	r0, [sp, #20]
}
 8001bea:	b006      	add	sp, #24
 8001bec:	bd70      	pop	{r4, r5, r6, pc}
  if (priority != osPriorityError) {
 8001bee:	2c84      	cmp	r4, #132	@ 0x84
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8001bf0:	bf0c      	ite	eq
 8001bf2:	2400      	moveq	r4, #0
    fpriority += (priority - osPriorityIdle);
 8001bf4:	3403      	addne	r4, #3
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001bf6:	ad05      	add	r5, sp, #20
 8001bf8:	e9cd 4500 	strd	r4, r5, [sp]
 8001bfc:	b292      	uxth	r2, r2
 8001bfe:	f000 fe27 	bl	8002850 <xTaskCreate>
 8001c02:	2801      	cmp	r0, #1
 8001c04:	d0f0      	beq.n	8001be8 <osThreadCreate+0x2e>
      return NULL;
 8001c06:	2000      	movs	r0, #0
 8001c08:	e7ef      	b.n	8001bea <osThreadCreate+0x30>

08001c0a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001c0a:	b508      	push	{r3, lr}
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001c0c:	2801      	cmp	r0, #1
 8001c0e:	bf38      	it	cc
 8001c10:	2001      	movcc	r0, #1
 8001c12:	f000 ffaf 	bl	8002b74 <vTaskDelay>
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001c16:	2000      	movs	r0, #0
 8001c18:	bd08      	pop	{r3, pc}
	...

08001c1c <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8001c1c:	b513      	push	{r0, r1, r4, lr}
  if(timer_def->controlblock != NULL) {
    return xTimerCreateStatic((const char *)"",
                      1, // period should be filled when starting the Timer using osTimerStart
                      (type == osTimerPeriodic) ? pdTRUE : pdFALSE,
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer,
 8001c1e:	c811      	ldmia	r0, {r0, r4}
    return xTimerCreateStatic((const char *)"",
 8001c20:	3901      	subs	r1, #1
{
 8001c22:	4613      	mov	r3, r2
    return xTimerCreateStatic((const char *)"",
 8001c24:	424a      	negs	r2, r1
 8001c26:	414a      	adcs	r2, r1
  if(timer_def->controlblock != NULL) {
 8001c28:	b13c      	cbz	r4, 8001c3a <osTimerCreate+0x1e>
    return xTimerCreateStatic((const char *)"",
 8001c2a:	e9cd 0400 	strd	r0, r4, [sp]
 8001c2e:	2101      	movs	r1, #1
 8001c30:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <osTimerCreate+0x2c>)
 8001c32:	f001 f9d2 	bl	8002fda <xTimerCreateStatic>
#endif

#else 
	return NULL;
#endif
}
 8001c36:	b002      	add	sp, #8
 8001c38:	bd10      	pop	{r4, pc}
    return xTimerCreate((const char *)"",
 8001c3a:	9000      	str	r0, [sp, #0]
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	4802      	ldr	r0, [pc, #8]	@ (8001c48 <osTimerCreate+0x2c>)
 8001c40:	f001 f9a4 	bl	8002f8c <xTimerCreate>
 8001c44:	e7f7      	b.n	8001c36 <osTimerCreate+0x1a>
 8001c46:	bf00      	nop
 8001c48:	08005a31 	.word	0x08005a31

08001c4c <osTimerStart>:
* @param  millisec      time delay value of the timer.
* @retval  status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osTimerStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStart (osTimerId timer_id, uint32_t millisec)
{
 8001c4c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8001c4e:	2400      	movs	r4, #0
 8001c50:	2901      	cmp	r1, #1
 8001c52:	460a      	mov	r2, r1
 8001c54:	9403      	str	r4, [sp, #12]
  TickType_t ticks = millisec / portTICK_PERIOD_MS;

  if (ticks == 0)
 8001c56:	bf38      	it	cc
 8001c58:	2201      	movcc	r2, #1
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c5a:	f3ef 8305 	mrs	r3, IPSR
    ticks = 1;
    
  if (inHandlerMode()) 
 8001c5e:	b1bb      	cbz	r3, 8001c90 <osTimerStart+0x44>
  {
    if (xTimerChangePeriodFromISR(timer_id, ticks, &taskWoken) != pdPASS)
 8001c60:	2109      	movs	r1, #9
 8001c62:	9400      	str	r4, [sp, #0]
 8001c64:	ab03      	add	r3, sp, #12
 8001c66:	f001 f9f5 	bl	8003054 <xTimerGenericCommand>
 8001c6a:	2801      	cmp	r0, #1
 8001c6c:	d002      	beq.n	8001c74 <osTimerStart+0x28>
    }
  }
  else 
  {
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
      result = osErrorOS;
 8001c6e:	20ff      	movs	r0, #255	@ 0xff

#else 
  result = osErrorOS;
#endif
  return result;
}
 8001c70:	b004      	add	sp, #16
 8001c72:	bd10      	pop	{r4, pc}
      portEND_SWITCHING_ISR(taskWoken);     
 8001c74:	9b03      	ldr	r3, [sp, #12]
 8001c76:	b14b      	cbz	r3, 8001c8c <osTimerStart+0x40>
 8001c78:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001c7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001c80:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001c84:	f3bf 8f4f 	dsb	sy
 8001c88:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8001c8c:	2000      	movs	r0, #0
  return result;
 8001c8e:	e7ef      	b.n	8001c70 <osTimerStart+0x24>
    if (xTimerChangePeriod(timer_id, ticks, 0) != pdPASS)
 8001c90:	2104      	movs	r1, #4
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	f001 f9de 	bl	8003054 <xTimerGenericCommand>
 8001c98:	2801      	cmp	r0, #1
 8001c9a:	d1e8      	bne.n	8001c6e <osTimerStart+0x22>
 8001c9c:	e7f6      	b.n	8001c8c <osTimerStart+0x40>

08001c9e <osTimerStop>:
* @param  timer_id      timer ID obtained by \ref osTimerCreate
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osTimerStop shall be consistent in every CMSIS-RTOS.
*/
osStatus osTimerStop (osTimerId timer_id)
{
 8001c9e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  osStatus result = osOK;
#if (configUSE_TIMERS == 1)  
  portBASE_TYPE taskWoken = pdFALSE;
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	9203      	str	r2, [sp, #12]
 8001ca4:	f3ef 8305 	mrs	r3, IPSR

  if (inHandlerMode()) {
 8001ca8:	b1c3      	cbz	r3, 8001cdc <osTimerStop+0x3e>
    if (xTimerStopFromISR(timer_id, &taskWoken) != pdPASS) {
 8001caa:	2108      	movs	r1, #8
 8001cac:	9200      	str	r2, [sp, #0]
 8001cae:	ab03      	add	r3, sp, #12
 8001cb0:	f001 f9d0 	bl	8003054 <xTimerGenericCommand>
 8001cb4:	2801      	cmp	r0, #1
 8001cb6:	d003      	beq.n	8001cc0 <osTimerStop+0x22>
      return osErrorOS;
 8001cb8:	20ff      	movs	r0, #255	@ 0xff
  }
#else 
  result = osErrorOS;
#endif 
  return result;
}
 8001cba:	b005      	add	sp, #20
 8001cbc:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 8001cc0:	9b03      	ldr	r3, [sp, #12]
 8001cc2:	b14b      	cbz	r3, 8001cd8 <osTimerStop+0x3a>
 8001cc4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001cc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001ccc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001cd0:	f3bf 8f4f 	dsb	sy
 8001cd4:	f3bf 8f6f 	isb	sy
  osStatus result = osOK;
 8001cd8:	2000      	movs	r0, #0
 8001cda:	e7ee      	b.n	8001cba <osTimerStop+0x1c>
    if (xTimerStop(timer_id, 0) != pdPASS) {
 8001cdc:	461a      	mov	r2, r3
 8001cde:	2103      	movs	r1, #3
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	f001 f9b7 	bl	8003054 <xTimerGenericCommand>
 8001ce6:	2801      	cmp	r0, #1
 8001ce8:	d1e6      	bne.n	8001cb8 <osTimerStop+0x1a>
 8001cea:	e7f5      	b.n	8001cd8 <osTimerStop+0x3a>

08001cec <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8001cec:	4603      	mov	r3, r0
 8001cee:	b513      	push	{r0, r1, r4, lr}
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8001cf0:	c807      	ldmia	r0, {r0, r1, r2}
  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8001cf2:	b10a      	cbz	r2, 8001cf8 <osMessageCreate+0xc>
 8001cf4:	68db      	ldr	r3, [r3, #12]
 8001cf6:	b92b      	cbnz	r3, 8001d04 <osMessageCreate+0x18>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001cf8:	2200      	movs	r2, #0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8001cfa:	b002      	add	sp, #8
 8001cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8001d00:	f000 b9bb 	b.w	800207a <xQueueGenericCreate>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8001d04:	2400      	movs	r4, #0
 8001d06:	9400      	str	r4, [sp, #0]
 8001d08:	f000 f96e 	bl	8001fe8 <xQueueGenericCreateStatic>
}
 8001d0c:	b002      	add	sp, #8
 8001d0e:	bd10      	pop	{r4, pc}

08001d10 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8001d10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8001d12:	9101      	str	r1, [sp, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8001d14:	2100      	movs	r1, #0
 8001d16:	9103      	str	r1, [sp, #12]
 8001d18:	f3ef 8305 	mrs	r3, IPSR
  ticks = millisec / portTICK_PERIOD_MS;
  if (ticks == 0) {
    ticks = 1;
  }
  
  if (inHandlerMode()) {
 8001d1c:	b1c3      	cbz	r3, 8001d50 <osMessagePut+0x40>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8001d1e:	460b      	mov	r3, r1
 8001d20:	aa03      	add	r2, sp, #12
 8001d22:	a901      	add	r1, sp, #4
 8001d24:	f000 fa7f 	bl	8002226 <xQueueGenericSendFromISR>
 8001d28:	2801      	cmp	r0, #1
 8001d2a:	d003      	beq.n	8001d34 <osMessagePut+0x24>
      return osErrorOS;
 8001d2c:	20ff      	movs	r0, #255	@ 0xff
      return osErrorOS;
    }
  }
  
  return osOK;
}
 8001d2e:	b005      	add	sp, #20
 8001d30:	f85d fb04 	ldr.w	pc, [sp], #4
    portEND_SWITCHING_ISR(taskWoken);
 8001d34:	9b03      	ldr	r3, [sp, #12]
 8001d36:	b14b      	cbz	r3, 8001d4c <osMessagePut+0x3c>
 8001d38:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001d3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d40:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001d44:	f3bf 8f4f 	dsb	sy
 8001d48:	f3bf 8f6f 	isb	sy
  return osOK;
 8001d4c:	2000      	movs	r0, #0
 8001d4e:	e7ee      	b.n	8001d2e <osMessagePut+0x1e>
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8001d50:	2a01      	cmp	r2, #1
 8001d52:	bf38      	it	cc
 8001d54:	2201      	movcc	r2, #1
 8001d56:	a901      	add	r1, sp, #4
 8001d58:	f000 f9b3 	bl	80020c2 <xQueueGenericSend>
 8001d5c:	2801      	cmp	r0, #1
 8001d5e:	d0f5      	beq.n	8001d4c <osMessagePut+0x3c>
 8001d60:	e7e4      	b.n	8001d2c <osMessagePut+0x1c>

08001d62 <osMessageGet>:
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
  event.value.v = 0;
 8001d62:	2300      	movs	r3, #0
{
 8001d64:	b530      	push	{r4, r5, lr}
 8001d66:	b085      	sub	sp, #20
 8001d68:	4605      	mov	r5, r0
 8001d6a:	4614      	mov	r4, r2
 8001d6c:	4608      	mov	r0, r1
  event.def.message_id = queue_id;
 8001d6e:	9103      	str	r1, [sp, #12]
  event.value.v = 0;
 8001d70:	9302      	str	r3, [sp, #8]
  
  if (queue_id == NULL) {
 8001d72:	b911      	cbnz	r1, 8001d7a <osMessageGet+0x18>
    event.status = osErrorParameter;
 8001d74:	2380      	movs	r3, #128	@ 0x80
    portEND_SWITCHING_ISR(taskWoken);
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
      /* We have mail */
      event.status = osEventMessage;
 8001d76:	9301      	str	r3, [sp, #4]
 8001d78:	e018      	b.n	8001dac <osMessageGet+0x4a>
  taskWoken = pdFALSE;
 8001d7a:	9300      	str	r3, [sp, #0]
 8001d7c:	f3ef 8305 	mrs	r3, IPSR
  if (inHandlerMode()) {
 8001d80:	b1e3      	cbz	r3, 8001dbc <osMessageGet+0x5a>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8001d82:	466a      	mov	r2, sp
 8001d84:	a902      	add	r1, sp, #8
 8001d86:	f000 fb48 	bl	800241a <xQueueReceiveFromISR>
 8001d8a:	1e43      	subs	r3, r0, #1
 8001d8c:	4258      	negs	r0, r3
 8001d8e:	4158      	adcs	r0, r3
    portEND_SWITCHING_ISR(taskWoken);
 8001d90:	9b00      	ldr	r3, [sp, #0]
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8001d92:	0100      	lsls	r0, r0, #4
 8001d94:	9001      	str	r0, [sp, #4]
    portEND_SWITCHING_ISR(taskWoken);
 8001d96:	b14b      	cbz	r3, 8001dac <osMessageGet+0x4a>
 8001d98:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001d9c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001da0:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001da4:	f3bf 8f4f 	dsb	sy
 8001da8:	f3bf 8f6f 	isb	sy
    return event;
 8001dac:	ab04      	add	r3, sp, #16
 8001dae:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8001db2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
      event.status = (ticks == 0) ? osOK : osEventTimeout;
    }
  }
  
  return event;
}
 8001db6:	4628      	mov	r0, r5
 8001db8:	b005      	add	sp, #20
 8001dba:	bd30      	pop	{r4, r5, pc}
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8001dbc:	a902      	add	r1, sp, #8
 8001dbe:	f000 fa8e 	bl	80022de <xQueueReceive>
 8001dc2:	2801      	cmp	r0, #1
 8001dc4:	d101      	bne.n	8001dca <osMessageGet+0x68>
      event.status = osEventMessage;
 8001dc6:	2310      	movs	r3, #16
 8001dc8:	e7d5      	b.n	8001d76 <osMessageGet+0x14>
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8001dca:	3c00      	subs	r4, #0
 8001dcc:	bf18      	it	ne
 8001dce:	2401      	movne	r4, #1
 8001dd0:	01a4      	lsls	r4, r4, #6
 8001dd2:	9401      	str	r4, [sp, #4]
  return event;
 8001dd4:	e7ea      	b.n	8001dac <osMessageGet+0x4a>

08001dd6 <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001dd6:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dda:	f100 0308 	add.w	r3, r0, #8

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dde:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001de2:	6043      	str	r3, [r0, #4]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001de4:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001dea:	4770      	bx	lr

08001dec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001df0:	4770      	bx	lr

08001df2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 8001df2:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001df4:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 8001df6:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001df8:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001dfa:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001dfc:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001dfe:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001e00:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001e02:	3301      	adds	r3, #1
 8001e04:	6003      	str	r3, [r0, #0]
}
 8001e06:	4770      	bx	lr

08001e08 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e08:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e0a:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e0c:	1c63      	adds	r3, r4, #1
 8001e0e:	d10a      	bne.n	8001e26 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e10:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e12:	685a      	ldr	r2, [r3, #4]
 8001e14:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e16:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e18:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e1a:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8001e1c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8001e1e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8001e20:	3301      	adds	r3, #1
 8001e22:	6003      	str	r3, [r0, #0]
}
 8001e24:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001e26:	f100 0208 	add.w	r2, r0, #8
 8001e2a:	4613      	mov	r3, r2
 8001e2c:	6852      	ldr	r2, [r2, #4]
 8001e2e:	6815      	ldr	r5, [r2, #0]
 8001e30:	42a5      	cmp	r5, r4
 8001e32:	d9fa      	bls.n	8001e2a <vListInsert+0x22>
 8001e34:	e7ed      	b.n	8001e12 <vListInsert+0xa>

08001e36 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8001e36:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e38:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8001e3c:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e3e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e40:	6859      	ldr	r1, [r3, #4]
 8001e42:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e44:	bf08      	it	eq
 8001e46:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8001e48:	2200      	movs	r2, #0
 8001e4a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	3a01      	subs	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001e52:	6818      	ldr	r0, [r3, #0]
}
 8001e54:	4770      	bx	lr

08001e56 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8001e56:	b510      	push	{r4, lr}
 8001e58:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001e5a:	f001 fab3 	bl	80033c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001e5e:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8001e60:	f001 fad0 	bl	8003404 <vPortExitCritical>

	return xReturn;
}
 8001e64:	fab4 f084 	clz	r0, r4
 8001e68:	0940      	lsrs	r0, r0, #5
 8001e6a:	bd10      	pop	{r4, pc}

08001e6c <prvCopyDataToQueue>:
{
 8001e6c:	b570      	push	{r4, r5, r6, lr}
 8001e6e:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001e70:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 8001e72:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001e74:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8001e76:	b942      	cbnz	r2, 8001e8a <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8001e78:	6806      	ldr	r6, [r0, #0]
 8001e7a:	b99e      	cbnz	r6, 8001ea4 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8001e7c:	6840      	ldr	r0, [r0, #4]
 8001e7e:	f000 ffb1 	bl	8002de4 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 8001e82:	6066      	str	r6, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001e84:	3501      	adds	r5, #1
 8001e86:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 8001e88:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8001e8a:	b96e      	cbnz	r6, 8001ea8 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8001e8c:	6880      	ldr	r0, [r0, #8]
 8001e8e:	f001 fce3 	bl	8003858 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001e92:	68a3      	ldr	r3, [r4, #8]
 8001e94:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001e96:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e98:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8001e9a:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001e9c:	4293      	cmp	r3, r2
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8001e9e:	bf24      	itt	cs
 8001ea0:	6823      	ldrcs	r3, [r4, #0]
 8001ea2:	60a3      	strcs	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 8001ea4:	2000      	movs	r0, #0
 8001ea6:	e7ed      	b.n	8001e84 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ea8:	68c0      	ldr	r0, [r0, #12]
 8001eaa:	f001 fcd5 	bl	8003858 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001eae:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8001eb0:	68e3      	ldr	r3, [r4, #12]
 8001eb2:	4251      	negs	r1, r2
 8001eb4:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001eb6:	6822      	ldr	r2, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8001eb8:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8001eba:	4293      	cmp	r3, r2
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8001ebc:	bf3e      	ittt	cc
 8001ebe:	6863      	ldrcc	r3, [r4, #4]
 8001ec0:	185b      	addcc	r3, r3, r1
 8001ec2:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8001ec4:	2e02      	cmp	r6, #2
 8001ec6:	d1ed      	bne.n	8001ea4 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8001ec8:	b10d      	cbz	r5, 8001ece <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 8001eca:	3d01      	subs	r5, #1
 8001ecc:	e7ea      	b.n	8001ea4 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8001ece:	4628      	mov	r0, r5
 8001ed0:	e7d8      	b.n	8001e84 <prvCopyDataToQueue+0x18>

08001ed2 <prvCopyDataFromQueue>:
{
 8001ed2:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001ed4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 8001ed6:	4608      	mov	r0, r1
 8001ed8:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8001eda:	b162      	cbz	r2, 8001ef6 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001edc:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001ede:	6859      	ldr	r1, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001ee0:	4414      	add	r4, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8001ee2:	428c      	cmp	r4, r1
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001ee4:	bf28      	it	cs
 8001ee6:	6819      	ldrcs	r1, [r3, #0]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8001ee8:	60dc      	str	r4, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8001eea:	bf28      	it	cs
 8001eec:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001eee:	68d9      	ldr	r1, [r3, #12]
}
 8001ef0:	bc10      	pop	{r4}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8001ef2:	f001 bcb1 	b.w	8003858 <memcpy>
}
 8001ef6:	bc10      	pop	{r4}
 8001ef8:	4770      	bx	lr

08001efa <prvUnlockQueue>:
{
 8001efa:	b570      	push	{r4, r5, r6, lr}
 8001efc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8001efe:	f001 fa61 	bl	80033c4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8001f02:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f06:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8001f0a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8001f0c:	2d00      	cmp	r5, #0
 8001f0e:	dc14      	bgt.n	8001f3a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8001f10:	23ff      	movs	r3, #255	@ 0xff
 8001f12:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 8001f16:	f001 fa75 	bl	8003404 <vPortExitCritical>
	taskENTER_CRITICAL();
 8001f1a:	f001 fa53 	bl	80033c4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8001f1e:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f22:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8001f26:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001f28:	2d00      	cmp	r5, #0
 8001f2a:	dc12      	bgt.n	8001f52 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8001f2c:	23ff      	movs	r3, #255	@ 0xff
 8001f2e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 8001f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8001f36:	f001 ba65 	b.w	8003404 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001f3a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d0e7      	beq.n	8001f10 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001f40:	4630      	mov	r0, r6
 8001f42:	f000 feaf 	bl	8002ca4 <xTaskRemoveFromEventList>
 8001f46:	b108      	cbz	r0, 8001f4c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8001f48:	f000 ff36 	bl	8002db8 <vTaskMissedYield>
			--cTxLock;
 8001f4c:	3d01      	subs	r5, #1
 8001f4e:	b26d      	sxtb	r5, r5
 8001f50:	e7dc      	b.n	8001f0c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f52:	6923      	ldr	r3, [r4, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d0e9      	beq.n	8001f2c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f58:	4630      	mov	r0, r6
 8001f5a:	f000 fea3 	bl	8002ca4 <xTaskRemoveFromEventList>
 8001f5e:	b108      	cbz	r0, 8001f64 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 8001f60:	f000 ff2a 	bl	8002db8 <vTaskMissedYield>
				--cRxLock;
 8001f64:	3d01      	subs	r5, #1
 8001f66:	b26d      	sxtb	r5, r5
 8001f68:	e7de      	b.n	8001f28 <prvUnlockQueue+0x2e>

08001f6a <xQueueGenericReset>:
{
 8001f6a:	b538      	push	{r3, r4, r5, lr}
 8001f6c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8001f6e:	4604      	mov	r4, r0
 8001f70:	b940      	cbnz	r0, 8001f84 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f76:	f383 8811 	msr	BASEPRI, r3
 8001f7a:	f3bf 8f6f 	isb	sy
 8001f7e:	f3bf 8f4f 	dsb	sy
 8001f82:	e7fe      	b.n	8001f82 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 8001f84:	f001 fa1e 	bl	80033c4 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001f88:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
 8001f8c:	434b      	muls	r3, r1
 8001f8e:	6822      	ldr	r2, [r4, #0]
 8001f90:	18d0      	adds	r0, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001f92:	1a5b      	subs	r3, r3, r1
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8001f94:	6060      	str	r0, [r4, #4]
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f96:	60a2      	str	r2, [r4, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f98:	2000      	movs	r0, #0
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001f9a:	441a      	add	r2, r3
		pxQueue->cRxLock = queueUNLOCKED;
 8001f9c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f9e:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8001fa0:	60e2      	str	r2, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001fa2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001fa6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 8001faa:	b9a5      	cbnz	r5, 8001fd6 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001fac:	6923      	ldr	r3, [r4, #16]
 8001fae:	b173      	cbz	r3, 8001fce <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fb0:	f104 0010 	add.w	r0, r4, #16
 8001fb4:	f000 fe76 	bl	8002ca4 <xTaskRemoveFromEventList>
 8001fb8:	b148      	cbz	r0, 8001fce <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 8001fba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001fbe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fc2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8001fc6:	f3bf 8f4f 	dsb	sy
 8001fca:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 8001fce:	f001 fa19 	bl	8003404 <vPortExitCritical>
}
 8001fd2:	2001      	movs	r0, #1
 8001fd4:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001fd6:	f104 0010 	add.w	r0, r4, #16
 8001fda:	f7ff fefc 	bl	8001dd6 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001fde:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8001fe2:	f7ff fef8 	bl	8001dd6 <vListInitialise>
 8001fe6:	e7f2      	b.n	8001fce <xQueueGenericReset+0x64>

08001fe8 <xQueueGenericCreateStatic>:
	{
 8001fe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001fea:	460d      	mov	r5, r1
 8001fec:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001fee:	b940      	cbnz	r0, 8002002 <xQueueGenericCreateStatic+0x1a>
 8001ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ff4:	f383 8811 	msr	BASEPRI, r3
 8001ff8:	f3bf 8f6f 	isb	sy
 8001ffc:	f3bf 8f4f 	dsb	sy
 8002000:	e7fe      	b.n	8002000 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 8002002:	b943      	cbnz	r3, 8002016 <xQueueGenericCreateStatic+0x2e>
 8002004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002008:	f383 8811 	msr	BASEPRI, r3
 800200c:	f3bf 8f6f 	isb	sy
 8002010:	f3bf 8f4f 	dsb	sy
 8002014:	e7fe      	b.n	8002014 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002016:	b14a      	cbz	r2, 800202c <xQueueGenericCreateStatic+0x44>
 8002018:	b991      	cbnz	r1, 8002040 <xQueueGenericCreateStatic+0x58>
 800201a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800201e:	f383 8811 	msr	BASEPRI, r3
 8002022:	f3bf 8f6f 	isb	sy
 8002026:	f3bf 8f4f 	dsb	sy
 800202a:	e7fe      	b.n	800202a <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800202c:	b141      	cbz	r1, 8002040 <xQueueGenericCreateStatic+0x58>
 800202e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002032:	f383 8811 	msr	BASEPRI, r3
 8002036:	f3bf 8f6f 	isb	sy
 800203a:	f3bf 8f4f 	dsb	sy
 800203e:	e7fe      	b.n	800203e <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002040:	2348      	movs	r3, #72	@ 0x48
 8002042:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002044:	9b01      	ldr	r3, [sp, #4]
 8002046:	2b48      	cmp	r3, #72	@ 0x48
 8002048:	d008      	beq.n	800205c <xQueueGenericCreateStatic+0x74>
 800204a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800204e:	f383 8811 	msr	BASEPRI, r3
 8002052:	f3bf 8f6f 	isb	sy
 8002056:	f3bf 8f4f 	dsb	sy
 800205a:	e7fe      	b.n	800205a <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800205c:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800205e:	2d00      	cmp	r5, #0
 8002060:	bf08      	it	eq
 8002062:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 8002064:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002068:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800206c:	4620      	mov	r0, r4
 800206e:	6022      	str	r2, [r4, #0]
 8002070:	f7ff ff7b 	bl	8001f6a <xQueueGenericReset>
	}
 8002074:	4620      	mov	r0, r4
 8002076:	b003      	add	sp, #12
 8002078:	bd30      	pop	{r4, r5, pc}

0800207a <xQueueGenericCreate>:
	{
 800207a:	b570      	push	{r4, r5, r6, lr}
 800207c:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800207e:	4606      	mov	r6, r0
 8002080:	b940      	cbnz	r0, 8002094 <xQueueGenericCreate+0x1a>
 8002082:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002086:	f383 8811 	msr	BASEPRI, r3
 800208a:	f3bf 8f6f 	isb	sy
 800208e:	f3bf 8f4f 	dsb	sy
 8002092:	e7fe      	b.n	8002092 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002094:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002096:	3048      	adds	r0, #72	@ 0x48
 8002098:	f001 fac0 	bl	800361c <pvPortMalloc>
		if( pxNewQueue != NULL )
 800209c:	4604      	mov	r4, r0
 800209e:	b160      	cbz	r0, 80020ba <xQueueGenericCreate+0x40>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80020a0:	2300      	movs	r3, #0
 80020a2:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80020a6:	b155      	cbz	r5, 80020be <xQueueGenericCreate+0x44>
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80020a8:	f100 0348 	add.w	r3, r0, #72	@ 0x48
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80020ac:	2101      	movs	r1, #1
 80020ae:	4620      	mov	r0, r4
	pxNewQueue->uxItemSize = uxItemSize;
 80020b0:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
 80020b4:	6023      	str	r3, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80020b6:	f7ff ff58 	bl	8001f6a <xQueueGenericReset>
	}
 80020ba:	4620      	mov	r0, r4
 80020bc:	bd70      	pop	{r4, r5, r6, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80020be:	4603      	mov	r3, r0
 80020c0:	e7f4      	b.n	80020ac <xQueueGenericCreate+0x32>

080020c2 <xQueueGenericSend>:
{
 80020c2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80020c6:	460f      	mov	r7, r1
 80020c8:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 80020ca:	4604      	mov	r4, r0
{
 80020cc:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 80020ce:	b940      	cbnz	r0, 80020e2 <xQueueGenericSend+0x20>
 80020d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020d4:	f383 8811 	msr	BASEPRI, r3
 80020d8:	f3bf 8f6f 	isb	sy
 80020dc:	f3bf 8f4f 	dsb	sy
 80020e0:	e7fe      	b.n	80020e0 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020e2:	b951      	cbnz	r1, 80020fa <xQueueGenericSend+0x38>
 80020e4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80020e6:	b143      	cbz	r3, 80020fa <xQueueGenericSend+0x38>
 80020e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020ec:	f383 8811 	msr	BASEPRI, r3
 80020f0:	f3bf 8f6f 	isb	sy
 80020f4:	f3bf 8f4f 	dsb	sy
 80020f8:	e7fe      	b.n	80020f8 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80020fa:	2e02      	cmp	r6, #2
 80020fc:	d10b      	bne.n	8002116 <xQueueGenericSend+0x54>
 80020fe:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002100:	2b01      	cmp	r3, #1
 8002102:	d008      	beq.n	8002116 <xQueueGenericSend+0x54>
 8002104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002108:	f383 8811 	msr	BASEPRI, r3
 800210c:	f3bf 8f6f 	isb	sy
 8002110:	f3bf 8f4f 	dsb	sy
 8002114:	e7fe      	b.n	8002114 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002116:	f000 fe55 	bl	8002dc4 <xTaskGetSchedulerState>
 800211a:	4605      	mov	r5, r0
 800211c:	b330      	cbz	r0, 800216c <xQueueGenericSend+0xaa>
 800211e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 8002120:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8002124:	f001 f94e 	bl	80033c4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002128:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800212a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800212c:	429a      	cmp	r2, r3
 800212e:	d301      	bcc.n	8002134 <xQueueGenericSend+0x72>
 8002130:	2e02      	cmp	r6, #2
 8002132:	d127      	bne.n	8002184 <xQueueGenericSend+0xc2>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002134:	4632      	mov	r2, r6
 8002136:	4639      	mov	r1, r7
 8002138:	4620      	mov	r0, r4
 800213a:	f7ff fe97 	bl	8001e6c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800213e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8002140:	b11b      	cbz	r3, 800214a <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002142:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002146:	f000 fdad 	bl	8002ca4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800214a:	b148      	cbz	r0, 8002160 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800214c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002150:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002154:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002158:	f3bf 8f4f 	dsb	sy
 800215c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002160:	f001 f950 	bl	8003404 <vPortExitCritical>
				return pdPASS;
 8002164:	2001      	movs	r0, #1
}
 8002166:	b004      	add	sp, #16
 8002168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800216c:	9b01      	ldr	r3, [sp, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0d6      	beq.n	8002120 <xQueueGenericSend+0x5e>
 8002172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002176:	f383 8811 	msr	BASEPRI, r3
 800217a:	f3bf 8f6f 	isb	sy
 800217e:	f3bf 8f4f 	dsb	sy
 8002182:	e7fe      	b.n	8002182 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 8002184:	9b01      	ldr	r3, [sp, #4]
 8002186:	b91b      	cbnz	r3, 8002190 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 8002188:	f001 f93c 	bl	8003404 <vPortExitCritical>
					return errQUEUE_FULL;
 800218c:	2000      	movs	r0, #0
 800218e:	e7ea      	b.n	8002166 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 8002190:	b915      	cbnz	r5, 8002198 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002192:	a802      	add	r0, sp, #8
 8002194:	f000 fdc8 	bl	8002d28 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002198:	f001 f934 	bl	8003404 <vPortExitCritical>
		vTaskSuspendAll();
 800219c:	f000 fbcc 	bl	8002938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80021a0:	f001 f910 	bl	80033c4 <vPortEnterCritical>
 80021a4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80021a8:	2bff      	cmp	r3, #255	@ 0xff
 80021aa:	bf08      	it	eq
 80021ac:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80021b0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80021b4:	2bff      	cmp	r3, #255	@ 0xff
 80021b6:	bf08      	it	eq
 80021b8:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 80021bc:	f001 f922 	bl	8003404 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80021c0:	a901      	add	r1, sp, #4
 80021c2:	a802      	add	r0, sp, #8
 80021c4:	f000 fdbc 	bl	8002d40 <xTaskCheckForTimeOut>
 80021c8:	bb38      	cbnz	r0, 800221a <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80021ca:	f001 f8fb 	bl	80033c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80021ce:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80021d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d10e      	bne.n	80021f4 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80021d6:	f001 f915 	bl	8003404 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80021da:	9901      	ldr	r1, [sp, #4]
 80021dc:	f104 0010 	add.w	r0, r4, #16
 80021e0:	f000 fd26 	bl	8002c30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80021e4:	4620      	mov	r0, r4
 80021e6:	f7ff fe88 	bl	8001efa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80021ea:	f000 fc4d 	bl	8002a88 <xTaskResumeAll>
 80021ee:	b148      	cbz	r0, 8002204 <xQueueGenericSend+0x142>
 80021f0:	2501      	movs	r5, #1
 80021f2:	e797      	b.n	8002124 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 80021f4:	f001 f906 	bl	8003404 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80021f8:	4620      	mov	r0, r4
 80021fa:	f7ff fe7e 	bl	8001efa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021fe:	f000 fc43 	bl	8002a88 <xTaskResumeAll>
 8002202:	e7f5      	b.n	80021f0 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 8002204:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002208:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800220c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002210:	f3bf 8f4f 	dsb	sy
 8002214:	f3bf 8f6f 	isb	sy
 8002218:	e7ea      	b.n	80021f0 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800221a:	4620      	mov	r0, r4
 800221c:	f7ff fe6d 	bl	8001efa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002220:	f000 fc32 	bl	8002a88 <xTaskResumeAll>
			return errQUEUE_FULL;
 8002224:	e7b2      	b.n	800218c <xQueueGenericSend+0xca>

08002226 <xQueueGenericSendFromISR>:
{
 8002226:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800222a:	4689      	mov	r9, r1
 800222c:	4617      	mov	r7, r2
 800222e:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 8002230:	4604      	mov	r4, r0
 8002232:	b940      	cbnz	r0, 8002246 <xQueueGenericSendFromISR+0x20>
 8002234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002238:	f383 8811 	msr	BASEPRI, r3
 800223c:	f3bf 8f6f 	isb	sy
 8002240:	f3bf 8f4f 	dsb	sy
 8002244:	e7fe      	b.n	8002244 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002246:	b951      	cbnz	r1, 800225e <xQueueGenericSendFromISR+0x38>
 8002248:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800224a:	b143      	cbz	r3, 800225e <xQueueGenericSendFromISR+0x38>
 800224c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002250:	f383 8811 	msr	BASEPRI, r3
 8002254:	f3bf 8f6f 	isb	sy
 8002258:	f3bf 8f4f 	dsb	sy
 800225c:	e7fe      	b.n	800225c <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800225e:	2e02      	cmp	r6, #2
 8002260:	d10b      	bne.n	800227a <xQueueGenericSendFromISR+0x54>
 8002262:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002264:	2b01      	cmp	r3, #1
 8002266:	d008      	beq.n	800227a <xQueueGenericSendFromISR+0x54>
 8002268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800226c:	f383 8811 	msr	BASEPRI, r3
 8002270:	f3bf 8f6f 	isb	sy
 8002274:	f3bf 8f4f 	dsb	sy
 8002278:	e7fe      	b.n	8002278 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800227a:	f001 f97b 	bl	8003574 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800227e:	f3ef 8811 	mrs	r8, BASEPRI
 8002282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002286:	f383 8811 	msr	BASEPRI, r3
 800228a:	f3bf 8f6f 	isb	sy
 800228e:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002292:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8002294:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002296:	429a      	cmp	r2, r3
 8002298:	d301      	bcc.n	800229e <xQueueGenericSendFromISR+0x78>
 800229a:	2e02      	cmp	r6, #2
 800229c:	d11d      	bne.n	80022da <xQueueGenericSendFromISR+0xb4>
			const int8_t cTxLock = pxQueue->cTxLock;
 800229e:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022a2:	4632      	mov	r2, r6
 80022a4:	4649      	mov	r1, r9
 80022a6:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 80022a8:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80022aa:	f7ff fddf 	bl	8001e6c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80022ae:	1c6b      	adds	r3, r5, #1
 80022b0:	d10e      	bne.n	80022d0 <xQueueGenericSendFromISR+0xaa>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80022b4:	b13b      	cbz	r3, 80022c6 <xQueueGenericSendFromISR+0xa0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022b6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80022ba:	f000 fcf3 	bl	8002ca4 <xTaskRemoveFromEventList>
 80022be:	b110      	cbz	r0, 80022c6 <xQueueGenericSendFromISR+0xa0>
							if( pxHigherPriorityTaskWoken != NULL )
 80022c0:	b10f      	cbz	r7, 80022c6 <xQueueGenericSendFromISR+0xa0>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80022c2:	2301      	movs	r3, #1
 80022c4:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 80022c6:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80022c8:	f388 8811 	msr	BASEPRI, r8
}
 80022cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80022d0:	3501      	adds	r5, #1
 80022d2:	b26d      	sxtb	r5, r5
 80022d4:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 80022d8:	e7f5      	b.n	80022c6 <xQueueGenericSendFromISR+0xa0>
			xReturn = errQUEUE_FULL;
 80022da:	2000      	movs	r0, #0
 80022dc:	e7f4      	b.n	80022c8 <xQueueGenericSendFromISR+0xa2>

080022de <xQueueReceive>:
{
 80022de:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80022e2:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 80022e4:	4604      	mov	r4, r0
{
 80022e6:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80022e8:	b940      	cbnz	r0, 80022fc <xQueueReceive+0x1e>
	__asm volatile
 80022ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022ee:	f383 8811 	msr	BASEPRI, r3
 80022f2:	f3bf 8f6f 	isb	sy
 80022f6:	f3bf 8f4f 	dsb	sy
 80022fa:	e7fe      	b.n	80022fa <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022fc:	b951      	cbnz	r1, 8002314 <xQueueReceive+0x36>
 80022fe:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 8002300:	b143      	cbz	r3, 8002314 <xQueueReceive+0x36>
 8002302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002306:	f383 8811 	msr	BASEPRI, r3
 800230a:	f3bf 8f6f 	isb	sy
 800230e:	f3bf 8f4f 	dsb	sy
 8002312:	e7fe      	b.n	8002312 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002314:	f000 fd56 	bl	8002dc4 <xTaskGetSchedulerState>
 8002318:	4605      	mov	r5, r0
 800231a:	b318      	cbz	r0, 8002364 <xQueueReceive+0x86>
 800231c:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800231e:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 8002322:	f001 f84f 	bl	80033c4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002326:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002328:	b347      	cbz	r7, 800237c <xQueueReceive+0x9e>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800232a:	4631      	mov	r1, r6
 800232c:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800232e:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002330:	f7ff fdcf 	bl	8001ed2 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002334:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002336:	6923      	ldr	r3, [r4, #16]
 8002338:	b173      	cbz	r3, 8002358 <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800233a:	f104 0010 	add.w	r0, r4, #16
 800233e:	f000 fcb1 	bl	8002ca4 <xTaskRemoveFromEventList>
 8002342:	b148      	cbz	r0, 8002358 <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 8002344:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002348:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800234c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002350:	f3bf 8f4f 	dsb	sy
 8002354:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8002358:	f001 f854 	bl	8003404 <vPortExitCritical>
				return pdPASS;
 800235c:	2001      	movs	r0, #1
}
 800235e:	b004      	add	sp, #16
 8002360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002364:	9b01      	ldr	r3, [sp, #4]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0d9      	beq.n	800231e <xQueueReceive+0x40>
 800236a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800236e:	f383 8811 	msr	BASEPRI, r3
 8002372:	f3bf 8f6f 	isb	sy
 8002376:	f3bf 8f4f 	dsb	sy
 800237a:	e7fe      	b.n	800237a <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800237c:	9b01      	ldr	r3, [sp, #4]
 800237e:	b91b      	cbnz	r3, 8002388 <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 8002380:	f001 f840 	bl	8003404 <vPortExitCritical>
					return errQUEUE_EMPTY;
 8002384:	2000      	movs	r0, #0
 8002386:	e7ea      	b.n	800235e <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 8002388:	b915      	cbnz	r5, 8002390 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800238a:	a802      	add	r0, sp, #8
 800238c:	f000 fccc 	bl	8002d28 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8002390:	f001 f838 	bl	8003404 <vPortExitCritical>
		vTaskSuspendAll();
 8002394:	f000 fad0 	bl	8002938 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002398:	f001 f814 	bl	80033c4 <vPortEnterCritical>
 800239c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80023a0:	2bff      	cmp	r3, #255	@ 0xff
 80023a2:	bf08      	it	eq
 80023a4:	f884 8044 	strbeq.w	r8, [r4, #68]	@ 0x44
 80023a8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80023ac:	2bff      	cmp	r3, #255	@ 0xff
 80023ae:	bf08      	it	eq
 80023b0:	f884 8045 	strbeq.w	r8, [r4, #69]	@ 0x45
 80023b4:	f001 f826 	bl	8003404 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80023b8:	a901      	add	r1, sp, #4
 80023ba:	a802      	add	r0, sp, #8
 80023bc:	f000 fcc0 	bl	8002d40 <xTaskCheckForTimeOut>
 80023c0:	bb00      	cbnz	r0, 8002404 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023c2:	4620      	mov	r0, r4
 80023c4:	f7ff fd47 	bl	8001e56 <prvIsQueueEmpty>
 80023c8:	b1b0      	cbz	r0, 80023f8 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80023ca:	9901      	ldr	r1, [sp, #4]
 80023cc:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 80023d0:	f000 fc2e 	bl	8002c30 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80023d4:	4620      	mov	r0, r4
 80023d6:	f7ff fd90 	bl	8001efa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80023da:	f000 fb55 	bl	8002a88 <xTaskResumeAll>
 80023de:	b948      	cbnz	r0, 80023f4 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 80023e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80023e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023e8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80023ec:	f3bf 8f4f 	dsb	sy
 80023f0:	f3bf 8f6f 	isb	sy
 80023f4:	2501      	movs	r5, #1
 80023f6:	e794      	b.n	8002322 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 80023f8:	4620      	mov	r0, r4
 80023fa:	f7ff fd7e 	bl	8001efa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023fe:	f000 fb43 	bl	8002a88 <xTaskResumeAll>
 8002402:	e7f7      	b.n	80023f4 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 8002404:	4620      	mov	r0, r4
 8002406:	f7ff fd78 	bl	8001efa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800240a:	f000 fb3d 	bl	8002a88 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800240e:	4620      	mov	r0, r4
 8002410:	f7ff fd21 	bl	8001e56 <prvIsQueueEmpty>
 8002414:	2800      	cmp	r0, #0
 8002416:	d0ed      	beq.n	80023f4 <xQueueReceive+0x116>
 8002418:	e7b4      	b.n	8002384 <xQueueReceive+0xa6>

0800241a <xQueueReceiveFromISR>:
{
 800241a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800241e:	4689      	mov	r9, r1
 8002420:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 8002422:	4604      	mov	r4, r0
 8002424:	b940      	cbnz	r0, 8002438 <xQueueReceiveFromISR+0x1e>
 8002426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800242a:	f383 8811 	msr	BASEPRI, r3
 800242e:	f3bf 8f6f 	isb	sy
 8002432:	f3bf 8f4f 	dsb	sy
 8002436:	e7fe      	b.n	8002436 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002438:	b951      	cbnz	r1, 8002450 <xQueueReceiveFromISR+0x36>
 800243a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800243c:	b143      	cbz	r3, 8002450 <xQueueReceiveFromISR+0x36>
 800243e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002442:	f383 8811 	msr	BASEPRI, r3
 8002446:	f3bf 8f6f 	isb	sy
 800244a:	f3bf 8f4f 	dsb	sy
 800244e:	e7fe      	b.n	800244e <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002450:	f001 f890 	bl	8003574 <vPortValidateInterruptPriority>
	__asm volatile
 8002454:	f3ef 8711 	mrs	r7, BASEPRI
 8002458:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800245c:	f383 8811 	msr	BASEPRI, r3
 8002460:	f3bf 8f6f 	isb	sy
 8002464:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002468:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800246a:	b30d      	cbz	r5, 80024b0 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800246c:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002470:	4649      	mov	r1, r9
 8002472:	4620      	mov	r0, r4
			const int8_t cRxLock = pxQueue->cRxLock;
 8002474:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002476:	f7ff fd2c 	bl	8001ed2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800247a:	3d01      	subs	r5, #1
			if( cRxLock == queueUNLOCKED )
 800247c:	1c73      	adds	r3, r6, #1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800247e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 8002480:	d111      	bne.n	80024a6 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002482:	6923      	ldr	r3, [r4, #16]
 8002484:	b153      	cbz	r3, 800249c <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002486:	f104 0010 	add.w	r0, r4, #16
 800248a:	f000 fc0b 	bl	8002ca4 <xTaskRemoveFromEventList>
 800248e:	b128      	cbz	r0, 800249c <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 8002490:	f1b8 0f00 	cmp.w	r8, #0
 8002494:	d002      	beq.n	800249c <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002496:	2301      	movs	r3, #1
 8002498:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800249c:	2001      	movs	r0, #1
	__asm volatile
 800249e:	f387 8811 	msr	BASEPRI, r7
}
 80024a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80024a6:	3601      	adds	r6, #1
 80024a8:	b276      	sxtb	r6, r6
 80024aa:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 80024ae:	e7f5      	b.n	800249c <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 80024b0:	4628      	mov	r0, r5
 80024b2:	e7f4      	b.n	800249e <xQueueReceiveFromISR+0x84>

080024b4 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024b4:	2300      	movs	r3, #0
	{
 80024b6:	b530      	push	{r4, r5, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80024b8:	4a06      	ldr	r2, [pc, #24]	@ (80024d4 <vQueueAddToRegistry+0x20>)
 80024ba:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80024be:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80024c2:	b91d      	cbnz	r5, 80024cc <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80024c4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80024c8:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80024ca:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80024cc:	3301      	adds	r3, #1
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d1f3      	bne.n	80024ba <vQueueAddToRegistry+0x6>
 80024d2:	e7fa      	b.n	80024ca <vQueueAddToRegistry+0x16>
 80024d4:	20000ba4 	.word	0x20000ba4

080024d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80024d8:	b570      	push	{r4, r5, r6, lr}
 80024da:	4604      	mov	r4, r0
 80024dc:	460d      	mov	r5, r1
 80024de:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80024e0:	f000 ff70 	bl	80033c4 <vPortEnterCritical>
 80024e4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80024e8:	2bff      	cmp	r3, #255	@ 0xff
 80024ea:	bf04      	itt	eq
 80024ec:	2300      	moveq	r3, #0
 80024ee:	f884 3044 	strbeq.w	r3, [r4, #68]	@ 0x44
 80024f2:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80024f6:	2bff      	cmp	r3, #255	@ 0xff
 80024f8:	bf04      	itt	eq
 80024fa:	2300      	moveq	r3, #0
 80024fc:	f884 3045 	strbeq.w	r3, [r4, #69]	@ 0x45
 8002500:	f000 ff80 	bl	8003404 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002504:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002506:	b92b      	cbnz	r3, 8002514 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002508:	4632      	mov	r2, r6
 800250a:	4629      	mov	r1, r5
 800250c:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 8002510:	f000 fba8 	bl	8002c64 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002514:	4620      	mov	r0, r4
	}
 8002516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800251a:	f7ff bcee 	b.w	8001efa <prvUnlockQueue>
	...

08002520 <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002520:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002524:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002526:	f000 ff4d 	bl	80033c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800252a:	4b2f      	ldr	r3, [pc, #188]	@ (80025e8 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800252c:	4e2f      	ldr	r6, [pc, #188]	@ (80025ec <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	4f2f      	ldr	r7, [pc, #188]	@ (80025f0 <prvAddNewTaskToReadyList+0xd0>)
 8002532:	3201      	adds	r2, #1
 8002534:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8002536:	6835      	ldr	r5, [r6, #0]
 8002538:	2d00      	cmp	r5, #0
 800253a:	d14a      	bne.n	80025d2 <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800253c:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d11f      	bne.n	8002584 <prvAddNewTaskToReadyList+0x64>
 8002544:	46b8      	mov	r8, r7
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002546:	4640      	mov	r0, r8
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002548:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800254a:	f7ff fc44 	bl	8001dd6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800254e:	2d07      	cmp	r5, #7
 8002550:	f108 0814 	add.w	r8, r8, #20
 8002554:	d1f7      	bne.n	8002546 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002556:	f8df 809c 	ldr.w	r8, [pc, #156]	@ 80025f4 <prvAddNewTaskToReadyList+0xd4>
	vListInitialise( &xDelayedTaskList2 );
 800255a:	4d27      	ldr	r5, [pc, #156]	@ (80025f8 <prvAddNewTaskToReadyList+0xd8>)
	vListInitialise( &xDelayedTaskList1 );
 800255c:	4640      	mov	r0, r8
 800255e:	f7ff fc3a 	bl	8001dd6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002562:	4628      	mov	r0, r5
 8002564:	f7ff fc37 	bl	8001dd6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002568:	4824      	ldr	r0, [pc, #144]	@ (80025fc <prvAddNewTaskToReadyList+0xdc>)
 800256a:	f7ff fc34 	bl	8001dd6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800256e:	4824      	ldr	r0, [pc, #144]	@ (8002600 <prvAddNewTaskToReadyList+0xe0>)
 8002570:	f7ff fc31 	bl	8001dd6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002574:	4823      	ldr	r0, [pc, #140]	@ (8002604 <prvAddNewTaskToReadyList+0xe4>)
 8002576:	f7ff fc2e 	bl	8001dd6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800257a:	4b23      	ldr	r3, [pc, #140]	@ (8002608 <prvAddNewTaskToReadyList+0xe8>)
 800257c:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002580:	4b22      	ldr	r3, [pc, #136]	@ (800260c <prvAddNewTaskToReadyList+0xec>)
 8002582:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 8002584:	4a22      	ldr	r2, [pc, #136]	@ (8002610 <prvAddNewTaskToReadyList+0xf0>)
		prvAddTaskToReadyList( pxNewTCB );
 8002586:	4923      	ldr	r1, [pc, #140]	@ (8002614 <prvAddNewTaskToReadyList+0xf4>)
		uxTaskNumber++;
 8002588:	6813      	ldr	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800258a:	6808      	ldr	r0, [r1, #0]
		uxTaskNumber++;
 800258c:	3301      	adds	r3, #1
 800258e:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8002590:	2301      	movs	r3, #1
 8002592:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002594:	4093      	lsls	r3, r2
 8002596:	4303      	orrs	r3, r0
 8002598:	2014      	movs	r0, #20
 800259a:	600b      	str	r3, [r1, #0]
 800259c:	fb00 7002 	mla	r0, r0, r2, r7
 80025a0:	1d21      	adds	r1, r4, #4
 80025a2:	f7ff fc26 	bl	8001df2 <vListInsertEnd>
	taskEXIT_CRITICAL();
 80025a6:	f000 ff2d 	bl	8003404 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 80025aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002618 <prvAddNewTaskToReadyList+0xf8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	b173      	cbz	r3, 80025ce <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80025b0:	6833      	ldr	r3, [r6, #0]
 80025b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80025b4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d209      	bcs.n	80025ce <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 80025ba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80025be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 80025c6:	f3bf 8f4f 	dsb	sy
 80025ca:	f3bf 8f6f 	isb	sy
}
 80025ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 80025d2:	4b11      	ldr	r3, [pc, #68]	@ (8002618 <prvAddNewTaskToReadyList+0xf8>)
 80025d4:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025d6:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 80025d8:	2a00      	cmp	r2, #0
 80025da:	d1d3      	bne.n	8002584 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80025dc:	6832      	ldr	r2, [r6, #0]
 80025de:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80025e0:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 80025e2:	bf98      	it	ls
 80025e4:	6034      	strls	r4, [r6, #0]
 80025e6:	e7cd      	b.n	8002584 <prvAddNewTaskToReadyList+0x64>
 80025e8:	20000c08 	.word	0x20000c08
 80025ec:	20000d08 	.word	0x20000d08
 80025f0:	20000c7c 	.word	0x20000c7c
 80025f4:	20000c68 	.word	0x20000c68
 80025f8:	20000c54 	.word	0x20000c54
 80025fc:	20000c38 	.word	0x20000c38
 8002600:	20000c24 	.word	0x20000c24
 8002604:	20000c0c 	.word	0x20000c0c
 8002608:	20000c50 	.word	0x20000c50
 800260c:	20000c4c 	.word	0x20000c4c
 8002610:	20000bec 	.word	0x20000bec
 8002614:	20000c00 	.word	0x20000c00
 8002618:	20000bfc 	.word	0x20000bfc

0800261c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800261c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800261e:	4b1a      	ldr	r3, [pc, #104]	@ (8002688 <prvAddCurrentTaskToDelayedList+0x6c>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002620:	4d1a      	ldr	r5, [pc, #104]	@ (800268c <prvAddCurrentTaskToDelayedList+0x70>)
{
 8002622:	4606      	mov	r6, r0
const TickType_t xConstTickCount = xTickCount;
 8002624:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002626:	6828      	ldr	r0, [r5, #0]
{
 8002628:	460f      	mov	r7, r1
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800262a:	3004      	adds	r0, #4
 800262c:	f7ff fc03 	bl	8001e36 <uxListRemove>
 8002630:	b940      	cbnz	r0, 8002644 <prvAddCurrentTaskToDelayedList+0x28>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8002632:	682a      	ldr	r2, [r5, #0]
 8002634:	4916      	ldr	r1, [pc, #88]	@ (8002690 <prvAddCurrentTaskToDelayedList+0x74>)
 8002636:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8002638:	2201      	movs	r2, #1
 800263a:	680b      	ldr	r3, [r1, #0]
 800263c:	4082      	lsls	r2, r0
 800263e:	ea23 0302 	bic.w	r3, r3, r2
 8002642:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8002644:	1c73      	adds	r3, r6, #1
 8002646:	d107      	bne.n	8002658 <prvAddCurrentTaskToDelayedList+0x3c>
 8002648:	b137      	cbz	r7, 8002658 <prvAddCurrentTaskToDelayedList+0x3c>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800264a:	6829      	ldr	r1, [r5, #0]
 800264c:	4811      	ldr	r0, [pc, #68]	@ (8002694 <prvAddCurrentTaskToDelayedList+0x78>)
 800264e:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8002650:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002654:	f7ff bbcd 	b.w	8001df2 <vListInsertEnd>
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002658:	682b      	ldr	r3, [r5, #0]
 800265a:	19a4      	adds	r4, r4, r6
 800265c:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800265e:	d307      	bcc.n	8002670 <prvAddCurrentTaskToDelayedList+0x54>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002660:	4b0d      	ldr	r3, [pc, #52]	@ (8002698 <prvAddCurrentTaskToDelayedList+0x7c>)
 8002662:	6818      	ldr	r0, [r3, #0]
 8002664:	6829      	ldr	r1, [r5, #0]
}
 8002666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800266a:	3104      	adds	r1, #4
 800266c:	f7ff bbcc 	b.w	8001e08 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002670:	4b0a      	ldr	r3, [pc, #40]	@ (800269c <prvAddCurrentTaskToDelayedList+0x80>)
 8002672:	6818      	ldr	r0, [r3, #0]
 8002674:	6829      	ldr	r1, [r5, #0]
 8002676:	3104      	adds	r1, #4
 8002678:	f7ff fbc6 	bl	8001e08 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800267c:	4b08      	ldr	r3, [pc, #32]	@ (80026a0 <prvAddCurrentTaskToDelayedList+0x84>)
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	42a2      	cmp	r2, r4
					xNextTaskUnblockTime = xTimeToWake;
 8002682:	bf88      	it	hi
 8002684:	601c      	strhi	r4, [r3, #0]
}
 8002686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002688:	20000c04 	.word	0x20000c04
 800268c:	20000d08 	.word	0x20000d08
 8002690:	20000c00 	.word	0x20000c00
 8002694:	20000c0c 	.word	0x20000c0c
 8002698:	20000c4c 	.word	0x20000c4c
 800269c:	20000c50 	.word	0x20000c50
 80026a0:	20000be8 	.word	0x20000be8

080026a4 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026a4:	4a06      	ldr	r2, [pc, #24]	@ (80026c0 <prvResetNextTaskUnblockTime+0x1c>)
 80026a6:	6813      	ldr	r3, [r2, #0]
 80026a8:	6819      	ldr	r1, [r3, #0]
 80026aa:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <prvResetNextTaskUnblockTime+0x20>)
 80026ac:	b919      	cbnz	r1, 80026b6 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 80026ae:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80026b2:	601a      	str	r2, [r3, #0]
}
 80026b4:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80026b6:	6812      	ldr	r2, [r2, #0]
 80026b8:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80026ba:	68d2      	ldr	r2, [r2, #12]
 80026bc:	6852      	ldr	r2, [r2, #4]
 80026be:	e7f8      	b.n	80026b2 <prvResetNextTaskUnblockTime+0xe>
 80026c0:	20000c50 	.word	0x20000c50
 80026c4:	20000be8 	.word	0x20000be8

080026c8 <prvDeleteTCB>:
	{
 80026c8:	b510      	push	{r4, lr}
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80026ca:	f890 3051 	ldrb.w	r3, [r0, #81]	@ 0x51
	{
 80026ce:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80026d0:	b93b      	cbnz	r3, 80026e2 <prvDeleteTCB+0x1a>
				vPortFree( pxTCB->pxStack );
 80026d2:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80026d4:	f001 f834 	bl	8003740 <vPortFree>
				vPortFree( pxTCB );
 80026d8:	4620      	mov	r0, r4
	}
 80026da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 80026de:	f001 b82f 	b.w	8003740 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d0f9      	beq.n	80026da <prvDeleteTCB+0x12>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d008      	beq.n	80026fc <prvDeleteTCB+0x34>
	__asm volatile
 80026ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80026ee:	f383 8811 	msr	BASEPRI, r3
 80026f2:	f3bf 8f6f 	isb	sy
 80026f6:	f3bf 8f4f 	dsb	sy
 80026fa:	e7fe      	b.n	80026fa <prvDeleteTCB+0x32>
	}
 80026fc:	bd10      	pop	{r4, pc}
	...

08002700 <prvIdleTask>:
{
 8002700:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002702:	4c13      	ldr	r4, [pc, #76]	@ (8002750 <prvIdleTask+0x50>)
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8002704:	4f13      	ldr	r7, [pc, #76]	@ (8002754 <prvIdleTask+0x54>)
				--uxCurrentNumberOfTasks;
 8002706:	4d14      	ldr	r5, [pc, #80]	@ (8002758 <prvIdleTask+0x58>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002708:	6823      	ldr	r3, [r4, #0]
 800270a:	b973      	cbnz	r3, 800272a <prvIdleTask+0x2a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800270c:	4b13      	ldr	r3, [pc, #76]	@ (800275c <prvIdleTask+0x5c>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b01      	cmp	r3, #1
 8002712:	d9f8      	bls.n	8002706 <prvIdleTask+0x6>
				taskYIELD();
 8002714:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002718:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800271c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002720:	f3bf 8f4f 	dsb	sy
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	e7ed      	b.n	8002706 <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800272a:	f000 fe4b 	bl	80033c4 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002732:	1d30      	adds	r0, r6, #4
 8002734:	f7ff fb7f 	bl	8001e36 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8002738:	682b      	ldr	r3, [r5, #0]
 800273a:	3b01      	subs	r3, #1
 800273c:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800273e:	6823      	ldr	r3, [r4, #0]
 8002740:	3b01      	subs	r3, #1
 8002742:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 8002744:	f000 fe5e 	bl	8003404 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 8002748:	4630      	mov	r0, r6
 800274a:	f7ff ffbd 	bl	80026c8 <prvDeleteTCB>
 800274e:	e7db      	b.n	8002708 <prvIdleTask+0x8>
 8002750:	20000c20 	.word	0x20000c20
 8002754:	20000c24 	.word	0x20000c24
 8002758:	20000c08 	.word	0x20000c08
 800275c:	20000c7c 	.word	0x20000c7c

08002760 <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002764:	4607      	mov	r7, r0
 8002766:	e9dd 8409 	ldrd	r8, r4, [sp, #36]	@ 0x24
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800276a:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 800276e:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8002770:	3a01      	subs	r2, #1
 8002772:	eb06 0682 	add.w	r6, r6, r2, lsl #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8002776:	4699      	mov	r9, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8002778:	f026 0607 	bic.w	r6, r6, #7
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800277c:	1e4b      	subs	r3, r1, #1
 800277e:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 8002782:	310f      	adds	r1, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002784:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8002788:	f802 0f01 	strb.w	r0, [r2, #1]!
		if( pcName[ x ] == 0x00 )
 800278c:	b108      	cbz	r0, 8002792 <prvInitialiseNewTask.constprop.0+0x32>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800278e:	428b      	cmp	r3, r1
 8002790:	d1f8      	bne.n	8002784 <prvInitialiseNewTask.constprop.0+0x24>
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002792:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002794:	f04f 0a00 	mov.w	sl, #0
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002798:	2d06      	cmp	r5, #6
 800279a:	bf28      	it	cs
 800279c:	2506      	movcs	r5, #6
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800279e:	1d20      	adds	r0, r4, #4
		pxNewTCB->uxMutexesHeld = 0;
 80027a0:	e9c4 5a11 	strd	r5, sl, [r4, #68]	@ 0x44
	pxNewTCB->uxPriority = uxPriority;
 80027a4:	62e5      	str	r5, [r4, #44]	@ 0x2c
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80027a6:	f884 a043 	strb.w	sl, [r4, #67]	@ 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80027aa:	f7ff fb1f 	bl	8001dec <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027ae:	f1c5 0507 	rsb	r5, r5, #7
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80027b2:	f104 0018 	add.w	r0, r4, #24
 80027b6:	f7ff fb19 	bl	8001dec <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 80027ba:	f8c4 a04c 	str.w	sl, [r4, #76]	@ 0x4c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027be:	464a      	mov	r2, r9
 80027c0:	4639      	mov	r1, r7
 80027c2:	4630      	mov	r0, r6
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80027c4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80027c6:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80027c8:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80027ca:	f884 a050 	strb.w	sl, [r4, #80]	@ 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80027ce:	f000 fdd3 	bl	8003378 <pxPortInitialiseStack>
 80027d2:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 80027d4:	f1b8 0f00 	cmp.w	r8, #0
 80027d8:	d001      	beq.n	80027de <prvInitialiseNewTask.constprop.0+0x7e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80027da:	f8c8 4000 	str.w	r4, [r8]
}
 80027de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080027e2 <xTaskCreateStatic>:
	{
 80027e2:	b570      	push	{r4, r5, r6, lr}
 80027e4:	b086      	sub	sp, #24
 80027e6:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 80027ea:	b945      	cbnz	r5, 80027fe <xTaskCreateStatic+0x1c>
 80027ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80027f0:	f383 8811 	msr	BASEPRI, r3
 80027f4:	f3bf 8f6f 	isb	sy
 80027f8:	f3bf 8f4f 	dsb	sy
 80027fc:	e7fe      	b.n	80027fc <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80027fe:	b944      	cbnz	r4, 8002812 <xTaskCreateStatic+0x30>
 8002800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002804:	f383 8811 	msr	BASEPRI, r3
 8002808:	f3bf 8f6f 	isb	sy
 800280c:	f3bf 8f4f 	dsb	sy
 8002810:	e7fe      	b.n	8002810 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 8002812:	2654      	movs	r6, #84	@ 0x54
 8002814:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002816:	9e05      	ldr	r6, [sp, #20]
 8002818:	2e54      	cmp	r6, #84	@ 0x54
 800281a:	d008      	beq.n	800282e <xTaskCreateStatic+0x4c>
 800281c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002820:	f383 8811 	msr	BASEPRI, r3
 8002824:	f3bf 8f6f 	isb	sy
 8002828:	f3bf 8f4f 	dsb	sy
 800282c:	e7fe      	b.n	800282c <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800282e:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002830:	2502      	movs	r5, #2
 8002832:	f884 5051 	strb.w	r5, [r4, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002836:	ad04      	add	r5, sp, #16
 8002838:	9501      	str	r5, [sp, #4]
 800283a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800283c:	9402      	str	r4, [sp, #8]
 800283e:	9500      	str	r5, [sp, #0]
 8002840:	f7ff ff8e 	bl	8002760 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002844:	4620      	mov	r0, r4
 8002846:	f7ff fe6b 	bl	8002520 <prvAddNewTaskToReadyList>
	}
 800284a:	9804      	ldr	r0, [sp, #16]
 800284c:	b006      	add	sp, #24
 800284e:	bd70      	pop	{r4, r5, r6, pc}

08002850 <xTaskCreate>:
	{
 8002850:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002854:	4607      	mov	r7, r0
 8002856:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002858:	0090      	lsls	r0, r2, #2
	{
 800285a:	4688      	mov	r8, r1
 800285c:	4616      	mov	r6, r2
 800285e:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002860:	f000 fedc 	bl	800361c <pvPortMalloc>
			if( pxStack != NULL )
 8002864:	4605      	mov	r5, r0
 8002866:	b920      	cbnz	r0, 8002872 <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002868:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800286c:	b005      	add	sp, #20
 800286e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8002872:	2054      	movs	r0, #84	@ 0x54
 8002874:	f000 fed2 	bl	800361c <pvPortMalloc>
				if( pxNewTCB != NULL )
 8002878:	4604      	mov	r4, r0
 800287a:	b198      	cbz	r0, 80028a4 <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800287c:	2300      	movs	r3, #0
 800287e:	f880 3051 	strb.w	r3, [r0, #81]	@ 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002882:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
					pxNewTCB->pxStack = pxStack;
 8002884:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002886:	9301      	str	r3, [sp, #4]
 8002888:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800288a:	4632      	mov	r2, r6
 800288c:	4641      	mov	r1, r8
 800288e:	9002      	str	r0, [sp, #8]
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	4638      	mov	r0, r7
 8002894:	464b      	mov	r3, r9
 8002896:	f7ff ff63 	bl	8002760 <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800289a:	4620      	mov	r0, r4
 800289c:	f7ff fe40 	bl	8002520 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80028a0:	2001      	movs	r0, #1
 80028a2:	e7e3      	b.n	800286c <xTaskCreate+0x1c>
					vPortFree( pxStack );
 80028a4:	4628      	mov	r0, r5
 80028a6:	f000 ff4b 	bl	8003740 <vPortFree>
		if( pxNewTCB != NULL )
 80028aa:	e7dd      	b.n	8002868 <xTaskCreate+0x18>

080028ac <vTaskStartScheduler>:
{
 80028ac:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80028ae:	2400      	movs	r4, #0
{
 80028b0:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80028b2:	aa07      	add	r2, sp, #28
 80028b4:	a906      	add	r1, sp, #24
 80028b6:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80028b8:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80028bc:	f7fd fc48 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80028c0:	9b05      	ldr	r3, [sp, #20]
 80028c2:	9a07      	ldr	r2, [sp, #28]
 80028c4:	9302      	str	r3, [sp, #8]
 80028c6:	9b06      	ldr	r3, [sp, #24]
 80028c8:	4916      	ldr	r1, [pc, #88]	@ (8002924 <vTaskStartScheduler+0x78>)
 80028ca:	e9cd 4300 	strd	r4, r3, [sp]
 80028ce:	4816      	ldr	r0, [pc, #88]	@ (8002928 <vTaskStartScheduler+0x7c>)
 80028d0:	4623      	mov	r3, r4
 80028d2:	f7ff ff86 	bl	80027e2 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80028d6:	b318      	cbz	r0, 8002920 <vTaskStartScheduler+0x74>
			xReturn = xTimerCreateTimerTask();
 80028d8:	f000 fb26 	bl	8002f28 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80028dc:	2801      	cmp	r0, #1
 80028de:	d114      	bne.n	800290a <vTaskStartScheduler+0x5e>
 80028e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028e4:	f383 8811 	msr	BASEPRI, r3
 80028e8:	f3bf 8f6f 	isb	sy
 80028ec:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295
 80028f4:	4b0d      	ldr	r3, [pc, #52]	@ (800292c <vTaskStartScheduler+0x80>)
 80028f6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80028f8:	4b0d      	ldr	r3, [pc, #52]	@ (8002930 <vTaskStartScheduler+0x84>)
 80028fa:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80028fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002934 <vTaskStartScheduler+0x88>)
 80028fe:	601c      	str	r4, [r3, #0]
}
 8002900:	b008      	add	sp, #32
 8002902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 8002906:	f000 bddd 	b.w	80034c4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800290a:	3001      	adds	r0, #1
 800290c:	d108      	bne.n	8002920 <vTaskStartScheduler+0x74>
 800290e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002912:	f383 8811 	msr	BASEPRI, r3
 8002916:	f3bf 8f6f 	isb	sy
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	e7fe      	b.n	800291e <vTaskStartScheduler+0x72>
}
 8002920:	b008      	add	sp, #32
 8002922:	bd10      	pop	{r4, pc}
 8002924:	08005a1a 	.word	0x08005a1a
 8002928:	08002701 	.word	0x08002701
 800292c:	20000be8 	.word	0x20000be8
 8002930:	20000bfc 	.word	0x20000bfc
 8002934:	20000c04 	.word	0x20000c04

08002938 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8002938:	4a02      	ldr	r2, [pc, #8]	@ (8002944 <vTaskSuspendAll+0xc>)
 800293a:	6813      	ldr	r3, [r2, #0]
 800293c:	3301      	adds	r3, #1
 800293e:	6013      	str	r3, [r2, #0]
}
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000be4 	.word	0x20000be4

08002948 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8002948:	4b01      	ldr	r3, [pc, #4]	@ (8002950 <xTaskGetTickCount+0x8>)
 800294a:	6818      	ldr	r0, [r3, #0]
}
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	20000c04 	.word	0x20000c04

08002954 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002954:	4b41      	ldr	r3, [pc, #260]	@ (8002a5c <xTaskIncrementTick+0x108>)
{
 8002956:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d175      	bne.n	8002a4c <xTaskIncrementTick+0xf8>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002960:	4b3f      	ldr	r3, [pc, #252]	@ (8002a60 <xTaskIncrementTick+0x10c>)
 8002962:	681c      	ldr	r4, [r3, #0]
 8002964:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8002966:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002968:	b9bc      	cbnz	r4, 800299a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800296a:	4b3e      	ldr	r3, [pc, #248]	@ (8002a64 <xTaskIncrementTick+0x110>)
 800296c:	681a      	ldr	r2, [r3, #0]
 800296e:	6812      	ldr	r2, [r2, #0]
 8002970:	b142      	cbz	r2, 8002984 <xTaskIncrementTick+0x30>
 8002972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002976:	f383 8811 	msr	BASEPRI, r3
 800297a:	f3bf 8f6f 	isb	sy
 800297e:	f3bf 8f4f 	dsb	sy
 8002982:	e7fe      	b.n	8002982 <xTaskIncrementTick+0x2e>
 8002984:	4a38      	ldr	r2, [pc, #224]	@ (8002a68 <xTaskIncrementTick+0x114>)
 8002986:	6819      	ldr	r1, [r3, #0]
 8002988:	6810      	ldr	r0, [r2, #0]
 800298a:	6018      	str	r0, [r3, #0]
 800298c:	6011      	str	r1, [r2, #0]
 800298e:	4a37      	ldr	r2, [pc, #220]	@ (8002a6c <xTaskIncrementTick+0x118>)
 8002990:	6813      	ldr	r3, [r2, #0]
 8002992:	3301      	adds	r3, #1
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	f7ff fe85 	bl	80026a4 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800299a:	4d35      	ldr	r5, [pc, #212]	@ (8002a70 <xTaskIncrementTick+0x11c>)
BaseType_t xSwitchRequired = pdFALSE;
 800299c:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 80029a0:	682b      	ldr	r3, [r5, #0]
 80029a2:	4e34      	ldr	r6, [pc, #208]	@ (8002a74 <xTaskIncrementTick+0x120>)
 80029a4:	42a3      	cmp	r3, r4
 80029a6:	4f34      	ldr	r7, [pc, #208]	@ (8002a78 <xTaskIncrementTick+0x124>)
 80029a8:	d911      	bls.n	80029ce <xTaskIncrementTick+0x7a>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80029aa:	2114      	movs	r1, #20
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029b0:	434a      	muls	r2, r1
 80029b2:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 80029b4:	2a02      	cmp	r2, #2
 80029b6:	bf28      	it	cs
 80029b8:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 80029bc:	4a2f      	ldr	r2, [pc, #188]	@ (8002a7c <xTaskIncrementTick+0x128>)
 80029be:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 80029c0:	2a00      	cmp	r2, #0
}
 80029c2:	bf0c      	ite	eq
 80029c4:	4658      	moveq	r0, fp
 80029c6:	2001      	movne	r0, #1
 80029c8:	b003      	add	sp, #12
 80029ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029ce:	f8df a094 	ldr.w	sl, [pc, #148]	@ 8002a64 <xTaskIncrementTick+0x110>
					prvAddTaskToReadyList( pxTCB );
 80029d2:	f8df 90ac 	ldr.w	r9, [pc, #172]	@ 8002a80 <xTaskIncrementTick+0x12c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029d6:	f8da 2000 	ldr.w	r2, [sl]
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	b91a      	cbnz	r2, 80029e6 <xTaskIncrementTick+0x92>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029de:	f04f 32ff 	mov.w	r2, #4294967295
 80029e2:	602a      	str	r2, [r5, #0]
					break;
 80029e4:	e7e1      	b.n	80029aa <xTaskIncrementTick+0x56>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029e6:	f8da 2000 	ldr.w	r2, [sl]
 80029ea:	68d2      	ldr	r2, [r2, #12]
 80029ec:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 80029f4:	428c      	cmp	r4, r1
 80029f6:	d201      	bcs.n	80029fc <xTaskIncrementTick+0xa8>
						xNextTaskUnblockTime = xItemValue;
 80029f8:	6029      	str	r1, [r5, #0]
						break;
 80029fa:	e7d6      	b.n	80029aa <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80029fc:	f108 0304 	add.w	r3, r8, #4
 8002a00:	4618      	mov	r0, r3
 8002a02:	9301      	str	r3, [sp, #4]
 8002a04:	f7ff fa17 	bl	8001e36 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002a08:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 8002a0c:	b119      	cbz	r1, 8002a16 <xTaskIncrementTick+0xc2>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002a0e:	f108 0018 	add.w	r0, r8, #24
 8002a12:	f7ff fa10 	bl	8001e36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002a16:	2201      	movs	r2, #1
 8002a18:	f04f 0c14 	mov.w	ip, #20
 8002a1c:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 8002a20:	f8d9 3000 	ldr.w	r3, [r9]
 8002a24:	fa02 f100 	lsl.w	r1, r2, r0
 8002a28:	4319      	orrs	r1, r3
 8002a2a:	fb0c 6000 	mla	r0, ip, r0, r6
 8002a2e:	f8c9 1000 	str.w	r1, [r9]
 8002a32:	f108 0104 	add.w	r1, r8, #4
 8002a36:	f7ff f9dc 	bl	8001df2 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002a3a:	6838      	ldr	r0, [r7, #0]
 8002a3c:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 8002a40:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 8002a42:	4291      	cmp	r1, r2
 8002a44:	bf28      	it	cs
 8002a46:	f04f 0b01 	movcs.w	fp, #1
 8002a4a:	e7c4      	b.n	80029d6 <xTaskIncrementTick+0x82>
		++uxPendedTicks;
 8002a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a84 <xTaskIncrementTick+0x130>)
BaseType_t xSwitchRequired = pdFALSE;
 8002a4e:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 8002a52:	6813      	ldr	r3, [r2, #0]
 8002a54:	3301      	adds	r3, #1
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	e7b0      	b.n	80029bc <xTaskIncrementTick+0x68>
 8002a5a:	bf00      	nop
 8002a5c:	20000be4 	.word	0x20000be4
 8002a60:	20000c04 	.word	0x20000c04
 8002a64:	20000c50 	.word	0x20000c50
 8002a68:	20000c4c 	.word	0x20000c4c
 8002a6c:	20000bf0 	.word	0x20000bf0
 8002a70:	20000be8 	.word	0x20000be8
 8002a74:	20000c7c 	.word	0x20000c7c
 8002a78:	20000d08 	.word	0x20000d08
 8002a7c:	20000bf4 	.word	0x20000bf4
 8002a80:	20000c00 	.word	0x20000c00
 8002a84:	20000bf8 	.word	0x20000bf8

08002a88 <xTaskResumeAll>:
{
 8002a88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( uxSchedulerSuspended );
 8002a8c:	4c31      	ldr	r4, [pc, #196]	@ (8002b54 <xTaskResumeAll+0xcc>)
 8002a8e:	6823      	ldr	r3, [r4, #0]
 8002a90:	b943      	cbnz	r3, 8002aa4 <xTaskResumeAll+0x1c>
 8002a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	e7fe      	b.n	8002aa2 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8002aa4:	f000 fc8e 	bl	80033c4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8002aa8:	6823      	ldr	r3, [r4, #0]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002aae:	6824      	ldr	r4, [r4, #0]
 8002ab0:	b12c      	cbz	r4, 8002abe <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8002ab2:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002ab4:	f000 fca6 	bl	8003404 <vPortExitCritical>
}
 8002ab8:	4620      	mov	r0, r4
 8002aba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002abe:	4b26      	ldr	r3, [pc, #152]	@ (8002b58 <xTaskResumeAll+0xd0>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0f5      	beq.n	8002ab2 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002ac6:	4d25      	ldr	r5, [pc, #148]	@ (8002b5c <xTaskResumeAll+0xd4>)
					prvAddTaskToReadyList( pxTCB );
 8002ac8:	4e25      	ldr	r6, [pc, #148]	@ (8002b60 <xTaskResumeAll+0xd8>)
 8002aca:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8002b64 <xTaskResumeAll+0xdc>
 8002ace:	e01f      	b.n	8002b10 <xTaskResumeAll+0x88>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002ad0:	68eb      	ldr	r3, [r5, #12]
					prvAddTaskToReadyList( pxTCB );
 8002ad2:	2701      	movs	r7, #1
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8002ad4:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ad6:	f104 0904 	add.w	r9, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ada:	f104 0018 	add.w	r0, r4, #24
 8002ade:	f7ff f9aa 	bl	8001e36 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ae2:	4648      	mov	r0, r9
 8002ae4:	f7ff f9a7 	bl	8001e36 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002ae8:	2014      	movs	r0, #20
 8002aea:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002aec:	6831      	ldr	r1, [r6, #0]
 8002aee:	fa07 f302 	lsl.w	r3, r7, r2
 8002af2:	430b      	orrs	r3, r1
 8002af4:	fb00 8002 	mla	r0, r0, r2, r8
 8002af8:	4649      	mov	r1, r9
 8002afa:	6033      	str	r3, [r6, #0]
 8002afc:	f7ff f979 	bl	8001df2 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002b00:	4b19      	ldr	r3, [pc, #100]	@ (8002b68 <xTaskResumeAll+0xe0>)
 8002b02:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d301      	bcc.n	8002b10 <xTaskResumeAll+0x88>
						xYieldPending = pdTRUE;
 8002b0c:	4b17      	ldr	r3, [pc, #92]	@ (8002b6c <xTaskResumeAll+0xe4>)
 8002b0e:	601f      	str	r7, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002b10:	682b      	ldr	r3, [r5, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d1dc      	bne.n	8002ad0 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8002b16:	b10c      	cbz	r4, 8002b1c <xTaskResumeAll+0x94>
					prvResetNextTaskUnblockTime();
 8002b18:	f7ff fdc4 	bl	80026a4 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8002b1c:	4d14      	ldr	r5, [pc, #80]	@ (8002b70 <xTaskResumeAll+0xe8>)
 8002b1e:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8002b20:	b144      	cbz	r4, 8002b34 <xTaskResumeAll+0xac>
								xYieldPending = pdTRUE;
 8002b22:	2701      	movs	r7, #1
 8002b24:	4e11      	ldr	r6, [pc, #68]	@ (8002b6c <xTaskResumeAll+0xe4>)
							if( xTaskIncrementTick() != pdFALSE )
 8002b26:	f7ff ff15 	bl	8002954 <xTaskIncrementTick>
 8002b2a:	b100      	cbz	r0, 8002b2e <xTaskResumeAll+0xa6>
								xYieldPending = pdTRUE;
 8002b2c:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8002b2e:	3c01      	subs	r4, #1
 8002b30:	d1f9      	bne.n	8002b26 <xTaskResumeAll+0x9e>
						uxPendedTicks = 0;
 8002b32:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8002b34:	4b0d      	ldr	r3, [pc, #52]	@ (8002b6c <xTaskResumeAll+0xe4>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0ba      	beq.n	8002ab2 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8002b3c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002b40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b44:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002b48:	f3bf 8f4f 	dsb	sy
 8002b4c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8002b50:	2401      	movs	r4, #1
 8002b52:	e7af      	b.n	8002ab4 <xTaskResumeAll+0x2c>
 8002b54:	20000be4 	.word	0x20000be4
 8002b58:	20000c08 	.word	0x20000c08
 8002b5c:	20000c38 	.word	0x20000c38
 8002b60:	20000c00 	.word	0x20000c00
 8002b64:	20000c7c 	.word	0x20000c7c
 8002b68:	20000d08 	.word	0x20000d08
 8002b6c:	20000bf4 	.word	0x20000bf4
 8002b70:	20000bf8 	.word	0x20000bf8

08002b74 <vTaskDelay>:
	{
 8002b74:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002b76:	b950      	cbnz	r0, 8002b8e <vTaskDelay+0x1a>
			portYIELD_WITHIN_API();
 8002b78:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8002b7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b80:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8002b84:	f3bf 8f4f 	dsb	sy
 8002b88:	f3bf 8f6f 	isb	sy
	}
 8002b8c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 8002b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8002bb8 <vTaskDelay+0x44>)
 8002b90:	6819      	ldr	r1, [r3, #0]
 8002b92:	b141      	cbz	r1, 8002ba6 <vTaskDelay+0x32>
 8002b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b98:	f383 8811 	msr	BASEPRI, r3
 8002b9c:	f3bf 8f6f 	isb	sy
 8002ba0:	f3bf 8f4f 	dsb	sy
 8002ba4:	e7fe      	b.n	8002ba4 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8002ba6:	f7ff fec7 	bl	8002938 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002baa:	f7ff fd37 	bl	800261c <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
 8002bae:	f7ff ff6b 	bl	8002a88 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8002bb2:	2800      	cmp	r0, #0
 8002bb4:	d0e0      	beq.n	8002b78 <vTaskDelay+0x4>
 8002bb6:	e7e9      	b.n	8002b8c <vTaskDelay+0x18>
 8002bb8:	20000be4 	.word	0x20000be4

08002bbc <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002bbc:	4b17      	ldr	r3, [pc, #92]	@ (8002c1c <vTaskSwitchContext+0x60>)
{
 8002bbe:	b510      	push	{r4, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002bc0:	681a      	ldr	r2, [r3, #0]
 8002bc2:	4b17      	ldr	r3, [pc, #92]	@ (8002c20 <vTaskSwitchContext+0x64>)
 8002bc4:	b112      	cbz	r2, 8002bcc <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8002bc6:	2201      	movs	r2, #1
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002bc8:	601a      	str	r2, [r3, #0]
}
 8002bca:	bd10      	pop	{r4, pc}
		xYieldPending = pdFALSE;
 8002bcc:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8002bce:	4b15      	ldr	r3, [pc, #84]	@ (8002c24 <vTaskSwitchContext+0x68>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002bd2:	fab2 f282 	clz	r2, r2
 8002bd6:	2314      	movs	r3, #20
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	f1c2 021f 	rsb	r2, r2, #31
 8002bde:	4353      	muls	r3, r2
 8002be0:	4911      	ldr	r1, [pc, #68]	@ (8002c28 <vTaskSwitchContext+0x6c>)
 8002be2:	58cc      	ldr	r4, [r1, r3]
 8002be4:	18c8      	adds	r0, r1, r3
 8002be6:	b944      	cbnz	r4, 8002bfa <vTaskSwitchContext+0x3e>
	__asm volatile
 8002be8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bec:	f383 8811 	msr	BASEPRI, r3
 8002bf0:	f3bf 8f6f 	isb	sy
 8002bf4:	f3bf 8f4f 	dsb	sy
 8002bf8:	e7fe      	b.n	8002bf8 <vTaskSwitchContext+0x3c>
 8002bfa:	6844      	ldr	r4, [r0, #4]
 8002bfc:	3308      	adds	r3, #8
 8002bfe:	6864      	ldr	r4, [r4, #4]
 8002c00:	440b      	add	r3, r1
 8002c02:	429c      	cmp	r4, r3
 8002c04:	bf08      	it	eq
 8002c06:	6863      	ldreq	r3, [r4, #4]
 8002c08:	6044      	str	r4, [r0, #4]
 8002c0a:	bf08      	it	eq
 8002c0c:	6043      	streq	r3, [r0, #4]
 8002c0e:	2314      	movs	r3, #20
 8002c10:	fb03 1102 	mla	r1, r3, r2, r1
 8002c14:	684b      	ldr	r3, [r1, #4]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	4b04      	ldr	r3, [pc, #16]	@ (8002c2c <vTaskSwitchContext+0x70>)
 8002c1a:	e7d5      	b.n	8002bc8 <vTaskSwitchContext+0xc>
 8002c1c:	20000be4 	.word	0x20000be4
 8002c20:	20000bf4 	.word	0x20000bf4
 8002c24:	20000c00 	.word	0x20000c00
 8002c28:	20000c7c 	.word	0x20000c7c
 8002c2c:	20000d08 	.word	0x20000d08

08002c30 <vTaskPlaceOnEventList>:
{
 8002c30:	b510      	push	{r4, lr}
 8002c32:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8002c34:	b940      	cbnz	r0, 8002c48 <vTaskPlaceOnEventList+0x18>
 8002c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	e7fe      	b.n	8002c46 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c48:	4b05      	ldr	r3, [pc, #20]	@ (8002c60 <vTaskPlaceOnEventList+0x30>)
 8002c4a:	6819      	ldr	r1, [r3, #0]
 8002c4c:	3118      	adds	r1, #24
 8002c4e:	f7ff f8db 	bl	8001e08 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002c52:	4620      	mov	r0, r4
}
 8002c54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002c58:	2101      	movs	r1, #1
 8002c5a:	f7ff bcdf 	b.w	800261c <prvAddCurrentTaskToDelayedList>
 8002c5e:	bf00      	nop
 8002c60:	20000d08 	.word	0x20000d08

08002c64 <vTaskPlaceOnEventListRestricted>:
	{
 8002c64:	b538      	push	{r3, r4, r5, lr}
 8002c66:	460d      	mov	r5, r1
 8002c68:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 8002c6a:	b940      	cbnz	r0, 8002c7e <vTaskPlaceOnEventListRestricted+0x1a>
 8002c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c70:	f383 8811 	msr	BASEPRI, r3
 8002c74:	f3bf 8f6f 	isb	sy
 8002c78:	f3bf 8f4f 	dsb	sy
 8002c7c:	e7fe      	b.n	8002c7c <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002c7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <vTaskPlaceOnEventListRestricted+0x3c>)
 8002c80:	6819      	ldr	r1, [r3, #0]
 8002c82:	3118      	adds	r1, #24
 8002c84:	f7ff f8b5 	bl	8001df2 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 8002c88:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002c8a:	4621      	mov	r1, r4
 8002c8c:	bf08      	it	eq
 8002c8e:	4628      	moveq	r0, r5
	}
 8002c90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8002c94:	bf18      	it	ne
 8002c96:	f04f 30ff 	movne.w	r0, #4294967295
 8002c9a:	f7ff bcbf 	b.w	800261c <prvAddCurrentTaskToDelayedList>
 8002c9e:	bf00      	nop
 8002ca0:	20000d08 	.word	0x20000d08

08002ca4 <xTaskRemoveFromEventList>:
{
 8002ca4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8002ca6:	68c3      	ldr	r3, [r0, #12]
 8002ca8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8002caa:	b944      	cbnz	r4, 8002cbe <xTaskRemoveFromEventList+0x1a>
 8002cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	e7fe      	b.n	8002cbc <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8002cbe:	f104 0518 	add.w	r5, r4, #24
 8002cc2:	4628      	mov	r0, r5
 8002cc4:	f7ff f8b7 	bl	8001e36 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002cc8:	4b11      	ldr	r3, [pc, #68]	@ (8002d10 <xTaskRemoveFromEventList+0x6c>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	b9e3      	cbnz	r3, 8002d08 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8002cce:	1d25      	adds	r5, r4, #4
 8002cd0:	4628      	mov	r0, r5
 8002cd2:	f7ff f8b0 	bl	8001e36 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	490e      	ldr	r1, [pc, #56]	@ (8002d14 <xTaskRemoveFromEventList+0x70>)
 8002cda:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002cdc:	6808      	ldr	r0, [r1, #0]
 8002cde:	4093      	lsls	r3, r2
 8002ce0:	4303      	orrs	r3, r0
 8002ce2:	2014      	movs	r0, #20
 8002ce4:	600b      	str	r3, [r1, #0]
 8002ce6:	4629      	mov	r1, r5
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d18 <xTaskRemoveFromEventList+0x74>)
 8002cea:	fb00 3002 	mla	r0, r0, r2, r3
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002cee:	f7ff f880 	bl	8001df2 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002cf2:	4b0a      	ldr	r3, [pc, #40]	@ (8002d1c <xTaskRemoveFromEventList+0x78>)
 8002cf4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfa:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8002cfc:	bf85      	ittet	hi
 8002cfe:	2001      	movhi	r0, #1
 8002d00:	4b07      	ldrhi	r3, [pc, #28]	@ (8002d20 <xTaskRemoveFromEventList+0x7c>)
		xReturn = pdFALSE;
 8002d02:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 8002d04:	6018      	strhi	r0, [r3, #0]
}
 8002d06:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8002d08:	4629      	mov	r1, r5
 8002d0a:	4806      	ldr	r0, [pc, #24]	@ (8002d24 <xTaskRemoveFromEventList+0x80>)
 8002d0c:	e7ef      	b.n	8002cee <xTaskRemoveFromEventList+0x4a>
 8002d0e:	bf00      	nop
 8002d10:	20000be4 	.word	0x20000be4
 8002d14:	20000c00 	.word	0x20000c00
 8002d18:	20000c7c 	.word	0x20000c7c
 8002d1c:	20000d08 	.word	0x20000d08
 8002d20:	20000bf4 	.word	0x20000bf4
 8002d24:	20000c38 	.word	0x20000c38

08002d28 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8002d28:	4b03      	ldr	r3, [pc, #12]	@ (8002d38 <vTaskInternalSetTimeOutState+0x10>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8002d2e:	4b03      	ldr	r3, [pc, #12]	@ (8002d3c <vTaskInternalSetTimeOutState+0x14>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	6043      	str	r3, [r0, #4]
}
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	20000bf0 	.word	0x20000bf0
 8002d3c:	20000c04 	.word	0x20000c04

08002d40 <xTaskCheckForTimeOut>:
{
 8002d40:	b570      	push	{r4, r5, r6, lr}
 8002d42:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8002d44:	4605      	mov	r5, r0
 8002d46:	b940      	cbnz	r0, 8002d5a <xTaskCheckForTimeOut+0x1a>
 8002d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d4c:	f383 8811 	msr	BASEPRI, r3
 8002d50:	f3bf 8f6f 	isb	sy
 8002d54:	f3bf 8f4f 	dsb	sy
 8002d58:	e7fe      	b.n	8002d58 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 8002d5a:	b941      	cbnz	r1, 8002d6e <xTaskCheckForTimeOut+0x2e>
 8002d5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d60:	f383 8811 	msr	BASEPRI, r3
 8002d64:	f3bf 8f6f 	isb	sy
 8002d68:	f3bf 8f4f 	dsb	sy
 8002d6c:	e7fe      	b.n	8002d6c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8002d6e:	f000 fb29 	bl	80033c4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8002d72:	4b0f      	ldr	r3, [pc, #60]	@ (8002db0 <xTaskCheckForTimeOut+0x70>)
 8002d74:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 8002d76:	6823      	ldr	r3, [r4, #0]
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	d010      	beq.n	8002d9e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002d7c:	480d      	ldr	r0, [pc, #52]	@ (8002db4 <xTaskCheckForTimeOut+0x74>)
 8002d7e:	682e      	ldr	r6, [r5, #0]
 8002d80:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002d82:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8002d84:	4286      	cmp	r6, r0
 8002d86:	d001      	beq.n	8002d8c <xTaskCheckForTimeOut+0x4c>
 8002d88:	428a      	cmp	r2, r1
 8002d8a:	d90f      	bls.n	8002dac <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8002d8c:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8002d8e:	4283      	cmp	r3, r0
 8002d90:	d90a      	bls.n	8002da8 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 8002d92:	1a5b      	subs	r3, r3, r1
 8002d94:	4413      	add	r3, r2
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002d96:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 8002d98:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8002d9a:	f7ff ffc5 	bl	8002d28 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 8002d9e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8002da0:	f000 fb30 	bl	8003404 <vPortExitCritical>
}
 8002da4:	4620      	mov	r0, r4
 8002da6:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8002da8:	2300      	movs	r3, #0
 8002daa:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8002dac:	2401      	movs	r4, #1
 8002dae:	e7f7      	b.n	8002da0 <xTaskCheckForTimeOut+0x60>
 8002db0:	20000c04 	.word	0x20000c04
 8002db4:	20000bf0 	.word	0x20000bf0

08002db8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8002db8:	2201      	movs	r2, #1
 8002dba:	4b01      	ldr	r3, [pc, #4]	@ (8002dc0 <vTaskMissedYield+0x8>)
 8002dbc:	601a      	str	r2, [r3, #0]
}
 8002dbe:	4770      	bx	lr
 8002dc0:	20000bf4 	.word	0x20000bf4

08002dc4 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8002dc4:	4b05      	ldr	r3, [pc, #20]	@ (8002ddc <xTaskGetSchedulerState+0x18>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	b133      	cbz	r3, 8002dd8 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dca:	4b05      	ldr	r3, [pc, #20]	@ (8002de0 <xTaskGetSchedulerState+0x1c>)
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	fab0 f080 	clz	r0, r0
 8002dd2:	0940      	lsrs	r0, r0, #5
 8002dd4:	0040      	lsls	r0, r0, #1
 8002dd6:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 8002dd8:	2001      	movs	r0, #1
	}
 8002dda:	4770      	bx	lr
 8002ddc:	20000bfc 	.word	0x20000bfc
 8002de0:	20000be4 	.word	0x20000be4

08002de4 <xTaskPriorityDisinherit>:
	{
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 8002de6:	4604      	mov	r4, r0
 8002de8:	b908      	cbnz	r0, 8002dee <xTaskPriorityDisinherit+0xa>
	BaseType_t xReturn = pdFALSE;
 8002dea:	2000      	movs	r0, #0
	}
 8002dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8002dee:	4b22      	ldr	r3, [pc, #136]	@ (8002e78 <xTaskPriorityDisinherit+0x94>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4283      	cmp	r3, r0
 8002df4:	d008      	beq.n	8002e08 <xTaskPriorityDisinherit+0x24>
 8002df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dfa:	f383 8811 	msr	BASEPRI, r3
 8002dfe:	f3bf 8f6f 	isb	sy
 8002e02:	f3bf 8f4f 	dsb	sy
 8002e06:	e7fe      	b.n	8002e06 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8002e08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e0a:	b943      	cbnz	r3, 8002e1e <xTaskPriorityDisinherit+0x3a>
 8002e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	e7fe      	b.n	8002e1c <xTaskPriorityDisinherit+0x38>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002e1e:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8002e20:	6c42      	ldr	r2, [r0, #68]	@ 0x44
			( pxTCB->uxMutexesHeld )--;
 8002e22:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002e24:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8002e26:	6483      	str	r3, [r0, #72]	@ 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8002e28:	d0df      	beq.n	8002dea <xTaskPriorityDisinherit+0x6>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1dd      	bne.n	8002dea <xTaskPriorityDisinherit+0x6>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002e2e:	1d06      	adds	r6, r0, #4
 8002e30:	4630      	mov	r0, r6
 8002e32:	f7ff f800 	bl	8001e36 <uxListRemove>
 8002e36:	4f11      	ldr	r7, [pc, #68]	@ (8002e7c <xTaskPriorityDisinherit+0x98>)
 8002e38:	4a11      	ldr	r2, [pc, #68]	@ (8002e80 <xTaskPriorityDisinherit+0x9c>)
 8002e3a:	b950      	cbnz	r0, 8002e52 <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002e3c:	2314      	movs	r3, #20
 8002e3e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002e40:	434b      	muls	r3, r1
 8002e42:	58fb      	ldr	r3, [r7, r3]
 8002e44:	b92b      	cbnz	r3, 8002e52 <xTaskPriorityDisinherit+0x6e>
 8002e46:	2501      	movs	r5, #1
 8002e48:	6813      	ldr	r3, [r2, #0]
 8002e4a:	408d      	lsls	r5, r1
 8002e4c:	ea23 0305 	bic.w	r3, r3, r5
 8002e50:	6013      	str	r3, [r2, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002e52:	6c63      	ldr	r3, [r4, #68]	@ 0x44
					prvAddTaskToReadyList( pxTCB );
 8002e54:	2014      	movs	r0, #20
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e56:	f1c3 0107 	rsb	r1, r3, #7
 8002e5a:	61a1      	str	r1, [r4, #24]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8002e5c:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxTCB );
 8002e5e:	2401      	movs	r4, #1
 8002e60:	6811      	ldr	r1, [r2, #0]
 8002e62:	fa04 f503 	lsl.w	r5, r4, r3
 8002e66:	fb00 7003 	mla	r0, r0, r3, r7
 8002e6a:	430d      	orrs	r5, r1
 8002e6c:	4631      	mov	r1, r6
 8002e6e:	6015      	str	r5, [r2, #0]
 8002e70:	f7fe ffbf 	bl	8001df2 <vListInsertEnd>
					xReturn = pdTRUE;
 8002e74:	4620      	mov	r0, r4
		return xReturn;
 8002e76:	e7b9      	b.n	8002dec <xTaskPriorityDisinherit+0x8>
 8002e78:	20000d08 	.word	0x20000d08
 8002e7c:	20000c7c 	.word	0x20000c7c
 8002e80:	20000c00 	.word	0x20000c00

08002e84 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 8002e84:	4291      	cmp	r1, r2
{
 8002e86:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8002e88:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8002e8a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8002e8c:	d80a      	bhi.n	8002ea4 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e8e:	1ad2      	subs	r2, r2, r3
 8002e90:	6983      	ldr	r3, [r0, #24]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d20d      	bcs.n	8002eb2 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8002e96:	4b08      	ldr	r3, [pc, #32]	@ (8002eb8 <prvInsertTimerInActiveList+0x34>)
 8002e98:	1d01      	adds	r1, r0, #4
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	f7fe ffb4 	bl	8001e08 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8002ea0:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 8002ea2:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d201      	bcs.n	8002eac <prvInsertTimerInActiveList+0x28>
 8002ea8:	4299      	cmp	r1, r3
 8002eaa:	d202      	bcs.n	8002eb2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8002eac:	4b03      	ldr	r3, [pc, #12]	@ (8002ebc <prvInsertTimerInActiveList+0x38>)
 8002eae:	1d01      	adds	r1, r0, #4
 8002eb0:	e7f3      	b.n	8002e9a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8002eb2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8002eb4:	e7f5      	b.n	8002ea2 <prvInsertTimerInActiveList+0x1e>
 8002eb6:	bf00      	nop
 8002eb8:	20000dd8 	.word	0x20000dd8
 8002ebc:	20000ddc 	.word	0x20000ddc

08002ec0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8002ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8002ec2:	4c11      	ldr	r4, [pc, #68]	@ (8002f08 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8002ec4:	f000 fa7e 	bl	80033c4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8002ec8:	6825      	ldr	r5, [r4, #0]
 8002eca:	b9bd      	cbnz	r5, 8002efc <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8002ecc:	4f0f      	ldr	r7, [pc, #60]	@ (8002f0c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8002ece:	4e10      	ldr	r6, [pc, #64]	@ (8002f10 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8002ed0:	4638      	mov	r0, r7
 8002ed2:	f7fe ff80 	bl	8001dd6 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8002ed6:	4630      	mov	r0, r6
 8002ed8:	f7fe ff7d 	bl	8001dd6 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8002edc:	4b0d      	ldr	r3, [pc, #52]	@ (8002f14 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002ede:	210c      	movs	r1, #12
			pxCurrentTimerList = &xActiveTimerList1;
 8002ee0:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8002ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8002f18 <prvCheckForValidListAndQueue+0x58>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002ee4:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 8002ee6:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8002ee8:	4a0c      	ldr	r2, [pc, #48]	@ (8002f1c <prvCheckForValidListAndQueue+0x5c>)
 8002eea:	4b0d      	ldr	r3, [pc, #52]	@ (8002f20 <prvCheckForValidListAndQueue+0x60>)
 8002eec:	9500      	str	r5, [sp, #0]
 8002eee:	f7ff f87b 	bl	8001fe8 <xQueueGenericCreateStatic>
 8002ef2:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8002ef4:	b110      	cbz	r0, 8002efc <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8002ef6:	490b      	ldr	r1, [pc, #44]	@ (8002f24 <prvCheckForValidListAndQueue+0x64>)
 8002ef8:	f7ff fadc 	bl	80024b4 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8002efc:	b003      	add	sp, #12
 8002efe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8002f02:	f000 ba7f 	b.w	8003404 <vPortExitCritical>
 8002f06:	bf00      	nop
 8002f08:	20000dd4 	.word	0x20000dd4
 8002f0c:	20000df4 	.word	0x20000df4
 8002f10:	20000de0 	.word	0x20000de0
 8002f14:	20000ddc 	.word	0x20000ddc
 8002f18:	20000dd8 	.word	0x20000dd8
 8002f1c:	20000d54 	.word	0x20000d54
 8002f20:	20000d0c 	.word	0x20000d0c
 8002f24:	08005a1f 	.word	0x08005a1f

08002f28 <xTimerCreateTimerTask>:
{
 8002f28:	b510      	push	{r4, lr}
 8002f2a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8002f2c:	f7ff ffc8 	bl	8002ec0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8002f30:	4b12      	ldr	r3, [pc, #72]	@ (8002f7c <xTimerCreateTimerTask+0x54>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	b1b3      	cbz	r3, 8002f64 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8002f36:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002f38:	aa07      	add	r2, sp, #28
 8002f3a:	a906      	add	r1, sp, #24
 8002f3c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8002f3e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8002f42:	f7fd f911 	bl	8000168 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8002f46:	9b05      	ldr	r3, [sp, #20]
 8002f48:	9a07      	ldr	r2, [sp, #28]
 8002f4a:	9302      	str	r3, [sp, #8]
 8002f4c:	9b06      	ldr	r3, [sp, #24]
 8002f4e:	490c      	ldr	r1, [pc, #48]	@ (8002f80 <xTimerCreateTimerTask+0x58>)
 8002f50:	9301      	str	r3, [sp, #4]
 8002f52:	2302      	movs	r3, #2
 8002f54:	480b      	ldr	r0, [pc, #44]	@ (8002f84 <xTimerCreateTimerTask+0x5c>)
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	4623      	mov	r3, r4
 8002f5a:	f7ff fc42 	bl	80027e2 <xTaskCreateStatic>
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f88 <xTimerCreateTimerTask+0x60>)
 8002f60:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8002f62:	b940      	cbnz	r0, 8002f76 <xTimerCreateTimerTask+0x4e>
 8002f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f68:	f383 8811 	msr	BASEPRI, r3
 8002f6c:	f3bf 8f6f 	isb	sy
 8002f70:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 8002f74:	e7fe      	b.n	8002f74 <xTimerCreateTimerTask+0x4c>
}
 8002f76:	2001      	movs	r0, #1
 8002f78:	b008      	add	sp, #32
 8002f7a:	bd10      	pop	{r4, pc}
 8002f7c:	20000dd4 	.word	0x20000dd4
 8002f80:	08005a24 	.word	0x08005a24
 8002f84:	08003149 	.word	0x08003149
 8002f88:	20000dd0 	.word	0x20000dd0

08002f8c <xTimerCreate>:
	{
 8002f8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f90:	4680      	mov	r8, r0
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8002f92:	202c      	movs	r0, #44	@ 0x2c
	{
 8002f94:	460d      	mov	r5, r1
 8002f96:	4617      	mov	r7, r2
 8002f98:	461e      	mov	r6, r3
		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) );
 8002f9a:	f000 fb3f 	bl	800361c <pvPortMalloc>
		if( pxNewTimer != NULL )
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	b1c0      	cbz	r0, 8002fd4 <xTimerCreate+0x48>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8002fa2:	b945      	cbnz	r5, 8002fb6 <xTimerCreate+0x2a>
 8002fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fa8:	f383 8811 	msr	BASEPRI, r3
 8002fac:	f3bf 8f6f 	isb	sy
 8002fb0:	f3bf 8f4f 	dsb	sy
 8002fb4:	e7fe      	b.n	8002fb4 <xTimerCreate+0x28>
		prvCheckForValidListAndQueue();
 8002fb6:	f7ff ff83 	bl	8002ec0 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002fba:	9b06      	ldr	r3, [sp, #24]
		pxNewTimer->uxAutoReload = uxAutoReload;
 8002fbc:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8002fc0:	6263      	str	r3, [r4, #36]	@ 0x24
		pxNewTimer->pcTimerName = pcTimerName;
 8002fc2:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 8002fc6:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8002fc8:	1d20      	adds	r0, r4, #4
 8002fca:	f7fe ff0f 	bl	8001dec <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdFALSE;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
	}
 8002fd4:	4620      	mov	r0, r4
 8002fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002fda <xTimerCreateStatic>:
	{
 8002fda:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002fde:	461e      	mov	r6, r3
			volatile size_t xSize = sizeof( StaticTimer_t );
 8002fe0:	232c      	movs	r3, #44	@ 0x2c
 8002fe2:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Timer_t ) );
 8002fe4:	9b01      	ldr	r3, [sp, #4]
	{
 8002fe6:	4680      	mov	r8, r0
			configASSERT( xSize == sizeof( Timer_t ) );
 8002fe8:	2b2c      	cmp	r3, #44	@ 0x2c
	{
 8002fea:	460d      	mov	r5, r1
 8002fec:	4617      	mov	r7, r2
 8002fee:	9c09      	ldr	r4, [sp, #36]	@ 0x24
			configASSERT( xSize == sizeof( Timer_t ) );
 8002ff0:	d008      	beq.n	8003004 <xTimerCreateStatic+0x2a>
 8002ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ff6:	f383 8811 	msr	BASEPRI, r3
 8002ffa:	f3bf 8f6f 	isb	sy
 8002ffe:	f3bf 8f4f 	dsb	sy
 8003002:	e7fe      	b.n	8003002 <xTimerCreateStatic+0x28>
		configASSERT( pxTimerBuffer );
 8003004:	b944      	cbnz	r4, 8003018 <xTimerCreateStatic+0x3e>
 8003006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	e7fe      	b.n	8003016 <xTimerCreateStatic+0x3c>
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8003018:	b941      	cbnz	r1, 800302c <xTimerCreateStatic+0x52>
 800301a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	e7fe      	b.n	800302a <xTimerCreateStatic+0x50>
		prvCheckForValidListAndQueue();
 800302c:	f7ff ff48 	bl	8002ec0 <prvCheckForValidListAndQueue>
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003030:	9b08      	ldr	r3, [sp, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003032:	1d20      	adds	r0, r4, #4
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8003034:	6263      	str	r3, [r4, #36]	@ 0x24
		pxNewTimer->uxAutoReload = uxAutoReload;
 8003036:	e9c4 5706 	strd	r5, r7, [r4, #24]
		pxNewTimer->pcTimerName = pcTimerName;
 800303a:	f8c4 8000 	str.w	r8, [r4]
		pxNewTimer->pvTimerID = pvTimerID;
 800303e:	6226      	str	r6, [r4, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8003040:	f7fe fed4 	bl	8001dec <vListInitialiseItem>
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8003044:	2301      	movs	r3, #1
	}
 8003046:	4620      	mov	r0, r4
				pxNewTimer->ucStaticallyAllocated = pdTRUE;
 8003048:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
	}
 800304c:	b002      	add	sp, #8
 800304e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003054 <xTimerGenericCommand>:
{
 8003054:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8003056:	4616      	mov	r6, r2
	configASSERT( xTimer );
 8003058:	4604      	mov	r4, r0
{
 800305a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800305c:	b940      	cbnz	r0, 8003070 <xTimerGenericCommand+0x1c>
 800305e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003062:	f383 8811 	msr	BASEPRI, r3
 8003066:	f3bf 8f6f 	isb	sy
 800306a:	f3bf 8f4f 	dsb	sy
 800306e:	e7fe      	b.n	800306e <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 8003070:	4d0c      	ldr	r5, [pc, #48]	@ (80030a4 <xTimerGenericCommand+0x50>)
 8003072:	6828      	ldr	r0, [r5, #0]
 8003074:	b178      	cbz	r0, 8003096 <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003076:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003078:	e9cd 1601 	strd	r1, r6, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 800307c:	9403      	str	r4, [sp, #12]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800307e:	dc0c      	bgt.n	800309a <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003080:	f7ff fea0 	bl	8002dc4 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003084:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003086:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003088:	bf14      	ite	ne
 800308a:	461a      	movne	r2, r3
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800308c:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800308e:	6828      	ldr	r0, [r5, #0]
 8003090:	a901      	add	r1, sp, #4
 8003092:	f7ff f816 	bl	80020c2 <xQueueGenericSend>
}
 8003096:	b004      	add	sp, #16
 8003098:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800309a:	2300      	movs	r3, #0
 800309c:	a901      	add	r1, sp, #4
 800309e:	f7ff f8c2 	bl	8002226 <xQueueGenericSendFromISR>
 80030a2:	e7f8      	b.n	8003096 <xTimerGenericCommand+0x42>
 80030a4:	20000dd4 	.word	0x20000dd4

080030a8 <prvSampleTimeNow>:
{
 80030a8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80030ac:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 80030ae:	f7ff fc4b 	bl	8002948 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 80030b2:	f8df 8088 	ldr.w	r8, [pc, #136]	@ 800313c <prvSampleTimeNow+0x94>
	xTimeNow = xTaskGetTickCount();
 80030b6:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 80030b8:	f8d8 3000 	ldr.w	r3, [r8]
 80030bc:	4283      	cmp	r3, r0
 80030be:	d909      	bls.n	80030d4 <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80030c0:	4f1f      	ldr	r7, [pc, #124]	@ (8003140 <prvSampleTimeNow+0x98>)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	b96a      	cbnz	r2, 80030e4 <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 80030c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003144 <prvSampleTimeNow+0x9c>)
 80030ca:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80030cc:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 80030ce:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <prvSampleTimeNow+0x2e>
 80030d4:	2300      	movs	r3, #0
}
 80030d6:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 80030d8:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 80030da:	f8c8 5000 	str.w	r5, [r8]
}
 80030de:	b002      	add	sp, #8
 80030e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030e4:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030e6:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80030e8:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80030ec:	f104 0a04 	add.w	sl, r4, #4
 80030f0:	4650      	mov	r0, sl
 80030f2:	f7fe fea0 	bl	8001e36 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80030f6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80030f8:	4620      	mov	r0, r4
 80030fa:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80030fc:	69e3      	ldr	r3, [r4, #28]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d1df      	bne.n	80030c2 <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003102:	69a3      	ldr	r3, [r4, #24]
 8003104:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 8003106:	4599      	cmp	r9, r3
 8003108:	d206      	bcs.n	8003118 <prvSampleTimeNow+0x70>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800310a:	4651      	mov	r1, sl
 800310c:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800310e:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003110:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003112:	f7fe fe79 	bl	8001e08 <vListInsert>
 8003116:	e7d4      	b.n	80030c2 <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003118:	2300      	movs	r3, #0
 800311a:	464a      	mov	r2, r9
 800311c:	4619      	mov	r1, r3
 800311e:	4620      	mov	r0, r4
 8003120:	9300      	str	r3, [sp, #0]
 8003122:	f7ff ff97 	bl	8003054 <xTimerGenericCommand>
				configASSERT( xResult );
 8003126:	2800      	cmp	r0, #0
 8003128:	d1cb      	bne.n	80030c2 <prvSampleTimeNow+0x1a>
 800312a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800312e:	f383 8811 	msr	BASEPRI, r3
 8003132:	f3bf 8f6f 	isb	sy
 8003136:	f3bf 8f4f 	dsb	sy
 800313a:	e7fe      	b.n	800313a <prvSampleTimeNow+0x92>
 800313c:	20000dcc 	.word	0x20000dcc
 8003140:	20000ddc 	.word	0x20000ddc
 8003144:	20000dd8 	.word	0x20000dd8

08003148 <prvTimerTask>:
{
 8003148:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800314c:	4e64      	ldr	r6, [pc, #400]	@ (80032e0 <prvTimerTask+0x198>)
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800314e:	4f65      	ldr	r7, [pc, #404]	@ (80032e4 <prvTimerTask+0x19c>)
{
 8003150:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003152:	6833      	ldr	r3, [r6, #0]
 8003154:	681d      	ldr	r5, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003156:	2d00      	cmp	r5, #0
 8003158:	d033      	beq.n	80031c2 <prvTimerTask+0x7a>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 8003160:	f7ff fbea 	bl	8002938 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003164:	a803      	add	r0, sp, #12
 8003166:	f7ff ff9f 	bl	80030a8 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800316a:	9c03      	ldr	r4, [sp, #12]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800316c:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800316e:	2c00      	cmp	r4, #0
 8003170:	d175      	bne.n	800325e <prvTimerTask+0x116>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003172:	2d00      	cmp	r5, #0
 8003174:	d058      	beq.n	8003228 <prvTimerTask+0xe0>
 8003176:	4540      	cmp	r0, r8
 8003178:	d35c      	bcc.n	8003234 <prvTimerTask+0xec>
				( void ) xTaskResumeAll();
 800317a:	f7ff fc85 	bl	8002a88 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800317e:	6833      	ldr	r3, [r6, #0]
 8003180:	68db      	ldr	r3, [r3, #12]
 8003182:	68dd      	ldr	r5, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003184:	1d28      	adds	r0, r5, #4
 8003186:	f7fe fe56 	bl	8001e36 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800318a:	69eb      	ldr	r3, [r5, #28]
 800318c:	2b01      	cmp	r3, #1
 800318e:	d11a      	bne.n	80031c6 <prvTimerTask+0x7e>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003190:	69a9      	ldr	r1, [r5, #24]
 8003192:	4643      	mov	r3, r8
 8003194:	464a      	mov	r2, r9
 8003196:	4628      	mov	r0, r5
 8003198:	4441      	add	r1, r8
 800319a:	f7ff fe73 	bl	8002e84 <prvInsertTimerInActiveList>
 800319e:	b190      	cbz	r0, 80031c6 <prvTimerTask+0x7e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80031a0:	4623      	mov	r3, r4
 80031a2:	4642      	mov	r2, r8
 80031a4:	4621      	mov	r1, r4
 80031a6:	4628      	mov	r0, r5
 80031a8:	9400      	str	r4, [sp, #0]
 80031aa:	f7ff ff53 	bl	8003054 <xTimerGenericCommand>
			configASSERT( xResult );
 80031ae:	b950      	cbnz	r0, 80031c6 <prvTimerTask+0x7e>
 80031b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031b4:	f383 8811 	msr	BASEPRI, r3
 80031b8:	f3bf 8f6f 	isb	sy
 80031bc:	f3bf 8f4f 	dsb	sy
 80031c0:	e7fe      	b.n	80031c0 <prvTimerTask+0x78>
		xNextExpireTime = ( TickType_t ) 0U;
 80031c2:	46a8      	mov	r8, r5
 80031c4:	e7cc      	b.n	8003160 <prvTimerTask+0x18>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80031c6:	4628      	mov	r0, r5
 80031c8:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 80031ca:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80031cc:	2200      	movs	r2, #0
 80031ce:	6838      	ldr	r0, [r7, #0]
 80031d0:	a903      	add	r1, sp, #12
 80031d2:	f7ff f884 	bl	80022de <xQueueReceive>
 80031d6:	2800      	cmp	r0, #0
 80031d8:	d0bb      	beq.n	8003152 <prvTimerTask+0xa>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80031da:	9b03      	ldr	r3, [sp, #12]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	dbf5      	blt.n	80031cc <prvTimerTask+0x84>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80031e0:	9c05      	ldr	r4, [sp, #20]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80031e2:	6963      	ldr	r3, [r4, #20]
 80031e4:	b113      	cbz	r3, 80031ec <prvTimerTask+0xa4>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80031e6:	1d20      	adds	r0, r4, #4
 80031e8:	f7fe fe25 	bl	8001e36 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80031ec:	a802      	add	r0, sp, #8
 80031ee:	f7ff ff5b 	bl	80030a8 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 80031f2:	9b03      	ldr	r3, [sp, #12]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80031f4:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 80031f6:	2b09      	cmp	r3, #9
 80031f8:	d8e8      	bhi.n	80031cc <prvTimerTask+0x84>
 80031fa:	a101      	add	r1, pc, #4	@ (adr r1, 8003200 <prvTimerTask+0xb8>)
 80031fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003200:	08003265 	.word	0x08003265
 8003204:	08003265 	.word	0x08003265
 8003208:	08003265 	.word	0x08003265
 800320c:	080031cd 	.word	0x080031cd
 8003210:	080032a9 	.word	0x080032a9
 8003214:	080032cd 	.word	0x080032cd
 8003218:	08003265 	.word	0x08003265
 800321c:	08003265 	.word	0x08003265
 8003220:	080031cd 	.word	0x080031cd
 8003224:	080032a9 	.word	0x080032a9
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003228:	4b2f      	ldr	r3, [pc, #188]	@ (80032e8 <prvTimerTask+0x1a0>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681c      	ldr	r4, [r3, #0]
 800322e:	fab4 f484 	clz	r4, r4
 8003232:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003234:	4622      	mov	r2, r4
 8003236:	6838      	ldr	r0, [r7, #0]
 8003238:	eba8 0109 	sub.w	r1, r8, r9
 800323c:	f7ff f94c 	bl	80024d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003240:	f7ff fc22 	bl	8002a88 <xTaskResumeAll>
 8003244:	2800      	cmp	r0, #0
 8003246:	d1c1      	bne.n	80031cc <prvTimerTask+0x84>
					portYIELD_WITHIN_API();
 8003248:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800324c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003250:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	e7b6      	b.n	80031cc <prvTimerTask+0x84>
			( void ) xTaskResumeAll();
 800325e:	f7ff fc13 	bl	8002a88 <xTaskResumeAll>
}
 8003262:	e7b3      	b.n	80031cc <prvTimerTask+0x84>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003264:	69a1      	ldr	r1, [r4, #24]
 8003266:	9b04      	ldr	r3, [sp, #16]
 8003268:	4620      	mov	r0, r4
 800326a:	4419      	add	r1, r3
 800326c:	f7ff fe0a 	bl	8002e84 <prvInsertTimerInActiveList>
 8003270:	2800      	cmp	r0, #0
 8003272:	d0ab      	beq.n	80031cc <prvTimerTask+0x84>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003274:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8003276:	4620      	mov	r0, r4
 8003278:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800327a:	69e3      	ldr	r3, [r4, #28]
 800327c:	2b01      	cmp	r3, #1
 800327e:	d1a5      	bne.n	80031cc <prvTimerTask+0x84>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003280:	2300      	movs	r3, #0
 8003282:	69a2      	ldr	r2, [r4, #24]
 8003284:	9904      	ldr	r1, [sp, #16]
 8003286:	4620      	mov	r0, r4
 8003288:	440a      	add	r2, r1
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	4619      	mov	r1, r3
 800328e:	f7ff fee1 	bl	8003054 <xTimerGenericCommand>
							configASSERT( xResult );
 8003292:	2800      	cmp	r0, #0
 8003294:	d19a      	bne.n	80031cc <prvTimerTask+0x84>
 8003296:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800329a:	f383 8811 	msr	BASEPRI, r3
 800329e:	f3bf 8f6f 	isb	sy
 80032a2:	f3bf 8f4f 	dsb	sy
 80032a6:	e7fe      	b.n	80032a6 <prvTimerTask+0x15e>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80032a8:	9904      	ldr	r1, [sp, #16]
 80032aa:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80032ac:	b941      	cbnz	r1, 80032c0 <prvTimerTask+0x178>
 80032ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	e7fe      	b.n	80032be <prvTimerTask+0x176>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80032c0:	4603      	mov	r3, r0
 80032c2:	4401      	add	r1, r0
 80032c4:	4620      	mov	r0, r4
 80032c6:	f7ff fddd 	bl	8002e84 <prvInsertTimerInActiveList>
					break;
 80032ca:	e77f      	b.n	80031cc <prvTimerTask+0x84>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80032cc:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f47f af7b 	bne.w	80031cc <prvTimerTask+0x84>
							vPortFree( pxTimer );
 80032d6:	4620      	mov	r0, r4
 80032d8:	f000 fa32 	bl	8003740 <vPortFree>
 80032dc:	e776      	b.n	80031cc <prvTimerTask+0x84>
 80032de:	bf00      	nop
 80032e0:	20000ddc 	.word	0x20000ddc
 80032e4:	20000dd4 	.word	0x20000dd4
 80032e8:	20000dd8 	.word	0x20000dd8

080032ec <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80032ec:	b510      	push	{r4, lr}
BaseType_t xTimerIsInActiveList;
Timer_t *pxTimer = ( Timer_t * ) xTimer;

	configASSERT( xTimer );
 80032ee:	4604      	mov	r4, r0
 80032f0:	b940      	cbnz	r0, 8003304 <xTimerIsTimerActive+0x18>
 80032f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f6:	f383 8811 	msr	BASEPRI, r3
 80032fa:	f3bf 8f6f 	isb	sy
 80032fe:	f3bf 8f4f 	dsb	sy
 8003302:	e7fe      	b.n	8003302 <xTimerIsTimerActive+0x16>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8003304:	f000 f85e 	bl	80033c4 <vPortEnterCritical>
	{
		/* Checking to see if it is in the NULL list in effect checks to see if
		it is referenced from either the current or the overflow timer lists in
		one go, but the logic has to be reversed, hence the '!'. */
		xTimerIsInActiveList = ( BaseType_t ) !( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) ); /*lint !e961. Cast is only redundant when NULL is passed into the macro. */
 8003308:	6964      	ldr	r4, [r4, #20]
 800330a:	3c00      	subs	r4, #0
 800330c:	bf18      	it	ne
 800330e:	2401      	movne	r4, #1
	}
	taskEXIT_CRITICAL();
 8003310:	f000 f878 	bl	8003404 <vPortExitCritical>

	return xTimerIsInActiveList;
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8003314:	4620      	mov	r0, r4
 8003316:	bd10      	pop	{r4, pc}

08003318 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003318:	4806      	ldr	r0, [pc, #24]	@ (8003334 <prvPortStartFirstTask+0x1c>)
 800331a:	6800      	ldr	r0, [r0, #0]
 800331c:	6800      	ldr	r0, [r0, #0]
 800331e:	f380 8808 	msr	MSP, r0
 8003322:	b662      	cpsie	i
 8003324:	b661      	cpsie	f
 8003326:	f3bf 8f4f 	dsb	sy
 800332a:	f3bf 8f6f 	isb	sy
 800332e:	df00      	svc	0
 8003330:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003332:	0000      	.short	0x0000
 8003334:	e000ed08 	.word	0xe000ed08

08003338 <prvTaskExitError>:
volatile uint32_t ulDummy = 0UL;
 8003338:	2300      	movs	r3, #0
{
 800333a:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 800333c:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800333e:	4b0d      	ldr	r3, [pc, #52]	@ (8003374 <prvTaskExitError+0x3c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	3301      	adds	r3, #1
 8003344:	d008      	beq.n	8003358 <prvTaskExitError+0x20>
 8003346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800334a:	f383 8811 	msr	BASEPRI, r3
 800334e:	f3bf 8f6f 	isb	sy
 8003352:	f3bf 8f4f 	dsb	sy
 8003356:	e7fe      	b.n	8003356 <prvTaskExitError+0x1e>
 8003358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800335c:	f383 8811 	msr	BASEPRI, r3
 8003360:	f3bf 8f6f 	isb	sy
 8003364:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 8003368:	9b01      	ldr	r3, [sp, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d0fc      	beq.n	8003368 <prvTaskExitError+0x30>
}
 800336e:	b002      	add	sp, #8
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000014 	.word	0x20000014

08003378 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003378:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800337c:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003380:	4b05      	ldr	r3, [pc, #20]	@ (8003398 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003382:	f021 0101 	bic.w	r1, r1, #1
 8003386:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800338a:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800338e:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8003392:	3840      	subs	r0, #64	@ 0x40
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	08003339 	.word	0x08003339
 800339c:	00000000 	.word	0x00000000

080033a0 <SVC_Handler>:
	__asm volatile (
 80033a0:	4b07      	ldr	r3, [pc, #28]	@ (80033c0 <pxCurrentTCBConst2>)
 80033a2:	6819      	ldr	r1, [r3, #0]
 80033a4:	6808      	ldr	r0, [r1, #0]
 80033a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80033aa:	f380 8809 	msr	PSP, r0
 80033ae:	f3bf 8f6f 	isb	sy
 80033b2:	f04f 0000 	mov.w	r0, #0
 80033b6:	f380 8811 	msr	BASEPRI, r0
 80033ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80033be:	4770      	bx	lr

080033c0 <pxCurrentTCBConst2>:
 80033c0:	20000d08 	.word	0x20000d08

080033c4 <vPortEnterCritical>:
 80033c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c8:	f383 8811 	msr	BASEPRI, r3
 80033cc:	f3bf 8f6f 	isb	sy
 80033d0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80033d4:	4a0a      	ldr	r2, [pc, #40]	@ (8003400 <vPortEnterCritical+0x3c>)
 80033d6:	6813      	ldr	r3, [r2, #0]
 80033d8:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80033da:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 80033dc:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 80033de:	d10e      	bne.n	80033fe <vPortEnterCritical+0x3a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80033e0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 80033e4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 80033e8:	b2db      	uxtb	r3, r3
 80033ea:	b143      	cbz	r3, 80033fe <vPortEnterCritical+0x3a>
 80033ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f0:	f383 8811 	msr	BASEPRI, r3
 80033f4:	f3bf 8f6f 	isb	sy
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	e7fe      	b.n	80033fc <vPortEnterCritical+0x38>
	}
}
 80033fe:	4770      	bx	lr
 8003400:	20000014 	.word	0x20000014

08003404 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8003404:	4a08      	ldr	r2, [pc, #32]	@ (8003428 <vPortExitCritical+0x24>)
 8003406:	6813      	ldr	r3, [r2, #0]
 8003408:	b943      	cbnz	r3, 800341c <vPortExitCritical+0x18>
 800340a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	e7fe      	b.n	800341a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800341c:	3b01      	subs	r3, #1
 800341e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003420:	b90b      	cbnz	r3, 8003426 <vPortExitCritical+0x22>
	__asm volatile
 8003422:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8003426:	4770      	bx	lr
 8003428:	20000014 	.word	0x20000014
 800342c:	00000000 	.word	0x00000000

08003430 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003430:	f3ef 8009 	mrs	r0, PSP
 8003434:	f3bf 8f6f 	isb	sy
 8003438:	4b0d      	ldr	r3, [pc, #52]	@ (8003470 <pxCurrentTCBConst>)
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003440:	6010      	str	r0, [r2, #0]
 8003442:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003446:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800344a:	f380 8811 	msr	BASEPRI, r0
 800344e:	f7ff fbb5 	bl	8002bbc <vTaskSwitchContext>
 8003452:	f04f 0000 	mov.w	r0, #0
 8003456:	f380 8811 	msr	BASEPRI, r0
 800345a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800345e:	6819      	ldr	r1, [r3, #0]
 8003460:	6808      	ldr	r0, [r1, #0]
 8003462:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003466:	f380 8809 	msr	PSP, r0
 800346a:	f3bf 8f6f 	isb	sy
 800346e:	4770      	bx	lr

08003470 <pxCurrentTCBConst>:
 8003470:	20000d08 	.word	0x20000d08

08003474 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003474:	b508      	push	{r3, lr}
	__asm volatile
 8003476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800347a:	f383 8811 	msr	BASEPRI, r3
 800347e:	f3bf 8f6f 	isb	sy
 8003482:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003486:	f7ff fa65 	bl	8002954 <xTaskIncrementTick>
 800348a:	b128      	cbz	r0, 8003498 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800348c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8003490:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003494:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 8003498:	2300      	movs	r3, #0
 800349a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800349e:	bd08      	pop	{r3, pc}

080034a0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80034a0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 80034a4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80034a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80034aa:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80034ac:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80034ae:	4b04      	ldr	r3, [pc, #16]	@ (80034c0 <vPortSetupTimerInterrupt+0x20>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80034b6:	3b01      	subs	r3, #1
 80034b8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80034ba:	2307      	movs	r3, #7
 80034bc:	6113      	str	r3, [r2, #16]
}
 80034be:	4770      	bx	lr
 80034c0:	20000008 	.word	0x20000008

080034c4 <xPortStartScheduler>:
{
 80034c4:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80034c6:	4b27      	ldr	r3, [pc, #156]	@ (8003564 <xPortStartScheduler+0xa0>)
 80034c8:	781a      	ldrb	r2, [r3, #0]
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80034ce:	22ff      	movs	r2, #255	@ 0xff
 80034d0:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034d2:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80034d4:	4a24      	ldr	r2, [pc, #144]	@ (8003568 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80034dc:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80034e0:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80034e4:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80034e6:	2307      	movs	r3, #7
 80034e8:	4a20      	ldr	r2, [pc, #128]	@ (800356c <xPortStartScheduler+0xa8>)
 80034ea:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034ec:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 80034f0:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80034f2:	0609      	lsls	r1, r1, #24
 80034f4:	d40a      	bmi.n	800350c <xPortStartScheduler+0x48>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80034f6:	2b03      	cmp	r3, #3
 80034f8:	d011      	beq.n	800351e <xPortStartScheduler+0x5a>
	__asm volatile
 80034fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034fe:	f383 8811 	msr	BASEPRI, r3
 8003502:	f3bf 8f6f 	isb	sy
 8003506:	f3bf 8f4f 	dsb	sy
 800350a:	e7fe      	b.n	800350a <xPortStartScheduler+0x46>
			ulMaxPRIGROUPValue--;
 800350c:	3b01      	subs	r3, #1
 800350e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003510:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8003514:	005b      	lsls	r3, r3, #1
 8003516:	b2db      	uxtb	r3, r3
 8003518:	f88d 3003 	strb.w	r3, [sp, #3]
 800351c:	e7e6      	b.n	80034ec <xPortStartScheduler+0x28>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800351e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003522:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003524:	9b01      	ldr	r3, [sp, #4]
 8003526:	4a0f      	ldr	r2, [pc, #60]	@ (8003564 <xPortStartScheduler+0xa0>)
 8003528:	b2db      	uxtb	r3, r3
 800352a:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800352c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 8003530:	2400      	movs	r4, #0
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003532:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8003536:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800353a:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800353e:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	@ 0xd20
 8003542:	f042 4270 	orr.w	r2, r2, #4026531840	@ 0xf0000000
 8003546:	f8c3 2d20 	str.w	r2, [r3, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800354a:	f7ff ffa9 	bl	80034a0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800354e:	4b08      	ldr	r3, [pc, #32]	@ (8003570 <xPortStartScheduler+0xac>)
 8003550:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8003552:	f7ff fee1 	bl	8003318 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8003556:	f7ff fb31 	bl	8002bbc <vTaskSwitchContext>
}
 800355a:	4620      	mov	r0, r4
	prvTaskExitError();
 800355c:	f7ff feec 	bl	8003338 <prvTaskExitError>
}
 8003560:	b002      	add	sp, #8
 8003562:	bd10      	pop	{r4, pc}
 8003564:	e000e400 	.word	0xe000e400
 8003568:	20000e0c 	.word	0x20000e0c
 800356c:	20000e08 	.word	0x20000e08
 8003570:	20000014 	.word	0x20000014

08003574 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003574:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003578:	2b0f      	cmp	r3, #15
 800357a:	d90e      	bls.n	800359a <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800357c:	4a11      	ldr	r2, [pc, #68]	@ (80035c4 <vPortValidateInterruptPriority+0x50>)
 800357e:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003580:	4a11      	ldr	r2, [pc, #68]	@ (80035c8 <vPortValidateInterruptPriority+0x54>)
 8003582:	7812      	ldrb	r2, [r2, #0]
 8003584:	429a      	cmp	r2, r3
 8003586:	d908      	bls.n	800359a <vPortValidateInterruptPriority+0x26>
 8003588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800358c:	f383 8811 	msr	BASEPRI, r3
 8003590:	f3bf 8f6f 	isb	sy
 8003594:	f3bf 8f4f 	dsb	sy
 8003598:	e7fe      	b.n	8003598 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800359a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800359e:	4a0b      	ldr	r2, [pc, #44]	@ (80035cc <vPortValidateInterruptPriority+0x58>)
 80035a0:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 80035a4:	6812      	ldr	r2, [r2, #0]
 80035a6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d908      	bls.n	80035c0 <vPortValidateInterruptPriority+0x4c>
 80035ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	e7fe      	b.n	80035be <vPortValidateInterruptPriority+0x4a>
	}
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	e000e3f0 	.word	0xe000e3f0
 80035c8:	20000e0c 	.word	0x20000e0c
 80035cc:	20000e08 	.word	0x20000e08

080035d0 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80035d0:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80035d2:	4b10      	ldr	r3, [pc, #64]	@ (8003614 <prvInsertBlockIntoFreeList+0x44>)
 80035d4:	461a      	mov	r2, r3
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4283      	cmp	r3, r0
 80035da:	d3fb      	bcc.n	80035d4 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80035dc:	6854      	ldr	r4, [r2, #4]
 80035de:	1911      	adds	r1, r2, r4
 80035e0:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80035e2:	bf01      	itttt	eq
 80035e4:	6841      	ldreq	r1, [r0, #4]
 80035e6:	4610      	moveq	r0, r2
 80035e8:	1909      	addeq	r1, r1, r4
 80035ea:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80035ec:	6844      	ldr	r4, [r0, #4]
 80035ee:	1901      	adds	r1, r0, r4
 80035f0:	428b      	cmp	r3, r1
 80035f2:	d10c      	bne.n	800360e <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80035f4:	4908      	ldr	r1, [pc, #32]	@ (8003618 <prvInsertBlockIntoFreeList+0x48>)
 80035f6:	6809      	ldr	r1, [r1, #0]
 80035f8:	428b      	cmp	r3, r1
 80035fa:	d003      	beq.n	8003604 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80035fc:	6859      	ldr	r1, [r3, #4]
 80035fe:	4421      	add	r1, r4
 8003600:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003602:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003604:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003606:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003608:	bf18      	it	ne
 800360a:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800360c:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800360e:	4619      	mov	r1, r3
 8003610:	e7f8      	b.n	8003604 <prvInsertBlockIntoFreeList+0x34>
 8003612:	bf00      	nop
 8003614:	20000e20 	.word	0x20000e20
 8003618:	20000e1c 	.word	0x20000e1c

0800361c <pvPortMalloc>:
{
 800361c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003620:	4604      	mov	r4, r0
	vTaskSuspendAll();
 8003622:	f7ff f989 	bl	8002938 <vTaskSuspendAll>
		if( pxEnd == NULL )
 8003626:	4940      	ldr	r1, [pc, #256]	@ (8003728 <pvPortMalloc+0x10c>)
 8003628:	4d40      	ldr	r5, [pc, #256]	@ (800372c <pvPortMalloc+0x110>)
 800362a:	680b      	ldr	r3, [r1, #0]
 800362c:	bb0b      	cbnz	r3, 8003672 <pvPortMalloc+0x56>
	uxAddress = ( size_t ) ucHeap;
 800362e:	4a40      	ldr	r2, [pc, #256]	@ (8003730 <pvPortMalloc+0x114>)
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003630:	0756      	lsls	r6, r2, #29
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003632:	bf1f      	itttt	ne
 8003634:	1dd0      	addne	r0, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003636:	f020 0007 	bicne.w	r0, r0, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800363a:	f502 6240 	addne.w	r2, r2, #3072	@ 0xc00
 800363e:	1a13      	subne	r3, r2, r0
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003640:	bf0c      	ite	eq
 8003642:	f44f 6340 	moveq.w	r3, #3072	@ 0xc00
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003646:	4602      	movne	r2, r0
	xStart.xBlockSize = ( size_t ) 0;
 8003648:	2000      	movs	r0, #0
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800364a:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800364c:	4e39      	ldr	r6, [pc, #228]	@ (8003734 <pvPortMalloc+0x118>)
	uxAddress -= xHeapStructSize;
 800364e:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003650:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 8003654:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003656:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 8003658:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800365c:	1a98      	subs	r0, r3, r2
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800365e:	e9c2 3000 	strd	r3, r0, [r2]
	pxEnd = ( void * ) uxAddress;
 8003662:	600b      	str	r3, [r1, #0]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003664:	4b34      	ldr	r3, [pc, #208]	@ (8003738 <pvPortMalloc+0x11c>)
 8003666:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003668:	4b34      	ldr	r3, [pc, #208]	@ (800373c <pvPortMalloc+0x120>)
 800366a:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800366c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003670:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003672:	682e      	ldr	r6, [r5, #0]
 8003674:	4226      	tst	r6, r4
 8003676:	d151      	bne.n	800371c <pvPortMalloc+0x100>
			if( xWantedSize > 0 )
 8003678:	2c00      	cmp	r4, #0
 800367a:	d042      	beq.n	8003702 <pvPortMalloc+0xe6>
				xWantedSize += xHeapStructSize;
 800367c:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003680:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003682:	bf1c      	itt	ne
 8003684:	f023 0307 	bicne.w	r3, r3, #7
 8003688:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800368a:	2b00      	cmp	r3, #0
 800368c:	d046      	beq.n	800371c <pvPortMalloc+0x100>
 800368e:	4f2b      	ldr	r7, [pc, #172]	@ (800373c <pvPortMalloc+0x120>)
 8003690:	683c      	ldr	r4, [r7, #0]
 8003692:	429c      	cmp	r4, r3
 8003694:	d342      	bcc.n	800371c <pvPortMalloc+0x100>
				pxBlock = xStart.pxNextFreeBlock;
 8003696:	4a27      	ldr	r2, [pc, #156]	@ (8003734 <pvPortMalloc+0x118>)
 8003698:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800369a:	6868      	ldr	r0, [r5, #4]
 800369c:	4298      	cmp	r0, r3
 800369e:	d204      	bcs.n	80036aa <pvPortMalloc+0x8e>
 80036a0:	f8d5 c000 	ldr.w	ip, [r5]
 80036a4:	f1bc 0f00 	cmp.w	ip, #0
 80036a8:	d115      	bne.n	80036d6 <pvPortMalloc+0xba>
				if( pxBlock != pxEnd )
 80036aa:	6809      	ldr	r1, [r1, #0]
 80036ac:	42a9      	cmp	r1, r5
 80036ae:	d035      	beq.n	800371c <pvPortMalloc+0x100>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80036b0:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80036b2:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80036b6:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80036b8:	1ac2      	subs	r2, r0, r3
 80036ba:	2a10      	cmp	r2, #16
 80036bc:	d912      	bls.n	80036e4 <pvPortMalloc+0xc8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80036be:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80036c0:	0741      	lsls	r1, r0, #29
 80036c2:	d00b      	beq.n	80036dc <pvPortMalloc+0xc0>
 80036c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036c8:	f383 8811 	msr	BASEPRI, r3
 80036cc:	f3bf 8f6f 	isb	sy
 80036d0:	f3bf 8f4f 	dsb	sy
 80036d4:	e7fe      	b.n	80036d4 <pvPortMalloc+0xb8>
 80036d6:	462a      	mov	r2, r5
 80036d8:	4665      	mov	r5, ip
 80036da:	e7de      	b.n	800369a <pvPortMalloc+0x7e>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80036dc:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 80036de:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80036e0:	f7ff ff76 	bl	80035d0 <prvInsertBlockIntoFreeList>
					pxBlock->pxNextFreeBlock = NULL;
 80036e4:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80036e6:	4914      	ldr	r1, [pc, #80]	@ (8003738 <pvPortMalloc+0x11c>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80036e8:	686a      	ldr	r2, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80036ea:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80036ec:	1aa4      	subs	r4, r4, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80036ee:	4284      	cmp	r4, r0
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80036f0:	ea46 0602 	orr.w	r6, r6, r2
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80036f4:	603c      	str	r4, [r7, #0]
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80036f6:	bf38      	it	cc
 80036f8:	600c      	strcc	r4, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80036fa:	606e      	str	r6, [r5, #4]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80036fc:	f108 0408 	add.w	r4, r8, #8
					pxBlock->pxNextFreeBlock = NULL;
 8003700:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 8003702:	f7ff f9c1 	bl	8002a88 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003706:	0763      	lsls	r3, r4, #29
 8003708:	d00a      	beq.n	8003720 <pvPortMalloc+0x104>
 800370a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800370e:	f383 8811 	msr	BASEPRI, r3
 8003712:	f3bf 8f6f 	isb	sy
 8003716:	f3bf 8f4f 	dsb	sy
 800371a:	e7fe      	b.n	800371a <pvPortMalloc+0xfe>
void *pvReturn = NULL;
 800371c:	2400      	movs	r4, #0
 800371e:	e7f0      	b.n	8003702 <pvPortMalloc+0xe6>
}
 8003720:	4620      	mov	r0, r4
 8003722:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003726:	bf00      	nop
 8003728:	20000e1c 	.word	0x20000e1c
 800372c:	20000e10 	.word	0x20000e10
 8003730:	20000e28 	.word	0x20000e28
 8003734:	20000e20 	.word	0x20000e20
 8003738:	20000e14 	.word	0x20000e14
 800373c:	20000e18 	.word	0x20000e18

08003740 <vPortFree>:
{
 8003740:	b510      	push	{r4, lr}
	if( pv != NULL )
 8003742:	4604      	mov	r4, r0
 8003744:	b370      	cbz	r0, 80037a4 <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003746:	4a18      	ldr	r2, [pc, #96]	@ (80037a8 <vPortFree+0x68>)
 8003748:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800374c:	6812      	ldr	r2, [r2, #0]
 800374e:	4213      	tst	r3, r2
 8003750:	d108      	bne.n	8003764 <vPortFree+0x24>
 8003752:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003756:	f383 8811 	msr	BASEPRI, r3
 800375a:	f3bf 8f6f 	isb	sy
 800375e:	f3bf 8f4f 	dsb	sy
 8003762:	e7fe      	b.n	8003762 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003764:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8003768:	b141      	cbz	r1, 800377c <vPortFree+0x3c>
 800376a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800376e:	f383 8811 	msr	BASEPRI, r3
 8003772:	f3bf 8f6f 	isb	sy
 8003776:	f3bf 8f4f 	dsb	sy
 800377a:	e7fe      	b.n	800377a <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800377c:	ea23 0302 	bic.w	r3, r3, r2
 8003780:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 8003784:	f7ff f8d8 	bl	8002938 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003788:	4a08      	ldr	r2, [pc, #32]	@ (80037ac <vPortFree+0x6c>)
 800378a:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800378e:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003790:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003794:	440b      	add	r3, r1
 8003796:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003798:	f7ff ff1a 	bl	80035d0 <prvInsertBlockIntoFreeList>
}
 800379c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 80037a0:	f7ff b972 	b.w	8002a88 <xTaskResumeAll>
}
 80037a4:	bd10      	pop	{r4, pc}
 80037a6:	bf00      	nop
 80037a8:	20000e10 	.word	0x20000e10
 80037ac:	20000e18 	.word	0x20000e18

080037b0 <siprintf>:
 80037b0:	b40e      	push	{r1, r2, r3}
 80037b2:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80037b6:	b500      	push	{lr}
 80037b8:	b09c      	sub	sp, #112	@ 0x70
 80037ba:	ab1d      	add	r3, sp, #116	@ 0x74
 80037bc:	9002      	str	r0, [sp, #8]
 80037be:	9006      	str	r0, [sp, #24]
 80037c0:	9107      	str	r1, [sp, #28]
 80037c2:	9104      	str	r1, [sp, #16]
 80037c4:	4808      	ldr	r0, [pc, #32]	@ (80037e8 <siprintf+0x38>)
 80037c6:	4909      	ldr	r1, [pc, #36]	@ (80037ec <siprintf+0x3c>)
 80037c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80037cc:	9105      	str	r1, [sp, #20]
 80037ce:	6800      	ldr	r0, [r0, #0]
 80037d0:	a902      	add	r1, sp, #8
 80037d2:	9301      	str	r3, [sp, #4]
 80037d4:	f000 f9a0 	bl	8003b18 <_svfiprintf_r>
 80037d8:	2200      	movs	r2, #0
 80037da:	9b02      	ldr	r3, [sp, #8]
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	b01c      	add	sp, #112	@ 0x70
 80037e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80037e4:	b003      	add	sp, #12
 80037e6:	4770      	bx	lr
 80037e8:	20000018 	.word	0x20000018
 80037ec:	ffff0208 	.word	0xffff0208

080037f0 <memset>:
 80037f0:	4603      	mov	r3, r0
 80037f2:	4402      	add	r2, r0
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d100      	bne.n	80037fa <memset+0xa>
 80037f8:	4770      	bx	lr
 80037fa:	f803 1b01 	strb.w	r1, [r3], #1
 80037fe:	e7f9      	b.n	80037f4 <memset+0x4>

08003800 <__errno>:
 8003800:	4b01      	ldr	r3, [pc, #4]	@ (8003808 <__errno+0x8>)
 8003802:	6818      	ldr	r0, [r3, #0]
 8003804:	4770      	bx	lr
 8003806:	bf00      	nop
 8003808:	20000018 	.word	0x20000018

0800380c <__libc_init_array>:
 800380c:	b570      	push	{r4, r5, r6, lr}
 800380e:	2600      	movs	r6, #0
 8003810:	4d0c      	ldr	r5, [pc, #48]	@ (8003844 <__libc_init_array+0x38>)
 8003812:	4c0d      	ldr	r4, [pc, #52]	@ (8003848 <__libc_init_array+0x3c>)
 8003814:	1b64      	subs	r4, r4, r5
 8003816:	10a4      	asrs	r4, r4, #2
 8003818:	42a6      	cmp	r6, r4
 800381a:	d109      	bne.n	8003830 <__libc_init_array+0x24>
 800381c:	f000 fc78 	bl	8004110 <_init>
 8003820:	2600      	movs	r6, #0
 8003822:	4d0a      	ldr	r5, [pc, #40]	@ (800384c <__libc_init_array+0x40>)
 8003824:	4c0a      	ldr	r4, [pc, #40]	@ (8003850 <__libc_init_array+0x44>)
 8003826:	1b64      	subs	r4, r4, r5
 8003828:	10a4      	asrs	r4, r4, #2
 800382a:	42a6      	cmp	r6, r4
 800382c:	d105      	bne.n	800383a <__libc_init_array+0x2e>
 800382e:	bd70      	pop	{r4, r5, r6, pc}
 8003830:	f855 3b04 	ldr.w	r3, [r5], #4
 8003834:	4798      	blx	r3
 8003836:	3601      	adds	r6, #1
 8003838:	e7ee      	b.n	8003818 <__libc_init_array+0xc>
 800383a:	f855 3b04 	ldr.w	r3, [r5], #4
 800383e:	4798      	blx	r3
 8003840:	3601      	adds	r6, #1
 8003842:	e7f2      	b.n	800382a <__libc_init_array+0x1e>
 8003844:	08005a60 	.word	0x08005a60
 8003848:	08005a60 	.word	0x08005a60
 800384c:	08005a60 	.word	0x08005a60
 8003850:	08005a64 	.word	0x08005a64

08003854 <__retarget_lock_acquire_recursive>:
 8003854:	4770      	bx	lr

08003856 <__retarget_lock_release_recursive>:
 8003856:	4770      	bx	lr

08003858 <memcpy>:
 8003858:	440a      	add	r2, r1
 800385a:	4291      	cmp	r1, r2
 800385c:	f100 33ff 	add.w	r3, r0, #4294967295
 8003860:	d100      	bne.n	8003864 <memcpy+0xc>
 8003862:	4770      	bx	lr
 8003864:	b510      	push	{r4, lr}
 8003866:	f811 4b01 	ldrb.w	r4, [r1], #1
 800386a:	4291      	cmp	r1, r2
 800386c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003870:	d1f9      	bne.n	8003866 <memcpy+0xe>
 8003872:	bd10      	pop	{r4, pc}

08003874 <_free_r>:
 8003874:	b538      	push	{r3, r4, r5, lr}
 8003876:	4605      	mov	r5, r0
 8003878:	2900      	cmp	r1, #0
 800387a:	d040      	beq.n	80038fe <_free_r+0x8a>
 800387c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003880:	1f0c      	subs	r4, r1, #4
 8003882:	2b00      	cmp	r3, #0
 8003884:	bfb8      	it	lt
 8003886:	18e4      	addlt	r4, r4, r3
 8003888:	f000 f8de 	bl	8003a48 <__malloc_lock>
 800388c:	4a1c      	ldr	r2, [pc, #112]	@ (8003900 <_free_r+0x8c>)
 800388e:	6813      	ldr	r3, [r2, #0]
 8003890:	b933      	cbnz	r3, 80038a0 <_free_r+0x2c>
 8003892:	6063      	str	r3, [r4, #4]
 8003894:	6014      	str	r4, [r2, #0]
 8003896:	4628      	mov	r0, r5
 8003898:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800389c:	f000 b8da 	b.w	8003a54 <__malloc_unlock>
 80038a0:	42a3      	cmp	r3, r4
 80038a2:	d908      	bls.n	80038b6 <_free_r+0x42>
 80038a4:	6820      	ldr	r0, [r4, #0]
 80038a6:	1821      	adds	r1, r4, r0
 80038a8:	428b      	cmp	r3, r1
 80038aa:	bf01      	itttt	eq
 80038ac:	6819      	ldreq	r1, [r3, #0]
 80038ae:	685b      	ldreq	r3, [r3, #4]
 80038b0:	1809      	addeq	r1, r1, r0
 80038b2:	6021      	streq	r1, [r4, #0]
 80038b4:	e7ed      	b.n	8003892 <_free_r+0x1e>
 80038b6:	461a      	mov	r2, r3
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	b10b      	cbz	r3, 80038c0 <_free_r+0x4c>
 80038bc:	42a3      	cmp	r3, r4
 80038be:	d9fa      	bls.n	80038b6 <_free_r+0x42>
 80038c0:	6811      	ldr	r1, [r2, #0]
 80038c2:	1850      	adds	r0, r2, r1
 80038c4:	42a0      	cmp	r0, r4
 80038c6:	d10b      	bne.n	80038e0 <_free_r+0x6c>
 80038c8:	6820      	ldr	r0, [r4, #0]
 80038ca:	4401      	add	r1, r0
 80038cc:	1850      	adds	r0, r2, r1
 80038ce:	4283      	cmp	r3, r0
 80038d0:	6011      	str	r1, [r2, #0]
 80038d2:	d1e0      	bne.n	8003896 <_free_r+0x22>
 80038d4:	6818      	ldr	r0, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	4408      	add	r0, r1
 80038da:	6010      	str	r0, [r2, #0]
 80038dc:	6053      	str	r3, [r2, #4]
 80038de:	e7da      	b.n	8003896 <_free_r+0x22>
 80038e0:	d902      	bls.n	80038e8 <_free_r+0x74>
 80038e2:	230c      	movs	r3, #12
 80038e4:	602b      	str	r3, [r5, #0]
 80038e6:	e7d6      	b.n	8003896 <_free_r+0x22>
 80038e8:	6820      	ldr	r0, [r4, #0]
 80038ea:	1821      	adds	r1, r4, r0
 80038ec:	428b      	cmp	r3, r1
 80038ee:	bf01      	itttt	eq
 80038f0:	6819      	ldreq	r1, [r3, #0]
 80038f2:	685b      	ldreq	r3, [r3, #4]
 80038f4:	1809      	addeq	r1, r1, r0
 80038f6:	6021      	streq	r1, [r4, #0]
 80038f8:	6063      	str	r3, [r4, #4]
 80038fa:	6054      	str	r4, [r2, #4]
 80038fc:	e7cb      	b.n	8003896 <_free_r+0x22>
 80038fe:	bd38      	pop	{r3, r4, r5, pc}
 8003900:	20001b6c 	.word	0x20001b6c

08003904 <sbrk_aligned>:
 8003904:	b570      	push	{r4, r5, r6, lr}
 8003906:	4e0f      	ldr	r6, [pc, #60]	@ (8003944 <sbrk_aligned+0x40>)
 8003908:	460c      	mov	r4, r1
 800390a:	6831      	ldr	r1, [r6, #0]
 800390c:	4605      	mov	r5, r0
 800390e:	b911      	cbnz	r1, 8003916 <sbrk_aligned+0x12>
 8003910:	f000 fbaa 	bl	8004068 <_sbrk_r>
 8003914:	6030      	str	r0, [r6, #0]
 8003916:	4621      	mov	r1, r4
 8003918:	4628      	mov	r0, r5
 800391a:	f000 fba5 	bl	8004068 <_sbrk_r>
 800391e:	1c43      	adds	r3, r0, #1
 8003920:	d103      	bne.n	800392a <sbrk_aligned+0x26>
 8003922:	f04f 34ff 	mov.w	r4, #4294967295
 8003926:	4620      	mov	r0, r4
 8003928:	bd70      	pop	{r4, r5, r6, pc}
 800392a:	1cc4      	adds	r4, r0, #3
 800392c:	f024 0403 	bic.w	r4, r4, #3
 8003930:	42a0      	cmp	r0, r4
 8003932:	d0f8      	beq.n	8003926 <sbrk_aligned+0x22>
 8003934:	1a21      	subs	r1, r4, r0
 8003936:	4628      	mov	r0, r5
 8003938:	f000 fb96 	bl	8004068 <_sbrk_r>
 800393c:	3001      	adds	r0, #1
 800393e:	d1f2      	bne.n	8003926 <sbrk_aligned+0x22>
 8003940:	e7ef      	b.n	8003922 <sbrk_aligned+0x1e>
 8003942:	bf00      	nop
 8003944:	20001b68 	.word	0x20001b68

08003948 <_malloc_r>:
 8003948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800394c:	1ccd      	adds	r5, r1, #3
 800394e:	f025 0503 	bic.w	r5, r5, #3
 8003952:	3508      	adds	r5, #8
 8003954:	2d0c      	cmp	r5, #12
 8003956:	bf38      	it	cc
 8003958:	250c      	movcc	r5, #12
 800395a:	2d00      	cmp	r5, #0
 800395c:	4606      	mov	r6, r0
 800395e:	db01      	blt.n	8003964 <_malloc_r+0x1c>
 8003960:	42a9      	cmp	r1, r5
 8003962:	d904      	bls.n	800396e <_malloc_r+0x26>
 8003964:	230c      	movs	r3, #12
 8003966:	6033      	str	r3, [r6, #0]
 8003968:	2000      	movs	r0, #0
 800396a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800396e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a44 <_malloc_r+0xfc>
 8003972:	f000 f869 	bl	8003a48 <__malloc_lock>
 8003976:	f8d8 3000 	ldr.w	r3, [r8]
 800397a:	461c      	mov	r4, r3
 800397c:	bb44      	cbnz	r4, 80039d0 <_malloc_r+0x88>
 800397e:	4629      	mov	r1, r5
 8003980:	4630      	mov	r0, r6
 8003982:	f7ff ffbf 	bl	8003904 <sbrk_aligned>
 8003986:	1c43      	adds	r3, r0, #1
 8003988:	4604      	mov	r4, r0
 800398a:	d158      	bne.n	8003a3e <_malloc_r+0xf6>
 800398c:	f8d8 4000 	ldr.w	r4, [r8]
 8003990:	4627      	mov	r7, r4
 8003992:	2f00      	cmp	r7, #0
 8003994:	d143      	bne.n	8003a1e <_malloc_r+0xd6>
 8003996:	2c00      	cmp	r4, #0
 8003998:	d04b      	beq.n	8003a32 <_malloc_r+0xea>
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	4639      	mov	r1, r7
 800399e:	4630      	mov	r0, r6
 80039a0:	eb04 0903 	add.w	r9, r4, r3
 80039a4:	f000 fb60 	bl	8004068 <_sbrk_r>
 80039a8:	4581      	cmp	r9, r0
 80039aa:	d142      	bne.n	8003a32 <_malloc_r+0xea>
 80039ac:	6821      	ldr	r1, [r4, #0]
 80039ae:	4630      	mov	r0, r6
 80039b0:	1a6d      	subs	r5, r5, r1
 80039b2:	4629      	mov	r1, r5
 80039b4:	f7ff ffa6 	bl	8003904 <sbrk_aligned>
 80039b8:	3001      	adds	r0, #1
 80039ba:	d03a      	beq.n	8003a32 <_malloc_r+0xea>
 80039bc:	6823      	ldr	r3, [r4, #0]
 80039be:	442b      	add	r3, r5
 80039c0:	6023      	str	r3, [r4, #0]
 80039c2:	f8d8 3000 	ldr.w	r3, [r8]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	bb62      	cbnz	r2, 8003a24 <_malloc_r+0xdc>
 80039ca:	f8c8 7000 	str.w	r7, [r8]
 80039ce:	e00f      	b.n	80039f0 <_malloc_r+0xa8>
 80039d0:	6822      	ldr	r2, [r4, #0]
 80039d2:	1b52      	subs	r2, r2, r5
 80039d4:	d420      	bmi.n	8003a18 <_malloc_r+0xd0>
 80039d6:	2a0b      	cmp	r2, #11
 80039d8:	d917      	bls.n	8003a0a <_malloc_r+0xc2>
 80039da:	1961      	adds	r1, r4, r5
 80039dc:	42a3      	cmp	r3, r4
 80039de:	6025      	str	r5, [r4, #0]
 80039e0:	bf18      	it	ne
 80039e2:	6059      	strne	r1, [r3, #4]
 80039e4:	6863      	ldr	r3, [r4, #4]
 80039e6:	bf08      	it	eq
 80039e8:	f8c8 1000 	streq.w	r1, [r8]
 80039ec:	5162      	str	r2, [r4, r5]
 80039ee:	604b      	str	r3, [r1, #4]
 80039f0:	4630      	mov	r0, r6
 80039f2:	f000 f82f 	bl	8003a54 <__malloc_unlock>
 80039f6:	f104 000b 	add.w	r0, r4, #11
 80039fa:	1d23      	adds	r3, r4, #4
 80039fc:	f020 0007 	bic.w	r0, r0, #7
 8003a00:	1ac2      	subs	r2, r0, r3
 8003a02:	bf1c      	itt	ne
 8003a04:	1a1b      	subne	r3, r3, r0
 8003a06:	50a3      	strne	r3, [r4, r2]
 8003a08:	e7af      	b.n	800396a <_malloc_r+0x22>
 8003a0a:	6862      	ldr	r2, [r4, #4]
 8003a0c:	42a3      	cmp	r3, r4
 8003a0e:	bf0c      	ite	eq
 8003a10:	f8c8 2000 	streq.w	r2, [r8]
 8003a14:	605a      	strne	r2, [r3, #4]
 8003a16:	e7eb      	b.n	80039f0 <_malloc_r+0xa8>
 8003a18:	4623      	mov	r3, r4
 8003a1a:	6864      	ldr	r4, [r4, #4]
 8003a1c:	e7ae      	b.n	800397c <_malloc_r+0x34>
 8003a1e:	463c      	mov	r4, r7
 8003a20:	687f      	ldr	r7, [r7, #4]
 8003a22:	e7b6      	b.n	8003992 <_malloc_r+0x4a>
 8003a24:	461a      	mov	r2, r3
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	42a3      	cmp	r3, r4
 8003a2a:	d1fb      	bne.n	8003a24 <_malloc_r+0xdc>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	6053      	str	r3, [r2, #4]
 8003a30:	e7de      	b.n	80039f0 <_malloc_r+0xa8>
 8003a32:	230c      	movs	r3, #12
 8003a34:	4630      	mov	r0, r6
 8003a36:	6033      	str	r3, [r6, #0]
 8003a38:	f000 f80c 	bl	8003a54 <__malloc_unlock>
 8003a3c:	e794      	b.n	8003968 <_malloc_r+0x20>
 8003a3e:	6005      	str	r5, [r0, #0]
 8003a40:	e7d6      	b.n	80039f0 <_malloc_r+0xa8>
 8003a42:	bf00      	nop
 8003a44:	20001b6c 	.word	0x20001b6c

08003a48 <__malloc_lock>:
 8003a48:	4801      	ldr	r0, [pc, #4]	@ (8003a50 <__malloc_lock+0x8>)
 8003a4a:	f7ff bf03 	b.w	8003854 <__retarget_lock_acquire_recursive>
 8003a4e:	bf00      	nop
 8003a50:	20001b64 	.word	0x20001b64

08003a54 <__malloc_unlock>:
 8003a54:	4801      	ldr	r0, [pc, #4]	@ (8003a5c <__malloc_unlock+0x8>)
 8003a56:	f7ff befe 	b.w	8003856 <__retarget_lock_release_recursive>
 8003a5a:	bf00      	nop
 8003a5c:	20001b64 	.word	0x20001b64

08003a60 <__ssputs_r>:
 8003a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a64:	461f      	mov	r7, r3
 8003a66:	688e      	ldr	r6, [r1, #8]
 8003a68:	4682      	mov	sl, r0
 8003a6a:	42be      	cmp	r6, r7
 8003a6c:	460c      	mov	r4, r1
 8003a6e:	4690      	mov	r8, r2
 8003a70:	680b      	ldr	r3, [r1, #0]
 8003a72:	d82d      	bhi.n	8003ad0 <__ssputs_r+0x70>
 8003a74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a7c:	d026      	beq.n	8003acc <__ssputs_r+0x6c>
 8003a7e:	6965      	ldr	r5, [r4, #20]
 8003a80:	6909      	ldr	r1, [r1, #16]
 8003a82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a86:	eba3 0901 	sub.w	r9, r3, r1
 8003a8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a8e:	1c7b      	adds	r3, r7, #1
 8003a90:	444b      	add	r3, r9
 8003a92:	106d      	asrs	r5, r5, #1
 8003a94:	429d      	cmp	r5, r3
 8003a96:	bf38      	it	cc
 8003a98:	461d      	movcc	r5, r3
 8003a9a:	0553      	lsls	r3, r2, #21
 8003a9c:	d527      	bpl.n	8003aee <__ssputs_r+0x8e>
 8003a9e:	4629      	mov	r1, r5
 8003aa0:	f7ff ff52 	bl	8003948 <_malloc_r>
 8003aa4:	4606      	mov	r6, r0
 8003aa6:	b360      	cbz	r0, 8003b02 <__ssputs_r+0xa2>
 8003aa8:	464a      	mov	r2, r9
 8003aaa:	6921      	ldr	r1, [r4, #16]
 8003aac:	f7ff fed4 	bl	8003858 <memcpy>
 8003ab0:	89a3      	ldrh	r3, [r4, #12]
 8003ab2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003ab6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aba:	81a3      	strh	r3, [r4, #12]
 8003abc:	6126      	str	r6, [r4, #16]
 8003abe:	444e      	add	r6, r9
 8003ac0:	6026      	str	r6, [r4, #0]
 8003ac2:	463e      	mov	r6, r7
 8003ac4:	6165      	str	r5, [r4, #20]
 8003ac6:	eba5 0509 	sub.w	r5, r5, r9
 8003aca:	60a5      	str	r5, [r4, #8]
 8003acc:	42be      	cmp	r6, r7
 8003ace:	d900      	bls.n	8003ad2 <__ssputs_r+0x72>
 8003ad0:	463e      	mov	r6, r7
 8003ad2:	4632      	mov	r2, r6
 8003ad4:	4641      	mov	r1, r8
 8003ad6:	6820      	ldr	r0, [r4, #0]
 8003ad8:	f000 faac 	bl	8004034 <memmove>
 8003adc:	2000      	movs	r0, #0
 8003ade:	68a3      	ldr	r3, [r4, #8]
 8003ae0:	1b9b      	subs	r3, r3, r6
 8003ae2:	60a3      	str	r3, [r4, #8]
 8003ae4:	6823      	ldr	r3, [r4, #0]
 8003ae6:	4433      	add	r3, r6
 8003ae8:	6023      	str	r3, [r4, #0]
 8003aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aee:	462a      	mov	r2, r5
 8003af0:	f000 fad8 	bl	80040a4 <_realloc_r>
 8003af4:	4606      	mov	r6, r0
 8003af6:	2800      	cmp	r0, #0
 8003af8:	d1e0      	bne.n	8003abc <__ssputs_r+0x5c>
 8003afa:	4650      	mov	r0, sl
 8003afc:	6921      	ldr	r1, [r4, #16]
 8003afe:	f7ff feb9 	bl	8003874 <_free_r>
 8003b02:	230c      	movs	r3, #12
 8003b04:	f8ca 3000 	str.w	r3, [sl]
 8003b08:	89a3      	ldrh	r3, [r4, #12]
 8003b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8003b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b12:	81a3      	strh	r3, [r4, #12]
 8003b14:	e7e9      	b.n	8003aea <__ssputs_r+0x8a>
	...

08003b18 <_svfiprintf_r>:
 8003b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b1c:	4698      	mov	r8, r3
 8003b1e:	898b      	ldrh	r3, [r1, #12]
 8003b20:	4607      	mov	r7, r0
 8003b22:	061b      	lsls	r3, r3, #24
 8003b24:	460d      	mov	r5, r1
 8003b26:	4614      	mov	r4, r2
 8003b28:	b09d      	sub	sp, #116	@ 0x74
 8003b2a:	d510      	bpl.n	8003b4e <_svfiprintf_r+0x36>
 8003b2c:	690b      	ldr	r3, [r1, #16]
 8003b2e:	b973      	cbnz	r3, 8003b4e <_svfiprintf_r+0x36>
 8003b30:	2140      	movs	r1, #64	@ 0x40
 8003b32:	f7ff ff09 	bl	8003948 <_malloc_r>
 8003b36:	6028      	str	r0, [r5, #0]
 8003b38:	6128      	str	r0, [r5, #16]
 8003b3a:	b930      	cbnz	r0, 8003b4a <_svfiprintf_r+0x32>
 8003b3c:	230c      	movs	r3, #12
 8003b3e:	603b      	str	r3, [r7, #0]
 8003b40:	f04f 30ff 	mov.w	r0, #4294967295
 8003b44:	b01d      	add	sp, #116	@ 0x74
 8003b46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b4a:	2340      	movs	r3, #64	@ 0x40
 8003b4c:	616b      	str	r3, [r5, #20]
 8003b4e:	2300      	movs	r3, #0
 8003b50:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b52:	2320      	movs	r3, #32
 8003b54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b58:	2330      	movs	r3, #48	@ 0x30
 8003b5a:	f04f 0901 	mov.w	r9, #1
 8003b5e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b62:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003cfc <_svfiprintf_r+0x1e4>
 8003b66:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b6a:	4623      	mov	r3, r4
 8003b6c:	469a      	mov	sl, r3
 8003b6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b72:	b10a      	cbz	r2, 8003b78 <_svfiprintf_r+0x60>
 8003b74:	2a25      	cmp	r2, #37	@ 0x25
 8003b76:	d1f9      	bne.n	8003b6c <_svfiprintf_r+0x54>
 8003b78:	ebba 0b04 	subs.w	fp, sl, r4
 8003b7c:	d00b      	beq.n	8003b96 <_svfiprintf_r+0x7e>
 8003b7e:	465b      	mov	r3, fp
 8003b80:	4622      	mov	r2, r4
 8003b82:	4629      	mov	r1, r5
 8003b84:	4638      	mov	r0, r7
 8003b86:	f7ff ff6b 	bl	8003a60 <__ssputs_r>
 8003b8a:	3001      	adds	r0, #1
 8003b8c:	f000 80a7 	beq.w	8003cde <_svfiprintf_r+0x1c6>
 8003b90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b92:	445a      	add	r2, fp
 8003b94:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b96:	f89a 3000 	ldrb.w	r3, [sl]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	f000 809f 	beq.w	8003cde <_svfiprintf_r+0x1c6>
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ba6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003baa:	f10a 0a01 	add.w	sl, sl, #1
 8003bae:	9304      	str	r3, [sp, #16]
 8003bb0:	9307      	str	r3, [sp, #28]
 8003bb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003bb6:	931a      	str	r3, [sp, #104]	@ 0x68
 8003bb8:	4654      	mov	r4, sl
 8003bba:	2205      	movs	r2, #5
 8003bbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bc0:	484e      	ldr	r0, [pc, #312]	@ (8003cfc <_svfiprintf_r+0x1e4>)
 8003bc2:	f000 fa61 	bl	8004088 <memchr>
 8003bc6:	9a04      	ldr	r2, [sp, #16]
 8003bc8:	b9d8      	cbnz	r0, 8003c02 <_svfiprintf_r+0xea>
 8003bca:	06d0      	lsls	r0, r2, #27
 8003bcc:	bf44      	itt	mi
 8003bce:	2320      	movmi	r3, #32
 8003bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bd4:	0711      	lsls	r1, r2, #28
 8003bd6:	bf44      	itt	mi
 8003bd8:	232b      	movmi	r3, #43	@ 0x2b
 8003bda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bde:	f89a 3000 	ldrb.w	r3, [sl]
 8003be2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003be4:	d015      	beq.n	8003c12 <_svfiprintf_r+0xfa>
 8003be6:	4654      	mov	r4, sl
 8003be8:	2000      	movs	r0, #0
 8003bea:	f04f 0c0a 	mov.w	ip, #10
 8003bee:	9a07      	ldr	r2, [sp, #28]
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003bf6:	3b30      	subs	r3, #48	@ 0x30
 8003bf8:	2b09      	cmp	r3, #9
 8003bfa:	d94b      	bls.n	8003c94 <_svfiprintf_r+0x17c>
 8003bfc:	b1b0      	cbz	r0, 8003c2c <_svfiprintf_r+0x114>
 8003bfe:	9207      	str	r2, [sp, #28]
 8003c00:	e014      	b.n	8003c2c <_svfiprintf_r+0x114>
 8003c02:	eba0 0308 	sub.w	r3, r0, r8
 8003c06:	fa09 f303 	lsl.w	r3, r9, r3
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	46a2      	mov	sl, r4
 8003c0e:	9304      	str	r3, [sp, #16]
 8003c10:	e7d2      	b.n	8003bb8 <_svfiprintf_r+0xa0>
 8003c12:	9b03      	ldr	r3, [sp, #12]
 8003c14:	1d19      	adds	r1, r3, #4
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	9103      	str	r1, [sp, #12]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	bfbb      	ittet	lt
 8003c1e:	425b      	neglt	r3, r3
 8003c20:	f042 0202 	orrlt.w	r2, r2, #2
 8003c24:	9307      	strge	r3, [sp, #28]
 8003c26:	9307      	strlt	r3, [sp, #28]
 8003c28:	bfb8      	it	lt
 8003c2a:	9204      	strlt	r2, [sp, #16]
 8003c2c:	7823      	ldrb	r3, [r4, #0]
 8003c2e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c30:	d10a      	bne.n	8003c48 <_svfiprintf_r+0x130>
 8003c32:	7863      	ldrb	r3, [r4, #1]
 8003c34:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c36:	d132      	bne.n	8003c9e <_svfiprintf_r+0x186>
 8003c38:	9b03      	ldr	r3, [sp, #12]
 8003c3a:	3402      	adds	r4, #2
 8003c3c:	1d1a      	adds	r2, r3, #4
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	9203      	str	r2, [sp, #12]
 8003c42:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c46:	9305      	str	r3, [sp, #20]
 8003c48:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003d00 <_svfiprintf_r+0x1e8>
 8003c4c:	2203      	movs	r2, #3
 8003c4e:	4650      	mov	r0, sl
 8003c50:	7821      	ldrb	r1, [r4, #0]
 8003c52:	f000 fa19 	bl	8004088 <memchr>
 8003c56:	b138      	cbz	r0, 8003c68 <_svfiprintf_r+0x150>
 8003c58:	2240      	movs	r2, #64	@ 0x40
 8003c5a:	9b04      	ldr	r3, [sp, #16]
 8003c5c:	eba0 000a 	sub.w	r0, r0, sl
 8003c60:	4082      	lsls	r2, r0
 8003c62:	4313      	orrs	r3, r2
 8003c64:	3401      	adds	r4, #1
 8003c66:	9304      	str	r3, [sp, #16]
 8003c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c6c:	2206      	movs	r2, #6
 8003c6e:	4825      	ldr	r0, [pc, #148]	@ (8003d04 <_svfiprintf_r+0x1ec>)
 8003c70:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c74:	f000 fa08 	bl	8004088 <memchr>
 8003c78:	2800      	cmp	r0, #0
 8003c7a:	d036      	beq.n	8003cea <_svfiprintf_r+0x1d2>
 8003c7c:	4b22      	ldr	r3, [pc, #136]	@ (8003d08 <_svfiprintf_r+0x1f0>)
 8003c7e:	bb1b      	cbnz	r3, 8003cc8 <_svfiprintf_r+0x1b0>
 8003c80:	9b03      	ldr	r3, [sp, #12]
 8003c82:	3307      	adds	r3, #7
 8003c84:	f023 0307 	bic.w	r3, r3, #7
 8003c88:	3308      	adds	r3, #8
 8003c8a:	9303      	str	r3, [sp, #12]
 8003c8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c8e:	4433      	add	r3, r6
 8003c90:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c92:	e76a      	b.n	8003b6a <_svfiprintf_r+0x52>
 8003c94:	460c      	mov	r4, r1
 8003c96:	2001      	movs	r0, #1
 8003c98:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c9c:	e7a8      	b.n	8003bf0 <_svfiprintf_r+0xd8>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f04f 0c0a 	mov.w	ip, #10
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	3401      	adds	r4, #1
 8003ca8:	9305      	str	r3, [sp, #20]
 8003caa:	4620      	mov	r0, r4
 8003cac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cb0:	3a30      	subs	r2, #48	@ 0x30
 8003cb2:	2a09      	cmp	r2, #9
 8003cb4:	d903      	bls.n	8003cbe <_svfiprintf_r+0x1a6>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d0c6      	beq.n	8003c48 <_svfiprintf_r+0x130>
 8003cba:	9105      	str	r1, [sp, #20]
 8003cbc:	e7c4      	b.n	8003c48 <_svfiprintf_r+0x130>
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cc6:	e7f0      	b.n	8003caa <_svfiprintf_r+0x192>
 8003cc8:	ab03      	add	r3, sp, #12
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	462a      	mov	r2, r5
 8003cce:	4638      	mov	r0, r7
 8003cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8003d0c <_svfiprintf_r+0x1f4>)
 8003cd2:	a904      	add	r1, sp, #16
 8003cd4:	f3af 8000 	nop.w
 8003cd8:	1c42      	adds	r2, r0, #1
 8003cda:	4606      	mov	r6, r0
 8003cdc:	d1d6      	bne.n	8003c8c <_svfiprintf_r+0x174>
 8003cde:	89ab      	ldrh	r3, [r5, #12]
 8003ce0:	065b      	lsls	r3, r3, #25
 8003ce2:	f53f af2d 	bmi.w	8003b40 <_svfiprintf_r+0x28>
 8003ce6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003ce8:	e72c      	b.n	8003b44 <_svfiprintf_r+0x2c>
 8003cea:	ab03      	add	r3, sp, #12
 8003cec:	9300      	str	r3, [sp, #0]
 8003cee:	462a      	mov	r2, r5
 8003cf0:	4638      	mov	r0, r7
 8003cf2:	4b06      	ldr	r3, [pc, #24]	@ (8003d0c <_svfiprintf_r+0x1f4>)
 8003cf4:	a904      	add	r1, sp, #16
 8003cf6:	f000 f87d 	bl	8003df4 <_printf_i>
 8003cfa:	e7ed      	b.n	8003cd8 <_svfiprintf_r+0x1c0>
 8003cfc:	08005a2c 	.word	0x08005a2c
 8003d00:	08005a32 	.word	0x08005a32
 8003d04:	08005a36 	.word	0x08005a36
 8003d08:	00000000 	.word	0x00000000
 8003d0c:	08003a61 	.word	0x08003a61

08003d10 <_printf_common>:
 8003d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d14:	4616      	mov	r6, r2
 8003d16:	4698      	mov	r8, r3
 8003d18:	688a      	ldr	r2, [r1, #8]
 8003d1a:	690b      	ldr	r3, [r1, #16]
 8003d1c:	4607      	mov	r7, r0
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	bfb8      	it	lt
 8003d22:	4613      	movlt	r3, r2
 8003d24:	6033      	str	r3, [r6, #0]
 8003d26:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d2a:	460c      	mov	r4, r1
 8003d2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d30:	b10a      	cbz	r2, 8003d36 <_printf_common+0x26>
 8003d32:	3301      	adds	r3, #1
 8003d34:	6033      	str	r3, [r6, #0]
 8003d36:	6823      	ldr	r3, [r4, #0]
 8003d38:	0699      	lsls	r1, r3, #26
 8003d3a:	bf42      	ittt	mi
 8003d3c:	6833      	ldrmi	r3, [r6, #0]
 8003d3e:	3302      	addmi	r3, #2
 8003d40:	6033      	strmi	r3, [r6, #0]
 8003d42:	6825      	ldr	r5, [r4, #0]
 8003d44:	f015 0506 	ands.w	r5, r5, #6
 8003d48:	d106      	bne.n	8003d58 <_printf_common+0x48>
 8003d4a:	f104 0a19 	add.w	sl, r4, #25
 8003d4e:	68e3      	ldr	r3, [r4, #12]
 8003d50:	6832      	ldr	r2, [r6, #0]
 8003d52:	1a9b      	subs	r3, r3, r2
 8003d54:	42ab      	cmp	r3, r5
 8003d56:	dc2b      	bgt.n	8003db0 <_printf_common+0xa0>
 8003d58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d5c:	6822      	ldr	r2, [r4, #0]
 8003d5e:	3b00      	subs	r3, #0
 8003d60:	bf18      	it	ne
 8003d62:	2301      	movne	r3, #1
 8003d64:	0692      	lsls	r2, r2, #26
 8003d66:	d430      	bmi.n	8003dca <_printf_common+0xba>
 8003d68:	4641      	mov	r1, r8
 8003d6a:	4638      	mov	r0, r7
 8003d6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d70:	47c8      	blx	r9
 8003d72:	3001      	adds	r0, #1
 8003d74:	d023      	beq.n	8003dbe <_printf_common+0xae>
 8003d76:	6823      	ldr	r3, [r4, #0]
 8003d78:	6922      	ldr	r2, [r4, #16]
 8003d7a:	f003 0306 	and.w	r3, r3, #6
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	bf14      	ite	ne
 8003d82:	2500      	movne	r5, #0
 8003d84:	6833      	ldreq	r3, [r6, #0]
 8003d86:	f04f 0600 	mov.w	r6, #0
 8003d8a:	bf08      	it	eq
 8003d8c:	68e5      	ldreq	r5, [r4, #12]
 8003d8e:	f104 041a 	add.w	r4, r4, #26
 8003d92:	bf08      	it	eq
 8003d94:	1aed      	subeq	r5, r5, r3
 8003d96:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003d9a:	bf08      	it	eq
 8003d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003da0:	4293      	cmp	r3, r2
 8003da2:	bfc4      	itt	gt
 8003da4:	1a9b      	subgt	r3, r3, r2
 8003da6:	18ed      	addgt	r5, r5, r3
 8003da8:	42b5      	cmp	r5, r6
 8003daa:	d11a      	bne.n	8003de2 <_printf_common+0xd2>
 8003dac:	2000      	movs	r0, #0
 8003dae:	e008      	b.n	8003dc2 <_printf_common+0xb2>
 8003db0:	2301      	movs	r3, #1
 8003db2:	4652      	mov	r2, sl
 8003db4:	4641      	mov	r1, r8
 8003db6:	4638      	mov	r0, r7
 8003db8:	47c8      	blx	r9
 8003dba:	3001      	adds	r0, #1
 8003dbc:	d103      	bne.n	8003dc6 <_printf_common+0xb6>
 8003dbe:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dc6:	3501      	adds	r5, #1
 8003dc8:	e7c1      	b.n	8003d4e <_printf_common+0x3e>
 8003dca:	2030      	movs	r0, #48	@ 0x30
 8003dcc:	18e1      	adds	r1, r4, r3
 8003dce:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003dd8:	4422      	add	r2, r4
 8003dda:	3302      	adds	r3, #2
 8003ddc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003de0:	e7c2      	b.n	8003d68 <_printf_common+0x58>
 8003de2:	2301      	movs	r3, #1
 8003de4:	4622      	mov	r2, r4
 8003de6:	4641      	mov	r1, r8
 8003de8:	4638      	mov	r0, r7
 8003dea:	47c8      	blx	r9
 8003dec:	3001      	adds	r0, #1
 8003dee:	d0e6      	beq.n	8003dbe <_printf_common+0xae>
 8003df0:	3601      	adds	r6, #1
 8003df2:	e7d9      	b.n	8003da8 <_printf_common+0x98>

08003df4 <_printf_i>:
 8003df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003df8:	7e0f      	ldrb	r7, [r1, #24]
 8003dfa:	4691      	mov	r9, r2
 8003dfc:	2f78      	cmp	r7, #120	@ 0x78
 8003dfe:	4680      	mov	r8, r0
 8003e00:	460c      	mov	r4, r1
 8003e02:	469a      	mov	sl, r3
 8003e04:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e0a:	d807      	bhi.n	8003e1c <_printf_i+0x28>
 8003e0c:	2f62      	cmp	r7, #98	@ 0x62
 8003e0e:	d80a      	bhi.n	8003e26 <_printf_i+0x32>
 8003e10:	2f00      	cmp	r7, #0
 8003e12:	f000 80d3 	beq.w	8003fbc <_printf_i+0x1c8>
 8003e16:	2f58      	cmp	r7, #88	@ 0x58
 8003e18:	f000 80ba 	beq.w	8003f90 <_printf_i+0x19c>
 8003e1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e24:	e03a      	b.n	8003e9c <_printf_i+0xa8>
 8003e26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e2a:	2b15      	cmp	r3, #21
 8003e2c:	d8f6      	bhi.n	8003e1c <_printf_i+0x28>
 8003e2e:	a101      	add	r1, pc, #4	@ (adr r1, 8003e34 <_printf_i+0x40>)
 8003e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e34:	08003e8d 	.word	0x08003e8d
 8003e38:	08003ea1 	.word	0x08003ea1
 8003e3c:	08003e1d 	.word	0x08003e1d
 8003e40:	08003e1d 	.word	0x08003e1d
 8003e44:	08003e1d 	.word	0x08003e1d
 8003e48:	08003e1d 	.word	0x08003e1d
 8003e4c:	08003ea1 	.word	0x08003ea1
 8003e50:	08003e1d 	.word	0x08003e1d
 8003e54:	08003e1d 	.word	0x08003e1d
 8003e58:	08003e1d 	.word	0x08003e1d
 8003e5c:	08003e1d 	.word	0x08003e1d
 8003e60:	08003fa3 	.word	0x08003fa3
 8003e64:	08003ecb 	.word	0x08003ecb
 8003e68:	08003f5d 	.word	0x08003f5d
 8003e6c:	08003e1d 	.word	0x08003e1d
 8003e70:	08003e1d 	.word	0x08003e1d
 8003e74:	08003fc5 	.word	0x08003fc5
 8003e78:	08003e1d 	.word	0x08003e1d
 8003e7c:	08003ecb 	.word	0x08003ecb
 8003e80:	08003e1d 	.word	0x08003e1d
 8003e84:	08003e1d 	.word	0x08003e1d
 8003e88:	08003f65 	.word	0x08003f65
 8003e8c:	6833      	ldr	r3, [r6, #0]
 8003e8e:	1d1a      	adds	r2, r3, #4
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6032      	str	r2, [r6, #0]
 8003e94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e09e      	b.n	8003fde <_printf_i+0x1ea>
 8003ea0:	6833      	ldr	r3, [r6, #0]
 8003ea2:	6820      	ldr	r0, [r4, #0]
 8003ea4:	1d19      	adds	r1, r3, #4
 8003ea6:	6031      	str	r1, [r6, #0]
 8003ea8:	0606      	lsls	r6, r0, #24
 8003eaa:	d501      	bpl.n	8003eb0 <_printf_i+0xbc>
 8003eac:	681d      	ldr	r5, [r3, #0]
 8003eae:	e003      	b.n	8003eb8 <_printf_i+0xc4>
 8003eb0:	0645      	lsls	r5, r0, #25
 8003eb2:	d5fb      	bpl.n	8003eac <_printf_i+0xb8>
 8003eb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003eb8:	2d00      	cmp	r5, #0
 8003eba:	da03      	bge.n	8003ec4 <_printf_i+0xd0>
 8003ebc:	232d      	movs	r3, #45	@ 0x2d
 8003ebe:	426d      	negs	r5, r5
 8003ec0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ec4:	230a      	movs	r3, #10
 8003ec6:	4859      	ldr	r0, [pc, #356]	@ (800402c <_printf_i+0x238>)
 8003ec8:	e011      	b.n	8003eee <_printf_i+0xfa>
 8003eca:	6821      	ldr	r1, [r4, #0]
 8003ecc:	6833      	ldr	r3, [r6, #0]
 8003ece:	0608      	lsls	r0, r1, #24
 8003ed0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003ed4:	d402      	bmi.n	8003edc <_printf_i+0xe8>
 8003ed6:	0649      	lsls	r1, r1, #25
 8003ed8:	bf48      	it	mi
 8003eda:	b2ad      	uxthmi	r5, r5
 8003edc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ede:	6033      	str	r3, [r6, #0]
 8003ee0:	bf14      	ite	ne
 8003ee2:	230a      	movne	r3, #10
 8003ee4:	2308      	moveq	r3, #8
 8003ee6:	4851      	ldr	r0, [pc, #324]	@ (800402c <_printf_i+0x238>)
 8003ee8:	2100      	movs	r1, #0
 8003eea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003eee:	6866      	ldr	r6, [r4, #4]
 8003ef0:	2e00      	cmp	r6, #0
 8003ef2:	bfa8      	it	ge
 8003ef4:	6821      	ldrge	r1, [r4, #0]
 8003ef6:	60a6      	str	r6, [r4, #8]
 8003ef8:	bfa4      	itt	ge
 8003efa:	f021 0104 	bicge.w	r1, r1, #4
 8003efe:	6021      	strge	r1, [r4, #0]
 8003f00:	b90d      	cbnz	r5, 8003f06 <_printf_i+0x112>
 8003f02:	2e00      	cmp	r6, #0
 8003f04:	d04b      	beq.n	8003f9e <_printf_i+0x1aa>
 8003f06:	4616      	mov	r6, r2
 8003f08:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f0c:	fb03 5711 	mls	r7, r3, r1, r5
 8003f10:	5dc7      	ldrb	r7, [r0, r7]
 8003f12:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f16:	462f      	mov	r7, r5
 8003f18:	42bb      	cmp	r3, r7
 8003f1a:	460d      	mov	r5, r1
 8003f1c:	d9f4      	bls.n	8003f08 <_printf_i+0x114>
 8003f1e:	2b08      	cmp	r3, #8
 8003f20:	d10b      	bne.n	8003f3a <_printf_i+0x146>
 8003f22:	6823      	ldr	r3, [r4, #0]
 8003f24:	07df      	lsls	r7, r3, #31
 8003f26:	d508      	bpl.n	8003f3a <_printf_i+0x146>
 8003f28:	6923      	ldr	r3, [r4, #16]
 8003f2a:	6861      	ldr	r1, [r4, #4]
 8003f2c:	4299      	cmp	r1, r3
 8003f2e:	bfde      	ittt	le
 8003f30:	2330      	movle	r3, #48	@ 0x30
 8003f32:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f36:	f106 36ff 	addle.w	r6, r6, #4294967295
 8003f3a:	1b92      	subs	r2, r2, r6
 8003f3c:	6122      	str	r2, [r4, #16]
 8003f3e:	464b      	mov	r3, r9
 8003f40:	4621      	mov	r1, r4
 8003f42:	4640      	mov	r0, r8
 8003f44:	f8cd a000 	str.w	sl, [sp]
 8003f48:	aa03      	add	r2, sp, #12
 8003f4a:	f7ff fee1 	bl	8003d10 <_printf_common>
 8003f4e:	3001      	adds	r0, #1
 8003f50:	d14a      	bne.n	8003fe8 <_printf_i+0x1f4>
 8003f52:	f04f 30ff 	mov.w	r0, #4294967295
 8003f56:	b004      	add	sp, #16
 8003f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f5c:	6823      	ldr	r3, [r4, #0]
 8003f5e:	f043 0320 	orr.w	r3, r3, #32
 8003f62:	6023      	str	r3, [r4, #0]
 8003f64:	2778      	movs	r7, #120	@ 0x78
 8003f66:	4832      	ldr	r0, [pc, #200]	@ (8004030 <_printf_i+0x23c>)
 8003f68:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	6831      	ldr	r1, [r6, #0]
 8003f70:	061f      	lsls	r7, r3, #24
 8003f72:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f76:	d402      	bmi.n	8003f7e <_printf_i+0x18a>
 8003f78:	065f      	lsls	r7, r3, #25
 8003f7a:	bf48      	it	mi
 8003f7c:	b2ad      	uxthmi	r5, r5
 8003f7e:	6031      	str	r1, [r6, #0]
 8003f80:	07d9      	lsls	r1, r3, #31
 8003f82:	bf44      	itt	mi
 8003f84:	f043 0320 	orrmi.w	r3, r3, #32
 8003f88:	6023      	strmi	r3, [r4, #0]
 8003f8a:	b11d      	cbz	r5, 8003f94 <_printf_i+0x1a0>
 8003f8c:	2310      	movs	r3, #16
 8003f8e:	e7ab      	b.n	8003ee8 <_printf_i+0xf4>
 8003f90:	4826      	ldr	r0, [pc, #152]	@ (800402c <_printf_i+0x238>)
 8003f92:	e7e9      	b.n	8003f68 <_printf_i+0x174>
 8003f94:	6823      	ldr	r3, [r4, #0]
 8003f96:	f023 0320 	bic.w	r3, r3, #32
 8003f9a:	6023      	str	r3, [r4, #0]
 8003f9c:	e7f6      	b.n	8003f8c <_printf_i+0x198>
 8003f9e:	4616      	mov	r6, r2
 8003fa0:	e7bd      	b.n	8003f1e <_printf_i+0x12a>
 8003fa2:	6833      	ldr	r3, [r6, #0]
 8003fa4:	6825      	ldr	r5, [r4, #0]
 8003fa6:	1d18      	adds	r0, r3, #4
 8003fa8:	6961      	ldr	r1, [r4, #20]
 8003faa:	6030      	str	r0, [r6, #0]
 8003fac:	062e      	lsls	r6, r5, #24
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	d501      	bpl.n	8003fb6 <_printf_i+0x1c2>
 8003fb2:	6019      	str	r1, [r3, #0]
 8003fb4:	e002      	b.n	8003fbc <_printf_i+0x1c8>
 8003fb6:	0668      	lsls	r0, r5, #25
 8003fb8:	d5fb      	bpl.n	8003fb2 <_printf_i+0x1be>
 8003fba:	8019      	strh	r1, [r3, #0]
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	4616      	mov	r6, r2
 8003fc0:	6123      	str	r3, [r4, #16]
 8003fc2:	e7bc      	b.n	8003f3e <_printf_i+0x14a>
 8003fc4:	6833      	ldr	r3, [r6, #0]
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	1d1a      	adds	r2, r3, #4
 8003fca:	6032      	str	r2, [r6, #0]
 8003fcc:	681e      	ldr	r6, [r3, #0]
 8003fce:	6862      	ldr	r2, [r4, #4]
 8003fd0:	4630      	mov	r0, r6
 8003fd2:	f000 f859 	bl	8004088 <memchr>
 8003fd6:	b108      	cbz	r0, 8003fdc <_printf_i+0x1e8>
 8003fd8:	1b80      	subs	r0, r0, r6
 8003fda:	6060      	str	r0, [r4, #4]
 8003fdc:	6863      	ldr	r3, [r4, #4]
 8003fde:	6123      	str	r3, [r4, #16]
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fe6:	e7aa      	b.n	8003f3e <_printf_i+0x14a>
 8003fe8:	4632      	mov	r2, r6
 8003fea:	4649      	mov	r1, r9
 8003fec:	4640      	mov	r0, r8
 8003fee:	6923      	ldr	r3, [r4, #16]
 8003ff0:	47d0      	blx	sl
 8003ff2:	3001      	adds	r0, #1
 8003ff4:	d0ad      	beq.n	8003f52 <_printf_i+0x15e>
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	079b      	lsls	r3, r3, #30
 8003ffa:	d413      	bmi.n	8004024 <_printf_i+0x230>
 8003ffc:	68e0      	ldr	r0, [r4, #12]
 8003ffe:	9b03      	ldr	r3, [sp, #12]
 8004000:	4298      	cmp	r0, r3
 8004002:	bfb8      	it	lt
 8004004:	4618      	movlt	r0, r3
 8004006:	e7a6      	b.n	8003f56 <_printf_i+0x162>
 8004008:	2301      	movs	r3, #1
 800400a:	4632      	mov	r2, r6
 800400c:	4649      	mov	r1, r9
 800400e:	4640      	mov	r0, r8
 8004010:	47d0      	blx	sl
 8004012:	3001      	adds	r0, #1
 8004014:	d09d      	beq.n	8003f52 <_printf_i+0x15e>
 8004016:	3501      	adds	r5, #1
 8004018:	68e3      	ldr	r3, [r4, #12]
 800401a:	9903      	ldr	r1, [sp, #12]
 800401c:	1a5b      	subs	r3, r3, r1
 800401e:	42ab      	cmp	r3, r5
 8004020:	dcf2      	bgt.n	8004008 <_printf_i+0x214>
 8004022:	e7eb      	b.n	8003ffc <_printf_i+0x208>
 8004024:	2500      	movs	r5, #0
 8004026:	f104 0619 	add.w	r6, r4, #25
 800402a:	e7f5      	b.n	8004018 <_printf_i+0x224>
 800402c:	08005a3d 	.word	0x08005a3d
 8004030:	08005a4e 	.word	0x08005a4e

08004034 <memmove>:
 8004034:	4288      	cmp	r0, r1
 8004036:	b510      	push	{r4, lr}
 8004038:	eb01 0402 	add.w	r4, r1, r2
 800403c:	d902      	bls.n	8004044 <memmove+0x10>
 800403e:	4284      	cmp	r4, r0
 8004040:	4623      	mov	r3, r4
 8004042:	d807      	bhi.n	8004054 <memmove+0x20>
 8004044:	1e43      	subs	r3, r0, #1
 8004046:	42a1      	cmp	r1, r4
 8004048:	d008      	beq.n	800405c <memmove+0x28>
 800404a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800404e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004052:	e7f8      	b.n	8004046 <memmove+0x12>
 8004054:	4601      	mov	r1, r0
 8004056:	4402      	add	r2, r0
 8004058:	428a      	cmp	r2, r1
 800405a:	d100      	bne.n	800405e <memmove+0x2a>
 800405c:	bd10      	pop	{r4, pc}
 800405e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004062:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004066:	e7f7      	b.n	8004058 <memmove+0x24>

08004068 <_sbrk_r>:
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	2300      	movs	r3, #0
 800406c:	4d05      	ldr	r5, [pc, #20]	@ (8004084 <_sbrk_r+0x1c>)
 800406e:	4604      	mov	r4, r0
 8004070:	4608      	mov	r0, r1
 8004072:	602b      	str	r3, [r5, #0]
 8004074:	f7fc fed8 	bl	8000e28 <_sbrk>
 8004078:	1c43      	adds	r3, r0, #1
 800407a:	d102      	bne.n	8004082 <_sbrk_r+0x1a>
 800407c:	682b      	ldr	r3, [r5, #0]
 800407e:	b103      	cbz	r3, 8004082 <_sbrk_r+0x1a>
 8004080:	6023      	str	r3, [r4, #0]
 8004082:	bd38      	pop	{r3, r4, r5, pc}
 8004084:	20001b60 	.word	0x20001b60

08004088 <memchr>:
 8004088:	4603      	mov	r3, r0
 800408a:	b510      	push	{r4, lr}
 800408c:	b2c9      	uxtb	r1, r1
 800408e:	4402      	add	r2, r0
 8004090:	4293      	cmp	r3, r2
 8004092:	4618      	mov	r0, r3
 8004094:	d101      	bne.n	800409a <memchr+0x12>
 8004096:	2000      	movs	r0, #0
 8004098:	e003      	b.n	80040a2 <memchr+0x1a>
 800409a:	7804      	ldrb	r4, [r0, #0]
 800409c:	3301      	adds	r3, #1
 800409e:	428c      	cmp	r4, r1
 80040a0:	d1f6      	bne.n	8004090 <memchr+0x8>
 80040a2:	bd10      	pop	{r4, pc}

080040a4 <_realloc_r>:
 80040a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040a8:	4680      	mov	r8, r0
 80040aa:	4615      	mov	r5, r2
 80040ac:	460c      	mov	r4, r1
 80040ae:	b921      	cbnz	r1, 80040ba <_realloc_r+0x16>
 80040b0:	4611      	mov	r1, r2
 80040b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040b6:	f7ff bc47 	b.w	8003948 <_malloc_r>
 80040ba:	b92a      	cbnz	r2, 80040c8 <_realloc_r+0x24>
 80040bc:	f7ff fbda 	bl	8003874 <_free_r>
 80040c0:	2400      	movs	r4, #0
 80040c2:	4620      	mov	r0, r4
 80040c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040c8:	f000 f81a 	bl	8004100 <_malloc_usable_size_r>
 80040cc:	4285      	cmp	r5, r0
 80040ce:	4606      	mov	r6, r0
 80040d0:	d802      	bhi.n	80040d8 <_realloc_r+0x34>
 80040d2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80040d6:	d8f4      	bhi.n	80040c2 <_realloc_r+0x1e>
 80040d8:	4629      	mov	r1, r5
 80040da:	4640      	mov	r0, r8
 80040dc:	f7ff fc34 	bl	8003948 <_malloc_r>
 80040e0:	4607      	mov	r7, r0
 80040e2:	2800      	cmp	r0, #0
 80040e4:	d0ec      	beq.n	80040c0 <_realloc_r+0x1c>
 80040e6:	42b5      	cmp	r5, r6
 80040e8:	462a      	mov	r2, r5
 80040ea:	4621      	mov	r1, r4
 80040ec:	bf28      	it	cs
 80040ee:	4632      	movcs	r2, r6
 80040f0:	f7ff fbb2 	bl	8003858 <memcpy>
 80040f4:	4621      	mov	r1, r4
 80040f6:	4640      	mov	r0, r8
 80040f8:	f7ff fbbc 	bl	8003874 <_free_r>
 80040fc:	463c      	mov	r4, r7
 80040fe:	e7e0      	b.n	80040c2 <_realloc_r+0x1e>

08004100 <_malloc_usable_size_r>:
 8004100:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004104:	1f18      	subs	r0, r3, #4
 8004106:	2b00      	cmp	r3, #0
 8004108:	bfbc      	itt	lt
 800410a:	580b      	ldrlt	r3, [r1, r0]
 800410c:	18c0      	addlt	r0, r0, r3
 800410e:	4770      	bx	lr

08004110 <_init>:
 8004110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004112:	bf00      	nop
 8004114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004116:	bc08      	pop	{r3}
 8004118:	469e      	mov	lr, r3
 800411a:	4770      	bx	lr

0800411c <_fini>:
 800411c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800411e:	bf00      	nop
 8004120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004122:	bc08      	pop	{r3}
 8004124:	469e      	mov	lr, r3
 8004126:	4770      	bx	lr
